
STM32F4-Romi-V0.1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008ea4  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000ef0  08009038  08009038  00019038  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009f28  08009f28  000201e4  2**0
                  CONTENTS
  4 .ARM          00000008  08009f28  08009f28  00019f28  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009f30  08009f30  000201e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009f30  08009f30  00019f30  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009f34  08009f34  00019f34  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e4  20000000  08009f38  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000007f8  200001e4  0800a11c  000201e4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200009dc  0800a11c  000209dc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201e4  2**0
                  CONTENTS, READONLY
 12 .debug_info   00016aad  00000000  00000000  00020214  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002ced  00000000  00000000  00036cc1  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000014d0  00000000  00000000  000399b0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001398  00000000  00000000  0003ae80  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00021766  00000000  00000000  0003c218  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000fc18  00000000  00000000  0005d97e  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000c89e9  00000000  00000000  0006d596  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00135f7f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006900  00000000  00000000  00135ffc  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001e4 	.word	0x200001e4
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800901c 	.word	0x0800901c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001e8 	.word	0x200001e8
 80001cc:	0800901c 	.word	0x0800901c

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003be:	f1a4 0401 	sub.w	r4, r4, #1
 80003c2:	d1e9      	bne.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_uldivmod>:
 8000ba8:	b953      	cbnz	r3, 8000bc0 <__aeabi_uldivmod+0x18>
 8000baa:	b94a      	cbnz	r2, 8000bc0 <__aeabi_uldivmod+0x18>
 8000bac:	2900      	cmp	r1, #0
 8000bae:	bf08      	it	eq
 8000bb0:	2800      	cmpeq	r0, #0
 8000bb2:	bf1c      	itt	ne
 8000bb4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bb8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bbc:	f000 b972 	b.w	8000ea4 <__aeabi_idiv0>
 8000bc0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bc4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bc8:	f000 f806 	bl	8000bd8 <__udivmoddi4>
 8000bcc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bd0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bd4:	b004      	add	sp, #16
 8000bd6:	4770      	bx	lr

08000bd8 <__udivmoddi4>:
 8000bd8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bdc:	9e08      	ldr	r6, [sp, #32]
 8000bde:	4604      	mov	r4, r0
 8000be0:	4688      	mov	r8, r1
 8000be2:	2b00      	cmp	r3, #0
 8000be4:	d14b      	bne.n	8000c7e <__udivmoddi4+0xa6>
 8000be6:	428a      	cmp	r2, r1
 8000be8:	4615      	mov	r5, r2
 8000bea:	d967      	bls.n	8000cbc <__udivmoddi4+0xe4>
 8000bec:	fab2 f282 	clz	r2, r2
 8000bf0:	b14a      	cbz	r2, 8000c06 <__udivmoddi4+0x2e>
 8000bf2:	f1c2 0720 	rsb	r7, r2, #32
 8000bf6:	fa01 f302 	lsl.w	r3, r1, r2
 8000bfa:	fa20 f707 	lsr.w	r7, r0, r7
 8000bfe:	4095      	lsls	r5, r2
 8000c00:	ea47 0803 	orr.w	r8, r7, r3
 8000c04:	4094      	lsls	r4, r2
 8000c06:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000c0a:	0c23      	lsrs	r3, r4, #16
 8000c0c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000c10:	fa1f fc85 	uxth.w	ip, r5
 8000c14:	fb0e 8817 	mls	r8, lr, r7, r8
 8000c18:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000c1c:	fb07 f10c 	mul.w	r1, r7, ip
 8000c20:	4299      	cmp	r1, r3
 8000c22:	d909      	bls.n	8000c38 <__udivmoddi4+0x60>
 8000c24:	18eb      	adds	r3, r5, r3
 8000c26:	f107 30ff 	add.w	r0, r7, #4294967295
 8000c2a:	f080 811b 	bcs.w	8000e64 <__udivmoddi4+0x28c>
 8000c2e:	4299      	cmp	r1, r3
 8000c30:	f240 8118 	bls.w	8000e64 <__udivmoddi4+0x28c>
 8000c34:	3f02      	subs	r7, #2
 8000c36:	442b      	add	r3, r5
 8000c38:	1a5b      	subs	r3, r3, r1
 8000c3a:	b2a4      	uxth	r4, r4
 8000c3c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000c40:	fb0e 3310 	mls	r3, lr, r0, r3
 8000c44:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c48:	fb00 fc0c 	mul.w	ip, r0, ip
 8000c4c:	45a4      	cmp	ip, r4
 8000c4e:	d909      	bls.n	8000c64 <__udivmoddi4+0x8c>
 8000c50:	192c      	adds	r4, r5, r4
 8000c52:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c56:	f080 8107 	bcs.w	8000e68 <__udivmoddi4+0x290>
 8000c5a:	45a4      	cmp	ip, r4
 8000c5c:	f240 8104 	bls.w	8000e68 <__udivmoddi4+0x290>
 8000c60:	3802      	subs	r0, #2
 8000c62:	442c      	add	r4, r5
 8000c64:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000c68:	eba4 040c 	sub.w	r4, r4, ip
 8000c6c:	2700      	movs	r7, #0
 8000c6e:	b11e      	cbz	r6, 8000c78 <__udivmoddi4+0xa0>
 8000c70:	40d4      	lsrs	r4, r2
 8000c72:	2300      	movs	r3, #0
 8000c74:	e9c6 4300 	strd	r4, r3, [r6]
 8000c78:	4639      	mov	r1, r7
 8000c7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c7e:	428b      	cmp	r3, r1
 8000c80:	d909      	bls.n	8000c96 <__udivmoddi4+0xbe>
 8000c82:	2e00      	cmp	r6, #0
 8000c84:	f000 80eb 	beq.w	8000e5e <__udivmoddi4+0x286>
 8000c88:	2700      	movs	r7, #0
 8000c8a:	e9c6 0100 	strd	r0, r1, [r6]
 8000c8e:	4638      	mov	r0, r7
 8000c90:	4639      	mov	r1, r7
 8000c92:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c96:	fab3 f783 	clz	r7, r3
 8000c9a:	2f00      	cmp	r7, #0
 8000c9c:	d147      	bne.n	8000d2e <__udivmoddi4+0x156>
 8000c9e:	428b      	cmp	r3, r1
 8000ca0:	d302      	bcc.n	8000ca8 <__udivmoddi4+0xd0>
 8000ca2:	4282      	cmp	r2, r0
 8000ca4:	f200 80fa 	bhi.w	8000e9c <__udivmoddi4+0x2c4>
 8000ca8:	1a84      	subs	r4, r0, r2
 8000caa:	eb61 0303 	sbc.w	r3, r1, r3
 8000cae:	2001      	movs	r0, #1
 8000cb0:	4698      	mov	r8, r3
 8000cb2:	2e00      	cmp	r6, #0
 8000cb4:	d0e0      	beq.n	8000c78 <__udivmoddi4+0xa0>
 8000cb6:	e9c6 4800 	strd	r4, r8, [r6]
 8000cba:	e7dd      	b.n	8000c78 <__udivmoddi4+0xa0>
 8000cbc:	b902      	cbnz	r2, 8000cc0 <__udivmoddi4+0xe8>
 8000cbe:	deff      	udf	#255	; 0xff
 8000cc0:	fab2 f282 	clz	r2, r2
 8000cc4:	2a00      	cmp	r2, #0
 8000cc6:	f040 808f 	bne.w	8000de8 <__udivmoddi4+0x210>
 8000cca:	1b49      	subs	r1, r1, r5
 8000ccc:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000cd0:	fa1f f885 	uxth.w	r8, r5
 8000cd4:	2701      	movs	r7, #1
 8000cd6:	fbb1 fcfe 	udiv	ip, r1, lr
 8000cda:	0c23      	lsrs	r3, r4, #16
 8000cdc:	fb0e 111c 	mls	r1, lr, ip, r1
 8000ce0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000ce4:	fb08 f10c 	mul.w	r1, r8, ip
 8000ce8:	4299      	cmp	r1, r3
 8000cea:	d907      	bls.n	8000cfc <__udivmoddi4+0x124>
 8000cec:	18eb      	adds	r3, r5, r3
 8000cee:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000cf2:	d202      	bcs.n	8000cfa <__udivmoddi4+0x122>
 8000cf4:	4299      	cmp	r1, r3
 8000cf6:	f200 80cd 	bhi.w	8000e94 <__udivmoddi4+0x2bc>
 8000cfa:	4684      	mov	ip, r0
 8000cfc:	1a59      	subs	r1, r3, r1
 8000cfe:	b2a3      	uxth	r3, r4
 8000d00:	fbb1 f0fe 	udiv	r0, r1, lr
 8000d04:	fb0e 1410 	mls	r4, lr, r0, r1
 8000d08:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000d0c:	fb08 f800 	mul.w	r8, r8, r0
 8000d10:	45a0      	cmp	r8, r4
 8000d12:	d907      	bls.n	8000d24 <__udivmoddi4+0x14c>
 8000d14:	192c      	adds	r4, r5, r4
 8000d16:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d1a:	d202      	bcs.n	8000d22 <__udivmoddi4+0x14a>
 8000d1c:	45a0      	cmp	r8, r4
 8000d1e:	f200 80b6 	bhi.w	8000e8e <__udivmoddi4+0x2b6>
 8000d22:	4618      	mov	r0, r3
 8000d24:	eba4 0408 	sub.w	r4, r4, r8
 8000d28:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000d2c:	e79f      	b.n	8000c6e <__udivmoddi4+0x96>
 8000d2e:	f1c7 0c20 	rsb	ip, r7, #32
 8000d32:	40bb      	lsls	r3, r7
 8000d34:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000d38:	ea4e 0e03 	orr.w	lr, lr, r3
 8000d3c:	fa01 f407 	lsl.w	r4, r1, r7
 8000d40:	fa20 f50c 	lsr.w	r5, r0, ip
 8000d44:	fa21 f30c 	lsr.w	r3, r1, ip
 8000d48:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000d4c:	4325      	orrs	r5, r4
 8000d4e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000d52:	0c2c      	lsrs	r4, r5, #16
 8000d54:	fb08 3319 	mls	r3, r8, r9, r3
 8000d58:	fa1f fa8e 	uxth.w	sl, lr
 8000d5c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000d60:	fb09 f40a 	mul.w	r4, r9, sl
 8000d64:	429c      	cmp	r4, r3
 8000d66:	fa02 f207 	lsl.w	r2, r2, r7
 8000d6a:	fa00 f107 	lsl.w	r1, r0, r7
 8000d6e:	d90b      	bls.n	8000d88 <__udivmoddi4+0x1b0>
 8000d70:	eb1e 0303 	adds.w	r3, lr, r3
 8000d74:	f109 30ff 	add.w	r0, r9, #4294967295
 8000d78:	f080 8087 	bcs.w	8000e8a <__udivmoddi4+0x2b2>
 8000d7c:	429c      	cmp	r4, r3
 8000d7e:	f240 8084 	bls.w	8000e8a <__udivmoddi4+0x2b2>
 8000d82:	f1a9 0902 	sub.w	r9, r9, #2
 8000d86:	4473      	add	r3, lr
 8000d88:	1b1b      	subs	r3, r3, r4
 8000d8a:	b2ad      	uxth	r5, r5
 8000d8c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d90:	fb08 3310 	mls	r3, r8, r0, r3
 8000d94:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000d98:	fb00 fa0a 	mul.w	sl, r0, sl
 8000d9c:	45a2      	cmp	sl, r4
 8000d9e:	d908      	bls.n	8000db2 <__udivmoddi4+0x1da>
 8000da0:	eb1e 0404 	adds.w	r4, lr, r4
 8000da4:	f100 33ff 	add.w	r3, r0, #4294967295
 8000da8:	d26b      	bcs.n	8000e82 <__udivmoddi4+0x2aa>
 8000daa:	45a2      	cmp	sl, r4
 8000dac:	d969      	bls.n	8000e82 <__udivmoddi4+0x2aa>
 8000dae:	3802      	subs	r0, #2
 8000db0:	4474      	add	r4, lr
 8000db2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000db6:	fba0 8902 	umull	r8, r9, r0, r2
 8000dba:	eba4 040a 	sub.w	r4, r4, sl
 8000dbe:	454c      	cmp	r4, r9
 8000dc0:	46c2      	mov	sl, r8
 8000dc2:	464b      	mov	r3, r9
 8000dc4:	d354      	bcc.n	8000e70 <__udivmoddi4+0x298>
 8000dc6:	d051      	beq.n	8000e6c <__udivmoddi4+0x294>
 8000dc8:	2e00      	cmp	r6, #0
 8000dca:	d069      	beq.n	8000ea0 <__udivmoddi4+0x2c8>
 8000dcc:	ebb1 050a 	subs.w	r5, r1, sl
 8000dd0:	eb64 0403 	sbc.w	r4, r4, r3
 8000dd4:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000dd8:	40fd      	lsrs	r5, r7
 8000dda:	40fc      	lsrs	r4, r7
 8000ddc:	ea4c 0505 	orr.w	r5, ip, r5
 8000de0:	e9c6 5400 	strd	r5, r4, [r6]
 8000de4:	2700      	movs	r7, #0
 8000de6:	e747      	b.n	8000c78 <__udivmoddi4+0xa0>
 8000de8:	f1c2 0320 	rsb	r3, r2, #32
 8000dec:	fa20 f703 	lsr.w	r7, r0, r3
 8000df0:	4095      	lsls	r5, r2
 8000df2:	fa01 f002 	lsl.w	r0, r1, r2
 8000df6:	fa21 f303 	lsr.w	r3, r1, r3
 8000dfa:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000dfe:	4338      	orrs	r0, r7
 8000e00:	0c01      	lsrs	r1, r0, #16
 8000e02:	fbb3 f7fe 	udiv	r7, r3, lr
 8000e06:	fa1f f885 	uxth.w	r8, r5
 8000e0a:	fb0e 3317 	mls	r3, lr, r7, r3
 8000e0e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e12:	fb07 f308 	mul.w	r3, r7, r8
 8000e16:	428b      	cmp	r3, r1
 8000e18:	fa04 f402 	lsl.w	r4, r4, r2
 8000e1c:	d907      	bls.n	8000e2e <__udivmoddi4+0x256>
 8000e1e:	1869      	adds	r1, r5, r1
 8000e20:	f107 3cff 	add.w	ip, r7, #4294967295
 8000e24:	d22f      	bcs.n	8000e86 <__udivmoddi4+0x2ae>
 8000e26:	428b      	cmp	r3, r1
 8000e28:	d92d      	bls.n	8000e86 <__udivmoddi4+0x2ae>
 8000e2a:	3f02      	subs	r7, #2
 8000e2c:	4429      	add	r1, r5
 8000e2e:	1acb      	subs	r3, r1, r3
 8000e30:	b281      	uxth	r1, r0
 8000e32:	fbb3 f0fe 	udiv	r0, r3, lr
 8000e36:	fb0e 3310 	mls	r3, lr, r0, r3
 8000e3a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e3e:	fb00 f308 	mul.w	r3, r0, r8
 8000e42:	428b      	cmp	r3, r1
 8000e44:	d907      	bls.n	8000e56 <__udivmoddi4+0x27e>
 8000e46:	1869      	adds	r1, r5, r1
 8000e48:	f100 3cff 	add.w	ip, r0, #4294967295
 8000e4c:	d217      	bcs.n	8000e7e <__udivmoddi4+0x2a6>
 8000e4e:	428b      	cmp	r3, r1
 8000e50:	d915      	bls.n	8000e7e <__udivmoddi4+0x2a6>
 8000e52:	3802      	subs	r0, #2
 8000e54:	4429      	add	r1, r5
 8000e56:	1ac9      	subs	r1, r1, r3
 8000e58:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000e5c:	e73b      	b.n	8000cd6 <__udivmoddi4+0xfe>
 8000e5e:	4637      	mov	r7, r6
 8000e60:	4630      	mov	r0, r6
 8000e62:	e709      	b.n	8000c78 <__udivmoddi4+0xa0>
 8000e64:	4607      	mov	r7, r0
 8000e66:	e6e7      	b.n	8000c38 <__udivmoddi4+0x60>
 8000e68:	4618      	mov	r0, r3
 8000e6a:	e6fb      	b.n	8000c64 <__udivmoddi4+0x8c>
 8000e6c:	4541      	cmp	r1, r8
 8000e6e:	d2ab      	bcs.n	8000dc8 <__udivmoddi4+0x1f0>
 8000e70:	ebb8 0a02 	subs.w	sl, r8, r2
 8000e74:	eb69 020e 	sbc.w	r2, r9, lr
 8000e78:	3801      	subs	r0, #1
 8000e7a:	4613      	mov	r3, r2
 8000e7c:	e7a4      	b.n	8000dc8 <__udivmoddi4+0x1f0>
 8000e7e:	4660      	mov	r0, ip
 8000e80:	e7e9      	b.n	8000e56 <__udivmoddi4+0x27e>
 8000e82:	4618      	mov	r0, r3
 8000e84:	e795      	b.n	8000db2 <__udivmoddi4+0x1da>
 8000e86:	4667      	mov	r7, ip
 8000e88:	e7d1      	b.n	8000e2e <__udivmoddi4+0x256>
 8000e8a:	4681      	mov	r9, r0
 8000e8c:	e77c      	b.n	8000d88 <__udivmoddi4+0x1b0>
 8000e8e:	3802      	subs	r0, #2
 8000e90:	442c      	add	r4, r5
 8000e92:	e747      	b.n	8000d24 <__udivmoddi4+0x14c>
 8000e94:	f1ac 0c02 	sub.w	ip, ip, #2
 8000e98:	442b      	add	r3, r5
 8000e9a:	e72f      	b.n	8000cfc <__udivmoddi4+0x124>
 8000e9c:	4638      	mov	r0, r7
 8000e9e:	e708      	b.n	8000cb2 <__udivmoddi4+0xda>
 8000ea0:	4637      	mov	r7, r6
 8000ea2:	e6e9      	b.n	8000c78 <__udivmoddi4+0xa0>

08000ea4 <__aeabi_idiv0>:
 8000ea4:	4770      	bx	lr
 8000ea6:	bf00      	nop

08000ea8 <appMain>:
void uSec_Delay(uint32_t uSec);
void checksonar(SONAR_STATUS *sonar);


// main application loop
void appMain(void){
 8000ea8:	b580      	push	{r7, lr}
 8000eaa:	b08c      	sub	sp, #48	; 0x30
 8000eac:	af02      	add	r7, sp, #8
	/* Check Hardware Revision Bits*/
	RevBit[0] =	HAL_GPIO_ReadPin(REV_BIT0_GPIO_Port, REV_BIT0_Pin);
 8000eae:	2102      	movs	r1, #2
 8000eb0:	485e      	ldr	r0, [pc, #376]	; (800102c <appMain+0x184>)
 8000eb2:	f002 fbed 	bl	8003690 <HAL_GPIO_ReadPin>
 8000eb6:	4603      	mov	r3, r0
 8000eb8:	461a      	mov	r2, r3
 8000eba:	4b5d      	ldr	r3, [pc, #372]	; (8001030 <appMain+0x188>)
 8000ebc:	701a      	strb	r2, [r3, #0]
	RevBit[1] =	HAL_GPIO_ReadPin(REV_BIT1_GPIO_Port, REV_BIT1_Pin);
 8000ebe:	2104      	movs	r1, #4
 8000ec0:	485a      	ldr	r0, [pc, #360]	; (800102c <appMain+0x184>)
 8000ec2:	f002 fbe5 	bl	8003690 <HAL_GPIO_ReadPin>
 8000ec6:	4603      	mov	r3, r0
 8000ec8:	461a      	mov	r2, r3
 8000eca:	4b59      	ldr	r3, [pc, #356]	; (8001030 <appMain+0x188>)
 8000ecc:	705a      	strb	r2, [r3, #1]
	RevBit[2] =	HAL_GPIO_ReadPin(REV_BIT2_GPIO_Port, REV_BIT2_Pin);
 8000ece:	2108      	movs	r1, #8
 8000ed0:	4856      	ldr	r0, [pc, #344]	; (800102c <appMain+0x184>)
 8000ed2:	f002 fbdd 	bl	8003690 <HAL_GPIO_ReadPin>
 8000ed6:	4603      	mov	r3, r0
 8000ed8:	461a      	mov	r2, r3
 8000eda:	4b55      	ldr	r3, [pc, #340]	; (8001030 <appMain+0x188>)
 8000edc:	709a      	strb	r2, [r3, #2]


	//hal pwm start
	HAL_TIM_PWM_Start(TIM2,TIM_CHANNEL_3);  //ROMI_PWMR
 8000ede:	2108      	movs	r1, #8
 8000ee0:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8000ee4:	f003 fece 	bl	8004c84 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(TIM4, TIM_CHANNEL_1); //ROMI_PWML
 8000ee8:	2100      	movs	r1, #0
 8000eea:	4852      	ldr	r0, [pc, #328]	; (8001034 <appMain+0x18c>)
 8000eec:	f003 feca 	bl	8004c84 <HAL_TIM_PWM_Start>

	int32_t MTR_PWM_PERIOD;
	int32_t MAX_SPEED;
	int32_t MAX_VELOCITY;

	int16_t speed_l = 0;
 8000ef0:	2300      	movs	r3, #0
 8000ef2:	84fb      	strh	r3, [r7, #38]	; 0x26
	int16_t speed_r = 0;
 8000ef4:	2300      	movs	r3, #0
 8000ef6:	84bb      	strh	r3, [r7, #36]	; 0x24

	int16_t duty_l = 0;
 8000ef8:	2300      	movs	r3, #0
 8000efa:	83fb      	strh	r3, [r7, #30]
	int16_t duty_r = 0;
 8000efc:	2300      	movs	r3, #0
 8000efe:	83bb      	strh	r3, [r7, #28]

	uint32_t BLINK_RATE = 50;
 8000f00:	2332      	movs	r3, #50	; 0x32
 8000f02:	61bb      	str	r3, [r7, #24]
	uint32_t BlinkTimer = BLINK_RATE;
 8000f04:	69bb      	ldr	r3, [r7, #24]
 8000f06:	623b      	str	r3, [r7, #32]

	uint32_t PID_RATE = 50;
 8000f08:	2332      	movs	r3, #50	; 0x32
 8000f0a:	617b      	str	r3, [r7, #20]
	uint32_t PIDTimer = PID_RATE;
 8000f0c:	697b      	ldr	r3, [r7, #20]
 8000f0e:	613b      	str	r3, [r7, #16]

	printf("Power up initiated...\r\n");
 8000f10:	4849      	ldr	r0, [pc, #292]	; (8001038 <appMain+0x190>)
 8000f12:	f006 f9b5 	bl	8007280 <puts>
	printf("All systems nominal..\r\n");
 8000f16:	4849      	ldr	r0, [pc, #292]	; (800103c <appMain+0x194>)
 8000f18:	f006 f9b2 	bl	8007280 <puts>
	printf("Hardware Revision: %d%d%d\r\n",RevBit[2],RevBit[2],RevBit[2]);
 8000f1c:	4b44      	ldr	r3, [pc, #272]	; (8001030 <appMain+0x188>)
 8000f1e:	789b      	ldrb	r3, [r3, #2]
 8000f20:	4619      	mov	r1, r3
 8000f22:	4b43      	ldr	r3, [pc, #268]	; (8001030 <appMain+0x188>)
 8000f24:	789b      	ldrb	r3, [r3, #2]
 8000f26:	461a      	mov	r2, r3
 8000f28:	4b41      	ldr	r3, [pc, #260]	; (8001030 <appMain+0x188>)
 8000f2a:	789b      	ldrb	r3, [r3, #2]
 8000f2c:	4844      	ldr	r0, [pc, #272]	; (8001040 <appMain+0x198>)
 8000f2e:	f006 f91f 	bl	8007170 <iprintf>

	//Initialize OLED
	SSD1306_Init();
 8000f32:	f000 f909 	bl	8001148 <SSD1306_Init>
	SSD1306_Clear();
 8000f36:	f000 fb2c 	bl	8001592 <SSD1306_Clear>
	SSD1306_DrawBitmap(0, 0, ologic, 128, 64, 1);
 8000f3a:	2301      	movs	r3, #1
 8000f3c:	9301      	str	r3, [sp, #4]
 8000f3e:	2340      	movs	r3, #64	; 0x40
 8000f40:	9300      	str	r3, [sp, #0]
 8000f42:	2380      	movs	r3, #128	; 0x80
 8000f44:	4a3f      	ldr	r2, [pc, #252]	; (8001044 <appMain+0x19c>)
 8000f46:	2100      	movs	r1, #0
 8000f48:	2000      	movs	r0, #0
 8000f4a:	f000 f895 	bl	8001078 <SSD1306_DrawBitmap>
	SSD1306_UpdateScreen();
 8000f4e:	f000 f9bf 	bl	80012d0 <SSD1306_UpdateScreen>
	HAL_Delay(2000);
 8000f52:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000f56:	f001 ff05 	bl	8002d64 <HAL_Delay>
	SSD1306_Clear();
 8000f5a:	f000 fb1a 	bl	8001592 <SSD1306_Clear>
	SSD1306_GotoXY(30, 0);
 8000f5e:	2100      	movs	r1, #0
 8000f60:	201e      	movs	r0, #30
 8000f62:	f000 fa5b 	bl	800141c <SSD1306_GotoXY>
	SSD1306_Puts("STM32-ROMI", &Font_7x10, 1);
 8000f66:	2201      	movs	r2, #1
 8000f68:	4937      	ldr	r1, [pc, #220]	; (8001048 <appMain+0x1a0>)
 8000f6a:	4838      	ldr	r0, [pc, #224]	; (800104c <appMain+0x1a4>)
 8000f6c:	f000 faec 	bl	8001548 <SSD1306_Puts>
	SSD1306_UpdateScreen();
 8000f70:	f000 f9ae 	bl	80012d0 <SSD1306_UpdateScreen>
	HAL_Delay(100);
 8000f74:	2064      	movs	r0, #100	; 0x64
 8000f76:	f001 fef5 	bl	8002d64 <HAL_Delay>

	uint32_t tick = HAL_GetTick();
 8000f7a:	f001 fee7 	bl	8002d4c <HAL_GetTick>
 8000f7e:	60f8      	str	r0, [r7, #12]

	//Set Direction bits to 0 for forward
	HAL_GPIO_WritePin(ROMI_DIRL_GPIO_Port, ROMI_DIRL_Pin, RESET);
 8000f80:	2200      	movs	r2, #0
 8000f82:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000f86:	4829      	ldr	r0, [pc, #164]	; (800102c <appMain+0x184>)
 8000f88:	f002 fb9a 	bl	80036c0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(ROMI_DIRR_GPIO_Port, ROMI_DIRR_Pin, RESET);
 8000f8c:	2200      	movs	r2, #0
 8000f8e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000f92:	482f      	ldr	r0, [pc, #188]	; (8001050 <appMain+0x1a8>)
 8000f94:	f002 fb94 	bl	80036c0 <HAL_GPIO_WritePin>
	//Set Sleep bits to 1 for enable
	HAL_GPIO_WritePin(ROMI_SLPL_GPIO_Port, ROMI_SLPL_Pin, SET);
 8000f98:	2201      	movs	r2, #1
 8000f9a:	2140      	movs	r1, #64	; 0x40
 8000f9c:	4823      	ldr	r0, [pc, #140]	; (800102c <appMain+0x184>)
 8000f9e:	f002 fb8f 	bl	80036c0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(ROMI_SLPR_GPIO_Port, ROMI_SLPR_Pin, SET);
 8000fa2:	2201      	movs	r2, #1
 8000fa4:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000fa8:	4829      	ldr	r0, [pc, #164]	; (8001050 <appMain+0x1a8>)
 8000faa:	f002 fb89 	bl	80036c0 <HAL_GPIO_WritePin>
	//Main program to loop forever
	while(1){
		//printf("Check Sonar\r\n");
		//checksonar(&sonar);
		//HAL_Delay(1000);
		uint32_t tock = HAL_GetTick();
 8000fae:	f001 fecd 	bl	8002d4c <HAL_GetTick>
 8000fb2:	60b8      	str	r0, [r7, #8]

		if(tock-tick>10){
 8000fb4:	68ba      	ldr	r2, [r7, #8]
 8000fb6:	68fb      	ldr	r3, [r7, #12]
 8000fb8:	1ad3      	subs	r3, r2, r3
 8000fba:	2b0a      	cmp	r3, #10
 8000fbc:	d90b      	bls.n	8000fd6 <appMain+0x12e>
			BlinkTimer--;
 8000fbe:	6a3b      	ldr	r3, [r7, #32]
 8000fc0:	3b01      	subs	r3, #1
 8000fc2:	623b      	str	r3, [r7, #32]
			if(BlinkTimer==0){
 8000fc4:	6a3b      	ldr	r3, [r7, #32]
 8000fc6:	2b00      	cmp	r3, #0
 8000fc8:	d105      	bne.n	8000fd6 <appMain+0x12e>
				BlinkTimer = BLINK_RATE;
 8000fca:	69bb      	ldr	r3, [r7, #24]
 8000fcc:	623b      	str	r3, [r7, #32]
				HAL_GPIO_TogglePin(Blinky_GPIO_Port, Blinky_Pin);
 8000fce:	2120      	movs	r1, #32
 8000fd0:	4820      	ldr	r0, [pc, #128]	; (8001054 <appMain+0x1ac>)
 8000fd2:	f002 fb8e 	bl	80036f2 <HAL_GPIO_TogglePin>
			}
		}


		int c = getchar();
 8000fd6:	f005 fbd7 	bl	8006788 <getchar>
 8000fda:	6078      	str	r0, [r7, #4]
			if(c != EOF){
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000fe2:	d0e4      	beq.n	8000fae <appMain+0x106>
				putchar(c);
 8000fe4:	6878      	ldr	r0, [r7, #4]
 8000fe6:	f006 f8db 	bl	80071a0 <putchar>

				if(c == '-'){
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	2b2d      	cmp	r3, #45	; 0x2d
 8000fee:	d109      	bne.n	8001004 <appMain+0x15c>
					if(speed_l < -MTR_PWM_PERIOD){
 8000ff0:	f9b7 2026 	ldrsh.w	r2, [r7, #38]	; 0x26
 8000ff4:	683b      	ldr	r3, [r7, #0]
 8000ff6:	425b      	negs	r3, r3
 8000ff8:	429a      	cmp	r2, r3
 8000ffa:	da03      	bge.n	8001004 <appMain+0x15c>
						speed_l -= 80;
 8000ffc:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8000ffe:	3b50      	subs	r3, #80	; 0x50
 8001000:	b29b      	uxth	r3, r3
 8001002:	84fb      	strh	r3, [r7, #38]	; 0x26
					}
				}

				if(c == '>'){
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	2b3e      	cmp	r3, #62	; 0x3e
 8001008:	d109      	bne.n	800101e <appMain+0x176>
					if(speed_r < MTR_PWM_PERIOD){
 800100a:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 800100e:	683a      	ldr	r2, [r7, #0]
 8001010:	429a      	cmp	r2, r3
 8001012:	ddcc      	ble.n	8000fae <appMain+0x106>
						speed_r += 80;
 8001014:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001016:	3350      	adds	r3, #80	; 0x50
 8001018:	b29b      	uxth	r3, r3
 800101a:	84bb      	strh	r3, [r7, #36]	; 0x24
 800101c:	e7c7      	b.n	8000fae <appMain+0x106>
					}
				}

				else{
					clearerr(stdin);
 800101e:	4b0e      	ldr	r3, [pc, #56]	; (8001058 <appMain+0x1b0>)
 8001020:	681b      	ldr	r3, [r3, #0]
 8001022:	685b      	ldr	r3, [r3, #4]
 8001024:	4618      	mov	r0, r3
 8001026:	f005 fa9d 	bl	8006564 <clearerr>
	while(1){
 800102a:	e7c0      	b.n	8000fae <appMain+0x106>
 800102c:	40020800 	.word	0x40020800
 8001030:	20000614 	.word	0x20000614
 8001034:	40000800 	.word	0x40000800
 8001038:	08009038 	.word	0x08009038
 800103c:	08009050 	.word	0x08009050
 8001040:	08009068 	.word	0x08009068
 8001044:	080090e0 	.word	0x080090e0
 8001048:	20000000 	.word	0x20000000
 800104c:	08009084 	.word	0x08009084
 8001050:	40020400 	.word	0x40020400
 8001054:	40020000 	.word	0x40020000
 8001058:	20000014 	.word	0x20000014

0800105c <HAL_TIM_PeriodElapsedCallback>:
};


/* This function uses interrupts to toggle Blinky*/
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim6)
{
 800105c:	b580      	push	{r7, lr}
 800105e:	b082      	sub	sp, #8
 8001060:	af00      	add	r7, sp, #0
 8001062:	6078      	str	r0, [r7, #4]
	 HAL_GPIO_TogglePin(Blinky_GPIO_Port, Blinky_Pin);
 8001064:	2120      	movs	r1, #32
 8001066:	4803      	ldr	r0, [pc, #12]	; (8001074 <HAL_TIM_PeriodElapsedCallback+0x18>)
 8001068:	f002 fb43 	bl	80036f2 <HAL_GPIO_TogglePin>
}
 800106c:	bf00      	nop
 800106e:	3708      	adds	r7, #8
 8001070:	46bd      	mov	sp, r7
 8001072:	bd80      	pop	{r7, pc}
 8001074:	40020000 	.word	0x40020000

08001078 <SSD1306_DrawBitmap>:

}


void SSD1306_DrawBitmap(int16_t x, int16_t y, const unsigned char* bitmap, int16_t w, int16_t h, uint16_t color)
{
 8001078:	b580      	push	{r7, lr}
 800107a:	b086      	sub	sp, #24
 800107c:	af00      	add	r7, sp, #0
 800107e:	60ba      	str	r2, [r7, #8]
 8001080:	461a      	mov	r2, r3
 8001082:	4603      	mov	r3, r0
 8001084:	81fb      	strh	r3, [r7, #14]
 8001086:	460b      	mov	r3, r1
 8001088:	81bb      	strh	r3, [r7, #12]
 800108a:	4613      	mov	r3, r2
 800108c:	80fb      	strh	r3, [r7, #6]

    int16_t byteWidth = (w + 7) / 8; // Bitmap scanline pad = whole byte
 800108e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001092:	3307      	adds	r3, #7
 8001094:	2b00      	cmp	r3, #0
 8001096:	da00      	bge.n	800109a <SSD1306_DrawBitmap+0x22>
 8001098:	3307      	adds	r3, #7
 800109a:	10db      	asrs	r3, r3, #3
 800109c:	823b      	strh	r3, [r7, #16]
    uint8_t byte = 0;
 800109e:	2300      	movs	r3, #0
 80010a0:	75fb      	strb	r3, [r7, #23]

    for(int16_t j=0; j<h; j++, y++)
 80010a2:	2300      	movs	r3, #0
 80010a4:	82bb      	strh	r3, [r7, #20]
 80010a6:	e044      	b.n	8001132 <SSD1306_DrawBitmap+0xba>
    {
        for(int16_t i=0; i<w; i++)
 80010a8:	2300      	movs	r3, #0
 80010aa:	827b      	strh	r3, [r7, #18]
 80010ac:	e02f      	b.n	800110e <SSD1306_DrawBitmap+0x96>
        {
            if(i & 7)
 80010ae:	8a7b      	ldrh	r3, [r7, #18]
 80010b0:	f003 0307 	and.w	r3, r3, #7
 80010b4:	2b00      	cmp	r3, #0
 80010b6:	d003      	beq.n	80010c0 <SSD1306_DrawBitmap+0x48>
            {
               byte <<= 1;
 80010b8:	7dfb      	ldrb	r3, [r7, #23]
 80010ba:	005b      	lsls	r3, r3, #1
 80010bc:	75fb      	strb	r3, [r7, #23]
 80010be:	e012      	b.n	80010e6 <SSD1306_DrawBitmap+0x6e>
            }
            else
            {
               byte = (*(const unsigned char *)(&bitmap[j * byteWidth + i / 8]));
 80010c0:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80010c4:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 80010c8:	fb02 f203 	mul.w	r2, r2, r3
 80010cc:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80010d0:	2b00      	cmp	r3, #0
 80010d2:	da00      	bge.n	80010d6 <SSD1306_DrawBitmap+0x5e>
 80010d4:	3307      	adds	r3, #7
 80010d6:	10db      	asrs	r3, r3, #3
 80010d8:	b21b      	sxth	r3, r3
 80010da:	4413      	add	r3, r2
 80010dc:	461a      	mov	r2, r3
 80010de:	68bb      	ldr	r3, [r7, #8]
 80010e0:	4413      	add	r3, r2
 80010e2:	781b      	ldrb	r3, [r3, #0]
 80010e4:	75fb      	strb	r3, [r7, #23]
            }
            if(byte & 0x80) SSD1306_DrawPixel(x+i, y, color);
 80010e6:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80010ea:	2b00      	cmp	r3, #0
 80010ec:	da09      	bge.n	8001102 <SSD1306_DrawBitmap+0x8a>
 80010ee:	89fa      	ldrh	r2, [r7, #14]
 80010f0:	8a7b      	ldrh	r3, [r7, #18]
 80010f2:	4413      	add	r3, r2
 80010f4:	b29b      	uxth	r3, r3
 80010f6:	89b9      	ldrh	r1, [r7, #12]
 80010f8:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80010fa:	b2d2      	uxtb	r2, r2
 80010fc:	4618      	mov	r0, r3
 80010fe:	f000 f92d 	bl	800135c <SSD1306_DrawPixel>
        for(int16_t i=0; i<w; i++)
 8001102:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8001106:	b29b      	uxth	r3, r3
 8001108:	3301      	adds	r3, #1
 800110a:	b29b      	uxth	r3, r3
 800110c:	827b      	strh	r3, [r7, #18]
 800110e:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 8001112:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001116:	429a      	cmp	r2, r3
 8001118:	dbc9      	blt.n	80010ae <SSD1306_DrawBitmap+0x36>
    for(int16_t j=0; j<h; j++, y++)
 800111a:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800111e:	b29b      	uxth	r3, r3
 8001120:	3301      	adds	r3, #1
 8001122:	b29b      	uxth	r3, r3
 8001124:	82bb      	strh	r3, [r7, #20]
 8001126:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800112a:	b29b      	uxth	r3, r3
 800112c:	3301      	adds	r3, #1
 800112e:	b29b      	uxth	r3, r3
 8001130:	81bb      	strh	r3, [r7, #12]
 8001132:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 8001136:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800113a:	429a      	cmp	r2, r3
 800113c:	dbb4      	blt.n	80010a8 <SSD1306_DrawBitmap+0x30>
        }
    }
}
 800113e:	bf00      	nop
 8001140:	3718      	adds	r7, #24
 8001142:	46bd      	mov	sp, r7
 8001144:	bd80      	pop	{r7, pc}
	...

08001148 <SSD1306_Init>:





uint8_t SSD1306_Init(void) {
 8001148:	b580      	push	{r7, lr}
 800114a:	b082      	sub	sp, #8
 800114c:	af00      	add	r7, sp, #0

	/* Init I2C */
	ssd1306_I2C_Init();
 800114e:	f000 fa29 	bl	80015a4 <ssd1306_I2C_Init>
	
	/* Check if LCD connected to I2C */
	if (HAL_I2C_IsDeviceReady(&hi2c1, SSD1306_I2C_ADDR, 1, 20000) != HAL_OK) {
 8001152:	f644 6320 	movw	r3, #20000	; 0x4e20
 8001156:	2201      	movs	r2, #1
 8001158:	2178      	movs	r1, #120	; 0x78
 800115a:	485b      	ldr	r0, [pc, #364]	; (80012c8 <SSD1306_Init+0x180>)
 800115c:	f002 fd1a 	bl	8003b94 <HAL_I2C_IsDeviceReady>
 8001160:	4603      	mov	r3, r0
 8001162:	2b00      	cmp	r3, #0
 8001164:	d001      	beq.n	800116a <SSD1306_Init+0x22>
		/* Return false */
		return 0;
 8001166:	2300      	movs	r3, #0
 8001168:	e0a9      	b.n	80012be <SSD1306_Init+0x176>
	}
	
	/* A little delay */
	uint32_t p = 2500;
 800116a:	f640 13c4 	movw	r3, #2500	; 0x9c4
 800116e:	607b      	str	r3, [r7, #4]
	while(p>0)
 8001170:	e002      	b.n	8001178 <SSD1306_Init+0x30>
		p--;
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	3b01      	subs	r3, #1
 8001176:	607b      	str	r3, [r7, #4]
	while(p>0)
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	2b00      	cmp	r3, #0
 800117c:	d1f9      	bne.n	8001172 <SSD1306_Init+0x2a>
	
	/* Init LCD */
	SSD1306_WRITECOMMAND(0xAE); //display off
 800117e:	22ae      	movs	r2, #174	; 0xae
 8001180:	2100      	movs	r1, #0
 8001182:	2078      	movs	r0, #120	; 0x78
 8001184:	f000 fa6a 	bl	800165c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //Set Memory Addressing Mode   
 8001188:	2220      	movs	r2, #32
 800118a:	2100      	movs	r1, #0
 800118c:	2078      	movs	r0, #120	; 0x78
 800118e:	f000 fa65 	bl	800165c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //00,Horizontal Addressing Mode;01,Vertical Addressing Mode;10,Page Addressing Mode (RESET);11,Invalid
 8001192:	2210      	movs	r2, #16
 8001194:	2100      	movs	r1, #0
 8001196:	2078      	movs	r0, #120	; 0x78
 8001198:	f000 fa60 	bl	800165c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 800119c:	22b0      	movs	r2, #176	; 0xb0
 800119e:	2100      	movs	r1, #0
 80011a0:	2078      	movs	r0, #120	; 0x78
 80011a2:	f000 fa5b 	bl	800165c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xC8); //Set COM Output Scan Direction
 80011a6:	22c8      	movs	r2, #200	; 0xc8
 80011a8:	2100      	movs	r1, #0
 80011aa:	2078      	movs	r0, #120	; 0x78
 80011ac:	f000 fa56 	bl	800165c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //---set low column address
 80011b0:	2200      	movs	r2, #0
 80011b2:	2100      	movs	r1, #0
 80011b4:	2078      	movs	r0, #120	; 0x78
 80011b6:	f000 fa51 	bl	800165c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //---set high column address
 80011ba:	2210      	movs	r2, #16
 80011bc:	2100      	movs	r1, #0
 80011be:	2078      	movs	r0, #120	; 0x78
 80011c0:	f000 fa4c 	bl	800165c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x40); //--set start line address
 80011c4:	2240      	movs	r2, #64	; 0x40
 80011c6:	2100      	movs	r1, #0
 80011c8:	2078      	movs	r0, #120	; 0x78
 80011ca:	f000 fa47 	bl	800165c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x81); //--set contrast control register
 80011ce:	2281      	movs	r2, #129	; 0x81
 80011d0:	2100      	movs	r1, #0
 80011d2:	2078      	movs	r0, #120	; 0x78
 80011d4:	f000 fa42 	bl	800165c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xFF);
 80011d8:	22ff      	movs	r2, #255	; 0xff
 80011da:	2100      	movs	r1, #0
 80011dc:	2078      	movs	r0, #120	; 0x78
 80011de:	f000 fa3d 	bl	800165c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA1); //--set segment re-map 0 to 127
 80011e2:	22a1      	movs	r2, #161	; 0xa1
 80011e4:	2100      	movs	r1, #0
 80011e6:	2078      	movs	r0, #120	; 0x78
 80011e8:	f000 fa38 	bl	800165c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA6); //--set normal display
 80011ec:	22a6      	movs	r2, #166	; 0xa6
 80011ee:	2100      	movs	r1, #0
 80011f0:	2078      	movs	r0, #120	; 0x78
 80011f2:	f000 fa33 	bl	800165c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA8); //--set multiplex ratio(1 to 64)
 80011f6:	22a8      	movs	r2, #168	; 0xa8
 80011f8:	2100      	movs	r1, #0
 80011fa:	2078      	movs	r0, #120	; 0x78
 80011fc:	f000 fa2e 	bl	800165c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x3F); //
 8001200:	223f      	movs	r2, #63	; 0x3f
 8001202:	2100      	movs	r1, #0
 8001204:	2078      	movs	r0, #120	; 0x78
 8001206:	f000 fa29 	bl	800165c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 800120a:	22a4      	movs	r2, #164	; 0xa4
 800120c:	2100      	movs	r1, #0
 800120e:	2078      	movs	r0, #120	; 0x78
 8001210:	f000 fa24 	bl	800165c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD3); //-set display offset
 8001214:	22d3      	movs	r2, #211	; 0xd3
 8001216:	2100      	movs	r1, #0
 8001218:	2078      	movs	r0, #120	; 0x78
 800121a:	f000 fa1f 	bl	800165c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //-not offset
 800121e:	2200      	movs	r2, #0
 8001220:	2100      	movs	r1, #0
 8001222:	2078      	movs	r0, #120	; 0x78
 8001224:	f000 fa1a 	bl	800165c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD5); //--set display clock divide ratio/oscillator frequency
 8001228:	22d5      	movs	r2, #213	; 0xd5
 800122a:	2100      	movs	r1, #0
 800122c:	2078      	movs	r0, #120	; 0x78
 800122e:	f000 fa15 	bl	800165c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xF0); //--set divide ratio
 8001232:	22f0      	movs	r2, #240	; 0xf0
 8001234:	2100      	movs	r1, #0
 8001236:	2078      	movs	r0, #120	; 0x78
 8001238:	f000 fa10 	bl	800165c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD9); //--set pre-charge period
 800123c:	22d9      	movs	r2, #217	; 0xd9
 800123e:	2100      	movs	r1, #0
 8001240:	2078      	movs	r0, #120	; 0x78
 8001242:	f000 fa0b 	bl	800165c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x22); //
 8001246:	2222      	movs	r2, #34	; 0x22
 8001248:	2100      	movs	r1, #0
 800124a:	2078      	movs	r0, #120	; 0x78
 800124c:	f000 fa06 	bl	800165c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDA); //--set com pins hardware configuration
 8001250:	22da      	movs	r2, #218	; 0xda
 8001252:	2100      	movs	r1, #0
 8001254:	2078      	movs	r0, #120	; 0x78
 8001256:	f000 fa01 	bl	800165c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x12);
 800125a:	2212      	movs	r2, #18
 800125c:	2100      	movs	r1, #0
 800125e:	2078      	movs	r0, #120	; 0x78
 8001260:	f000 f9fc 	bl	800165c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDB); //--set vcomh
 8001264:	22db      	movs	r2, #219	; 0xdb
 8001266:	2100      	movs	r1, #0
 8001268:	2078      	movs	r0, #120	; 0x78
 800126a:	f000 f9f7 	bl	800165c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //0x20,0.77xVcc
 800126e:	2220      	movs	r2, #32
 8001270:	2100      	movs	r1, #0
 8001272:	2078      	movs	r0, #120	; 0x78
 8001274:	f000 f9f2 	bl	800165c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x8D); //--set DC-DC enable
 8001278:	228d      	movs	r2, #141	; 0x8d
 800127a:	2100      	movs	r1, #0
 800127c:	2078      	movs	r0, #120	; 0x78
 800127e:	f000 f9ed 	bl	800165c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x14); //
 8001282:	2214      	movs	r2, #20
 8001284:	2100      	movs	r1, #0
 8001286:	2078      	movs	r0, #120	; 0x78
 8001288:	f000 f9e8 	bl	800165c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xAF); //--turn on SSD1306 panel
 800128c:	22af      	movs	r2, #175	; 0xaf
 800128e:	2100      	movs	r1, #0
 8001290:	2078      	movs	r0, #120	; 0x78
 8001292:	f000 f9e3 	bl	800165c <ssd1306_I2C_Write>
	

	SSD1306_WRITECOMMAND(SSD1306_DEACTIVATE_SCROLL);
 8001296:	222e      	movs	r2, #46	; 0x2e
 8001298:	2100      	movs	r1, #0
 800129a:	2078      	movs	r0, #120	; 0x78
 800129c:	f000 f9de 	bl	800165c <ssd1306_I2C_Write>

	/* Clear screen */
	SSD1306_Fill(SSD1306_COLOR_BLACK);
 80012a0:	2000      	movs	r0, #0
 80012a2:	f000 f843 	bl	800132c <SSD1306_Fill>
	
	/* Update screen */
	SSD1306_UpdateScreen();
 80012a6:	f000 f813 	bl	80012d0 <SSD1306_UpdateScreen>
	
	/* Set default values */
	SSD1306.CurrentX = 0;
 80012aa:	4b08      	ldr	r3, [pc, #32]	; (80012cc <SSD1306_Init+0x184>)
 80012ac:	2200      	movs	r2, #0
 80012ae:	801a      	strh	r2, [r3, #0]
	SSD1306.CurrentY = 0;
 80012b0:	4b06      	ldr	r3, [pc, #24]	; (80012cc <SSD1306_Init+0x184>)
 80012b2:	2200      	movs	r2, #0
 80012b4:	805a      	strh	r2, [r3, #2]
	
	/* Initialized OK */
	SSD1306.Initialized = 1;
 80012b6:	4b05      	ldr	r3, [pc, #20]	; (80012cc <SSD1306_Init+0x184>)
 80012b8:	2201      	movs	r2, #1
 80012ba:	715a      	strb	r2, [r3, #5]
	
	/* Return OK */
	return 1;
 80012bc:	2301      	movs	r3, #1
}
 80012be:	4618      	mov	r0, r3
 80012c0:	3708      	adds	r7, #8
 80012c2:	46bd      	mov	sp, r7
 80012c4:	bd80      	pop	{r7, pc}
 80012c6:	bf00      	nop
 80012c8:	200006ec 	.word	0x200006ec
 80012cc:	20000600 	.word	0x20000600

080012d0 <SSD1306_UpdateScreen>:

void SSD1306_UpdateScreen(void) {
 80012d0:	b580      	push	{r7, lr}
 80012d2:	b082      	sub	sp, #8
 80012d4:	af00      	add	r7, sp, #0
	uint8_t m;
	
	for (m = 0; m < 8; m++) {
 80012d6:	2300      	movs	r3, #0
 80012d8:	71fb      	strb	r3, [r7, #7]
 80012da:	e01d      	b.n	8001318 <SSD1306_UpdateScreen+0x48>
		SSD1306_WRITECOMMAND(0xB0 + m);
 80012dc:	79fb      	ldrb	r3, [r7, #7]
 80012de:	3b50      	subs	r3, #80	; 0x50
 80012e0:	b2db      	uxtb	r3, r3
 80012e2:	461a      	mov	r2, r3
 80012e4:	2100      	movs	r1, #0
 80012e6:	2078      	movs	r0, #120	; 0x78
 80012e8:	f000 f9b8 	bl	800165c <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x00);
 80012ec:	2200      	movs	r2, #0
 80012ee:	2100      	movs	r1, #0
 80012f0:	2078      	movs	r0, #120	; 0x78
 80012f2:	f000 f9b3 	bl	800165c <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x10);
 80012f6:	2210      	movs	r2, #16
 80012f8:	2100      	movs	r1, #0
 80012fa:	2078      	movs	r0, #120	; 0x78
 80012fc:	f000 f9ae 	bl	800165c <ssd1306_I2C_Write>
		
		/* Write multi data */
		ssd1306_I2C_WriteMulti(SSD1306_I2C_ADDR, 0x40, &SSD1306_Buffer[SSD1306_WIDTH * m], SSD1306_WIDTH);
 8001300:	79fb      	ldrb	r3, [r7, #7]
 8001302:	01db      	lsls	r3, r3, #7
 8001304:	4a08      	ldr	r2, [pc, #32]	; (8001328 <SSD1306_UpdateScreen+0x58>)
 8001306:	441a      	add	r2, r3
 8001308:	2380      	movs	r3, #128	; 0x80
 800130a:	2140      	movs	r1, #64	; 0x40
 800130c:	2078      	movs	r0, #120	; 0x78
 800130e:	f000 f95d 	bl	80015cc <ssd1306_I2C_WriteMulti>
	for (m = 0; m < 8; m++) {
 8001312:	79fb      	ldrb	r3, [r7, #7]
 8001314:	3301      	adds	r3, #1
 8001316:	71fb      	strb	r3, [r7, #7]
 8001318:	79fb      	ldrb	r3, [r7, #7]
 800131a:	2b07      	cmp	r3, #7
 800131c:	d9de      	bls.n	80012dc <SSD1306_UpdateScreen+0xc>
	}
}
 800131e:	bf00      	nop
 8001320:	3708      	adds	r7, #8
 8001322:	46bd      	mov	sp, r7
 8001324:	bd80      	pop	{r7, pc}
 8001326:	bf00      	nop
 8001328:	20000200 	.word	0x20000200

0800132c <SSD1306_Fill>:
	for (i = 0; i < sizeof(SSD1306_Buffer); i++) {
		SSD1306_Buffer[i] = ~SSD1306_Buffer[i];
	}
}

void SSD1306_Fill(SSD1306_COLOR_t color) {
 800132c:	b580      	push	{r7, lr}
 800132e:	b082      	sub	sp, #8
 8001330:	af00      	add	r7, sp, #0
 8001332:	4603      	mov	r3, r0
 8001334:	71fb      	strb	r3, [r7, #7]
	/* Set memory */
	memset(SSD1306_Buffer, (color == SSD1306_COLOR_BLACK) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 8001336:	79fb      	ldrb	r3, [r7, #7]
 8001338:	2b00      	cmp	r3, #0
 800133a:	d101      	bne.n	8001340 <SSD1306_Fill+0x14>
 800133c:	2300      	movs	r3, #0
 800133e:	e000      	b.n	8001342 <SSD1306_Fill+0x16>
 8001340:	23ff      	movs	r3, #255	; 0xff
 8001342:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001346:	4619      	mov	r1, r3
 8001348:	4803      	ldr	r0, [pc, #12]	; (8001358 <SSD1306_Fill+0x2c>)
 800134a:	f005 fa53 	bl	80067f4 <memset>
}
 800134e:	bf00      	nop
 8001350:	3708      	adds	r7, #8
 8001352:	46bd      	mov	sp, r7
 8001354:	bd80      	pop	{r7, pc}
 8001356:	bf00      	nop
 8001358:	20000200 	.word	0x20000200

0800135c <SSD1306_DrawPixel>:

void SSD1306_DrawPixel(uint16_t x, uint16_t y, SSD1306_COLOR_t color) {
 800135c:	b480      	push	{r7}
 800135e:	b083      	sub	sp, #12
 8001360:	af00      	add	r7, sp, #0
 8001362:	4603      	mov	r3, r0
 8001364:	80fb      	strh	r3, [r7, #6]
 8001366:	460b      	mov	r3, r1
 8001368:	80bb      	strh	r3, [r7, #4]
 800136a:	4613      	mov	r3, r2
 800136c:	70fb      	strb	r3, [r7, #3]
	if (
 800136e:	88fb      	ldrh	r3, [r7, #6]
 8001370:	2b7f      	cmp	r3, #127	; 0x7f
 8001372:	d848      	bhi.n	8001406 <SSD1306_DrawPixel+0xaa>
		x >= SSD1306_WIDTH ||
 8001374:	88bb      	ldrh	r3, [r7, #4]
 8001376:	2b3f      	cmp	r3, #63	; 0x3f
 8001378:	d845      	bhi.n	8001406 <SSD1306_DrawPixel+0xaa>
		/* Error */
		return;
	}
	
	/* Check if pixels are inverted */
	if (SSD1306.Inverted) {
 800137a:	4b26      	ldr	r3, [pc, #152]	; (8001414 <SSD1306_DrawPixel+0xb8>)
 800137c:	791b      	ldrb	r3, [r3, #4]
 800137e:	2b00      	cmp	r3, #0
 8001380:	d006      	beq.n	8001390 <SSD1306_DrawPixel+0x34>
		color = (SSD1306_COLOR_t)!color;
 8001382:	78fb      	ldrb	r3, [r7, #3]
 8001384:	2b00      	cmp	r3, #0
 8001386:	bf0c      	ite	eq
 8001388:	2301      	moveq	r3, #1
 800138a:	2300      	movne	r3, #0
 800138c:	b2db      	uxtb	r3, r3
 800138e:	70fb      	strb	r3, [r7, #3]
	}
	
	/* Set color */
	if (color == SSD1306_COLOR_WHITE) {
 8001390:	78fb      	ldrb	r3, [r7, #3]
 8001392:	2b01      	cmp	r3, #1
 8001394:	d11a      	bne.n	80013cc <SSD1306_DrawPixel+0x70>
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 8001396:	88fa      	ldrh	r2, [r7, #6]
 8001398:	88bb      	ldrh	r3, [r7, #4]
 800139a:	08db      	lsrs	r3, r3, #3
 800139c:	b298      	uxth	r0, r3
 800139e:	4603      	mov	r3, r0
 80013a0:	01db      	lsls	r3, r3, #7
 80013a2:	4413      	add	r3, r2
 80013a4:	4a1c      	ldr	r2, [pc, #112]	; (8001418 <SSD1306_DrawPixel+0xbc>)
 80013a6:	5cd3      	ldrb	r3, [r2, r3]
 80013a8:	b25a      	sxtb	r2, r3
 80013aa:	88bb      	ldrh	r3, [r7, #4]
 80013ac:	f003 0307 	and.w	r3, r3, #7
 80013b0:	2101      	movs	r1, #1
 80013b2:	fa01 f303 	lsl.w	r3, r1, r3
 80013b6:	b25b      	sxtb	r3, r3
 80013b8:	4313      	orrs	r3, r2
 80013ba:	b259      	sxtb	r1, r3
 80013bc:	88fa      	ldrh	r2, [r7, #6]
 80013be:	4603      	mov	r3, r0
 80013c0:	01db      	lsls	r3, r3, #7
 80013c2:	4413      	add	r3, r2
 80013c4:	b2c9      	uxtb	r1, r1
 80013c6:	4a14      	ldr	r2, [pc, #80]	; (8001418 <SSD1306_DrawPixel+0xbc>)
 80013c8:	54d1      	strb	r1, [r2, r3]
 80013ca:	e01d      	b.n	8001408 <SSD1306_DrawPixel+0xac>
	} else {
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 80013cc:	88fa      	ldrh	r2, [r7, #6]
 80013ce:	88bb      	ldrh	r3, [r7, #4]
 80013d0:	08db      	lsrs	r3, r3, #3
 80013d2:	b298      	uxth	r0, r3
 80013d4:	4603      	mov	r3, r0
 80013d6:	01db      	lsls	r3, r3, #7
 80013d8:	4413      	add	r3, r2
 80013da:	4a0f      	ldr	r2, [pc, #60]	; (8001418 <SSD1306_DrawPixel+0xbc>)
 80013dc:	5cd3      	ldrb	r3, [r2, r3]
 80013de:	b25a      	sxtb	r2, r3
 80013e0:	88bb      	ldrh	r3, [r7, #4]
 80013e2:	f003 0307 	and.w	r3, r3, #7
 80013e6:	2101      	movs	r1, #1
 80013e8:	fa01 f303 	lsl.w	r3, r1, r3
 80013ec:	b25b      	sxtb	r3, r3
 80013ee:	43db      	mvns	r3, r3
 80013f0:	b25b      	sxtb	r3, r3
 80013f2:	4013      	ands	r3, r2
 80013f4:	b259      	sxtb	r1, r3
 80013f6:	88fa      	ldrh	r2, [r7, #6]
 80013f8:	4603      	mov	r3, r0
 80013fa:	01db      	lsls	r3, r3, #7
 80013fc:	4413      	add	r3, r2
 80013fe:	b2c9      	uxtb	r1, r1
 8001400:	4a05      	ldr	r2, [pc, #20]	; (8001418 <SSD1306_DrawPixel+0xbc>)
 8001402:	54d1      	strb	r1, [r2, r3]
 8001404:	e000      	b.n	8001408 <SSD1306_DrawPixel+0xac>
		return;
 8001406:	bf00      	nop
	}
}
 8001408:	370c      	adds	r7, #12
 800140a:	46bd      	mov	sp, r7
 800140c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001410:	4770      	bx	lr
 8001412:	bf00      	nop
 8001414:	20000600 	.word	0x20000600
 8001418:	20000200 	.word	0x20000200

0800141c <SSD1306_GotoXY>:

void SSD1306_GotoXY(uint16_t x, uint16_t y) {
 800141c:	b480      	push	{r7}
 800141e:	b083      	sub	sp, #12
 8001420:	af00      	add	r7, sp, #0
 8001422:	4603      	mov	r3, r0
 8001424:	460a      	mov	r2, r1
 8001426:	80fb      	strh	r3, [r7, #6]
 8001428:	4613      	mov	r3, r2
 800142a:	80bb      	strh	r3, [r7, #4]
	/* Set write pointers */
	SSD1306.CurrentX = x;
 800142c:	4a05      	ldr	r2, [pc, #20]	; (8001444 <SSD1306_GotoXY+0x28>)
 800142e:	88fb      	ldrh	r3, [r7, #6]
 8001430:	8013      	strh	r3, [r2, #0]
	SSD1306.CurrentY = y;
 8001432:	4a04      	ldr	r2, [pc, #16]	; (8001444 <SSD1306_GotoXY+0x28>)
 8001434:	88bb      	ldrh	r3, [r7, #4]
 8001436:	8053      	strh	r3, [r2, #2]
}
 8001438:	bf00      	nop
 800143a:	370c      	adds	r7, #12
 800143c:	46bd      	mov	sp, r7
 800143e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001442:	4770      	bx	lr
 8001444:	20000600 	.word	0x20000600

08001448 <SSD1306_Putc>:

char SSD1306_Putc(char ch, FontDef_t* Font, SSD1306_COLOR_t color) {
 8001448:	b580      	push	{r7, lr}
 800144a:	b086      	sub	sp, #24
 800144c:	af00      	add	r7, sp, #0
 800144e:	4603      	mov	r3, r0
 8001450:	6039      	str	r1, [r7, #0]
 8001452:	71fb      	strb	r3, [r7, #7]
 8001454:	4613      	mov	r3, r2
 8001456:	71bb      	strb	r3, [r7, #6]
	uint32_t i, b, j;
	
	/* Check available space in LCD */
	if (
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 8001458:	4b3a      	ldr	r3, [pc, #232]	; (8001544 <SSD1306_Putc+0xfc>)
 800145a:	881b      	ldrh	r3, [r3, #0]
 800145c:	461a      	mov	r2, r3
 800145e:	683b      	ldr	r3, [r7, #0]
 8001460:	781b      	ldrb	r3, [r3, #0]
 8001462:	4413      	add	r3, r2
	if (
 8001464:	2b7f      	cmp	r3, #127	; 0x7f
 8001466:	dc07      	bgt.n	8001478 <SSD1306_Putc+0x30>
		SSD1306_HEIGHT <= (SSD1306.CurrentY + Font->FontHeight)
 8001468:	4b36      	ldr	r3, [pc, #216]	; (8001544 <SSD1306_Putc+0xfc>)
 800146a:	885b      	ldrh	r3, [r3, #2]
 800146c:	461a      	mov	r2, r3
 800146e:	683b      	ldr	r3, [r7, #0]
 8001470:	785b      	ldrb	r3, [r3, #1]
 8001472:	4413      	add	r3, r2
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 8001474:	2b3f      	cmp	r3, #63	; 0x3f
 8001476:	dd01      	ble.n	800147c <SSD1306_Putc+0x34>
	) {
		/* Error */
		return 0;
 8001478:	2300      	movs	r3, #0
 800147a:	e05e      	b.n	800153a <SSD1306_Putc+0xf2>
	}
	
	/* Go through font */
	for (i = 0; i < Font->FontHeight; i++) {
 800147c:	2300      	movs	r3, #0
 800147e:	617b      	str	r3, [r7, #20]
 8001480:	e04b      	b.n	800151a <SSD1306_Putc+0xd2>
		b = Font->data[(ch - 32) * Font->FontHeight + i];
 8001482:	683b      	ldr	r3, [r7, #0]
 8001484:	685a      	ldr	r2, [r3, #4]
 8001486:	79fb      	ldrb	r3, [r7, #7]
 8001488:	3b20      	subs	r3, #32
 800148a:	6839      	ldr	r1, [r7, #0]
 800148c:	7849      	ldrb	r1, [r1, #1]
 800148e:	fb01 f303 	mul.w	r3, r1, r3
 8001492:	4619      	mov	r1, r3
 8001494:	697b      	ldr	r3, [r7, #20]
 8001496:	440b      	add	r3, r1
 8001498:	005b      	lsls	r3, r3, #1
 800149a:	4413      	add	r3, r2
 800149c:	881b      	ldrh	r3, [r3, #0]
 800149e:	60fb      	str	r3, [r7, #12]
		for (j = 0; j < Font->FontWidth; j++) {
 80014a0:	2300      	movs	r3, #0
 80014a2:	613b      	str	r3, [r7, #16]
 80014a4:	e030      	b.n	8001508 <SSD1306_Putc+0xc0>
			if ((b << j) & 0x8000) {
 80014a6:	68fa      	ldr	r2, [r7, #12]
 80014a8:	693b      	ldr	r3, [r7, #16]
 80014aa:	fa02 f303 	lsl.w	r3, r2, r3
 80014ae:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80014b2:	2b00      	cmp	r3, #0
 80014b4:	d010      	beq.n	80014d8 <SSD1306_Putc+0x90>
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t) color);
 80014b6:	4b23      	ldr	r3, [pc, #140]	; (8001544 <SSD1306_Putc+0xfc>)
 80014b8:	881a      	ldrh	r2, [r3, #0]
 80014ba:	693b      	ldr	r3, [r7, #16]
 80014bc:	b29b      	uxth	r3, r3
 80014be:	4413      	add	r3, r2
 80014c0:	b298      	uxth	r0, r3
 80014c2:	4b20      	ldr	r3, [pc, #128]	; (8001544 <SSD1306_Putc+0xfc>)
 80014c4:	885a      	ldrh	r2, [r3, #2]
 80014c6:	697b      	ldr	r3, [r7, #20]
 80014c8:	b29b      	uxth	r3, r3
 80014ca:	4413      	add	r3, r2
 80014cc:	b29b      	uxth	r3, r3
 80014ce:	79ba      	ldrb	r2, [r7, #6]
 80014d0:	4619      	mov	r1, r3
 80014d2:	f7ff ff43 	bl	800135c <SSD1306_DrawPixel>
 80014d6:	e014      	b.n	8001502 <SSD1306_Putc+0xba>
			} else {
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t)!color);
 80014d8:	4b1a      	ldr	r3, [pc, #104]	; (8001544 <SSD1306_Putc+0xfc>)
 80014da:	881a      	ldrh	r2, [r3, #0]
 80014dc:	693b      	ldr	r3, [r7, #16]
 80014de:	b29b      	uxth	r3, r3
 80014e0:	4413      	add	r3, r2
 80014e2:	b298      	uxth	r0, r3
 80014e4:	4b17      	ldr	r3, [pc, #92]	; (8001544 <SSD1306_Putc+0xfc>)
 80014e6:	885a      	ldrh	r2, [r3, #2]
 80014e8:	697b      	ldr	r3, [r7, #20]
 80014ea:	b29b      	uxth	r3, r3
 80014ec:	4413      	add	r3, r2
 80014ee:	b299      	uxth	r1, r3
 80014f0:	79bb      	ldrb	r3, [r7, #6]
 80014f2:	2b00      	cmp	r3, #0
 80014f4:	bf0c      	ite	eq
 80014f6:	2301      	moveq	r3, #1
 80014f8:	2300      	movne	r3, #0
 80014fa:	b2db      	uxtb	r3, r3
 80014fc:	461a      	mov	r2, r3
 80014fe:	f7ff ff2d 	bl	800135c <SSD1306_DrawPixel>
		for (j = 0; j < Font->FontWidth; j++) {
 8001502:	693b      	ldr	r3, [r7, #16]
 8001504:	3301      	adds	r3, #1
 8001506:	613b      	str	r3, [r7, #16]
 8001508:	683b      	ldr	r3, [r7, #0]
 800150a:	781b      	ldrb	r3, [r3, #0]
 800150c:	461a      	mov	r2, r3
 800150e:	693b      	ldr	r3, [r7, #16]
 8001510:	4293      	cmp	r3, r2
 8001512:	d3c8      	bcc.n	80014a6 <SSD1306_Putc+0x5e>
	for (i = 0; i < Font->FontHeight; i++) {
 8001514:	697b      	ldr	r3, [r7, #20]
 8001516:	3301      	adds	r3, #1
 8001518:	617b      	str	r3, [r7, #20]
 800151a:	683b      	ldr	r3, [r7, #0]
 800151c:	785b      	ldrb	r3, [r3, #1]
 800151e:	461a      	mov	r2, r3
 8001520:	697b      	ldr	r3, [r7, #20]
 8001522:	4293      	cmp	r3, r2
 8001524:	d3ad      	bcc.n	8001482 <SSD1306_Putc+0x3a>
			}
		}
	}
	
	/* Increase pointer */
	SSD1306.CurrentX += Font->FontWidth;
 8001526:	4b07      	ldr	r3, [pc, #28]	; (8001544 <SSD1306_Putc+0xfc>)
 8001528:	881a      	ldrh	r2, [r3, #0]
 800152a:	683b      	ldr	r3, [r7, #0]
 800152c:	781b      	ldrb	r3, [r3, #0]
 800152e:	b29b      	uxth	r3, r3
 8001530:	4413      	add	r3, r2
 8001532:	b29a      	uxth	r2, r3
 8001534:	4b03      	ldr	r3, [pc, #12]	; (8001544 <SSD1306_Putc+0xfc>)
 8001536:	801a      	strh	r2, [r3, #0]
	
	/* Return character written */
	return ch;
 8001538:	79fb      	ldrb	r3, [r7, #7]
}
 800153a:	4618      	mov	r0, r3
 800153c:	3718      	adds	r7, #24
 800153e:	46bd      	mov	sp, r7
 8001540:	bd80      	pop	{r7, pc}
 8001542:	bf00      	nop
 8001544:	20000600 	.word	0x20000600

08001548 <SSD1306_Puts>:

char SSD1306_Puts(char* str, FontDef_t* Font, SSD1306_COLOR_t color) {
 8001548:	b580      	push	{r7, lr}
 800154a:	b084      	sub	sp, #16
 800154c:	af00      	add	r7, sp, #0
 800154e:	60f8      	str	r0, [r7, #12]
 8001550:	60b9      	str	r1, [r7, #8]
 8001552:	4613      	mov	r3, r2
 8001554:	71fb      	strb	r3, [r7, #7]
	/* Write characters */
	while (*str) {
 8001556:	e012      	b.n	800157e <SSD1306_Puts+0x36>
		/* Write character by character */
		if (SSD1306_Putc(*str, Font, color) != *str) {
 8001558:	68fb      	ldr	r3, [r7, #12]
 800155a:	781b      	ldrb	r3, [r3, #0]
 800155c:	79fa      	ldrb	r2, [r7, #7]
 800155e:	68b9      	ldr	r1, [r7, #8]
 8001560:	4618      	mov	r0, r3
 8001562:	f7ff ff71 	bl	8001448 <SSD1306_Putc>
 8001566:	4603      	mov	r3, r0
 8001568:	461a      	mov	r2, r3
 800156a:	68fb      	ldr	r3, [r7, #12]
 800156c:	781b      	ldrb	r3, [r3, #0]
 800156e:	429a      	cmp	r2, r3
 8001570:	d002      	beq.n	8001578 <SSD1306_Puts+0x30>
			/* Return error */
			return *str;
 8001572:	68fb      	ldr	r3, [r7, #12]
 8001574:	781b      	ldrb	r3, [r3, #0]
 8001576:	e008      	b.n	800158a <SSD1306_Puts+0x42>
		}
		
		/* Increase string pointer */
		str++;
 8001578:	68fb      	ldr	r3, [r7, #12]
 800157a:	3301      	adds	r3, #1
 800157c:	60fb      	str	r3, [r7, #12]
	while (*str) {
 800157e:	68fb      	ldr	r3, [r7, #12]
 8001580:	781b      	ldrb	r3, [r3, #0]
 8001582:	2b00      	cmp	r3, #0
 8001584:	d1e8      	bne.n	8001558 <SSD1306_Puts+0x10>
	}
	
	/* Everything OK, zero should be returned */
	return *str;
 8001586:	68fb      	ldr	r3, [r7, #12]
 8001588:	781b      	ldrb	r3, [r3, #0]
}
 800158a:	4618      	mov	r0, r3
 800158c:	3710      	adds	r7, #16
 800158e:	46bd      	mov	sp, r7
 8001590:	bd80      	pop	{r7, pc}

08001592 <SSD1306_Clear>:
}
 


void SSD1306_Clear (void)
{
 8001592:	b580      	push	{r7, lr}
 8001594:	af00      	add	r7, sp, #0
	SSD1306_Fill (0);
 8001596:	2000      	movs	r0, #0
 8001598:	f7ff fec8 	bl	800132c <SSD1306_Fill>
    SSD1306_UpdateScreen();
 800159c:	f7ff fe98 	bl	80012d0 <SSD1306_UpdateScreen>
}
 80015a0:	bf00      	nop
 80015a2:	bd80      	pop	{r7, pc}

080015a4 <ssd1306_I2C_Init>:
//  _| |_ / /_| |____ 
// |_____|____|\_____|
//
/////////////////////////////////////////////////////////////////////////////////////////////////////////

void ssd1306_I2C_Init() {
 80015a4:	b480      	push	{r7}
 80015a6:	b083      	sub	sp, #12
 80015a8:	af00      	add	r7, sp, #0
	//MX_I2C1_Init();
	uint32_t p = 250000;
 80015aa:	4b07      	ldr	r3, [pc, #28]	; (80015c8 <ssd1306_I2C_Init+0x24>)
 80015ac:	607b      	str	r3, [r7, #4]
	while(p>0)
 80015ae:	e002      	b.n	80015b6 <ssd1306_I2C_Init+0x12>
		p--;
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	3b01      	subs	r3, #1
 80015b4:	607b      	str	r3, [r7, #4]
	while(p>0)
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	2b00      	cmp	r3, #0
 80015ba:	d1f9      	bne.n	80015b0 <ssd1306_I2C_Init+0xc>
	//HAL_I2C_DeInit(&hi2c1);
	//p = 250000;
	//while(p>0)
	//	p--;
	//MX_I2C1_Init();
}
 80015bc:	bf00      	nop
 80015be:	370c      	adds	r7, #12
 80015c0:	46bd      	mov	sp, r7
 80015c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015c6:	4770      	bx	lr
 80015c8:	0003d090 	.word	0x0003d090

080015cc <ssd1306_I2C_WriteMulti>:

void ssd1306_I2C_WriteMulti(uint8_t address, uint8_t reg, uint8_t* data, uint16_t count) {
 80015cc:	b590      	push	{r4, r7, lr}
 80015ce:	b0c7      	sub	sp, #284	; 0x11c
 80015d0:	af02      	add	r7, sp, #8
 80015d2:	4604      	mov	r4, r0
 80015d4:	4608      	mov	r0, r1
 80015d6:	4639      	mov	r1, r7
 80015d8:	600a      	str	r2, [r1, #0]
 80015da:	4619      	mov	r1, r3
 80015dc:	1dfb      	adds	r3, r7, #7
 80015de:	4622      	mov	r2, r4
 80015e0:	701a      	strb	r2, [r3, #0]
 80015e2:	1dbb      	adds	r3, r7, #6
 80015e4:	4602      	mov	r2, r0
 80015e6:	701a      	strb	r2, [r3, #0]
 80015e8:	1d3b      	adds	r3, r7, #4
 80015ea:	460a      	mov	r2, r1
 80015ec:	801a      	strh	r2, [r3, #0]
uint8_t dt[256];
dt[0] = reg;
 80015ee:	f107 030c 	add.w	r3, r7, #12
 80015f2:	1dba      	adds	r2, r7, #6
 80015f4:	7812      	ldrb	r2, [r2, #0]
 80015f6:	701a      	strb	r2, [r3, #0]
uint8_t i;
for(i = 0; i < count; i++)
 80015f8:	2300      	movs	r3, #0
 80015fa:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
 80015fe:	e010      	b.n	8001622 <ssd1306_I2C_WriteMulti+0x56>
dt[i+1] = data[i];
 8001600:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8001604:	463a      	mov	r2, r7
 8001606:	6812      	ldr	r2, [r2, #0]
 8001608:	441a      	add	r2, r3
 800160a:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 800160e:	3301      	adds	r3, #1
 8001610:	7811      	ldrb	r1, [r2, #0]
 8001612:	f107 020c 	add.w	r2, r7, #12
 8001616:	54d1      	strb	r1, [r2, r3]
for(i = 0; i < count; i++)
 8001618:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 800161c:	3301      	adds	r3, #1
 800161e:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
 8001622:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8001626:	b29b      	uxth	r3, r3
 8001628:	1d3a      	adds	r2, r7, #4
 800162a:	8812      	ldrh	r2, [r2, #0]
 800162c:	429a      	cmp	r2, r3
 800162e:	d8e7      	bhi.n	8001600 <ssd1306_I2C_WriteMulti+0x34>
HAL_I2C_Master_Transmit(&hi2c1, address, dt, count+1, 10);
 8001630:	1dfb      	adds	r3, r7, #7
 8001632:	781b      	ldrb	r3, [r3, #0]
 8001634:	b299      	uxth	r1, r3
 8001636:	1d3b      	adds	r3, r7, #4
 8001638:	881b      	ldrh	r3, [r3, #0]
 800163a:	3301      	adds	r3, #1
 800163c:	b298      	uxth	r0, r3
 800163e:	f107 020c 	add.w	r2, r7, #12
 8001642:	230a      	movs	r3, #10
 8001644:	9300      	str	r3, [sp, #0]
 8001646:	4603      	mov	r3, r0
 8001648:	4803      	ldr	r0, [pc, #12]	; (8001658 <ssd1306_I2C_WriteMulti+0x8c>)
 800164a:	f002 f9a5 	bl	8003998 <HAL_I2C_Master_Transmit>
}
 800164e:	bf00      	nop
 8001650:	f507 778a 	add.w	r7, r7, #276	; 0x114
 8001654:	46bd      	mov	sp, r7
 8001656:	bd90      	pop	{r4, r7, pc}
 8001658:	200006ec 	.word	0x200006ec

0800165c <ssd1306_I2C_Write>:


void ssd1306_I2C_Write(uint8_t address, uint8_t reg, uint8_t data) {
 800165c:	b580      	push	{r7, lr}
 800165e:	b086      	sub	sp, #24
 8001660:	af02      	add	r7, sp, #8
 8001662:	4603      	mov	r3, r0
 8001664:	71fb      	strb	r3, [r7, #7]
 8001666:	460b      	mov	r3, r1
 8001668:	71bb      	strb	r3, [r7, #6]
 800166a:	4613      	mov	r3, r2
 800166c:	717b      	strb	r3, [r7, #5]
	uint8_t dt[2];
	dt[0] = reg;
 800166e:	79bb      	ldrb	r3, [r7, #6]
 8001670:	733b      	strb	r3, [r7, #12]
	dt[1] = data;
 8001672:	797b      	ldrb	r3, [r7, #5]
 8001674:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(&hi2c1, address, dt, 2, 10);
 8001676:	79fb      	ldrb	r3, [r7, #7]
 8001678:	b299      	uxth	r1, r3
 800167a:	f107 020c 	add.w	r2, r7, #12
 800167e:	230a      	movs	r3, #10
 8001680:	9300      	str	r3, [sp, #0]
 8001682:	2302      	movs	r3, #2
 8001684:	4803      	ldr	r0, [pc, #12]	; (8001694 <ssd1306_I2C_Write+0x38>)
 8001686:	f002 f987 	bl	8003998 <HAL_I2C_Master_Transmit>
}
 800168a:	bf00      	nop
 800168c:	3710      	adds	r7, #16
 800168e:	46bd      	mov	sp, r7
 8001690:	bd80      	pop	{r7, pc}
 8001692:	bf00      	nop
 8001694:	200006ec 	.word	0x200006ec

08001698 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001698:	b580      	push	{r7, lr}
 800169a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800169c:	f001 faf0 	bl	8002c80 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80016a0:	f000 f828 	bl	80016f4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80016a4:	f000 fc66 	bl	8001f74 <MX_GPIO_Init>
  MX_TIM2_Init();
 80016a8:	f000 f97e 	bl	80019a8 <MX_TIM2_Init>
  MX_TIM3_Init();
 80016ac:	f000 f9f0 	bl	8001a90 <MX_TIM3_Init>
  MX_USART2_UART_Init();
 80016b0:	f000 fc0c 	bl	8001ecc <MX_USART2_UART_Init>
  MX_DAC_Init();
 80016b4:	f000 f8bc 	bl	8001830 <MX_DAC_Init>
  MX_I2C1_Init();
 80016b8:	f000 f8e4 	bl	8001884 <MX_I2C1_Init>
  MX_I2C3_Init();
 80016bc:	f000 f910 	bl	80018e0 <MX_I2C3_Init>
  MX_SPI1_Init();
 80016c0:	f000 f93c 	bl	800193c <MX_SPI1_Init>
  MX_TIM4_Init();
 80016c4:	f000 fa38 	bl	8001b38 <MX_TIM4_Init>
  MX_TIM5_Init();
 80016c8:	f000 faac 	bl	8001c24 <MX_TIM5_Init>
  MX_TIM6_Init();
 80016cc:	f000 fafe 	bl	8001ccc <MX_TIM6_Init>
  MX_TIM9_Init();
 80016d0:	f000 fb32 	bl	8001d38 <MX_TIM9_Init>
  MX_TIM12_Init();
 80016d4:	f000 fbb6 	bl	8001e44 <MX_TIM12_Init>
  MX_TIM11_Init();
 80016d8:	f000 fb68 	bl	8001dac <MX_TIM11_Init>
  MX_USART3_UART_Init();
 80016dc:	f000 fc20 	bl	8001f20 <MX_USART3_UART_Init>
  MX_CAN1_Init();
 80016e0:	f000 f872 	bl	80017c8 <MX_CAN1_Init>
  /* USER CODE BEGIN 2 */
  //Start the timer
  HAL_TIM_Base_Start_IT(&htim6);
 80016e4:	4802      	ldr	r0, [pc, #8]	; (80016f0 <main+0x58>)
 80016e6:	f003 fa7e 	bl	8004be6 <HAL_TIM_Base_Start_IT>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  appMain(); // will not return from here
 80016ea:	f7ff fbdd 	bl	8000ea8 <appMain>
 80016ee:	e7fc      	b.n	80016ea <main+0x52>
 80016f0:	20000814 	.word	0x20000814

080016f4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80016f4:	b580      	push	{r7, lr}
 80016f6:	b094      	sub	sp, #80	; 0x50
 80016f8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80016fa:	f107 0320 	add.w	r3, r7, #32
 80016fe:	2230      	movs	r2, #48	; 0x30
 8001700:	2100      	movs	r1, #0
 8001702:	4618      	mov	r0, r3
 8001704:	f005 f876 	bl	80067f4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001708:	f107 030c 	add.w	r3, r7, #12
 800170c:	2200      	movs	r2, #0
 800170e:	601a      	str	r2, [r3, #0]
 8001710:	605a      	str	r2, [r3, #4]
 8001712:	609a      	str	r2, [r3, #8]
 8001714:	60da      	str	r2, [r3, #12]
 8001716:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001718:	2300      	movs	r3, #0
 800171a:	60bb      	str	r3, [r7, #8]
 800171c:	4b28      	ldr	r3, [pc, #160]	; (80017c0 <SystemClock_Config+0xcc>)
 800171e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001720:	4a27      	ldr	r2, [pc, #156]	; (80017c0 <SystemClock_Config+0xcc>)
 8001722:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001726:	6413      	str	r3, [r2, #64]	; 0x40
 8001728:	4b25      	ldr	r3, [pc, #148]	; (80017c0 <SystemClock_Config+0xcc>)
 800172a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800172c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001730:	60bb      	str	r3, [r7, #8]
 8001732:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001734:	2300      	movs	r3, #0
 8001736:	607b      	str	r3, [r7, #4]
 8001738:	4b22      	ldr	r3, [pc, #136]	; (80017c4 <SystemClock_Config+0xd0>)
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	4a21      	ldr	r2, [pc, #132]	; (80017c4 <SystemClock_Config+0xd0>)
 800173e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001742:	6013      	str	r3, [r2, #0]
 8001744:	4b1f      	ldr	r3, [pc, #124]	; (80017c4 <SystemClock_Config+0xd0>)
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800174c:	607b      	str	r3, [r7, #4]
 800174e:	687b      	ldr	r3, [r7, #4]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001750:	2302      	movs	r3, #2
 8001752:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001754:	2301      	movs	r3, #1
 8001756:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001758:	2310      	movs	r3, #16
 800175a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800175c:	2302      	movs	r3, #2
 800175e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001760:	2300      	movs	r3, #0
 8001762:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001764:	2308      	movs	r3, #8
 8001766:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 100;
 8001768:	2364      	movs	r3, #100	; 0x64
 800176a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800176c:	2302      	movs	r3, #2
 800176e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001770:	2304      	movs	r3, #4
 8001772:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001774:	f107 0320 	add.w	r3, r7, #32
 8001778:	4618      	mov	r0, r3
 800177a:	f002 fd43 	bl	8004204 <HAL_RCC_OscConfig>
 800177e:	4603      	mov	r3, r0
 8001780:	2b00      	cmp	r3, #0
 8001782:	d001      	beq.n	8001788 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001784:	f000 fd5f 	bl	8002246 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001788:	230f      	movs	r3, #15
 800178a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800178c:	2302      	movs	r3, #2
 800178e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001790:	2300      	movs	r3, #0
 8001792:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001794:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001798:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800179a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800179e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80017a0:	f107 030c 	add.w	r3, r7, #12
 80017a4:	2103      	movs	r1, #3
 80017a6:	4618      	mov	r0, r3
 80017a8:	f002 ff9c 	bl	80046e4 <HAL_RCC_ClockConfig>
 80017ac:	4603      	mov	r3, r0
 80017ae:	2b00      	cmp	r3, #0
 80017b0:	d001      	beq.n	80017b6 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80017b2:	f000 fd48 	bl	8002246 <Error_Handler>
  }
}
 80017b6:	bf00      	nop
 80017b8:	3750      	adds	r7, #80	; 0x50
 80017ba:	46bd      	mov	sp, r7
 80017bc:	bd80      	pop	{r7, pc}
 80017be:	bf00      	nop
 80017c0:	40023800 	.word	0x40023800
 80017c4:	40007000 	.word	0x40007000

080017c8 <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 80017c8:	b580      	push	{r7, lr}
 80017ca:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 80017cc:	4b16      	ldr	r3, [pc, #88]	; (8001828 <MX_CAN1_Init+0x60>)
 80017ce:	4a17      	ldr	r2, [pc, #92]	; (800182c <MX_CAN1_Init+0x64>)
 80017d0:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 16;
 80017d2:	4b15      	ldr	r3, [pc, #84]	; (8001828 <MX_CAN1_Init+0x60>)
 80017d4:	2210      	movs	r2, #16
 80017d6:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 80017d8:	4b13      	ldr	r3, [pc, #76]	; (8001828 <MX_CAN1_Init+0x60>)
 80017da:	2200      	movs	r2, #0
 80017dc:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 80017de:	4b12      	ldr	r3, [pc, #72]	; (8001828 <MX_CAN1_Init+0x60>)
 80017e0:	2200      	movs	r2, #0
 80017e2:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_1TQ;
 80017e4:	4b10      	ldr	r3, [pc, #64]	; (8001828 <MX_CAN1_Init+0x60>)
 80017e6:	2200      	movs	r2, #0
 80017e8:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_1TQ;
 80017ea:	4b0f      	ldr	r3, [pc, #60]	; (8001828 <MX_CAN1_Init+0x60>)
 80017ec:	2200      	movs	r2, #0
 80017ee:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 80017f0:	4b0d      	ldr	r3, [pc, #52]	; (8001828 <MX_CAN1_Init+0x60>)
 80017f2:	2200      	movs	r2, #0
 80017f4:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 80017f6:	4b0c      	ldr	r3, [pc, #48]	; (8001828 <MX_CAN1_Init+0x60>)
 80017f8:	2200      	movs	r2, #0
 80017fa:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 80017fc:	4b0a      	ldr	r3, [pc, #40]	; (8001828 <MX_CAN1_Init+0x60>)
 80017fe:	2200      	movs	r2, #0
 8001800:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 8001802:	4b09      	ldr	r3, [pc, #36]	; (8001828 <MX_CAN1_Init+0x60>)
 8001804:	2200      	movs	r2, #0
 8001806:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8001808:	4b07      	ldr	r3, [pc, #28]	; (8001828 <MX_CAN1_Init+0x60>)
 800180a:	2200      	movs	r2, #0
 800180c:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 800180e:	4b06      	ldr	r3, [pc, #24]	; (8001828 <MX_CAN1_Init+0x60>)
 8001810:	2200      	movs	r2, #0
 8001812:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8001814:	4804      	ldr	r0, [pc, #16]	; (8001828 <MX_CAN1_Init+0x60>)
 8001816:	f001 fac7 	bl	8002da8 <HAL_CAN_Init>
 800181a:	4603      	mov	r3, r0
 800181c:	2b00      	cmp	r3, #0
 800181e:	d001      	beq.n	8001824 <MX_CAN1_Init+0x5c>
  {
    Error_Handler();
 8001820:	f000 fd11 	bl	8002246 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 8001824:	bf00      	nop
 8001826:	bd80      	pop	{r7, pc}
 8001828:	2000096c 	.word	0x2000096c
 800182c:	40006400 	.word	0x40006400

08001830 <MX_DAC_Init>:
  * @brief DAC Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC_Init(void)
{
 8001830:	b580      	push	{r7, lr}
 8001832:	b082      	sub	sp, #8
 8001834:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC_Init 0 */

  /* USER CODE END DAC_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8001836:	463b      	mov	r3, r7
 8001838:	2200      	movs	r2, #0
 800183a:	601a      	str	r2, [r3, #0]
 800183c:	605a      	str	r2, [r3, #4]
  /* USER CODE BEGIN DAC_Init 1 */

  /* USER CODE END DAC_Init 1 */
  /** DAC Initialization 
  */
  hdac.Instance = DAC;
 800183e:	4b0f      	ldr	r3, [pc, #60]	; (800187c <MX_DAC_Init+0x4c>)
 8001840:	4a0f      	ldr	r2, [pc, #60]	; (8001880 <MX_DAC_Init+0x50>)
 8001842:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac) != HAL_OK)
 8001844:	480d      	ldr	r0, [pc, #52]	; (800187c <MX_DAC_Init+0x4c>)
 8001846:	f001 fcbc 	bl	80031c2 <HAL_DAC_Init>
 800184a:	4603      	mov	r3, r0
 800184c:	2b00      	cmp	r3, #0
 800184e:	d001      	beq.n	8001854 <MX_DAC_Init+0x24>
  {
    Error_Handler();
 8001850:	f000 fcf9 	bl	8002246 <Error_Handler>
  }
  /** DAC channel OUT1 config 
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 8001854:	2300      	movs	r3, #0
 8001856:	603b      	str	r3, [r7, #0]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8001858:	2300      	movs	r3, #0
 800185a:	607b      	str	r3, [r7, #4]
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 800185c:	463b      	mov	r3, r7
 800185e:	2200      	movs	r2, #0
 8001860:	4619      	mov	r1, r3
 8001862:	4806      	ldr	r0, [pc, #24]	; (800187c <MX_DAC_Init+0x4c>)
 8001864:	f001 fd23 	bl	80032ae <HAL_DAC_ConfigChannel>
 8001868:	4603      	mov	r3, r0
 800186a:	2b00      	cmp	r3, #0
 800186c:	d001      	beq.n	8001872 <MX_DAC_Init+0x42>
  {
    Error_Handler();
 800186e:	f000 fcea 	bl	8002246 <Error_Handler>
  }
  /* USER CODE BEGIN DAC_Init 2 */

  /* USER CODE END DAC_Init 2 */

}
 8001872:	bf00      	nop
 8001874:	3708      	adds	r7, #8
 8001876:	46bd      	mov	sp, r7
 8001878:	bd80      	pop	{r7, pc}
 800187a:	bf00      	nop
 800187c:	20000800 	.word	0x20000800
 8001880:	40007400 	.word	0x40007400

08001884 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001884:	b580      	push	{r7, lr}
 8001886:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001888:	4b12      	ldr	r3, [pc, #72]	; (80018d4 <MX_I2C1_Init+0x50>)
 800188a:	4a13      	ldr	r2, [pc, #76]	; (80018d8 <MX_I2C1_Init+0x54>)
 800188c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 800188e:	4b11      	ldr	r3, [pc, #68]	; (80018d4 <MX_I2C1_Init+0x50>)
 8001890:	4a12      	ldr	r2, [pc, #72]	; (80018dc <MX_I2C1_Init+0x58>)
 8001892:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001894:	4b0f      	ldr	r3, [pc, #60]	; (80018d4 <MX_I2C1_Init+0x50>)
 8001896:	2200      	movs	r2, #0
 8001898:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800189a:	4b0e      	ldr	r3, [pc, #56]	; (80018d4 <MX_I2C1_Init+0x50>)
 800189c:	2200      	movs	r2, #0
 800189e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80018a0:	4b0c      	ldr	r3, [pc, #48]	; (80018d4 <MX_I2C1_Init+0x50>)
 80018a2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80018a6:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80018a8:	4b0a      	ldr	r3, [pc, #40]	; (80018d4 <MX_I2C1_Init+0x50>)
 80018aa:	2200      	movs	r2, #0
 80018ac:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80018ae:	4b09      	ldr	r3, [pc, #36]	; (80018d4 <MX_I2C1_Init+0x50>)
 80018b0:	2200      	movs	r2, #0
 80018b2:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80018b4:	4b07      	ldr	r3, [pc, #28]	; (80018d4 <MX_I2C1_Init+0x50>)
 80018b6:	2200      	movs	r2, #0
 80018b8:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80018ba:	4b06      	ldr	r3, [pc, #24]	; (80018d4 <MX_I2C1_Init+0x50>)
 80018bc:	2200      	movs	r2, #0
 80018be:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80018c0:	4804      	ldr	r0, [pc, #16]	; (80018d4 <MX_I2C1_Init+0x50>)
 80018c2:	f001 ff31 	bl	8003728 <HAL_I2C_Init>
 80018c6:	4603      	mov	r3, r0
 80018c8:	2b00      	cmp	r3, #0
 80018ca:	d001      	beq.n	80018d0 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80018cc:	f000 fcbb 	bl	8002246 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80018d0:	bf00      	nop
 80018d2:	bd80      	pop	{r7, pc}
 80018d4:	200006ec 	.word	0x200006ec
 80018d8:	40005400 	.word	0x40005400
 80018dc:	00061a80 	.word	0x00061a80

080018e0 <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 80018e0:	b580      	push	{r7, lr}
 80018e2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 80018e4:	4b12      	ldr	r3, [pc, #72]	; (8001930 <MX_I2C3_Init+0x50>)
 80018e6:	4a13      	ldr	r2, [pc, #76]	; (8001934 <MX_I2C3_Init+0x54>)
 80018e8:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 100000;
 80018ea:	4b11      	ldr	r3, [pc, #68]	; (8001930 <MX_I2C3_Init+0x50>)
 80018ec:	4a12      	ldr	r2, [pc, #72]	; (8001938 <MX_I2C3_Init+0x58>)
 80018ee:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80018f0:	4b0f      	ldr	r3, [pc, #60]	; (8001930 <MX_I2C3_Init+0x50>)
 80018f2:	2200      	movs	r2, #0
 80018f4:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 80018f6:	4b0e      	ldr	r3, [pc, #56]	; (8001930 <MX_I2C3_Init+0x50>)
 80018f8:	2200      	movs	r2, #0
 80018fa:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80018fc:	4b0c      	ldr	r3, [pc, #48]	; (8001930 <MX_I2C3_Init+0x50>)
 80018fe:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001902:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001904:	4b0a      	ldr	r3, [pc, #40]	; (8001930 <MX_I2C3_Init+0x50>)
 8001906:	2200      	movs	r2, #0
 8001908:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 800190a:	4b09      	ldr	r3, [pc, #36]	; (8001930 <MX_I2C3_Init+0x50>)
 800190c:	2200      	movs	r2, #0
 800190e:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001910:	4b07      	ldr	r3, [pc, #28]	; (8001930 <MX_I2C3_Init+0x50>)
 8001912:	2200      	movs	r2, #0
 8001914:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001916:	4b06      	ldr	r3, [pc, #24]	; (8001930 <MX_I2C3_Init+0x50>)
 8001918:	2200      	movs	r2, #0
 800191a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 800191c:	4804      	ldr	r0, [pc, #16]	; (8001930 <MX_I2C3_Init+0x50>)
 800191e:	f001 ff03 	bl	8003728 <HAL_I2C_Init>
 8001922:	4603      	mov	r3, r0
 8001924:	2b00      	cmp	r3, #0
 8001926:	d001      	beq.n	800192c <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 8001928:	f000 fc8d 	bl	8002246 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 800192c:	bf00      	nop
 800192e:	bd80      	pop	{r7, pc}
 8001930:	20000618 	.word	0x20000618
 8001934:	40005c00 	.word	0x40005c00
 8001938:	000186a0 	.word	0x000186a0

0800193c <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 800193c:	b580      	push	{r7, lr}
 800193e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001940:	4b17      	ldr	r3, [pc, #92]	; (80019a0 <MX_SPI1_Init+0x64>)
 8001942:	4a18      	ldr	r2, [pc, #96]	; (80019a4 <MX_SPI1_Init+0x68>)
 8001944:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001946:	4b16      	ldr	r3, [pc, #88]	; (80019a0 <MX_SPI1_Init+0x64>)
 8001948:	f44f 7282 	mov.w	r2, #260	; 0x104
 800194c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800194e:	4b14      	ldr	r3, [pc, #80]	; (80019a0 <MX_SPI1_Init+0x64>)
 8001950:	2200      	movs	r2, #0
 8001952:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001954:	4b12      	ldr	r3, [pc, #72]	; (80019a0 <MX_SPI1_Init+0x64>)
 8001956:	2200      	movs	r2, #0
 8001958:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800195a:	4b11      	ldr	r3, [pc, #68]	; (80019a0 <MX_SPI1_Init+0x64>)
 800195c:	2200      	movs	r2, #0
 800195e:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001960:	4b0f      	ldr	r3, [pc, #60]	; (80019a0 <MX_SPI1_Init+0x64>)
 8001962:	2200      	movs	r2, #0
 8001964:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001966:	4b0e      	ldr	r3, [pc, #56]	; (80019a0 <MX_SPI1_Init+0x64>)
 8001968:	f44f 7200 	mov.w	r2, #512	; 0x200
 800196c:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800196e:	4b0c      	ldr	r3, [pc, #48]	; (80019a0 <MX_SPI1_Init+0x64>)
 8001970:	2200      	movs	r2, #0
 8001972:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001974:	4b0a      	ldr	r3, [pc, #40]	; (80019a0 <MX_SPI1_Init+0x64>)
 8001976:	2200      	movs	r2, #0
 8001978:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800197a:	4b09      	ldr	r3, [pc, #36]	; (80019a0 <MX_SPI1_Init+0x64>)
 800197c:	2200      	movs	r2, #0
 800197e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001980:	4b07      	ldr	r3, [pc, #28]	; (80019a0 <MX_SPI1_Init+0x64>)
 8001982:	2200      	movs	r2, #0
 8001984:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8001986:	4b06      	ldr	r3, [pc, #24]	; (80019a0 <MX_SPI1_Init+0x64>)
 8001988:	220a      	movs	r2, #10
 800198a:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800198c:	4804      	ldr	r0, [pc, #16]	; (80019a0 <MX_SPI1_Init+0x64>)
 800198e:	f003 f89b 	bl	8004ac8 <HAL_SPI_Init>
 8001992:	4603      	mov	r3, r0
 8001994:	2b00      	cmp	r3, #0
 8001996:	d001      	beq.n	800199c <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8001998:	f000 fc55 	bl	8002246 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800199c:	bf00      	nop
 800199e:	bd80      	pop	{r7, pc}
 80019a0:	20000894 	.word	0x20000894
 80019a4:	40013000 	.word	0x40013000

080019a8 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80019a8:	b580      	push	{r7, lr}
 80019aa:	b08e      	sub	sp, #56	; 0x38
 80019ac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80019ae:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80019b2:	2200      	movs	r2, #0
 80019b4:	601a      	str	r2, [r3, #0]
 80019b6:	605a      	str	r2, [r3, #4]
 80019b8:	609a      	str	r2, [r3, #8]
 80019ba:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80019bc:	f107 0320 	add.w	r3, r7, #32
 80019c0:	2200      	movs	r2, #0
 80019c2:	601a      	str	r2, [r3, #0]
 80019c4:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80019c6:	1d3b      	adds	r3, r7, #4
 80019c8:	2200      	movs	r2, #0
 80019ca:	601a      	str	r2, [r3, #0]
 80019cc:	605a      	str	r2, [r3, #4]
 80019ce:	609a      	str	r2, [r3, #8]
 80019d0:	60da      	str	r2, [r3, #12]
 80019d2:	611a      	str	r2, [r3, #16]
 80019d4:	615a      	str	r2, [r3, #20]
 80019d6:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80019d8:	4b2c      	ldr	r3, [pc, #176]	; (8001a8c <MX_TIM2_Init+0xe4>)
 80019da:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80019de:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 9;
 80019e0:	4b2a      	ldr	r3, [pc, #168]	; (8001a8c <MX_TIM2_Init+0xe4>)
 80019e2:	2209      	movs	r2, #9
 80019e4:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80019e6:	4b29      	ldr	r3, [pc, #164]	; (8001a8c <MX_TIM2_Init+0xe4>)
 80019e8:	2200      	movs	r2, #0
 80019ea:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 19-1;
 80019ec:	4b27      	ldr	r3, [pc, #156]	; (8001a8c <MX_TIM2_Init+0xe4>)
 80019ee:	2212      	movs	r2, #18
 80019f0:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80019f2:	4b26      	ldr	r3, [pc, #152]	; (8001a8c <MX_TIM2_Init+0xe4>)
 80019f4:	2200      	movs	r2, #0
 80019f6:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80019f8:	4b24      	ldr	r3, [pc, #144]	; (8001a8c <MX_TIM2_Init+0xe4>)
 80019fa:	2200      	movs	r2, #0
 80019fc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80019fe:	4823      	ldr	r0, [pc, #140]	; (8001a8c <MX_TIM2_Init+0xe4>)
 8001a00:	f003 f8c6 	bl	8004b90 <HAL_TIM_Base_Init>
 8001a04:	4603      	mov	r3, r0
 8001a06:	2b00      	cmp	r3, #0
 8001a08:	d001      	beq.n	8001a0e <MX_TIM2_Init+0x66>
  {
    Error_Handler();
 8001a0a:	f000 fc1c 	bl	8002246 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001a0e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001a12:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001a14:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001a18:	4619      	mov	r1, r3
 8001a1a:	481c      	ldr	r0, [pc, #112]	; (8001a8c <MX_TIM2_Init+0xe4>)
 8001a1c:	f003 fbd0 	bl	80051c0 <HAL_TIM_ConfigClockSource>
 8001a20:	4603      	mov	r3, r0
 8001a22:	2b00      	cmp	r3, #0
 8001a24:	d001      	beq.n	8001a2a <MX_TIM2_Init+0x82>
  {
    Error_Handler();
 8001a26:	f000 fc0e 	bl	8002246 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8001a2a:	4818      	ldr	r0, [pc, #96]	; (8001a8c <MX_TIM2_Init+0xe4>)
 8001a2c:	f003 f8ff 	bl	8004c2e <HAL_TIM_PWM_Init>
 8001a30:	4603      	mov	r3, r0
 8001a32:	2b00      	cmp	r3, #0
 8001a34:	d001      	beq.n	8001a3a <MX_TIM2_Init+0x92>
  {
    Error_Handler();
 8001a36:	f000 fc06 	bl	8002246 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001a3a:	2300      	movs	r3, #0
 8001a3c:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001a3e:	2300      	movs	r3, #0
 8001a40:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001a42:	f107 0320 	add.w	r3, r7, #32
 8001a46:	4619      	mov	r1, r3
 8001a48:	4810      	ldr	r0, [pc, #64]	; (8001a8c <MX_TIM2_Init+0xe4>)
 8001a4a:	f003 ffa9 	bl	80059a0 <HAL_TIMEx_MasterConfigSynchronization>
 8001a4e:	4603      	mov	r3, r0
 8001a50:	2b00      	cmp	r3, #0
 8001a52:	d001      	beq.n	8001a58 <MX_TIM2_Init+0xb0>
  {
    Error_Handler();
 8001a54:	f000 fbf7 	bl	8002246 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001a58:	2360      	movs	r3, #96	; 0x60
 8001a5a:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001a5c:	2300      	movs	r3, #0
 8001a5e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001a60:	2300      	movs	r3, #0
 8001a62:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001a64:	2300      	movs	r3, #0
 8001a66:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001a68:	1d3b      	adds	r3, r7, #4
 8001a6a:	2208      	movs	r2, #8
 8001a6c:	4619      	mov	r1, r3
 8001a6e:	4807      	ldr	r0, [pc, #28]	; (8001a8c <MX_TIM2_Init+0xe4>)
 8001a70:	f003 fae0 	bl	8005034 <HAL_TIM_PWM_ConfigChannel>
 8001a74:	4603      	mov	r3, r0
 8001a76:	2b00      	cmp	r3, #0
 8001a78:	d001      	beq.n	8001a7e <MX_TIM2_Init+0xd6>
  {
    Error_Handler();
 8001a7a:	f000 fbe4 	bl	8002246 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8001a7e:	4803      	ldr	r0, [pc, #12]	; (8001a8c <MX_TIM2_Init+0xe4>)
 8001a80:	f000 fed2 	bl	8002828 <HAL_TIM_MspPostInit>

}
 8001a84:	bf00      	nop
 8001a86:	3738      	adds	r7, #56	; 0x38
 8001a88:	46bd      	mov	sp, r7
 8001a8a:	bd80      	pop	{r7, pc}
 8001a8c:	200008ec 	.word	0x200008ec

08001a90 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001a90:	b580      	push	{r7, lr}
 8001a92:	b08c      	sub	sp, #48	; 0x30
 8001a94:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001a96:	f107 030c 	add.w	r3, r7, #12
 8001a9a:	2224      	movs	r2, #36	; 0x24
 8001a9c:	2100      	movs	r1, #0
 8001a9e:	4618      	mov	r0, r3
 8001aa0:	f004 fea8 	bl	80067f4 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001aa4:	1d3b      	adds	r3, r7, #4
 8001aa6:	2200      	movs	r2, #0
 8001aa8:	601a      	str	r2, [r3, #0]
 8001aaa:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001aac:	4b20      	ldr	r3, [pc, #128]	; (8001b30 <MX_TIM3_Init+0xa0>)
 8001aae:	4a21      	ldr	r2, [pc, #132]	; (8001b34 <MX_TIM3_Init+0xa4>)
 8001ab0:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8001ab2:	4b1f      	ldr	r3, [pc, #124]	; (8001b30 <MX_TIM3_Init+0xa0>)
 8001ab4:	2200      	movs	r2, #0
 8001ab6:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001ab8:	4b1d      	ldr	r3, [pc, #116]	; (8001b30 <MX_TIM3_Init+0xa0>)
 8001aba:	2200      	movs	r2, #0
 8001abc:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 0;
 8001abe:	4b1c      	ldr	r3, [pc, #112]	; (8001b30 <MX_TIM3_Init+0xa0>)
 8001ac0:	2200      	movs	r2, #0
 8001ac2:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001ac4:	4b1a      	ldr	r3, [pc, #104]	; (8001b30 <MX_TIM3_Init+0xa0>)
 8001ac6:	2200      	movs	r2, #0
 8001ac8:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001aca:	4b19      	ldr	r3, [pc, #100]	; (8001b30 <MX_TIM3_Init+0xa0>)
 8001acc:	2200      	movs	r2, #0
 8001ace:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8001ad0:	2301      	movs	r3, #1
 8001ad2:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001ad4:	2300      	movs	r3, #0
 8001ad6:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001ad8:	2301      	movs	r3, #1
 8001ada:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001adc:	2300      	movs	r3, #0
 8001ade:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8001ae0:	2300      	movs	r3, #0
 8001ae2:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001ae4:	2300      	movs	r3, #0
 8001ae6:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001ae8:	2301      	movs	r3, #1
 8001aea:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001aec:	2300      	movs	r3, #0
 8001aee:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8001af0:	2300      	movs	r3, #0
 8001af2:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8001af4:	f107 030c 	add.w	r3, r7, #12
 8001af8:	4619      	mov	r1, r3
 8001afa:	480d      	ldr	r0, [pc, #52]	; (8001b30 <MX_TIM3_Init+0xa0>)
 8001afc:	f003 f900 	bl	8004d00 <HAL_TIM_Encoder_Init>
 8001b00:	4603      	mov	r3, r0
 8001b02:	2b00      	cmp	r3, #0
 8001b04:	d001      	beq.n	8001b0a <MX_TIM3_Init+0x7a>
  {
    Error_Handler();
 8001b06:	f000 fb9e 	bl	8002246 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001b0a:	2300      	movs	r3, #0
 8001b0c:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001b0e:	2300      	movs	r3, #0
 8001b10:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001b12:	1d3b      	adds	r3, r7, #4
 8001b14:	4619      	mov	r1, r3
 8001b16:	4806      	ldr	r0, [pc, #24]	; (8001b30 <MX_TIM3_Init+0xa0>)
 8001b18:	f003 ff42 	bl	80059a0 <HAL_TIMEx_MasterConfigSynchronization>
 8001b1c:	4603      	mov	r3, r0
 8001b1e:	2b00      	cmp	r3, #0
 8001b20:	d001      	beq.n	8001b26 <MX_TIM3_Init+0x96>
  {
    Error_Handler();
 8001b22:	f000 fb90 	bl	8002246 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001b26:	bf00      	nop
 8001b28:	3730      	adds	r7, #48	; 0x30
 8001b2a:	46bd      	mov	sp, r7
 8001b2c:	bd80      	pop	{r7, pc}
 8001b2e:	bf00      	nop
 8001b30:	20000780 	.word	0x20000780
 8001b34:	40000400 	.word	0x40000400

08001b38 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8001b38:	b580      	push	{r7, lr}
 8001b3a:	b08e      	sub	sp, #56	; 0x38
 8001b3c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001b3e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001b42:	2200      	movs	r2, #0
 8001b44:	601a      	str	r2, [r3, #0]
 8001b46:	605a      	str	r2, [r3, #4]
 8001b48:	609a      	str	r2, [r3, #8]
 8001b4a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001b4c:	f107 0320 	add.w	r3, r7, #32
 8001b50:	2200      	movs	r2, #0
 8001b52:	601a      	str	r2, [r3, #0]
 8001b54:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001b56:	1d3b      	adds	r3, r7, #4
 8001b58:	2200      	movs	r2, #0
 8001b5a:	601a      	str	r2, [r3, #0]
 8001b5c:	605a      	str	r2, [r3, #4]
 8001b5e:	609a      	str	r2, [r3, #8]
 8001b60:	60da      	str	r2, [r3, #12]
 8001b62:	611a      	str	r2, [r3, #16]
 8001b64:	615a      	str	r2, [r3, #20]
 8001b66:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001b68:	4b2c      	ldr	r3, [pc, #176]	; (8001c1c <MX_TIM4_Init+0xe4>)
 8001b6a:	4a2d      	ldr	r2, [pc, #180]	; (8001c20 <MX_TIM4_Init+0xe8>)
 8001b6c:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 9;
 8001b6e:	4b2b      	ldr	r3, [pc, #172]	; (8001c1c <MX_TIM4_Init+0xe4>)
 8001b70:	2209      	movs	r2, #9
 8001b72:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001b74:	4b29      	ldr	r3, [pc, #164]	; (8001c1c <MX_TIM4_Init+0xe4>)
 8001b76:	2200      	movs	r2, #0
 8001b78:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 19-1;
 8001b7a:	4b28      	ldr	r3, [pc, #160]	; (8001c1c <MX_TIM4_Init+0xe4>)
 8001b7c:	2212      	movs	r2, #18
 8001b7e:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001b80:	4b26      	ldr	r3, [pc, #152]	; (8001c1c <MX_TIM4_Init+0xe4>)
 8001b82:	2200      	movs	r2, #0
 8001b84:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001b86:	4b25      	ldr	r3, [pc, #148]	; (8001c1c <MX_TIM4_Init+0xe4>)
 8001b88:	2200      	movs	r2, #0
 8001b8a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8001b8c:	4823      	ldr	r0, [pc, #140]	; (8001c1c <MX_TIM4_Init+0xe4>)
 8001b8e:	f002 ffff 	bl	8004b90 <HAL_TIM_Base_Init>
 8001b92:	4603      	mov	r3, r0
 8001b94:	2b00      	cmp	r3, #0
 8001b96:	d001      	beq.n	8001b9c <MX_TIM4_Init+0x64>
  {
    Error_Handler();
 8001b98:	f000 fb55 	bl	8002246 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001b9c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001ba0:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8001ba2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001ba6:	4619      	mov	r1, r3
 8001ba8:	481c      	ldr	r0, [pc, #112]	; (8001c1c <MX_TIM4_Init+0xe4>)
 8001baa:	f003 fb09 	bl	80051c0 <HAL_TIM_ConfigClockSource>
 8001bae:	4603      	mov	r3, r0
 8001bb0:	2b00      	cmp	r3, #0
 8001bb2:	d001      	beq.n	8001bb8 <MX_TIM4_Init+0x80>
  {
    Error_Handler();
 8001bb4:	f000 fb47 	bl	8002246 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8001bb8:	4818      	ldr	r0, [pc, #96]	; (8001c1c <MX_TIM4_Init+0xe4>)
 8001bba:	f003 f838 	bl	8004c2e <HAL_TIM_PWM_Init>
 8001bbe:	4603      	mov	r3, r0
 8001bc0:	2b00      	cmp	r3, #0
 8001bc2:	d001      	beq.n	8001bc8 <MX_TIM4_Init+0x90>
  {
    Error_Handler();
 8001bc4:	f000 fb3f 	bl	8002246 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001bc8:	2300      	movs	r3, #0
 8001bca:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001bcc:	2300      	movs	r3, #0
 8001bce:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001bd0:	f107 0320 	add.w	r3, r7, #32
 8001bd4:	4619      	mov	r1, r3
 8001bd6:	4811      	ldr	r0, [pc, #68]	; (8001c1c <MX_TIM4_Init+0xe4>)
 8001bd8:	f003 fee2 	bl	80059a0 <HAL_TIMEx_MasterConfigSynchronization>
 8001bdc:	4603      	mov	r3, r0
 8001bde:	2b00      	cmp	r3, #0
 8001be0:	d001      	beq.n	8001be6 <MX_TIM4_Init+0xae>
  {
    Error_Handler();
 8001be2:	f000 fb30 	bl	8002246 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001be6:	2360      	movs	r3, #96	; 0x60
 8001be8:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001bea:	2300      	movs	r3, #0
 8001bec:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001bee:	2300      	movs	r3, #0
 8001bf0:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001bf2:	2300      	movs	r3, #0
 8001bf4:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001bf6:	1d3b      	adds	r3, r7, #4
 8001bf8:	2200      	movs	r2, #0
 8001bfa:	4619      	mov	r1, r3
 8001bfc:	4807      	ldr	r0, [pc, #28]	; (8001c1c <MX_TIM4_Init+0xe4>)
 8001bfe:	f003 fa19 	bl	8005034 <HAL_TIM_PWM_ConfigChannel>
 8001c02:	4603      	mov	r3, r0
 8001c04:	2b00      	cmp	r3, #0
 8001c06:	d001      	beq.n	8001c0c <MX_TIM4_Init+0xd4>
  {
    Error_Handler();
 8001c08:	f000 fb1d 	bl	8002246 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8001c0c:	4803      	ldr	r0, [pc, #12]	; (8001c1c <MX_TIM4_Init+0xe4>)
 8001c0e:	f000 fe0b 	bl	8002828 <HAL_TIM_MspPostInit>

}
 8001c12:	bf00      	nop
 8001c14:	3738      	adds	r7, #56	; 0x38
 8001c16:	46bd      	mov	sp, r7
 8001c18:	bd80      	pop	{r7, pc}
 8001c1a:	bf00      	nop
 8001c1c:	2000066c 	.word	0x2000066c
 8001c20:	40000800 	.word	0x40000800

08001c24 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8001c24:	b580      	push	{r7, lr}
 8001c26:	b08c      	sub	sp, #48	; 0x30
 8001c28:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001c2a:	f107 030c 	add.w	r3, r7, #12
 8001c2e:	2224      	movs	r2, #36	; 0x24
 8001c30:	2100      	movs	r1, #0
 8001c32:	4618      	mov	r0, r3
 8001c34:	f004 fdde 	bl	80067f4 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001c38:	1d3b      	adds	r3, r7, #4
 8001c3a:	2200      	movs	r2, #0
 8001c3c:	601a      	str	r2, [r3, #0]
 8001c3e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8001c40:	4b20      	ldr	r3, [pc, #128]	; (8001cc4 <MX_TIM5_Init+0xa0>)
 8001c42:	4a21      	ldr	r2, [pc, #132]	; (8001cc8 <MX_TIM5_Init+0xa4>)
 8001c44:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 8001c46:	4b1f      	ldr	r3, [pc, #124]	; (8001cc4 <MX_TIM5_Init+0xa0>)
 8001c48:	2200      	movs	r2, #0
 8001c4a:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001c4c:	4b1d      	ldr	r3, [pc, #116]	; (8001cc4 <MX_TIM5_Init+0xa0>)
 8001c4e:	2200      	movs	r2, #0
 8001c50:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 0;
 8001c52:	4b1c      	ldr	r3, [pc, #112]	; (8001cc4 <MX_TIM5_Init+0xa0>)
 8001c54:	2200      	movs	r2, #0
 8001c56:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001c58:	4b1a      	ldr	r3, [pc, #104]	; (8001cc4 <MX_TIM5_Init+0xa0>)
 8001c5a:	2200      	movs	r2, #0
 8001c5c:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001c5e:	4b19      	ldr	r3, [pc, #100]	; (8001cc4 <MX_TIM5_Init+0xa0>)
 8001c60:	2200      	movs	r2, #0
 8001c62:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8001c64:	2301      	movs	r3, #1
 8001c66:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001c68:	2300      	movs	r3, #0
 8001c6a:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001c6c:	2301      	movs	r3, #1
 8001c6e:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001c70:	2300      	movs	r3, #0
 8001c72:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8001c74:	2300      	movs	r3, #0
 8001c76:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001c78:	2300      	movs	r3, #0
 8001c7a:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001c7c:	2301      	movs	r3, #1
 8001c7e:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001c80:	2300      	movs	r3, #0
 8001c82:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8001c84:	2300      	movs	r3, #0
 8001c86:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim5, &sConfig) != HAL_OK)
 8001c88:	f107 030c 	add.w	r3, r7, #12
 8001c8c:	4619      	mov	r1, r3
 8001c8e:	480d      	ldr	r0, [pc, #52]	; (8001cc4 <MX_TIM5_Init+0xa0>)
 8001c90:	f003 f836 	bl	8004d00 <HAL_TIM_Encoder_Init>
 8001c94:	4603      	mov	r3, r0
 8001c96:	2b00      	cmp	r3, #0
 8001c98:	d001      	beq.n	8001c9e <MX_TIM5_Init+0x7a>
  {
    Error_Handler();
 8001c9a:	f000 fad4 	bl	8002246 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001c9e:	2300      	movs	r3, #0
 8001ca0:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001ca2:	2300      	movs	r3, #0
 8001ca4:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8001ca6:	1d3b      	adds	r3, r7, #4
 8001ca8:	4619      	mov	r1, r3
 8001caa:	4806      	ldr	r0, [pc, #24]	; (8001cc4 <MX_TIM5_Init+0xa0>)
 8001cac:	f003 fe78 	bl	80059a0 <HAL_TIMEx_MasterConfigSynchronization>
 8001cb0:	4603      	mov	r3, r0
 8001cb2:	2b00      	cmp	r3, #0
 8001cb4:	d001      	beq.n	8001cba <MX_TIM5_Init+0x96>
  {
    Error_Handler();
 8001cb6:	f000 fac6 	bl	8002246 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8001cba:	bf00      	nop
 8001cbc:	3730      	adds	r7, #48	; 0x30
 8001cbe:	46bd      	mov	sp, r7
 8001cc0:	bd80      	pop	{r7, pc}
 8001cc2:	bf00      	nop
 8001cc4:	20000740 	.word	0x20000740
 8001cc8:	40000c00 	.word	0x40000c00

08001ccc <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8001ccc:	b580      	push	{r7, lr}
 8001cce:	b082      	sub	sp, #8
 8001cd0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001cd2:	463b      	mov	r3, r7
 8001cd4:	2200      	movs	r2, #0
 8001cd6:	601a      	str	r2, [r3, #0]
 8001cd8:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8001cda:	4b15      	ldr	r3, [pc, #84]	; (8001d30 <MX_TIM6_Init+0x64>)
 8001cdc:	4a15      	ldr	r2, [pc, #84]	; (8001d34 <MX_TIM6_Init+0x68>)
 8001cde:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 800;
 8001ce0:	4b13      	ldr	r3, [pc, #76]	; (8001d30 <MX_TIM6_Init+0x64>)
 8001ce2:	f44f 7248 	mov.w	r2, #800	; 0x320
 8001ce6:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001ce8:	4b11      	ldr	r3, [pc, #68]	; (8001d30 <MX_TIM6_Init+0x64>)
 8001cea:	2200      	movs	r2, #0
 8001cec:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 6241;
 8001cee:	4b10      	ldr	r3, [pc, #64]	; (8001d30 <MX_TIM6_Init+0x64>)
 8001cf0:	f641 0261 	movw	r2, #6241	; 0x1861
 8001cf4:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001cf6:	4b0e      	ldr	r3, [pc, #56]	; (8001d30 <MX_TIM6_Init+0x64>)
 8001cf8:	2200      	movs	r2, #0
 8001cfa:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8001cfc:	480c      	ldr	r0, [pc, #48]	; (8001d30 <MX_TIM6_Init+0x64>)
 8001cfe:	f002 ff47 	bl	8004b90 <HAL_TIM_Base_Init>
 8001d02:	4603      	mov	r3, r0
 8001d04:	2b00      	cmp	r3, #0
 8001d06:	d001      	beq.n	8001d0c <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 8001d08:	f000 fa9d 	bl	8002246 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001d0c:	2300      	movs	r3, #0
 8001d0e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001d10:	2300      	movs	r3, #0
 8001d12:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8001d14:	463b      	mov	r3, r7
 8001d16:	4619      	mov	r1, r3
 8001d18:	4805      	ldr	r0, [pc, #20]	; (8001d30 <MX_TIM6_Init+0x64>)
 8001d1a:	f003 fe41 	bl	80059a0 <HAL_TIMEx_MasterConfigSynchronization>
 8001d1e:	4603      	mov	r3, r0
 8001d20:	2b00      	cmp	r3, #0
 8001d22:	d001      	beq.n	8001d28 <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 8001d24:	f000 fa8f 	bl	8002246 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8001d28:	bf00      	nop
 8001d2a:	3708      	adds	r7, #8
 8001d2c:	46bd      	mov	sp, r7
 8001d2e:	bd80      	pop	{r7, pc}
 8001d30:	20000814 	.word	0x20000814
 8001d34:	40001000 	.word	0x40001000

08001d38 <MX_TIM9_Init>:
  * @brief TIM9 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM9_Init(void)
{
 8001d38:	b580      	push	{r7, lr}
 8001d3a:	b084      	sub	sp, #16
 8001d3c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM9_Init 0 */

  /* USER CODE END TIM9_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001d3e:	463b      	mov	r3, r7
 8001d40:	2200      	movs	r2, #0
 8001d42:	601a      	str	r2, [r3, #0]
 8001d44:	605a      	str	r2, [r3, #4]
 8001d46:	609a      	str	r2, [r3, #8]
 8001d48:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM9_Init 1 */

  /* USER CODE END TIM9_Init 1 */
  htim9.Instance = TIM9;
 8001d4a:	4b16      	ldr	r3, [pc, #88]	; (8001da4 <MX_TIM9_Init+0x6c>)
 8001d4c:	4a16      	ldr	r2, [pc, #88]	; (8001da8 <MX_TIM9_Init+0x70>)
 8001d4e:	601a      	str	r2, [r3, #0]
  htim9.Init.Prescaler = 623;
 8001d50:	4b14      	ldr	r3, [pc, #80]	; (8001da4 <MX_TIM9_Init+0x6c>)
 8001d52:	f240 226f 	movw	r2, #623	; 0x26f
 8001d56:	605a      	str	r2, [r3, #4]
  htim9.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001d58:	4b12      	ldr	r3, [pc, #72]	; (8001da4 <MX_TIM9_Init+0x6c>)
 8001d5a:	2200      	movs	r2, #0
 8001d5c:	609a      	str	r2, [r3, #8]
  htim9.Init.Period = 64913;
 8001d5e:	4b11      	ldr	r3, [pc, #68]	; (8001da4 <MX_TIM9_Init+0x6c>)
 8001d60:	f64f 5291 	movw	r2, #64913	; 0xfd91
 8001d64:	60da      	str	r2, [r3, #12]
  htim9.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001d66:	4b0f      	ldr	r3, [pc, #60]	; (8001da4 <MX_TIM9_Init+0x6c>)
 8001d68:	2200      	movs	r2, #0
 8001d6a:	611a      	str	r2, [r3, #16]
  htim9.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001d6c:	4b0d      	ldr	r3, [pc, #52]	; (8001da4 <MX_TIM9_Init+0x6c>)
 8001d6e:	2200      	movs	r2, #0
 8001d70:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim9) != HAL_OK)
 8001d72:	480c      	ldr	r0, [pc, #48]	; (8001da4 <MX_TIM9_Init+0x6c>)
 8001d74:	f002 ff0c 	bl	8004b90 <HAL_TIM_Base_Init>
 8001d78:	4603      	mov	r3, r0
 8001d7a:	2b00      	cmp	r3, #0
 8001d7c:	d001      	beq.n	8001d82 <MX_TIM9_Init+0x4a>
  {
    Error_Handler();
 8001d7e:	f000 fa62 	bl	8002246 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001d82:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001d86:	603b      	str	r3, [r7, #0]
  if (HAL_TIM_ConfigClockSource(&htim9, &sClockSourceConfig) != HAL_OK)
 8001d88:	463b      	mov	r3, r7
 8001d8a:	4619      	mov	r1, r3
 8001d8c:	4805      	ldr	r0, [pc, #20]	; (8001da4 <MX_TIM9_Init+0x6c>)
 8001d8e:	f003 fa17 	bl	80051c0 <HAL_TIM_ConfigClockSource>
 8001d92:	4603      	mov	r3, r0
 8001d94:	2b00      	cmp	r3, #0
 8001d96:	d001      	beq.n	8001d9c <MX_TIM9_Init+0x64>
  {
    Error_Handler();
 8001d98:	f000 fa55 	bl	8002246 <Error_Handler>
  }
  /* USER CODE BEGIN TIM9_Init 2 */

  /* USER CODE END TIM9_Init 2 */

}
 8001d9c:	bf00      	nop
 8001d9e:	3710      	adds	r7, #16
 8001da0:	46bd      	mov	sp, r7
 8001da2:	bd80      	pop	{r7, pc}
 8001da4:	20000854 	.word	0x20000854
 8001da8:	40014000 	.word	0x40014000

08001dac <MX_TIM11_Init>:
  * @brief TIM11 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM11_Init(void)
{
 8001dac:	b580      	push	{r7, lr}
 8001dae:	b088      	sub	sp, #32
 8001db0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM11_Init 0 */

  /* USER CODE END TIM11_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8001db2:	1d3b      	adds	r3, r7, #4
 8001db4:	2200      	movs	r2, #0
 8001db6:	601a      	str	r2, [r3, #0]
 8001db8:	605a      	str	r2, [r3, #4]
 8001dba:	609a      	str	r2, [r3, #8]
 8001dbc:	60da      	str	r2, [r3, #12]
 8001dbe:	611a      	str	r2, [r3, #16]
 8001dc0:	615a      	str	r2, [r3, #20]
 8001dc2:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM11_Init 1 */

  /* USER CODE END TIM11_Init 1 */
  htim11.Instance = TIM11;
 8001dc4:	4b1d      	ldr	r3, [pc, #116]	; (8001e3c <MX_TIM11_Init+0x90>)
 8001dc6:	4a1e      	ldr	r2, [pc, #120]	; (8001e40 <MX_TIM11_Init+0x94>)
 8001dc8:	601a      	str	r2, [r3, #0]
  htim11.Init.Prescaler = 0;
 8001dca:	4b1c      	ldr	r3, [pc, #112]	; (8001e3c <MX_TIM11_Init+0x90>)
 8001dcc:	2200      	movs	r2, #0
 8001dce:	605a      	str	r2, [r3, #4]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001dd0:	4b1a      	ldr	r3, [pc, #104]	; (8001e3c <MX_TIM11_Init+0x90>)
 8001dd2:	2200      	movs	r2, #0
 8001dd4:	609a      	str	r2, [r3, #8]
  htim11.Init.Period = 0;
 8001dd6:	4b19      	ldr	r3, [pc, #100]	; (8001e3c <MX_TIM11_Init+0x90>)
 8001dd8:	2200      	movs	r2, #0
 8001dda:	60da      	str	r2, [r3, #12]
  htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001ddc:	4b17      	ldr	r3, [pc, #92]	; (8001e3c <MX_TIM11_Init+0x90>)
 8001dde:	2200      	movs	r2, #0
 8001de0:	611a      	str	r2, [r3, #16]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001de2:	4b16      	ldr	r3, [pc, #88]	; (8001e3c <MX_TIM11_Init+0x90>)
 8001de4:	2200      	movs	r2, #0
 8001de6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim11) != HAL_OK)
 8001de8:	4814      	ldr	r0, [pc, #80]	; (8001e3c <MX_TIM11_Init+0x90>)
 8001dea:	f002 fed1 	bl	8004b90 <HAL_TIM_Base_Init>
 8001dee:	4603      	mov	r3, r0
 8001df0:	2b00      	cmp	r3, #0
 8001df2:	d001      	beq.n	8001df8 <MX_TIM11_Init+0x4c>
  {
    Error_Handler();
 8001df4:	f000 fa27 	bl	8002246 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim11) != HAL_OK)
 8001df8:	4810      	ldr	r0, [pc, #64]	; (8001e3c <MX_TIM11_Init+0x90>)
 8001dfa:	f002 ff18 	bl	8004c2e <HAL_TIM_PWM_Init>
 8001dfe:	4603      	mov	r3, r0
 8001e00:	2b00      	cmp	r3, #0
 8001e02:	d001      	beq.n	8001e08 <MX_TIM11_Init+0x5c>
  {
    Error_Handler();
 8001e04:	f000 fa1f 	bl	8002246 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001e08:	2360      	movs	r3, #96	; 0x60
 8001e0a:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001e0c:	2300      	movs	r3, #0
 8001e0e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001e10:	2300      	movs	r3, #0
 8001e12:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001e14:	2300      	movs	r3, #0
 8001e16:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim11, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001e18:	1d3b      	adds	r3, r7, #4
 8001e1a:	2200      	movs	r2, #0
 8001e1c:	4619      	mov	r1, r3
 8001e1e:	4807      	ldr	r0, [pc, #28]	; (8001e3c <MX_TIM11_Init+0x90>)
 8001e20:	f003 f908 	bl	8005034 <HAL_TIM_PWM_ConfigChannel>
 8001e24:	4603      	mov	r3, r0
 8001e26:	2b00      	cmp	r3, #0
 8001e28:	d001      	beq.n	8001e2e <MX_TIM11_Init+0x82>
  {
    Error_Handler();
 8001e2a:	f000 fa0c 	bl	8002246 <Error_Handler>
  }
  /* USER CODE BEGIN TIM11_Init 2 */

  /* USER CODE END TIM11_Init 2 */
  HAL_TIM_MspPostInit(&htim11);
 8001e2e:	4803      	ldr	r0, [pc, #12]	; (8001e3c <MX_TIM11_Init+0x90>)
 8001e30:	f000 fcfa 	bl	8002828 <HAL_TIM_MspPostInit>

}
 8001e34:	bf00      	nop
 8001e36:	3720      	adds	r7, #32
 8001e38:	46bd      	mov	sp, r7
 8001e3a:	bd80      	pop	{r7, pc}
 8001e3c:	200007c0 	.word	0x200007c0
 8001e40:	40014800 	.word	0x40014800

08001e44 <MX_TIM12_Init>:
  * @brief TIM12 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM12_Init(void)
{
 8001e44:	b580      	push	{r7, lr}
 8001e46:	b088      	sub	sp, #32
 8001e48:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM12_Init 0 */

  /* USER CODE END TIM12_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8001e4a:	1d3b      	adds	r3, r7, #4
 8001e4c:	2200      	movs	r2, #0
 8001e4e:	601a      	str	r2, [r3, #0]
 8001e50:	605a      	str	r2, [r3, #4]
 8001e52:	609a      	str	r2, [r3, #8]
 8001e54:	60da      	str	r2, [r3, #12]
 8001e56:	611a      	str	r2, [r3, #16]
 8001e58:	615a      	str	r2, [r3, #20]
 8001e5a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM12_Init 1 */

  /* USER CODE END TIM12_Init 1 */
  htim12.Instance = TIM12;
 8001e5c:	4b19      	ldr	r3, [pc, #100]	; (8001ec4 <MX_TIM12_Init+0x80>)
 8001e5e:	4a1a      	ldr	r2, [pc, #104]	; (8001ec8 <MX_TIM12_Init+0x84>)
 8001e60:	601a      	str	r2, [r3, #0]
  htim12.Init.Prescaler = 0;
 8001e62:	4b18      	ldr	r3, [pc, #96]	; (8001ec4 <MX_TIM12_Init+0x80>)
 8001e64:	2200      	movs	r2, #0
 8001e66:	605a      	str	r2, [r3, #4]
  htim12.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001e68:	4b16      	ldr	r3, [pc, #88]	; (8001ec4 <MX_TIM12_Init+0x80>)
 8001e6a:	2200      	movs	r2, #0
 8001e6c:	609a      	str	r2, [r3, #8]
  htim12.Init.Period = 0;
 8001e6e:	4b15      	ldr	r3, [pc, #84]	; (8001ec4 <MX_TIM12_Init+0x80>)
 8001e70:	2200      	movs	r2, #0
 8001e72:	60da      	str	r2, [r3, #12]
  htim12.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001e74:	4b13      	ldr	r3, [pc, #76]	; (8001ec4 <MX_TIM12_Init+0x80>)
 8001e76:	2200      	movs	r2, #0
 8001e78:	611a      	str	r2, [r3, #16]
  htim12.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001e7a:	4b12      	ldr	r3, [pc, #72]	; (8001ec4 <MX_TIM12_Init+0x80>)
 8001e7c:	2200      	movs	r2, #0
 8001e7e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim12) != HAL_OK)
 8001e80:	4810      	ldr	r0, [pc, #64]	; (8001ec4 <MX_TIM12_Init+0x80>)
 8001e82:	f002 fed4 	bl	8004c2e <HAL_TIM_PWM_Init>
 8001e86:	4603      	mov	r3, r0
 8001e88:	2b00      	cmp	r3, #0
 8001e8a:	d001      	beq.n	8001e90 <MX_TIM12_Init+0x4c>
  {
    Error_Handler();
 8001e8c:	f000 f9db 	bl	8002246 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001e90:	2360      	movs	r3, #96	; 0x60
 8001e92:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001e94:	2300      	movs	r3, #0
 8001e96:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001e98:	2300      	movs	r3, #0
 8001e9a:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001e9c:	2300      	movs	r3, #0
 8001e9e:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim12, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001ea0:	1d3b      	adds	r3, r7, #4
 8001ea2:	2204      	movs	r2, #4
 8001ea4:	4619      	mov	r1, r3
 8001ea6:	4807      	ldr	r0, [pc, #28]	; (8001ec4 <MX_TIM12_Init+0x80>)
 8001ea8:	f003 f8c4 	bl	8005034 <HAL_TIM_PWM_ConfigChannel>
 8001eac:	4603      	mov	r3, r0
 8001eae:	2b00      	cmp	r3, #0
 8001eb0:	d001      	beq.n	8001eb6 <MX_TIM12_Init+0x72>
  {
    Error_Handler();
 8001eb2:	f000 f9c8 	bl	8002246 <Error_Handler>
  }
  /* USER CODE BEGIN TIM12_Init 2 */

  /* USER CODE END TIM12_Init 2 */
  HAL_TIM_MspPostInit(&htim12);
 8001eb6:	4803      	ldr	r0, [pc, #12]	; (8001ec4 <MX_TIM12_Init+0x80>)
 8001eb8:	f000 fcb6 	bl	8002828 <HAL_TIM_MspPostInit>

}
 8001ebc:	bf00      	nop
 8001ebe:	3720      	adds	r7, #32
 8001ec0:	46bd      	mov	sp, r7
 8001ec2:	bd80      	pop	{r7, pc}
 8001ec4:	20000994 	.word	0x20000994
 8001ec8:	40001800 	.word	0x40001800

08001ecc <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001ecc:	b580      	push	{r7, lr}
 8001ece:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001ed0:	4b11      	ldr	r3, [pc, #68]	; (8001f18 <MX_USART2_UART_Init+0x4c>)
 8001ed2:	4a12      	ldr	r2, [pc, #72]	; (8001f1c <MX_USART2_UART_Init+0x50>)
 8001ed4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001ed6:	4b10      	ldr	r3, [pc, #64]	; (8001f18 <MX_USART2_UART_Init+0x4c>)
 8001ed8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001edc:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001ede:	4b0e      	ldr	r3, [pc, #56]	; (8001f18 <MX_USART2_UART_Init+0x4c>)
 8001ee0:	2200      	movs	r2, #0
 8001ee2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001ee4:	4b0c      	ldr	r3, [pc, #48]	; (8001f18 <MX_USART2_UART_Init+0x4c>)
 8001ee6:	2200      	movs	r2, #0
 8001ee8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001eea:	4b0b      	ldr	r3, [pc, #44]	; (8001f18 <MX_USART2_UART_Init+0x4c>)
 8001eec:	2200      	movs	r2, #0
 8001eee:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001ef0:	4b09      	ldr	r3, [pc, #36]	; (8001f18 <MX_USART2_UART_Init+0x4c>)
 8001ef2:	220c      	movs	r2, #12
 8001ef4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001ef6:	4b08      	ldr	r3, [pc, #32]	; (8001f18 <MX_USART2_UART_Init+0x4c>)
 8001ef8:	2200      	movs	r2, #0
 8001efa:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001efc:	4b06      	ldr	r3, [pc, #24]	; (8001f18 <MX_USART2_UART_Init+0x4c>)
 8001efe:	2200      	movs	r2, #0
 8001f00:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001f02:	4805      	ldr	r0, [pc, #20]	; (8001f18 <MX_USART2_UART_Init+0x4c>)
 8001f04:	f003 fddc 	bl	8005ac0 <HAL_UART_Init>
 8001f08:	4603      	mov	r3, r0
 8001f0a:	2b00      	cmp	r3, #0
 8001f0c:	d001      	beq.n	8001f12 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001f0e:	f000 f99a 	bl	8002246 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001f12:	bf00      	nop
 8001f14:	bd80      	pop	{r7, pc}
 8001f16:	bf00      	nop
 8001f18:	2000092c 	.word	0x2000092c
 8001f1c:	40004400 	.word	0x40004400

08001f20 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8001f20:	b580      	push	{r7, lr}
 8001f22:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001f24:	4b11      	ldr	r3, [pc, #68]	; (8001f6c <MX_USART3_UART_Init+0x4c>)
 8001f26:	4a12      	ldr	r2, [pc, #72]	; (8001f70 <MX_USART3_UART_Init+0x50>)
 8001f28:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8001f2a:	4b10      	ldr	r3, [pc, #64]	; (8001f6c <MX_USART3_UART_Init+0x4c>)
 8001f2c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001f30:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001f32:	4b0e      	ldr	r3, [pc, #56]	; (8001f6c <MX_USART3_UART_Init+0x4c>)
 8001f34:	2200      	movs	r2, #0
 8001f36:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001f38:	4b0c      	ldr	r3, [pc, #48]	; (8001f6c <MX_USART3_UART_Init+0x4c>)
 8001f3a:	2200      	movs	r2, #0
 8001f3c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001f3e:	4b0b      	ldr	r3, [pc, #44]	; (8001f6c <MX_USART3_UART_Init+0x4c>)
 8001f40:	2200      	movs	r2, #0
 8001f42:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001f44:	4b09      	ldr	r3, [pc, #36]	; (8001f6c <MX_USART3_UART_Init+0x4c>)
 8001f46:	220c      	movs	r2, #12
 8001f48:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001f4a:	4b08      	ldr	r3, [pc, #32]	; (8001f6c <MX_USART3_UART_Init+0x4c>)
 8001f4c:	2200      	movs	r2, #0
 8001f4e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001f50:	4b06      	ldr	r3, [pc, #24]	; (8001f6c <MX_USART3_UART_Init+0x4c>)
 8001f52:	2200      	movs	r2, #0
 8001f54:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001f56:	4805      	ldr	r0, [pc, #20]	; (8001f6c <MX_USART3_UART_Init+0x4c>)
 8001f58:	f003 fdb2 	bl	8005ac0 <HAL_UART_Init>
 8001f5c:	4603      	mov	r3, r0
 8001f5e:	2b00      	cmp	r3, #0
 8001f60:	d001      	beq.n	8001f66 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8001f62:	f000 f970 	bl	8002246 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001f66:	bf00      	nop
 8001f68:	bd80      	pop	{r7, pc}
 8001f6a:	bf00      	nop
 8001f6c:	200006ac 	.word	0x200006ac
 8001f70:	40004800 	.word	0x40004800

08001f74 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001f74:	b580      	push	{r7, lr}
 8001f76:	b08a      	sub	sp, #40	; 0x28
 8001f78:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f7a:	f107 0314 	add.w	r3, r7, #20
 8001f7e:	2200      	movs	r2, #0
 8001f80:	601a      	str	r2, [r3, #0]
 8001f82:	605a      	str	r2, [r3, #4]
 8001f84:	609a      	str	r2, [r3, #8]
 8001f86:	60da      	str	r2, [r3, #12]
 8001f88:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001f8a:	2300      	movs	r3, #0
 8001f8c:	613b      	str	r3, [r7, #16]
 8001f8e:	4b66      	ldr	r3, [pc, #408]	; (8002128 <MX_GPIO_Init+0x1b4>)
 8001f90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f92:	4a65      	ldr	r2, [pc, #404]	; (8002128 <MX_GPIO_Init+0x1b4>)
 8001f94:	f043 0304 	orr.w	r3, r3, #4
 8001f98:	6313      	str	r3, [r2, #48]	; 0x30
 8001f9a:	4b63      	ldr	r3, [pc, #396]	; (8002128 <MX_GPIO_Init+0x1b4>)
 8001f9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f9e:	f003 0304 	and.w	r3, r3, #4
 8001fa2:	613b      	str	r3, [r7, #16]
 8001fa4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001fa6:	2300      	movs	r3, #0
 8001fa8:	60fb      	str	r3, [r7, #12]
 8001faa:	4b5f      	ldr	r3, [pc, #380]	; (8002128 <MX_GPIO_Init+0x1b4>)
 8001fac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fae:	4a5e      	ldr	r2, [pc, #376]	; (8002128 <MX_GPIO_Init+0x1b4>)
 8001fb0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001fb4:	6313      	str	r3, [r2, #48]	; 0x30
 8001fb6:	4b5c      	ldr	r3, [pc, #368]	; (8002128 <MX_GPIO_Init+0x1b4>)
 8001fb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001fbe:	60fb      	str	r3, [r7, #12]
 8001fc0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001fc2:	2300      	movs	r3, #0
 8001fc4:	60bb      	str	r3, [r7, #8]
 8001fc6:	4b58      	ldr	r3, [pc, #352]	; (8002128 <MX_GPIO_Init+0x1b4>)
 8001fc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fca:	4a57      	ldr	r2, [pc, #348]	; (8002128 <MX_GPIO_Init+0x1b4>)
 8001fcc:	f043 0301 	orr.w	r3, r3, #1
 8001fd0:	6313      	str	r3, [r2, #48]	; 0x30
 8001fd2:	4b55      	ldr	r3, [pc, #340]	; (8002128 <MX_GPIO_Init+0x1b4>)
 8001fd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fd6:	f003 0301 	and.w	r3, r3, #1
 8001fda:	60bb      	str	r3, [r7, #8]
 8001fdc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001fde:	2300      	movs	r3, #0
 8001fe0:	607b      	str	r3, [r7, #4]
 8001fe2:	4b51      	ldr	r3, [pc, #324]	; (8002128 <MX_GPIO_Init+0x1b4>)
 8001fe4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fe6:	4a50      	ldr	r2, [pc, #320]	; (8002128 <MX_GPIO_Init+0x1b4>)
 8001fe8:	f043 0302 	orr.w	r3, r3, #2
 8001fec:	6313      	str	r3, [r2, #48]	; 0x30
 8001fee:	4b4e      	ldr	r3, [pc, #312]	; (8002128 <MX_GPIO_Init+0x1b4>)
 8001ff0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ff2:	f003 0302 	and.w	r3, r3, #2
 8001ff6:	607b      	str	r3, [r7, #4]
 8001ff8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001ffa:	2300      	movs	r3, #0
 8001ffc:	603b      	str	r3, [r7, #0]
 8001ffe:	4b4a      	ldr	r3, [pc, #296]	; (8002128 <MX_GPIO_Init+0x1b4>)
 8002000:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002002:	4a49      	ldr	r2, [pc, #292]	; (8002128 <MX_GPIO_Init+0x1b4>)
 8002004:	f043 0308 	orr.w	r3, r3, #8
 8002008:	6313      	str	r3, [r2, #48]	; 0x30
 800200a:	4b47      	ldr	r3, [pc, #284]	; (8002128 <MX_GPIO_Init+0x1b4>)
 800200c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800200e:	f003 0308 	and.w	r3, r3, #8
 8002012:	603b      	str	r3, [r7, #0]
 8002014:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, IMU_RST_Pin|REV_BIT0_Pin|RGB_INT1_Pin|RGB_INT2_Pin 
 8002016:	2200      	movs	r2, #0
 8002018:	f241 1173 	movw	r1, #4467	; 0x1173
 800201c:	4843      	ldr	r0, [pc, #268]	; (800212c <MX_GPIO_Init+0x1b8>)
 800201e:	f001 fb4f 	bl	80036c0 <HAL_GPIO_WritePin>
                          |ROMI_SLPL_Pin|TRIG_CTR_Pin|ROMI_DIRL_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, Blinky_Pin|TRIGR_Pin|SPI_CS_AUX_Pin, GPIO_PIN_RESET);
 8002022:	2200      	movs	r2, #0
 8002024:	f248 4120 	movw	r1, #33824	; 0x8420
 8002028:	4841      	ldr	r0, [pc, #260]	; (8002130 <MX_GPIO_Init+0x1bc>)
 800202a:	f001 fb49 	bl	80036c0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, TRIGL_Pin|ROMI_DIRR_Pin|ROMI_SLPR_Pin, GPIO_PIN_RESET);
 800202e:	2200      	movs	r2, #0
 8002030:	f246 0101 	movw	r1, #24577	; 0x6001
 8002034:	483f      	ldr	r0, [pc, #252]	; (8002134 <MX_GPIO_Init+0x1c0>)
 8002036:	f001 fb43 	bl	80036c0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI_CS_FLASH_GPIO_Port, SPI_CS_FLASH_Pin, GPIO_PIN_RESET);
 800203a:	2200      	movs	r2, #0
 800203c:	2104      	movs	r1, #4
 800203e:	483e      	ldr	r0, [pc, #248]	; (8002138 <MX_GPIO_Init+0x1c4>)
 8002040:	f001 fb3e 	bl	80036c0 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : OLED_BTN_Pin REV_BIT1_Pin REV_BIT2_Pin */
  GPIO_InitStruct.Pin = OLED_BTN_Pin|REV_BIT1_Pin|REV_BIT2_Pin;
 8002044:	f242 030c 	movw	r3, #8204	; 0x200c
 8002048:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800204a:	2300      	movs	r3, #0
 800204c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800204e:	2300      	movs	r3, #0
 8002050:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002052:	f107 0314 	add.w	r3, r7, #20
 8002056:	4619      	mov	r1, r3
 8002058:	4834      	ldr	r0, [pc, #208]	; (800212c <MX_GPIO_Init+0x1b8>)
 800205a:	f001 f97f 	bl	800335c <HAL_GPIO_Init>

  /*Configure GPIO pins : IMU_RST_Pin REV_BIT0_Pin RGB_INT1_Pin RGB_INT2_Pin 
                           ROMI_SLPL_Pin TRIG_CTR_Pin ROMI_DIRL_Pin */
  GPIO_InitStruct.Pin = IMU_RST_Pin|REV_BIT0_Pin|RGB_INT1_Pin|RGB_INT2_Pin 
 800205e:	f241 1373 	movw	r3, #4467	; 0x1173
 8002062:	617b      	str	r3, [r7, #20]
                          |ROMI_SLPL_Pin|TRIG_CTR_Pin|ROMI_DIRL_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002064:	2301      	movs	r3, #1
 8002066:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002068:	2300      	movs	r3, #0
 800206a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800206c:	2300      	movs	r3, #0
 800206e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002070:	f107 0314 	add.w	r3, r7, #20
 8002074:	4619      	mov	r1, r3
 8002076:	482d      	ldr	r0, [pc, #180]	; (800212c <MX_GPIO_Init+0x1b8>)
 8002078:	f001 f970 	bl	800335c <HAL_GPIO_Init>

  /*Configure GPIO pins : Blinky_Pin TRIGR_Pin SPI_CS_AUX_Pin */
  GPIO_InitStruct.Pin = Blinky_Pin|TRIGR_Pin|SPI_CS_AUX_Pin;
 800207c:	f248 4320 	movw	r3, #33824	; 0x8420
 8002080:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002082:	2301      	movs	r3, #1
 8002084:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002086:	2300      	movs	r3, #0
 8002088:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800208a:	2300      	movs	r3, #0
 800208c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800208e:	f107 0314 	add.w	r3, r7, #20
 8002092:	4619      	mov	r1, r3
 8002094:	4826      	ldr	r0, [pc, #152]	; (8002130 <MX_GPIO_Init+0x1bc>)
 8002096:	f001 f961 	bl	800335c <HAL_GPIO_Init>

  /*Configure GPIO pins : TRIGL_Pin ROMI_DIRR_Pin ROMI_SLPR_Pin */
  GPIO_InitStruct.Pin = TRIGL_Pin|ROMI_DIRR_Pin|ROMI_SLPR_Pin;
 800209a:	f246 0301 	movw	r3, #24577	; 0x6001
 800209e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80020a0:	2301      	movs	r3, #1
 80020a2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020a4:	2300      	movs	r3, #0
 80020a6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020a8:	2300      	movs	r3, #0
 80020aa:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80020ac:	f107 0314 	add.w	r3, r7, #20
 80020b0:	4619      	mov	r1, r3
 80020b2:	4820      	ldr	r0, [pc, #128]	; (8002134 <MX_GPIO_Init+0x1c0>)
 80020b4:	f001 f952 	bl	800335c <HAL_GPIO_Init>

  /*Configure GPIO pins : ECHOL_Pin QTRR_OUT_Pin QTRL_OUT_Pin */
  GPIO_InitStruct.Pin = ECHOL_Pin|QTRR_OUT_Pin|QTRL_OUT_Pin;
 80020b8:	f241 0306 	movw	r3, #4102	; 0x1006
 80020bc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80020be:	4b1f      	ldr	r3, [pc, #124]	; (800213c <MX_GPIO_Init+0x1c8>)
 80020c0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020c2:	2300      	movs	r3, #0
 80020c4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80020c6:	f107 0314 	add.w	r3, r7, #20
 80020ca:	4619      	mov	r1, r3
 80020cc:	4819      	ldr	r0, [pc, #100]	; (8002134 <MX_GPIO_Init+0x1c0>)
 80020ce:	f001 f945 	bl	800335c <HAL_GPIO_Init>

  /*Configure GPIO pin : ECHO_CTR_Pin */
  GPIO_InitStruct.Pin = ECHO_CTR_Pin;
 80020d2:	2380      	movs	r3, #128	; 0x80
 80020d4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80020d6:	4b19      	ldr	r3, [pc, #100]	; (800213c <MX_GPIO_Init+0x1c8>)
 80020d8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020da:	2300      	movs	r3, #0
 80020dc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ECHO_CTR_GPIO_Port, &GPIO_InitStruct);
 80020de:	f107 0314 	add.w	r3, r7, #20
 80020e2:	4619      	mov	r1, r3
 80020e4:	4811      	ldr	r0, [pc, #68]	; (800212c <MX_GPIO_Init+0x1b8>)
 80020e6:	f001 f939 	bl	800335c <HAL_GPIO_Init>

  /*Configure GPIO pin : ECHOR_Pin */
  GPIO_InitStruct.Pin = ECHOR_Pin;
 80020ea:	f44f 7300 	mov.w	r3, #512	; 0x200
 80020ee:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80020f0:	4b12      	ldr	r3, [pc, #72]	; (800213c <MX_GPIO_Init+0x1c8>)
 80020f2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020f4:	2300      	movs	r3, #0
 80020f6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ECHOR_GPIO_Port, &GPIO_InitStruct);
 80020f8:	f107 0314 	add.w	r3, r7, #20
 80020fc:	4619      	mov	r1, r3
 80020fe:	480c      	ldr	r0, [pc, #48]	; (8002130 <MX_GPIO_Init+0x1bc>)
 8002100:	f001 f92c 	bl	800335c <HAL_GPIO_Init>

  /*Configure GPIO pin : SPI_CS_FLASH_Pin */
  GPIO_InitStruct.Pin = SPI_CS_FLASH_Pin;
 8002104:	2304      	movs	r3, #4
 8002106:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002108:	2301      	movs	r3, #1
 800210a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800210c:	2300      	movs	r3, #0
 800210e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002110:	2300      	movs	r3, #0
 8002112:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SPI_CS_FLASH_GPIO_Port, &GPIO_InitStruct);
 8002114:	f107 0314 	add.w	r3, r7, #20
 8002118:	4619      	mov	r1, r3
 800211a:	4807      	ldr	r0, [pc, #28]	; (8002138 <MX_GPIO_Init+0x1c4>)
 800211c:	f001 f91e 	bl	800335c <HAL_GPIO_Init>

}
 8002120:	bf00      	nop
 8002122:	3728      	adds	r7, #40	; 0x28
 8002124:	46bd      	mov	sp, r7
 8002126:	bd80      	pop	{r7, pc}
 8002128:	40023800 	.word	0x40023800
 800212c:	40020800 	.word	0x40020800
 8002130:	40020000 	.word	0x40020000
 8002134:	40020400 	.word	0x40020400
 8002138:	40020c00 	.word	0x40020c00
 800213c:	10110000 	.word	0x10110000

08002140 <__io_putchar>:

/* USER CODE BEGIN 4 */

/* This function sets up the serial printf*/
int __io_putchar(int ch) {
 8002140:	b580      	push	{r7, lr}
 8002142:	b084      	sub	sp, #16
 8002144:	af00      	add	r7, sp, #0
 8002146:	6078      	str	r0, [r7, #4]
    HAL_StatusTypeDef sts = HAL_UART_Transmit(&IO_UART ,(uint8_t*)&ch,1,10);
 8002148:	1d39      	adds	r1, r7, #4
 800214a:	230a      	movs	r3, #10
 800214c:	2201      	movs	r2, #1
 800214e:	4808      	ldr	r0, [pc, #32]	; (8002170 <__io_putchar+0x30>)
 8002150:	f003 fd03 	bl	8005b5a <HAL_UART_Transmit>
 8002154:	4603      	mov	r3, r0
 8002156:	73fb      	strb	r3, [r7, #15]
    if(sts == HAL_OK) {
 8002158:	7bfb      	ldrb	r3, [r7, #15]
 800215a:	2b00      	cmp	r3, #0
 800215c:	d101      	bne.n	8002162 <__io_putchar+0x22>
        return ch;
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	e001      	b.n	8002166 <__io_putchar+0x26>
    }
    return EOF;
 8002162:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002166:	4618      	mov	r0, r3
 8002168:	3710      	adds	r7, #16
 800216a:	46bd      	mov	sp, r7
 800216c:	bd80      	pop	{r7, pc}
 800216e:	bf00      	nop
 8002170:	2000092c 	.word	0x2000092c

08002174 <__io_getchar>:

int __io_getchar(void) {
 8002174:	b580      	push	{r7, lr}
 8002176:	b084      	sub	sp, #16
 8002178:	af00      	add	r7, sp, #0
    if(__HAL_UART_GET_FLAG(&IO_UART , UART_FLAG_RXNE)) {
 800217a:	4b1f      	ldr	r3, [pc, #124]	; (80021f8 <__io_getchar+0x84>)
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	f003 0320 	and.w	r3, r3, #32
 8002184:	2b20      	cmp	r3, #32
 8002186:	d130      	bne.n	80021ea <__io_getchar+0x76>
        uint8_t ch=0;
 8002188:	2300      	movs	r3, #0
 800218a:	73bb      	strb	r3, [r7, #14]
        __HAL_UART_CLEAR_FEFLAG(&IO_UART );
 800218c:	2300      	movs	r3, #0
 800218e:	60bb      	str	r3, [r7, #8]
 8002190:	4b19      	ldr	r3, [pc, #100]	; (80021f8 <__io_getchar+0x84>)
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	60bb      	str	r3, [r7, #8]
 8002198:	4b17      	ldr	r3, [pc, #92]	; (80021f8 <__io_getchar+0x84>)
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	685b      	ldr	r3, [r3, #4]
 800219e:	60bb      	str	r3, [r7, #8]
 80021a0:	68bb      	ldr	r3, [r7, #8]
        __HAL_UART_CLEAR_OREFLAG(&IO_UART );
 80021a2:	2300      	movs	r3, #0
 80021a4:	607b      	str	r3, [r7, #4]
 80021a6:	4b14      	ldr	r3, [pc, #80]	; (80021f8 <__io_getchar+0x84>)
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	607b      	str	r3, [r7, #4]
 80021ae:	4b12      	ldr	r3, [pc, #72]	; (80021f8 <__io_getchar+0x84>)
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	685b      	ldr	r3, [r3, #4]
 80021b4:	607b      	str	r3, [r7, #4]
 80021b6:	687b      	ldr	r3, [r7, #4]
        __HAL_UART_CLEAR_PEFLAG(&IO_UART );
 80021b8:	2300      	movs	r3, #0
 80021ba:	603b      	str	r3, [r7, #0]
 80021bc:	4b0e      	ldr	r3, [pc, #56]	; (80021f8 <__io_getchar+0x84>)
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	603b      	str	r3, [r7, #0]
 80021c4:	4b0c      	ldr	r3, [pc, #48]	; (80021f8 <__io_getchar+0x84>)
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	685b      	ldr	r3, [r3, #4]
 80021ca:	603b      	str	r3, [r7, #0]
 80021cc:	683b      	ldr	r3, [r7, #0]
        HAL_StatusTypeDef sts = HAL_UART_Receive(&IO_UART ,&ch,1,1);
 80021ce:	f107 010e 	add.w	r1, r7, #14
 80021d2:	2301      	movs	r3, #1
 80021d4:	2201      	movs	r2, #1
 80021d6:	4808      	ldr	r0, [pc, #32]	; (80021f8 <__io_getchar+0x84>)
 80021d8:	f003 fd58 	bl	8005c8c <HAL_UART_Receive>
 80021dc:	4603      	mov	r3, r0
 80021de:	73fb      	strb	r3, [r7, #15]
        if(sts == HAL_OK) {
 80021e0:	7bfb      	ldrb	r3, [r7, #15]
 80021e2:	2b00      	cmp	r3, #0
 80021e4:	d101      	bne.n	80021ea <__io_getchar+0x76>
            return (int)ch;
 80021e6:	7bbb      	ldrb	r3, [r7, #14]
 80021e8:	e001      	b.n	80021ee <__io_getchar+0x7a>
        }
    }
    return EOF;
 80021ea:	f04f 33ff 	mov.w	r3, #4294967295
}
 80021ee:	4618      	mov	r0, r3
 80021f0:	3710      	adds	r7, #16
 80021f2:	46bd      	mov	sp, r7
 80021f4:	bd80      	pop	{r7, pc}
 80021f6:	bf00      	nop
 80021f8:	2000092c 	.word	0x2000092c

080021fc <_read>:

int _read(int file, char *ptr, int len){
 80021fc:	b580      	push	{r7, lr}
 80021fe:	b086      	sub	sp, #24
 8002200:	af00      	add	r7, sp, #0
 8002202:	60f8      	str	r0, [r7, #12]
 8002204:	60b9      	str	r1, [r7, #8]
 8002206:	607a      	str	r2, [r7, #4]
int DataIdx;

    for (DataIdx = 0; DataIdx < len; DataIdx++) {
 8002208:	2300      	movs	r3, #0
 800220a:	617b      	str	r3, [r7, #20]
 800220c:	e012      	b.n	8002234 <_read+0x38>
        int ch =  __io_getchar();
 800220e:	f7ff ffb1 	bl	8002174 <__io_getchar>
 8002212:	6138      	str	r0, [r7, #16]
        if(ch != EOF) {
 8002214:	693b      	ldr	r3, [r7, #16]
 8002216:	f1b3 3fff 	cmp.w	r3, #4294967295
 800221a:	d006      	beq.n	800222a <_read+0x2e>
             *ptr++ = ch;
 800221c:	68bb      	ldr	r3, [r7, #8]
 800221e:	1c5a      	adds	r2, r3, #1
 8002220:	60ba      	str	r2, [r7, #8]
 8002222:	693a      	ldr	r2, [r7, #16]
 8002224:	b2d2      	uxtb	r2, r2
 8002226:	701a      	strb	r2, [r3, #0]
 8002228:	e001      	b.n	800222e <_read+0x32>
        }
        else {
            return DataIdx;
 800222a:	697b      	ldr	r3, [r7, #20]
 800222c:	e007      	b.n	800223e <_read+0x42>
    for (DataIdx = 0; DataIdx < len; DataIdx++) {
 800222e:	697b      	ldr	r3, [r7, #20]
 8002230:	3301      	adds	r3, #1
 8002232:	617b      	str	r3, [r7, #20]
 8002234:	697a      	ldr	r2, [r7, #20]
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	429a      	cmp	r2, r3
 800223a:	dbe8      	blt.n	800220e <_read+0x12>
        }
    }
    return len;
 800223c:	687b      	ldr	r3, [r7, #4]
}
 800223e:	4618      	mov	r0, r3
 8002240:	3718      	adds	r7, #24
 8002242:	46bd      	mov	sp, r7
 8002244:	bd80      	pop	{r7, pc}

08002246 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002246:	b480      	push	{r7}
 8002248:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 800224a:	bf00      	nop
 800224c:	46bd      	mov	sp, r7
 800224e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002252:	4770      	bx	lr

08002254 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                                                /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002254:	b480      	push	{r7}
 8002256:	b083      	sub	sp, #12
 8002258:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800225a:	2300      	movs	r3, #0
 800225c:	607b      	str	r3, [r7, #4]
 800225e:	4b10      	ldr	r3, [pc, #64]	; (80022a0 <HAL_MspInit+0x4c>)
 8002260:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002262:	4a0f      	ldr	r2, [pc, #60]	; (80022a0 <HAL_MspInit+0x4c>)
 8002264:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002268:	6453      	str	r3, [r2, #68]	; 0x44
 800226a:	4b0d      	ldr	r3, [pc, #52]	; (80022a0 <HAL_MspInit+0x4c>)
 800226c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800226e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002272:	607b      	str	r3, [r7, #4]
 8002274:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002276:	2300      	movs	r3, #0
 8002278:	603b      	str	r3, [r7, #0]
 800227a:	4b09      	ldr	r3, [pc, #36]	; (80022a0 <HAL_MspInit+0x4c>)
 800227c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800227e:	4a08      	ldr	r2, [pc, #32]	; (80022a0 <HAL_MspInit+0x4c>)
 8002280:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002284:	6413      	str	r3, [r2, #64]	; 0x40
 8002286:	4b06      	ldr	r3, [pc, #24]	; (80022a0 <HAL_MspInit+0x4c>)
 8002288:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800228a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800228e:	603b      	str	r3, [r7, #0]
 8002290:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002292:	bf00      	nop
 8002294:	370c      	adds	r7, #12
 8002296:	46bd      	mov	sp, r7
 8002298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800229c:	4770      	bx	lr
 800229e:	bf00      	nop
 80022a0:	40023800 	.word	0x40023800

080022a4 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 80022a4:	b580      	push	{r7, lr}
 80022a6:	b08a      	sub	sp, #40	; 0x28
 80022a8:	af00      	add	r7, sp, #0
 80022aa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80022ac:	f107 0314 	add.w	r3, r7, #20
 80022b0:	2200      	movs	r2, #0
 80022b2:	601a      	str	r2, [r3, #0]
 80022b4:	605a      	str	r2, [r3, #4]
 80022b6:	609a      	str	r2, [r3, #8]
 80022b8:	60da      	str	r2, [r3, #12]
 80022ba:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	4a19      	ldr	r2, [pc, #100]	; (8002328 <HAL_CAN_MspInit+0x84>)
 80022c2:	4293      	cmp	r3, r2
 80022c4:	d12c      	bne.n	8002320 <HAL_CAN_MspInit+0x7c>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 80022c6:	2300      	movs	r3, #0
 80022c8:	613b      	str	r3, [r7, #16]
 80022ca:	4b18      	ldr	r3, [pc, #96]	; (800232c <HAL_CAN_MspInit+0x88>)
 80022cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022ce:	4a17      	ldr	r2, [pc, #92]	; (800232c <HAL_CAN_MspInit+0x88>)
 80022d0:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80022d4:	6413      	str	r3, [r2, #64]	; 0x40
 80022d6:	4b15      	ldr	r3, [pc, #84]	; (800232c <HAL_CAN_MspInit+0x88>)
 80022d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022da:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80022de:	613b      	str	r3, [r7, #16]
 80022e0:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80022e2:	2300      	movs	r3, #0
 80022e4:	60fb      	str	r3, [r7, #12]
 80022e6:	4b11      	ldr	r3, [pc, #68]	; (800232c <HAL_CAN_MspInit+0x88>)
 80022e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022ea:	4a10      	ldr	r2, [pc, #64]	; (800232c <HAL_CAN_MspInit+0x88>)
 80022ec:	f043 0301 	orr.w	r3, r3, #1
 80022f0:	6313      	str	r3, [r2, #48]	; 0x30
 80022f2:	4b0e      	ldr	r3, [pc, #56]	; (800232c <HAL_CAN_MspInit+0x88>)
 80022f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022f6:	f003 0301 	and.w	r3, r3, #1
 80022fa:	60fb      	str	r3, [r7, #12]
 80022fc:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration    
    PA11     ------> CAN1_RX
    PA12     ------> CAN1_TX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80022fe:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8002302:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002304:	2302      	movs	r3, #2
 8002306:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002308:	2300      	movs	r3, #0
 800230a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800230c:	2303      	movs	r3, #3
 800230e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8002310:	2309      	movs	r3, #9
 8002312:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002314:	f107 0314 	add.w	r3, r7, #20
 8002318:	4619      	mov	r1, r3
 800231a:	4805      	ldr	r0, [pc, #20]	; (8002330 <HAL_CAN_MspInit+0x8c>)
 800231c:	f001 f81e 	bl	800335c <HAL_GPIO_Init>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 8002320:	bf00      	nop
 8002322:	3728      	adds	r7, #40	; 0x28
 8002324:	46bd      	mov	sp, r7
 8002326:	bd80      	pop	{r7, pc}
 8002328:	40006400 	.word	0x40006400
 800232c:	40023800 	.word	0x40023800
 8002330:	40020000 	.word	0x40020000

08002334 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8002334:	b580      	push	{r7, lr}
 8002336:	b08a      	sub	sp, #40	; 0x28
 8002338:	af00      	add	r7, sp, #0
 800233a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800233c:	f107 0314 	add.w	r3, r7, #20
 8002340:	2200      	movs	r2, #0
 8002342:	601a      	str	r2, [r3, #0]
 8002344:	605a      	str	r2, [r3, #4]
 8002346:	609a      	str	r2, [r3, #8]
 8002348:	60da      	str	r2, [r3, #12]
 800234a:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC)
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	4a1b      	ldr	r2, [pc, #108]	; (80023c0 <HAL_DAC_MspInit+0x8c>)
 8002352:	4293      	cmp	r3, r2
 8002354:	d12f      	bne.n	80023b6 <HAL_DAC_MspInit+0x82>
  {
  /* USER CODE BEGIN DAC_MspInit 0 */

  /* USER CODE END DAC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC_CLK_ENABLE();
 8002356:	2300      	movs	r3, #0
 8002358:	613b      	str	r3, [r7, #16]
 800235a:	4b1a      	ldr	r3, [pc, #104]	; (80023c4 <HAL_DAC_MspInit+0x90>)
 800235c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800235e:	4a19      	ldr	r2, [pc, #100]	; (80023c4 <HAL_DAC_MspInit+0x90>)
 8002360:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8002364:	6413      	str	r3, [r2, #64]	; 0x40
 8002366:	4b17      	ldr	r3, [pc, #92]	; (80023c4 <HAL_DAC_MspInit+0x90>)
 8002368:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800236a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800236e:	613b      	str	r3, [r7, #16]
 8002370:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002372:	2300      	movs	r3, #0
 8002374:	60fb      	str	r3, [r7, #12]
 8002376:	4b13      	ldr	r3, [pc, #76]	; (80023c4 <HAL_DAC_MspInit+0x90>)
 8002378:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800237a:	4a12      	ldr	r2, [pc, #72]	; (80023c4 <HAL_DAC_MspInit+0x90>)
 800237c:	f043 0301 	orr.w	r3, r3, #1
 8002380:	6313      	str	r3, [r2, #48]	; 0x30
 8002382:	4b10      	ldr	r3, [pc, #64]	; (80023c4 <HAL_DAC_MspInit+0x90>)
 8002384:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002386:	f003 0301 	and.w	r3, r3, #1
 800238a:	60fb      	str	r3, [r7, #12]
 800238c:	68fb      	ldr	r3, [r7, #12]
    /**DAC GPIO Configuration    
    PA4     ------> DAC_OUT1 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 800238e:	2310      	movs	r3, #16
 8002390:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002392:	2303      	movs	r3, #3
 8002394:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002396:	2300      	movs	r3, #0
 8002398:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800239a:	f107 0314 	add.w	r3, r7, #20
 800239e:	4619      	mov	r1, r3
 80023a0:	4809      	ldr	r0, [pc, #36]	; (80023c8 <HAL_DAC_MspInit+0x94>)
 80023a2:	f000 ffdb 	bl	800335c <HAL_GPIO_Init>

    /* DAC interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 80023a6:	2200      	movs	r2, #0
 80023a8:	2100      	movs	r1, #0
 80023aa:	2036      	movs	r0, #54	; 0x36
 80023ac:	f000 fed3 	bl	8003156 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80023b0:	2036      	movs	r0, #54	; 0x36
 80023b2:	f000 feec 	bl	800318e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DAC_MspInit 1 */

  /* USER CODE END DAC_MspInit 1 */
  }

}
 80023b6:	bf00      	nop
 80023b8:	3728      	adds	r7, #40	; 0x28
 80023ba:	46bd      	mov	sp, r7
 80023bc:	bd80      	pop	{r7, pc}
 80023be:	bf00      	nop
 80023c0:	40007400 	.word	0x40007400
 80023c4:	40023800 	.word	0x40023800
 80023c8:	40020000 	.word	0x40020000

080023cc <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80023cc:	b580      	push	{r7, lr}
 80023ce:	b08c      	sub	sp, #48	; 0x30
 80023d0:	af00      	add	r7, sp, #0
 80023d2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80023d4:	f107 031c 	add.w	r3, r7, #28
 80023d8:	2200      	movs	r2, #0
 80023da:	601a      	str	r2, [r3, #0]
 80023dc:	605a      	str	r2, [r3, #4]
 80023de:	609a      	str	r2, [r3, #8]
 80023e0:	60da      	str	r2, [r3, #12]
 80023e2:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	4a42      	ldr	r2, [pc, #264]	; (80024f4 <HAL_I2C_MspInit+0x128>)
 80023ea:	4293      	cmp	r3, r2
 80023ec:	d12d      	bne.n	800244a <HAL_I2C_MspInit+0x7e>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80023ee:	2300      	movs	r3, #0
 80023f0:	61bb      	str	r3, [r7, #24]
 80023f2:	4b41      	ldr	r3, [pc, #260]	; (80024f8 <HAL_I2C_MspInit+0x12c>)
 80023f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023f6:	4a40      	ldr	r2, [pc, #256]	; (80024f8 <HAL_I2C_MspInit+0x12c>)
 80023f8:	f043 0302 	orr.w	r3, r3, #2
 80023fc:	6313      	str	r3, [r2, #48]	; 0x30
 80023fe:	4b3e      	ldr	r3, [pc, #248]	; (80024f8 <HAL_I2C_MspInit+0x12c>)
 8002400:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002402:	f003 0302 	and.w	r3, r3, #2
 8002406:	61bb      	str	r3, [r7, #24]
 8002408:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration    
    PB7     ------> I2C1_SDA
    PB8     ------> I2C1_SCL 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 800240a:	f44f 73c0 	mov.w	r3, #384	; 0x180
 800240e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002410:	2312      	movs	r3, #18
 8002412:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002414:	2301      	movs	r3, #1
 8002416:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002418:	2303      	movs	r3, #3
 800241a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800241c:	2304      	movs	r3, #4
 800241e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002420:	f107 031c 	add.w	r3, r7, #28
 8002424:	4619      	mov	r1, r3
 8002426:	4835      	ldr	r0, [pc, #212]	; (80024fc <HAL_I2C_MspInit+0x130>)
 8002428:	f000 ff98 	bl	800335c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800242c:	2300      	movs	r3, #0
 800242e:	617b      	str	r3, [r7, #20]
 8002430:	4b31      	ldr	r3, [pc, #196]	; (80024f8 <HAL_I2C_MspInit+0x12c>)
 8002432:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002434:	4a30      	ldr	r2, [pc, #192]	; (80024f8 <HAL_I2C_MspInit+0x12c>)
 8002436:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800243a:	6413      	str	r3, [r2, #64]	; 0x40
 800243c:	4b2e      	ldr	r3, [pc, #184]	; (80024f8 <HAL_I2C_MspInit+0x12c>)
 800243e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002440:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002444:	617b      	str	r3, [r7, #20]
 8002446:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 8002448:	e050      	b.n	80024ec <HAL_I2C_MspInit+0x120>
  else if(hi2c->Instance==I2C3)
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	4a2c      	ldr	r2, [pc, #176]	; (8002500 <HAL_I2C_MspInit+0x134>)
 8002450:	4293      	cmp	r3, r2
 8002452:	d14b      	bne.n	80024ec <HAL_I2C_MspInit+0x120>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002454:	2300      	movs	r3, #0
 8002456:	613b      	str	r3, [r7, #16]
 8002458:	4b27      	ldr	r3, [pc, #156]	; (80024f8 <HAL_I2C_MspInit+0x12c>)
 800245a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800245c:	4a26      	ldr	r2, [pc, #152]	; (80024f8 <HAL_I2C_MspInit+0x12c>)
 800245e:	f043 0304 	orr.w	r3, r3, #4
 8002462:	6313      	str	r3, [r2, #48]	; 0x30
 8002464:	4b24      	ldr	r3, [pc, #144]	; (80024f8 <HAL_I2C_MspInit+0x12c>)
 8002466:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002468:	f003 0304 	and.w	r3, r3, #4
 800246c:	613b      	str	r3, [r7, #16]
 800246e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002470:	2300      	movs	r3, #0
 8002472:	60fb      	str	r3, [r7, #12]
 8002474:	4b20      	ldr	r3, [pc, #128]	; (80024f8 <HAL_I2C_MspInit+0x12c>)
 8002476:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002478:	4a1f      	ldr	r2, [pc, #124]	; (80024f8 <HAL_I2C_MspInit+0x12c>)
 800247a:	f043 0301 	orr.w	r3, r3, #1
 800247e:	6313      	str	r3, [r2, #48]	; 0x30
 8002480:	4b1d      	ldr	r3, [pc, #116]	; (80024f8 <HAL_I2C_MspInit+0x12c>)
 8002482:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002484:	f003 0301 	and.w	r3, r3, #1
 8002488:	60fb      	str	r3, [r7, #12]
 800248a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800248c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002490:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002492:	2312      	movs	r3, #18
 8002494:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002496:	2301      	movs	r3, #1
 8002498:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800249a:	2303      	movs	r3, #3
 800249c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 800249e:	2304      	movs	r3, #4
 80024a0:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80024a2:	f107 031c 	add.w	r3, r7, #28
 80024a6:	4619      	mov	r1, r3
 80024a8:	4816      	ldr	r0, [pc, #88]	; (8002504 <HAL_I2C_MspInit+0x138>)
 80024aa:	f000 ff57 	bl	800335c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 80024ae:	f44f 7380 	mov.w	r3, #256	; 0x100
 80024b2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80024b4:	2312      	movs	r3, #18
 80024b6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80024b8:	2301      	movs	r3, #1
 80024ba:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80024bc:	2303      	movs	r3, #3
 80024be:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 80024c0:	2304      	movs	r3, #4
 80024c2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80024c4:	f107 031c 	add.w	r3, r7, #28
 80024c8:	4619      	mov	r1, r3
 80024ca:	480f      	ldr	r0, [pc, #60]	; (8002508 <HAL_I2C_MspInit+0x13c>)
 80024cc:	f000 ff46 	bl	800335c <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 80024d0:	2300      	movs	r3, #0
 80024d2:	60bb      	str	r3, [r7, #8]
 80024d4:	4b08      	ldr	r3, [pc, #32]	; (80024f8 <HAL_I2C_MspInit+0x12c>)
 80024d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024d8:	4a07      	ldr	r2, [pc, #28]	; (80024f8 <HAL_I2C_MspInit+0x12c>)
 80024da:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80024de:	6413      	str	r3, [r2, #64]	; 0x40
 80024e0:	4b05      	ldr	r3, [pc, #20]	; (80024f8 <HAL_I2C_MspInit+0x12c>)
 80024e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024e4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80024e8:	60bb      	str	r3, [r7, #8]
 80024ea:	68bb      	ldr	r3, [r7, #8]
}
 80024ec:	bf00      	nop
 80024ee:	3730      	adds	r7, #48	; 0x30
 80024f0:	46bd      	mov	sp, r7
 80024f2:	bd80      	pop	{r7, pc}
 80024f4:	40005400 	.word	0x40005400
 80024f8:	40023800 	.word	0x40023800
 80024fc:	40020400 	.word	0x40020400
 8002500:	40005c00 	.word	0x40005c00
 8002504:	40020800 	.word	0x40020800
 8002508:	40020000 	.word	0x40020000

0800250c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800250c:	b580      	push	{r7, lr}
 800250e:	b08a      	sub	sp, #40	; 0x28
 8002510:	af00      	add	r7, sp, #0
 8002512:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002514:	f107 0314 	add.w	r3, r7, #20
 8002518:	2200      	movs	r2, #0
 800251a:	601a      	str	r2, [r3, #0]
 800251c:	605a      	str	r2, [r3, #4]
 800251e:	609a      	str	r2, [r3, #8]
 8002520:	60da      	str	r2, [r3, #12]
 8002522:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	4a28      	ldr	r2, [pc, #160]	; (80025cc <HAL_SPI_MspInit+0xc0>)
 800252a:	4293      	cmp	r3, r2
 800252c:	d149      	bne.n	80025c2 <HAL_SPI_MspInit+0xb6>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800252e:	2300      	movs	r3, #0
 8002530:	613b      	str	r3, [r7, #16]
 8002532:	4b27      	ldr	r3, [pc, #156]	; (80025d0 <HAL_SPI_MspInit+0xc4>)
 8002534:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002536:	4a26      	ldr	r2, [pc, #152]	; (80025d0 <HAL_SPI_MspInit+0xc4>)
 8002538:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800253c:	6453      	str	r3, [r2, #68]	; 0x44
 800253e:	4b24      	ldr	r3, [pc, #144]	; (80025d0 <HAL_SPI_MspInit+0xc4>)
 8002540:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002542:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002546:	613b      	str	r3, [r7, #16]
 8002548:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800254a:	2300      	movs	r3, #0
 800254c:	60fb      	str	r3, [r7, #12]
 800254e:	4b20      	ldr	r3, [pc, #128]	; (80025d0 <HAL_SPI_MspInit+0xc4>)
 8002550:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002552:	4a1f      	ldr	r2, [pc, #124]	; (80025d0 <HAL_SPI_MspInit+0xc4>)
 8002554:	f043 0301 	orr.w	r3, r3, #1
 8002558:	6313      	str	r3, [r2, #48]	; 0x30
 800255a:	4b1d      	ldr	r3, [pc, #116]	; (80025d0 <HAL_SPI_MspInit+0xc4>)
 800255c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800255e:	f003 0301 	and.w	r3, r3, #1
 8002562:	60fb      	str	r3, [r7, #12]
 8002564:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002566:	2300      	movs	r3, #0
 8002568:	60bb      	str	r3, [r7, #8]
 800256a:	4b19      	ldr	r3, [pc, #100]	; (80025d0 <HAL_SPI_MspInit+0xc4>)
 800256c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800256e:	4a18      	ldr	r2, [pc, #96]	; (80025d0 <HAL_SPI_MspInit+0xc4>)
 8002570:	f043 0302 	orr.w	r3, r3, #2
 8002574:	6313      	str	r3, [r2, #48]	; 0x30
 8002576:	4b16      	ldr	r3, [pc, #88]	; (80025d0 <HAL_SPI_MspInit+0xc4>)
 8002578:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800257a:	f003 0302 	and.w	r3, r3, #2
 800257e:	60bb      	str	r3, [r7, #8]
 8002580:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration    
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    PB3     ------> SPI1_SCK 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002582:	23c0      	movs	r3, #192	; 0xc0
 8002584:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002586:	2302      	movs	r3, #2
 8002588:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800258a:	2300      	movs	r3, #0
 800258c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800258e:	2303      	movs	r3, #3
 8002590:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002592:	2305      	movs	r3, #5
 8002594:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002596:	f107 0314 	add.w	r3, r7, #20
 800259a:	4619      	mov	r1, r3
 800259c:	480d      	ldr	r0, [pc, #52]	; (80025d4 <HAL_SPI_MspInit+0xc8>)
 800259e:	f000 fedd 	bl	800335c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80025a2:	2308      	movs	r3, #8
 80025a4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80025a6:	2302      	movs	r3, #2
 80025a8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025aa:	2300      	movs	r3, #0
 80025ac:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80025ae:	2303      	movs	r3, #3
 80025b0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80025b2:	2305      	movs	r3, #5
 80025b4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80025b6:	f107 0314 	add.w	r3, r7, #20
 80025ba:	4619      	mov	r1, r3
 80025bc:	4806      	ldr	r0, [pc, #24]	; (80025d8 <HAL_SPI_MspInit+0xcc>)
 80025be:	f000 fecd 	bl	800335c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80025c2:	bf00      	nop
 80025c4:	3728      	adds	r7, #40	; 0x28
 80025c6:	46bd      	mov	sp, r7
 80025c8:	bd80      	pop	{r7, pc}
 80025ca:	bf00      	nop
 80025cc:	40013000 	.word	0x40013000
 80025d0:	40023800 	.word	0x40023800
 80025d4:	40020000 	.word	0x40020000
 80025d8:	40020400 	.word	0x40020400

080025dc <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80025dc:	b580      	push	{r7, lr}
 80025de:	b088      	sub	sp, #32
 80025e0:	af00      	add	r7, sp, #0
 80025e2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80025ec:	d116      	bne.n	800261c <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80025ee:	2300      	movs	r3, #0
 80025f0:	61fb      	str	r3, [r7, #28]
 80025f2:	4b38      	ldr	r3, [pc, #224]	; (80026d4 <HAL_TIM_Base_MspInit+0xf8>)
 80025f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025f6:	4a37      	ldr	r2, [pc, #220]	; (80026d4 <HAL_TIM_Base_MspInit+0xf8>)
 80025f8:	f043 0301 	orr.w	r3, r3, #1
 80025fc:	6413      	str	r3, [r2, #64]	; 0x40
 80025fe:	4b35      	ldr	r3, [pc, #212]	; (80026d4 <HAL_TIM_Base_MspInit+0xf8>)
 8002600:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002602:	f003 0301 	and.w	r3, r3, #1
 8002606:	61fb      	str	r3, [r7, #28]
 8002608:	69fb      	ldr	r3, [r7, #28]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800260a:	2200      	movs	r2, #0
 800260c:	2100      	movs	r1, #0
 800260e:	201c      	movs	r0, #28
 8002610:	f000 fda1 	bl	8003156 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8002614:	201c      	movs	r0, #28
 8002616:	f000 fdba 	bl	800318e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM11_MspInit 1 */

  /* USER CODE END TIM11_MspInit 1 */
  }

}
 800261a:	e056      	b.n	80026ca <HAL_TIM_Base_MspInit+0xee>
  else if(htim_base->Instance==TIM4)
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	4a2d      	ldr	r2, [pc, #180]	; (80026d8 <HAL_TIM_Base_MspInit+0xfc>)
 8002622:	4293      	cmp	r3, r2
 8002624:	d10e      	bne.n	8002644 <HAL_TIM_Base_MspInit+0x68>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8002626:	2300      	movs	r3, #0
 8002628:	61bb      	str	r3, [r7, #24]
 800262a:	4b2a      	ldr	r3, [pc, #168]	; (80026d4 <HAL_TIM_Base_MspInit+0xf8>)
 800262c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800262e:	4a29      	ldr	r2, [pc, #164]	; (80026d4 <HAL_TIM_Base_MspInit+0xf8>)
 8002630:	f043 0304 	orr.w	r3, r3, #4
 8002634:	6413      	str	r3, [r2, #64]	; 0x40
 8002636:	4b27      	ldr	r3, [pc, #156]	; (80026d4 <HAL_TIM_Base_MspInit+0xf8>)
 8002638:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800263a:	f003 0304 	and.w	r3, r3, #4
 800263e:	61bb      	str	r3, [r7, #24]
 8002640:	69bb      	ldr	r3, [r7, #24]
}
 8002642:	e042      	b.n	80026ca <HAL_TIM_Base_MspInit+0xee>
  else if(htim_base->Instance==TIM6)
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	4a24      	ldr	r2, [pc, #144]	; (80026dc <HAL_TIM_Base_MspInit+0x100>)
 800264a:	4293      	cmp	r3, r2
 800264c:	d116      	bne.n	800267c <HAL_TIM_Base_MspInit+0xa0>
    __HAL_RCC_TIM6_CLK_ENABLE();
 800264e:	2300      	movs	r3, #0
 8002650:	617b      	str	r3, [r7, #20]
 8002652:	4b20      	ldr	r3, [pc, #128]	; (80026d4 <HAL_TIM_Base_MspInit+0xf8>)
 8002654:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002656:	4a1f      	ldr	r2, [pc, #124]	; (80026d4 <HAL_TIM_Base_MspInit+0xf8>)
 8002658:	f043 0310 	orr.w	r3, r3, #16
 800265c:	6413      	str	r3, [r2, #64]	; 0x40
 800265e:	4b1d      	ldr	r3, [pc, #116]	; (80026d4 <HAL_TIM_Base_MspInit+0xf8>)
 8002660:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002662:	f003 0310 	and.w	r3, r3, #16
 8002666:	617b      	str	r3, [r7, #20]
 8002668:	697b      	ldr	r3, [r7, #20]
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 800266a:	2200      	movs	r2, #0
 800266c:	2100      	movs	r1, #0
 800266e:	2036      	movs	r0, #54	; 0x36
 8002670:	f000 fd71 	bl	8003156 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8002674:	2036      	movs	r0, #54	; 0x36
 8002676:	f000 fd8a 	bl	800318e <HAL_NVIC_EnableIRQ>
}
 800267a:	e026      	b.n	80026ca <HAL_TIM_Base_MspInit+0xee>
  else if(htim_base->Instance==TIM9)
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	4a17      	ldr	r2, [pc, #92]	; (80026e0 <HAL_TIM_Base_MspInit+0x104>)
 8002682:	4293      	cmp	r3, r2
 8002684:	d10e      	bne.n	80026a4 <HAL_TIM_Base_MspInit+0xc8>
    __HAL_RCC_TIM9_CLK_ENABLE();
 8002686:	2300      	movs	r3, #0
 8002688:	613b      	str	r3, [r7, #16]
 800268a:	4b12      	ldr	r3, [pc, #72]	; (80026d4 <HAL_TIM_Base_MspInit+0xf8>)
 800268c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800268e:	4a11      	ldr	r2, [pc, #68]	; (80026d4 <HAL_TIM_Base_MspInit+0xf8>)
 8002690:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002694:	6453      	str	r3, [r2, #68]	; 0x44
 8002696:	4b0f      	ldr	r3, [pc, #60]	; (80026d4 <HAL_TIM_Base_MspInit+0xf8>)
 8002698:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800269a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800269e:	613b      	str	r3, [r7, #16]
 80026a0:	693b      	ldr	r3, [r7, #16]
}
 80026a2:	e012      	b.n	80026ca <HAL_TIM_Base_MspInit+0xee>
  else if(htim_base->Instance==TIM11)
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	4a0e      	ldr	r2, [pc, #56]	; (80026e4 <HAL_TIM_Base_MspInit+0x108>)
 80026aa:	4293      	cmp	r3, r2
 80026ac:	d10d      	bne.n	80026ca <HAL_TIM_Base_MspInit+0xee>
    __HAL_RCC_TIM11_CLK_ENABLE();
 80026ae:	2300      	movs	r3, #0
 80026b0:	60fb      	str	r3, [r7, #12]
 80026b2:	4b08      	ldr	r3, [pc, #32]	; (80026d4 <HAL_TIM_Base_MspInit+0xf8>)
 80026b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026b6:	4a07      	ldr	r2, [pc, #28]	; (80026d4 <HAL_TIM_Base_MspInit+0xf8>)
 80026b8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80026bc:	6453      	str	r3, [r2, #68]	; 0x44
 80026be:	4b05      	ldr	r3, [pc, #20]	; (80026d4 <HAL_TIM_Base_MspInit+0xf8>)
 80026c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026c2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80026c6:	60fb      	str	r3, [r7, #12]
 80026c8:	68fb      	ldr	r3, [r7, #12]
}
 80026ca:	bf00      	nop
 80026cc:	3720      	adds	r7, #32
 80026ce:	46bd      	mov	sp, r7
 80026d0:	bd80      	pop	{r7, pc}
 80026d2:	bf00      	nop
 80026d4:	40023800 	.word	0x40023800
 80026d8:	40000800 	.word	0x40000800
 80026dc:	40001000 	.word	0x40001000
 80026e0:	40014000 	.word	0x40014000
 80026e4:	40014800 	.word	0x40014800

080026e8 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 80026e8:	b580      	push	{r7, lr}
 80026ea:	b08c      	sub	sp, #48	; 0x30
 80026ec:	af00      	add	r7, sp, #0
 80026ee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80026f0:	f107 031c 	add.w	r3, r7, #28
 80026f4:	2200      	movs	r2, #0
 80026f6:	601a      	str	r2, [r3, #0]
 80026f8:	605a      	str	r2, [r3, #4]
 80026fa:	609a      	str	r2, [r3, #8]
 80026fc:	60da      	str	r2, [r3, #12]
 80026fe:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM3)
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	4a32      	ldr	r2, [pc, #200]	; (80027d0 <HAL_TIM_Encoder_MspInit+0xe8>)
 8002706:	4293      	cmp	r3, r2
 8002708:	d12c      	bne.n	8002764 <HAL_TIM_Encoder_MspInit+0x7c>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 800270a:	2300      	movs	r3, #0
 800270c:	61bb      	str	r3, [r7, #24]
 800270e:	4b31      	ldr	r3, [pc, #196]	; (80027d4 <HAL_TIM_Encoder_MspInit+0xec>)
 8002710:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002712:	4a30      	ldr	r2, [pc, #192]	; (80027d4 <HAL_TIM_Encoder_MspInit+0xec>)
 8002714:	f043 0302 	orr.w	r3, r3, #2
 8002718:	6413      	str	r3, [r2, #64]	; 0x40
 800271a:	4b2e      	ldr	r3, [pc, #184]	; (80027d4 <HAL_TIM_Encoder_MspInit+0xec>)
 800271c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800271e:	f003 0302 	and.w	r3, r3, #2
 8002722:	61bb      	str	r3, [r7, #24]
 8002724:	69bb      	ldr	r3, [r7, #24]
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002726:	2300      	movs	r3, #0
 8002728:	617b      	str	r3, [r7, #20]
 800272a:	4b2a      	ldr	r3, [pc, #168]	; (80027d4 <HAL_TIM_Encoder_MspInit+0xec>)
 800272c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800272e:	4a29      	ldr	r2, [pc, #164]	; (80027d4 <HAL_TIM_Encoder_MspInit+0xec>)
 8002730:	f043 0302 	orr.w	r3, r3, #2
 8002734:	6313      	str	r3, [r2, #48]	; 0x30
 8002736:	4b27      	ldr	r3, [pc, #156]	; (80027d4 <HAL_TIM_Encoder_MspInit+0xec>)
 8002738:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800273a:	f003 0302 	and.w	r3, r3, #2
 800273e:	617b      	str	r3, [r7, #20]
 8002740:	697b      	ldr	r3, [r7, #20]
    /**TIM3 GPIO Configuration    
    PB4     ------> TIM3_CH1
    PB5     ------> TIM3_CH2 
    */
    GPIO_InitStruct.Pin = ENCR_CHA_Pin|ENCR_CHB_Pin;
 8002742:	2330      	movs	r3, #48	; 0x30
 8002744:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002746:	2302      	movs	r3, #2
 8002748:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800274a:	2300      	movs	r3, #0
 800274c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800274e:	2300      	movs	r3, #0
 8002750:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002752:	2302      	movs	r3, #2
 8002754:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002756:	f107 031c 	add.w	r3, r7, #28
 800275a:	4619      	mov	r1, r3
 800275c:	481e      	ldr	r0, [pc, #120]	; (80027d8 <HAL_TIM_Encoder_MspInit+0xf0>)
 800275e:	f000 fdfd 	bl	800335c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }

}
 8002762:	e030      	b.n	80027c6 <HAL_TIM_Encoder_MspInit+0xde>
  else if(htim_encoder->Instance==TIM5)
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	4a1c      	ldr	r2, [pc, #112]	; (80027dc <HAL_TIM_Encoder_MspInit+0xf4>)
 800276a:	4293      	cmp	r3, r2
 800276c:	d12b      	bne.n	80027c6 <HAL_TIM_Encoder_MspInit+0xde>
    __HAL_RCC_TIM5_CLK_ENABLE();
 800276e:	2300      	movs	r3, #0
 8002770:	613b      	str	r3, [r7, #16]
 8002772:	4b18      	ldr	r3, [pc, #96]	; (80027d4 <HAL_TIM_Encoder_MspInit+0xec>)
 8002774:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002776:	4a17      	ldr	r2, [pc, #92]	; (80027d4 <HAL_TIM_Encoder_MspInit+0xec>)
 8002778:	f043 0308 	orr.w	r3, r3, #8
 800277c:	6413      	str	r3, [r2, #64]	; 0x40
 800277e:	4b15      	ldr	r3, [pc, #84]	; (80027d4 <HAL_TIM_Encoder_MspInit+0xec>)
 8002780:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002782:	f003 0308 	and.w	r3, r3, #8
 8002786:	613b      	str	r3, [r7, #16]
 8002788:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800278a:	2300      	movs	r3, #0
 800278c:	60fb      	str	r3, [r7, #12]
 800278e:	4b11      	ldr	r3, [pc, #68]	; (80027d4 <HAL_TIM_Encoder_MspInit+0xec>)
 8002790:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002792:	4a10      	ldr	r2, [pc, #64]	; (80027d4 <HAL_TIM_Encoder_MspInit+0xec>)
 8002794:	f043 0301 	orr.w	r3, r3, #1
 8002798:	6313      	str	r3, [r2, #48]	; 0x30
 800279a:	4b0e      	ldr	r3, [pc, #56]	; (80027d4 <HAL_TIM_Encoder_MspInit+0xec>)
 800279c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800279e:	f003 0301 	and.w	r3, r3, #1
 80027a2:	60fb      	str	r3, [r7, #12]
 80027a4:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = ENCL_CHA_Pin|ENCL_CHB_Pin;
 80027a6:	2303      	movs	r3, #3
 80027a8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80027aa:	2302      	movs	r3, #2
 80027ac:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027ae:	2300      	movs	r3, #0
 80027b0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80027b2:	2300      	movs	r3, #0
 80027b4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 80027b6:	2302      	movs	r3, #2
 80027b8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80027ba:	f107 031c 	add.w	r3, r7, #28
 80027be:	4619      	mov	r1, r3
 80027c0:	4807      	ldr	r0, [pc, #28]	; (80027e0 <HAL_TIM_Encoder_MspInit+0xf8>)
 80027c2:	f000 fdcb 	bl	800335c <HAL_GPIO_Init>
}
 80027c6:	bf00      	nop
 80027c8:	3730      	adds	r7, #48	; 0x30
 80027ca:	46bd      	mov	sp, r7
 80027cc:	bd80      	pop	{r7, pc}
 80027ce:	bf00      	nop
 80027d0:	40000400 	.word	0x40000400
 80027d4:	40023800 	.word	0x40023800
 80027d8:	40020400 	.word	0x40020400
 80027dc:	40000c00 	.word	0x40000c00
 80027e0:	40020000 	.word	0x40020000

080027e4 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 80027e4:	b480      	push	{r7}
 80027e6:	b085      	sub	sp, #20
 80027e8:	af00      	add	r7, sp, #0
 80027ea:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM12)
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	4a0b      	ldr	r2, [pc, #44]	; (8002820 <HAL_TIM_PWM_MspInit+0x3c>)
 80027f2:	4293      	cmp	r3, r2
 80027f4:	d10d      	bne.n	8002812 <HAL_TIM_PWM_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM12_MspInit 0 */

  /* USER CODE END TIM12_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM12_CLK_ENABLE();
 80027f6:	2300      	movs	r3, #0
 80027f8:	60fb      	str	r3, [r7, #12]
 80027fa:	4b0a      	ldr	r3, [pc, #40]	; (8002824 <HAL_TIM_PWM_MspInit+0x40>)
 80027fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027fe:	4a09      	ldr	r2, [pc, #36]	; (8002824 <HAL_TIM_PWM_MspInit+0x40>)
 8002800:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002804:	6413      	str	r3, [r2, #64]	; 0x40
 8002806:	4b07      	ldr	r3, [pc, #28]	; (8002824 <HAL_TIM_PWM_MspInit+0x40>)
 8002808:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800280a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800280e:	60fb      	str	r3, [r7, #12]
 8002810:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM12_MspInit 1 */

  /* USER CODE END TIM12_MspInit 1 */
  }

}
 8002812:	bf00      	nop
 8002814:	3714      	adds	r7, #20
 8002816:	46bd      	mov	sp, r7
 8002818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800281c:	4770      	bx	lr
 800281e:	bf00      	nop
 8002820:	40001800 	.word	0x40001800
 8002824:	40023800 	.word	0x40023800

08002828 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002828:	b580      	push	{r7, lr}
 800282a:	b08c      	sub	sp, #48	; 0x30
 800282c:	af00      	add	r7, sp, #0
 800282e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002830:	f107 031c 	add.w	r3, r7, #28
 8002834:	2200      	movs	r2, #0
 8002836:	601a      	str	r2, [r3, #0]
 8002838:	605a      	str	r2, [r3, #4]
 800283a:	609a      	str	r2, [r3, #8]
 800283c:	60da      	str	r2, [r3, #12]
 800283e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002848:	d11f      	bne.n	800288a <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800284a:	2300      	movs	r3, #0
 800284c:	61bb      	str	r3, [r7, #24]
 800284e:	4b47      	ldr	r3, [pc, #284]	; (800296c <HAL_TIM_MspPostInit+0x144>)
 8002850:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002852:	4a46      	ldr	r2, [pc, #280]	; (800296c <HAL_TIM_MspPostInit+0x144>)
 8002854:	f043 0302 	orr.w	r3, r3, #2
 8002858:	6313      	str	r3, [r2, #48]	; 0x30
 800285a:	4b44      	ldr	r3, [pc, #272]	; (800296c <HAL_TIM_MspPostInit+0x144>)
 800285c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800285e:	f003 0302 	and.w	r3, r3, #2
 8002862:	61bb      	str	r3, [r7, #24]
 8002864:	69bb      	ldr	r3, [r7, #24]
    /**TIM2 GPIO Configuration    
    PB10     ------> TIM2_CH3 
    */
    GPIO_InitStruct.Pin = ROMI_PWMR_Pin;
 8002866:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800286a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800286c:	2302      	movs	r3, #2
 800286e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002870:	2300      	movs	r3, #0
 8002872:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002874:	2300      	movs	r3, #0
 8002876:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002878:	2301      	movs	r3, #1
 800287a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(ROMI_PWMR_GPIO_Port, &GPIO_InitStruct);
 800287c:	f107 031c 	add.w	r3, r7, #28
 8002880:	4619      	mov	r1, r3
 8002882:	483b      	ldr	r0, [pc, #236]	; (8002970 <HAL_TIM_MspPostInit+0x148>)
 8002884:	f000 fd6a 	bl	800335c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM12_MspPostInit 1 */

  /* USER CODE END TIM12_MspPostInit 1 */
  }

}
 8002888:	e06c      	b.n	8002964 <HAL_TIM_MspPostInit+0x13c>
  else if(htim->Instance==TIM4)
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	4a39      	ldr	r2, [pc, #228]	; (8002974 <HAL_TIM_MspPostInit+0x14c>)
 8002890:	4293      	cmp	r3, r2
 8002892:	d11e      	bne.n	80028d2 <HAL_TIM_MspPostInit+0xaa>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002894:	2300      	movs	r3, #0
 8002896:	617b      	str	r3, [r7, #20]
 8002898:	4b34      	ldr	r3, [pc, #208]	; (800296c <HAL_TIM_MspPostInit+0x144>)
 800289a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800289c:	4a33      	ldr	r2, [pc, #204]	; (800296c <HAL_TIM_MspPostInit+0x144>)
 800289e:	f043 0302 	orr.w	r3, r3, #2
 80028a2:	6313      	str	r3, [r2, #48]	; 0x30
 80028a4:	4b31      	ldr	r3, [pc, #196]	; (800296c <HAL_TIM_MspPostInit+0x144>)
 80028a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028a8:	f003 0302 	and.w	r3, r3, #2
 80028ac:	617b      	str	r3, [r7, #20]
 80028ae:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = ROMI_PWML_Pin;
 80028b0:	2340      	movs	r3, #64	; 0x40
 80028b2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80028b4:	2302      	movs	r3, #2
 80028b6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028b8:	2300      	movs	r3, #0
 80028ba:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80028bc:	2300      	movs	r3, #0
 80028be:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 80028c0:	2302      	movs	r3, #2
 80028c2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(ROMI_PWML_GPIO_Port, &GPIO_InitStruct);
 80028c4:	f107 031c 	add.w	r3, r7, #28
 80028c8:	4619      	mov	r1, r3
 80028ca:	4829      	ldr	r0, [pc, #164]	; (8002970 <HAL_TIM_MspPostInit+0x148>)
 80028cc:	f000 fd46 	bl	800335c <HAL_GPIO_Init>
}
 80028d0:	e048      	b.n	8002964 <HAL_TIM_MspPostInit+0x13c>
  else if(htim->Instance==TIM11)
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	4a28      	ldr	r2, [pc, #160]	; (8002978 <HAL_TIM_MspPostInit+0x150>)
 80028d8:	4293      	cmp	r3, r2
 80028da:	d11f      	bne.n	800291c <HAL_TIM_MspPostInit+0xf4>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80028dc:	2300      	movs	r3, #0
 80028de:	613b      	str	r3, [r7, #16]
 80028e0:	4b22      	ldr	r3, [pc, #136]	; (800296c <HAL_TIM_MspPostInit+0x144>)
 80028e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028e4:	4a21      	ldr	r2, [pc, #132]	; (800296c <HAL_TIM_MspPostInit+0x144>)
 80028e6:	f043 0302 	orr.w	r3, r3, #2
 80028ea:	6313      	str	r3, [r2, #48]	; 0x30
 80028ec:	4b1f      	ldr	r3, [pc, #124]	; (800296c <HAL_TIM_MspPostInit+0x144>)
 80028ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028f0:	f003 0302 	and.w	r3, r3, #2
 80028f4:	613b      	str	r3, [r7, #16]
 80028f6:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = SERVO2_PWM_Pin;
 80028f8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80028fc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80028fe:	2302      	movs	r3, #2
 8002900:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002902:	2300      	movs	r3, #0
 8002904:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002906:	2300      	movs	r3, #0
 8002908:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM11;
 800290a:	2303      	movs	r3, #3
 800290c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(SERVO2_PWM_GPIO_Port, &GPIO_InitStruct);
 800290e:	f107 031c 	add.w	r3, r7, #28
 8002912:	4619      	mov	r1, r3
 8002914:	4816      	ldr	r0, [pc, #88]	; (8002970 <HAL_TIM_MspPostInit+0x148>)
 8002916:	f000 fd21 	bl	800335c <HAL_GPIO_Init>
}
 800291a:	e023      	b.n	8002964 <HAL_TIM_MspPostInit+0x13c>
  else if(htim->Instance==TIM12)
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	4a16      	ldr	r2, [pc, #88]	; (800297c <HAL_TIM_MspPostInit+0x154>)
 8002922:	4293      	cmp	r3, r2
 8002924:	d11e      	bne.n	8002964 <HAL_TIM_MspPostInit+0x13c>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002926:	2300      	movs	r3, #0
 8002928:	60fb      	str	r3, [r7, #12]
 800292a:	4b10      	ldr	r3, [pc, #64]	; (800296c <HAL_TIM_MspPostInit+0x144>)
 800292c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800292e:	4a0f      	ldr	r2, [pc, #60]	; (800296c <HAL_TIM_MspPostInit+0x144>)
 8002930:	f043 0302 	orr.w	r3, r3, #2
 8002934:	6313      	str	r3, [r2, #48]	; 0x30
 8002936:	4b0d      	ldr	r3, [pc, #52]	; (800296c <HAL_TIM_MspPostInit+0x144>)
 8002938:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800293a:	f003 0302 	and.w	r3, r3, #2
 800293e:	60fb      	str	r3, [r7, #12]
 8002940:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = SERVO1_PWM_Pin;
 8002942:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002946:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002948:	2302      	movs	r3, #2
 800294a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800294c:	2300      	movs	r3, #0
 800294e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002950:	2300      	movs	r3, #0
 8002952:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM12;
 8002954:	2309      	movs	r3, #9
 8002956:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(SERVO1_PWM_GPIO_Port, &GPIO_InitStruct);
 8002958:	f107 031c 	add.w	r3, r7, #28
 800295c:	4619      	mov	r1, r3
 800295e:	4804      	ldr	r0, [pc, #16]	; (8002970 <HAL_TIM_MspPostInit+0x148>)
 8002960:	f000 fcfc 	bl	800335c <HAL_GPIO_Init>
}
 8002964:	bf00      	nop
 8002966:	3730      	adds	r7, #48	; 0x30
 8002968:	46bd      	mov	sp, r7
 800296a:	bd80      	pop	{r7, pc}
 800296c:	40023800 	.word	0x40023800
 8002970:	40020400 	.word	0x40020400
 8002974:	40000800 	.word	0x40000800
 8002978:	40014800 	.word	0x40014800
 800297c:	40001800 	.word	0x40001800

08002980 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002980:	b580      	push	{r7, lr}
 8002982:	b08c      	sub	sp, #48	; 0x30
 8002984:	af00      	add	r7, sp, #0
 8002986:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002988:	f107 031c 	add.w	r3, r7, #28
 800298c:	2200      	movs	r2, #0
 800298e:	601a      	str	r2, [r3, #0]
 8002990:	605a      	str	r2, [r3, #4]
 8002992:	609a      	str	r2, [r3, #8]
 8002994:	60da      	str	r2, [r3, #12]
 8002996:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	4a32      	ldr	r2, [pc, #200]	; (8002a68 <HAL_UART_MspInit+0xe8>)
 800299e:	4293      	cmp	r3, r2
 80029a0:	d12c      	bne.n	80029fc <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80029a2:	2300      	movs	r3, #0
 80029a4:	61bb      	str	r3, [r7, #24]
 80029a6:	4b31      	ldr	r3, [pc, #196]	; (8002a6c <HAL_UART_MspInit+0xec>)
 80029a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029aa:	4a30      	ldr	r2, [pc, #192]	; (8002a6c <HAL_UART_MspInit+0xec>)
 80029ac:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80029b0:	6413      	str	r3, [r2, #64]	; 0x40
 80029b2:	4b2e      	ldr	r3, [pc, #184]	; (8002a6c <HAL_UART_MspInit+0xec>)
 80029b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80029ba:	61bb      	str	r3, [r7, #24]
 80029bc:	69bb      	ldr	r3, [r7, #24]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80029be:	2300      	movs	r3, #0
 80029c0:	617b      	str	r3, [r7, #20]
 80029c2:	4b2a      	ldr	r3, [pc, #168]	; (8002a6c <HAL_UART_MspInit+0xec>)
 80029c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029c6:	4a29      	ldr	r2, [pc, #164]	; (8002a6c <HAL_UART_MspInit+0xec>)
 80029c8:	f043 0301 	orr.w	r3, r3, #1
 80029cc:	6313      	str	r3, [r2, #48]	; 0x30
 80029ce:	4b27      	ldr	r3, [pc, #156]	; (8002a6c <HAL_UART_MspInit+0xec>)
 80029d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029d2:	f003 0301 	and.w	r3, r3, #1
 80029d6:	617b      	str	r3, [r7, #20]
 80029d8:	697b      	ldr	r3, [r7, #20]
    /**USART2 GPIO Configuration    
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80029da:	230c      	movs	r3, #12
 80029dc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80029de:	2302      	movs	r3, #2
 80029e0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029e2:	2300      	movs	r3, #0
 80029e4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80029e6:	2303      	movs	r3, #3
 80029e8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80029ea:	2307      	movs	r3, #7
 80029ec:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80029ee:	f107 031c 	add.w	r3, r7, #28
 80029f2:	4619      	mov	r1, r3
 80029f4:	481e      	ldr	r0, [pc, #120]	; (8002a70 <HAL_UART_MspInit+0xf0>)
 80029f6:	f000 fcb1 	bl	800335c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80029fa:	e031      	b.n	8002a60 <HAL_UART_MspInit+0xe0>
  else if(huart->Instance==USART3)
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	4a1c      	ldr	r2, [pc, #112]	; (8002a74 <HAL_UART_MspInit+0xf4>)
 8002a02:	4293      	cmp	r3, r2
 8002a04:	d12c      	bne.n	8002a60 <HAL_UART_MspInit+0xe0>
    __HAL_RCC_USART3_CLK_ENABLE();
 8002a06:	2300      	movs	r3, #0
 8002a08:	613b      	str	r3, [r7, #16]
 8002a0a:	4b18      	ldr	r3, [pc, #96]	; (8002a6c <HAL_UART_MspInit+0xec>)
 8002a0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a0e:	4a17      	ldr	r2, [pc, #92]	; (8002a6c <HAL_UART_MspInit+0xec>)
 8002a10:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002a14:	6413      	str	r3, [r2, #64]	; 0x40
 8002a16:	4b15      	ldr	r3, [pc, #84]	; (8002a6c <HAL_UART_MspInit+0xec>)
 8002a18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a1a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002a1e:	613b      	str	r3, [r7, #16]
 8002a20:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002a22:	2300      	movs	r3, #0
 8002a24:	60fb      	str	r3, [r7, #12]
 8002a26:	4b11      	ldr	r3, [pc, #68]	; (8002a6c <HAL_UART_MspInit+0xec>)
 8002a28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a2a:	4a10      	ldr	r2, [pc, #64]	; (8002a6c <HAL_UART_MspInit+0xec>)
 8002a2c:	f043 0304 	orr.w	r3, r3, #4
 8002a30:	6313      	str	r3, [r2, #48]	; 0x30
 8002a32:	4b0e      	ldr	r3, [pc, #56]	; (8002a6c <HAL_UART_MspInit+0xec>)
 8002a34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a36:	f003 0304 	and.w	r3, r3, #4
 8002a3a:	60fb      	str	r3, [r7, #12]
 8002a3c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8002a3e:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8002a42:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a44:	2302      	movs	r3, #2
 8002a46:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a48:	2300      	movs	r3, #0
 8002a4a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002a4c:	2303      	movs	r3, #3
 8002a4e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8002a50:	2307      	movs	r3, #7
 8002a52:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002a54:	f107 031c 	add.w	r3, r7, #28
 8002a58:	4619      	mov	r1, r3
 8002a5a:	4807      	ldr	r0, [pc, #28]	; (8002a78 <HAL_UART_MspInit+0xf8>)
 8002a5c:	f000 fc7e 	bl	800335c <HAL_GPIO_Init>
}
 8002a60:	bf00      	nop
 8002a62:	3730      	adds	r7, #48	; 0x30
 8002a64:	46bd      	mov	sp, r7
 8002a66:	bd80      	pop	{r7, pc}
 8002a68:	40004400 	.word	0x40004400
 8002a6c:	40023800 	.word	0x40023800
 8002a70:	40020000 	.word	0x40020000
 8002a74:	40004800 	.word	0x40004800
 8002a78:	40020800 	.word	0x40020800

08002a7c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002a7c:	b480      	push	{r7}
 8002a7e:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8002a80:	bf00      	nop
 8002a82:	46bd      	mov	sp, r7
 8002a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a88:	4770      	bx	lr

08002a8a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002a8a:	b480      	push	{r7}
 8002a8c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002a8e:	e7fe      	b.n	8002a8e <HardFault_Handler+0x4>

08002a90 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002a90:	b480      	push	{r7}
 8002a92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002a94:	e7fe      	b.n	8002a94 <MemManage_Handler+0x4>

08002a96 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002a96:	b480      	push	{r7}
 8002a98:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002a9a:	e7fe      	b.n	8002a9a <BusFault_Handler+0x4>

08002a9c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002a9c:	b480      	push	{r7}
 8002a9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002aa0:	e7fe      	b.n	8002aa0 <UsageFault_Handler+0x4>

08002aa2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002aa2:	b480      	push	{r7}
 8002aa4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002aa6:	bf00      	nop
 8002aa8:	46bd      	mov	sp, r7
 8002aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aae:	4770      	bx	lr

08002ab0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002ab0:	b480      	push	{r7}
 8002ab2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002ab4:	bf00      	nop
 8002ab6:	46bd      	mov	sp, r7
 8002ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002abc:	4770      	bx	lr

08002abe <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002abe:	b480      	push	{r7}
 8002ac0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002ac2:	bf00      	nop
 8002ac4:	46bd      	mov	sp, r7
 8002ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aca:	4770      	bx	lr

08002acc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002acc:	b580      	push	{r7, lr}
 8002ace:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002ad0:	f000 f928 	bl	8002d24 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002ad4:	bf00      	nop
 8002ad6:	bd80      	pop	{r7, pc}

08002ad8 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8002ad8:	b580      	push	{r7, lr}
 8002ada:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8002adc:	4802      	ldr	r0, [pc, #8]	; (8002ae8 <TIM2_IRQHandler+0x10>)
 8002ade:	f002 f9a1 	bl	8004e24 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8002ae2:	bf00      	nop
 8002ae4:	bd80      	pop	{r7, pc}
 8002ae6:	bf00      	nop
 8002ae8:	200008ec 	.word	0x200008ec

08002aec <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8002aec:	b580      	push	{r7, lr}
 8002aee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_DAC_IRQHandler(&hdac);
 8002af0:	4803      	ldr	r0, [pc, #12]	; (8002b00 <TIM6_DAC_IRQHandler+0x14>)
 8002af2:	f000 fb88 	bl	8003206 <HAL_DAC_IRQHandler>
  HAL_TIM_IRQHandler(&htim6);
 8002af6:	4803      	ldr	r0, [pc, #12]	; (8002b04 <TIM6_DAC_IRQHandler+0x18>)
 8002af8:	f002 f994 	bl	8004e24 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8002afc:	bf00      	nop
 8002afe:	bd80      	pop	{r7, pc}
 8002b00:	20000800 	.word	0x20000800
 8002b04:	20000814 	.word	0x20000814

08002b08 <_write>:

return len;
}

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002b08:	b580      	push	{r7, lr}
 8002b0a:	b086      	sub	sp, #24
 8002b0c:	af00      	add	r7, sp, #0
 8002b0e:	60f8      	str	r0, [r7, #12]
 8002b10:	60b9      	str	r1, [r7, #8]
 8002b12:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002b14:	2300      	movs	r3, #0
 8002b16:	617b      	str	r3, [r7, #20]
 8002b18:	e009      	b.n	8002b2e <_write+0x26>
	{
		__io_putchar(*ptr++);
 8002b1a:	68bb      	ldr	r3, [r7, #8]
 8002b1c:	1c5a      	adds	r2, r3, #1
 8002b1e:	60ba      	str	r2, [r7, #8]
 8002b20:	781b      	ldrb	r3, [r3, #0]
 8002b22:	4618      	mov	r0, r3
 8002b24:	f7ff fb0c 	bl	8002140 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002b28:	697b      	ldr	r3, [r7, #20]
 8002b2a:	3301      	adds	r3, #1
 8002b2c:	617b      	str	r3, [r7, #20]
 8002b2e:	697a      	ldr	r2, [r7, #20]
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	429a      	cmp	r2, r3
 8002b34:	dbf1      	blt.n	8002b1a <_write+0x12>
	}
	return len;
 8002b36:	687b      	ldr	r3, [r7, #4]
}
 8002b38:	4618      	mov	r0, r3
 8002b3a:	3718      	adds	r7, #24
 8002b3c:	46bd      	mov	sp, r7
 8002b3e:	bd80      	pop	{r7, pc}

08002b40 <_close>:

int _close(int file)
{
 8002b40:	b480      	push	{r7}
 8002b42:	b083      	sub	sp, #12
 8002b44:	af00      	add	r7, sp, #0
 8002b46:	6078      	str	r0, [r7, #4]
	return -1;
 8002b48:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002b4c:	4618      	mov	r0, r3
 8002b4e:	370c      	adds	r7, #12
 8002b50:	46bd      	mov	sp, r7
 8002b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b56:	4770      	bx	lr

08002b58 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002b58:	b480      	push	{r7}
 8002b5a:	b083      	sub	sp, #12
 8002b5c:	af00      	add	r7, sp, #0
 8002b5e:	6078      	str	r0, [r7, #4]
 8002b60:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8002b62:	683b      	ldr	r3, [r7, #0]
 8002b64:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002b68:	605a      	str	r2, [r3, #4]
	return 0;
 8002b6a:	2300      	movs	r3, #0
}
 8002b6c:	4618      	mov	r0, r3
 8002b6e:	370c      	adds	r7, #12
 8002b70:	46bd      	mov	sp, r7
 8002b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b76:	4770      	bx	lr

08002b78 <_isatty>:

int _isatty(int file)
{
 8002b78:	b480      	push	{r7}
 8002b7a:	b083      	sub	sp, #12
 8002b7c:	af00      	add	r7, sp, #0
 8002b7e:	6078      	str	r0, [r7, #4]
	return 1;
 8002b80:	2301      	movs	r3, #1
}
 8002b82:	4618      	mov	r0, r3
 8002b84:	370c      	adds	r7, #12
 8002b86:	46bd      	mov	sp, r7
 8002b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b8c:	4770      	bx	lr

08002b8e <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002b8e:	b480      	push	{r7}
 8002b90:	b085      	sub	sp, #20
 8002b92:	af00      	add	r7, sp, #0
 8002b94:	60f8      	str	r0, [r7, #12]
 8002b96:	60b9      	str	r1, [r7, #8]
 8002b98:	607a      	str	r2, [r7, #4]
	return 0;
 8002b9a:	2300      	movs	r3, #0
}
 8002b9c:	4618      	mov	r0, r3
 8002b9e:	3714      	adds	r7, #20
 8002ba0:	46bd      	mov	sp, r7
 8002ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ba6:	4770      	bx	lr

08002ba8 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8002ba8:	b580      	push	{r7, lr}
 8002baa:	b084      	sub	sp, #16
 8002bac:	af00      	add	r7, sp, #0
 8002bae:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8002bb0:	4b11      	ldr	r3, [pc, #68]	; (8002bf8 <_sbrk+0x50>)
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	2b00      	cmp	r3, #0
 8002bb6:	d102      	bne.n	8002bbe <_sbrk+0x16>
		heap_end = &end;
 8002bb8:	4b0f      	ldr	r3, [pc, #60]	; (8002bf8 <_sbrk+0x50>)
 8002bba:	4a10      	ldr	r2, [pc, #64]	; (8002bfc <_sbrk+0x54>)
 8002bbc:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8002bbe:	4b0e      	ldr	r3, [pc, #56]	; (8002bf8 <_sbrk+0x50>)
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8002bc4:	4b0c      	ldr	r3, [pc, #48]	; (8002bf8 <_sbrk+0x50>)
 8002bc6:	681a      	ldr	r2, [r3, #0]
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	4413      	add	r3, r2
 8002bcc:	466a      	mov	r2, sp
 8002bce:	4293      	cmp	r3, r2
 8002bd0:	d907      	bls.n	8002be2 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8002bd2:	f003 fced 	bl	80065b0 <__errno>
 8002bd6:	4602      	mov	r2, r0
 8002bd8:	230c      	movs	r3, #12
 8002bda:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8002bdc:	f04f 33ff 	mov.w	r3, #4294967295
 8002be0:	e006      	b.n	8002bf0 <_sbrk+0x48>
	}

	heap_end += incr;
 8002be2:	4b05      	ldr	r3, [pc, #20]	; (8002bf8 <_sbrk+0x50>)
 8002be4:	681a      	ldr	r2, [r3, #0]
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	4413      	add	r3, r2
 8002bea:	4a03      	ldr	r2, [pc, #12]	; (8002bf8 <_sbrk+0x50>)
 8002bec:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8002bee:	68fb      	ldr	r3, [r7, #12]
}
 8002bf0:	4618      	mov	r0, r3
 8002bf2:	3710      	adds	r7, #16
 8002bf4:	46bd      	mov	sp, r7
 8002bf6:	bd80      	pop	{r7, pc}
 8002bf8:	20000608 	.word	0x20000608
 8002bfc:	200009e0 	.word	0x200009e0

08002c00 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002c00:	b480      	push	{r7}
 8002c02:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002c04:	4b08      	ldr	r3, [pc, #32]	; (8002c28 <SystemInit+0x28>)
 8002c06:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c0a:	4a07      	ldr	r2, [pc, #28]	; (8002c28 <SystemInit+0x28>)
 8002c0c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002c10:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8002c14:	4b04      	ldr	r3, [pc, #16]	; (8002c28 <SystemInit+0x28>)
 8002c16:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002c1a:	609a      	str	r2, [r3, #8]
#endif
}
 8002c1c:	bf00      	nop
 8002c1e:	46bd      	mov	sp, r7
 8002c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c24:	4770      	bx	lr
 8002c26:	bf00      	nop
 8002c28:	e000ed00 	.word	0xe000ed00

08002c2c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8002c2c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002c64 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8002c30:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8002c32:	e003      	b.n	8002c3c <LoopCopyDataInit>

08002c34 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8002c34:	4b0c      	ldr	r3, [pc, #48]	; (8002c68 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8002c36:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8002c38:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8002c3a:	3104      	adds	r1, #4

08002c3c <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8002c3c:	480b      	ldr	r0, [pc, #44]	; (8002c6c <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8002c3e:	4b0c      	ldr	r3, [pc, #48]	; (8002c70 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8002c40:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8002c42:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8002c44:	d3f6      	bcc.n	8002c34 <CopyDataInit>
  ldr  r2, =_sbss
 8002c46:	4a0b      	ldr	r2, [pc, #44]	; (8002c74 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8002c48:	e002      	b.n	8002c50 <LoopFillZerobss>

08002c4a <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8002c4a:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8002c4c:	f842 3b04 	str.w	r3, [r2], #4

08002c50 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8002c50:	4b09      	ldr	r3, [pc, #36]	; (8002c78 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8002c52:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8002c54:	d3f9      	bcc.n	8002c4a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8002c56:	f7ff ffd3 	bl	8002c00 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002c5a:	f003 fda7 	bl	80067ac <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002c5e:	f7fe fd1b 	bl	8001698 <main>
  bx  lr    
 8002c62:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8002c64:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8002c68:	08009f38 	.word	0x08009f38
  ldr  r0, =_sdata
 8002c6c:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8002c70:	200001e4 	.word	0x200001e4
  ldr  r2, =_sbss
 8002c74:	200001e4 	.word	0x200001e4
  ldr  r3, = _ebss
 8002c78:	200009dc 	.word	0x200009dc

08002c7c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002c7c:	e7fe      	b.n	8002c7c <ADC_IRQHandler>
	...

08002c80 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002c80:	b580      	push	{r7, lr}
 8002c82:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002c84:	4b0e      	ldr	r3, [pc, #56]	; (8002cc0 <HAL_Init+0x40>)
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	4a0d      	ldr	r2, [pc, #52]	; (8002cc0 <HAL_Init+0x40>)
 8002c8a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002c8e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002c90:	4b0b      	ldr	r3, [pc, #44]	; (8002cc0 <HAL_Init+0x40>)
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	4a0a      	ldr	r2, [pc, #40]	; (8002cc0 <HAL_Init+0x40>)
 8002c96:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002c9a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002c9c:	4b08      	ldr	r3, [pc, #32]	; (8002cc0 <HAL_Init+0x40>)
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	4a07      	ldr	r2, [pc, #28]	; (8002cc0 <HAL_Init+0x40>)
 8002ca2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002ca6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002ca8:	2003      	movs	r0, #3
 8002caa:	f000 fa49 	bl	8003140 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002cae:	2000      	movs	r0, #0
 8002cb0:	f000 f808 	bl	8002cc4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002cb4:	f7ff face 	bl	8002254 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002cb8:	2300      	movs	r3, #0
}
 8002cba:	4618      	mov	r0, r3
 8002cbc:	bd80      	pop	{r7, pc}
 8002cbe:	bf00      	nop
 8002cc0:	40023c00 	.word	0x40023c00

08002cc4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002cc4:	b580      	push	{r7, lr}
 8002cc6:	b082      	sub	sp, #8
 8002cc8:	af00      	add	r7, sp, #0
 8002cca:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002ccc:	4b12      	ldr	r3, [pc, #72]	; (8002d18 <HAL_InitTick+0x54>)
 8002cce:	681a      	ldr	r2, [r3, #0]
 8002cd0:	4b12      	ldr	r3, [pc, #72]	; (8002d1c <HAL_InitTick+0x58>)
 8002cd2:	781b      	ldrb	r3, [r3, #0]
 8002cd4:	4619      	mov	r1, r3
 8002cd6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002cda:	fbb3 f3f1 	udiv	r3, r3, r1
 8002cde:	fbb2 f3f3 	udiv	r3, r2, r3
 8002ce2:	4618      	mov	r0, r3
 8002ce4:	f000 fa61 	bl	80031aa <HAL_SYSTICK_Config>
 8002ce8:	4603      	mov	r3, r0
 8002cea:	2b00      	cmp	r3, #0
 8002cec:	d001      	beq.n	8002cf2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002cee:	2301      	movs	r3, #1
 8002cf0:	e00e      	b.n	8002d10 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	2b0f      	cmp	r3, #15
 8002cf6:	d80a      	bhi.n	8002d0e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002cf8:	2200      	movs	r2, #0
 8002cfa:	6879      	ldr	r1, [r7, #4]
 8002cfc:	f04f 30ff 	mov.w	r0, #4294967295
 8002d00:	f000 fa29 	bl	8003156 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002d04:	4a06      	ldr	r2, [pc, #24]	; (8002d20 <HAL_InitTick+0x5c>)
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002d0a:	2300      	movs	r3, #0
 8002d0c:	e000      	b.n	8002d10 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002d0e:	2301      	movs	r3, #1
}
 8002d10:	4618      	mov	r0, r3
 8002d12:	3708      	adds	r7, #8
 8002d14:	46bd      	mov	sp, r7
 8002d16:	bd80      	pop	{r7, pc}
 8002d18:	20000008 	.word	0x20000008
 8002d1c:	20000010 	.word	0x20000010
 8002d20:	2000000c 	.word	0x2000000c

08002d24 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002d24:	b480      	push	{r7}
 8002d26:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002d28:	4b06      	ldr	r3, [pc, #24]	; (8002d44 <HAL_IncTick+0x20>)
 8002d2a:	781b      	ldrb	r3, [r3, #0]
 8002d2c:	461a      	mov	r2, r3
 8002d2e:	4b06      	ldr	r3, [pc, #24]	; (8002d48 <HAL_IncTick+0x24>)
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	4413      	add	r3, r2
 8002d34:	4a04      	ldr	r2, [pc, #16]	; (8002d48 <HAL_IncTick+0x24>)
 8002d36:	6013      	str	r3, [r2, #0]
}
 8002d38:	bf00      	nop
 8002d3a:	46bd      	mov	sp, r7
 8002d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d40:	4770      	bx	lr
 8002d42:	bf00      	nop
 8002d44:	20000010 	.word	0x20000010
 8002d48:	200009d4 	.word	0x200009d4

08002d4c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002d4c:	b480      	push	{r7}
 8002d4e:	af00      	add	r7, sp, #0
  return uwTick;
 8002d50:	4b03      	ldr	r3, [pc, #12]	; (8002d60 <HAL_GetTick+0x14>)
 8002d52:	681b      	ldr	r3, [r3, #0]
}
 8002d54:	4618      	mov	r0, r3
 8002d56:	46bd      	mov	sp, r7
 8002d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d5c:	4770      	bx	lr
 8002d5e:	bf00      	nop
 8002d60:	200009d4 	.word	0x200009d4

08002d64 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002d64:	b580      	push	{r7, lr}
 8002d66:	b084      	sub	sp, #16
 8002d68:	af00      	add	r7, sp, #0
 8002d6a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002d6c:	f7ff ffee 	bl	8002d4c <HAL_GetTick>
 8002d70:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002d76:	68fb      	ldr	r3, [r7, #12]
 8002d78:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d7c:	d005      	beq.n	8002d8a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002d7e:	4b09      	ldr	r3, [pc, #36]	; (8002da4 <HAL_Delay+0x40>)
 8002d80:	781b      	ldrb	r3, [r3, #0]
 8002d82:	461a      	mov	r2, r3
 8002d84:	68fb      	ldr	r3, [r7, #12]
 8002d86:	4413      	add	r3, r2
 8002d88:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002d8a:	bf00      	nop
 8002d8c:	f7ff ffde 	bl	8002d4c <HAL_GetTick>
 8002d90:	4602      	mov	r2, r0
 8002d92:	68bb      	ldr	r3, [r7, #8]
 8002d94:	1ad3      	subs	r3, r2, r3
 8002d96:	68fa      	ldr	r2, [r7, #12]
 8002d98:	429a      	cmp	r2, r3
 8002d9a:	d8f7      	bhi.n	8002d8c <HAL_Delay+0x28>
  {
  }
}
 8002d9c:	bf00      	nop
 8002d9e:	3710      	adds	r7, #16
 8002da0:	46bd      	mov	sp, r7
 8002da2:	bd80      	pop	{r7, pc}
 8002da4:	20000010 	.word	0x20000010

08002da8 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8002da8:	b580      	push	{r7, lr}
 8002daa:	b084      	sub	sp, #16
 8002dac:	af00      	add	r7, sp, #0
 8002dae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	2b00      	cmp	r3, #0
 8002db4:	d101      	bne.n	8002dba <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8002db6:	2301      	movs	r3, #1
 8002db8:	e0ed      	b.n	8002f96 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002dc0:	b2db      	uxtb	r3, r3
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	d102      	bne.n	8002dcc <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8002dc6:	6878      	ldr	r0, [r7, #4]
 8002dc8:	f7ff fa6c 	bl	80022a4 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	681a      	ldr	r2, [r3, #0]
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	f022 0202 	bic.w	r2, r2, #2
 8002dda:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002ddc:	f7ff ffb6 	bl	8002d4c <HAL_GetTick>
 8002de0:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8002de2:	e012      	b.n	8002e0a <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002de4:	f7ff ffb2 	bl	8002d4c <HAL_GetTick>
 8002de8:	4602      	mov	r2, r0
 8002dea:	68fb      	ldr	r3, [r7, #12]
 8002dec:	1ad3      	subs	r3, r2, r3
 8002dee:	2b0a      	cmp	r3, #10
 8002df0:	d90b      	bls.n	8002e0a <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002df6:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	2205      	movs	r2, #5
 8002e02:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8002e06:	2301      	movs	r3, #1
 8002e08:	e0c5      	b.n	8002f96 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	685b      	ldr	r3, [r3, #4]
 8002e10:	f003 0302 	and.w	r3, r3, #2
 8002e14:	2b00      	cmp	r3, #0
 8002e16:	d1e5      	bne.n	8002de4 <HAL_CAN_Init+0x3c>
    }
  }

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	681a      	ldr	r2, [r3, #0]
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	f042 0201 	orr.w	r2, r2, #1
 8002e26:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002e28:	f7ff ff90 	bl	8002d4c <HAL_GetTick>
 8002e2c:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8002e2e:	e012      	b.n	8002e56 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002e30:	f7ff ff8c 	bl	8002d4c <HAL_GetTick>
 8002e34:	4602      	mov	r2, r0
 8002e36:	68fb      	ldr	r3, [r7, #12]
 8002e38:	1ad3      	subs	r3, r2, r3
 8002e3a:	2b0a      	cmp	r3, #10
 8002e3c:	d90b      	bls.n	8002e56 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e42:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	2205      	movs	r2, #5
 8002e4e:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8002e52:	2301      	movs	r3, #1
 8002e54:	e09f      	b.n	8002f96 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	685b      	ldr	r3, [r3, #4]
 8002e5c:	f003 0301 	and.w	r3, r3, #1
 8002e60:	2b00      	cmp	r3, #0
 8002e62:	d0e5      	beq.n	8002e30 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	7e1b      	ldrb	r3, [r3, #24]
 8002e68:	2b01      	cmp	r3, #1
 8002e6a:	d108      	bne.n	8002e7e <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	681a      	ldr	r2, [r3, #0]
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002e7a:	601a      	str	r2, [r3, #0]
 8002e7c:	e007      	b.n	8002e8e <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	681a      	ldr	r2, [r3, #0]
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002e8c:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	7e5b      	ldrb	r3, [r3, #25]
 8002e92:	2b01      	cmp	r3, #1
 8002e94:	d108      	bne.n	8002ea8 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	681a      	ldr	r2, [r3, #0]
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002ea4:	601a      	str	r2, [r3, #0]
 8002ea6:	e007      	b.n	8002eb8 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	681a      	ldr	r2, [r3, #0]
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002eb6:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	7e9b      	ldrb	r3, [r3, #26]
 8002ebc:	2b01      	cmp	r3, #1
 8002ebe:	d108      	bne.n	8002ed2 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	681a      	ldr	r2, [r3, #0]
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	f042 0220 	orr.w	r2, r2, #32
 8002ece:	601a      	str	r2, [r3, #0]
 8002ed0:	e007      	b.n	8002ee2 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	681a      	ldr	r2, [r3, #0]
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	f022 0220 	bic.w	r2, r2, #32
 8002ee0:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	7edb      	ldrb	r3, [r3, #27]
 8002ee6:	2b01      	cmp	r3, #1
 8002ee8:	d108      	bne.n	8002efc <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	681a      	ldr	r2, [r3, #0]
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	f022 0210 	bic.w	r2, r2, #16
 8002ef8:	601a      	str	r2, [r3, #0]
 8002efa:	e007      	b.n	8002f0c <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	681a      	ldr	r2, [r3, #0]
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	f042 0210 	orr.w	r2, r2, #16
 8002f0a:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	7f1b      	ldrb	r3, [r3, #28]
 8002f10:	2b01      	cmp	r3, #1
 8002f12:	d108      	bne.n	8002f26 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	681a      	ldr	r2, [r3, #0]
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	f042 0208 	orr.w	r2, r2, #8
 8002f22:	601a      	str	r2, [r3, #0]
 8002f24:	e007      	b.n	8002f36 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	681a      	ldr	r2, [r3, #0]
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	f022 0208 	bic.w	r2, r2, #8
 8002f34:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	7f5b      	ldrb	r3, [r3, #29]
 8002f3a:	2b01      	cmp	r3, #1
 8002f3c:	d108      	bne.n	8002f50 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	681a      	ldr	r2, [r3, #0]
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	f042 0204 	orr.w	r2, r2, #4
 8002f4c:	601a      	str	r2, [r3, #0]
 8002f4e:	e007      	b.n	8002f60 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	681a      	ldr	r2, [r3, #0]
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	f022 0204 	bic.w	r2, r2, #4
 8002f5e:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	689a      	ldr	r2, [r3, #8]
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	68db      	ldr	r3, [r3, #12]
 8002f68:	431a      	orrs	r2, r3
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	691b      	ldr	r3, [r3, #16]
 8002f6e:	431a      	orrs	r2, r3
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	695b      	ldr	r3, [r3, #20]
 8002f74:	ea42 0103 	orr.w	r1, r2, r3
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	685b      	ldr	r3, [r3, #4]
 8002f7c:	1e5a      	subs	r2, r3, #1
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	430a      	orrs	r2, r1
 8002f84:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	2200      	movs	r2, #0
 8002f8a:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	2201      	movs	r2, #1
 8002f90:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8002f94:	2300      	movs	r3, #0
}
 8002f96:	4618      	mov	r0, r3
 8002f98:	3710      	adds	r7, #16
 8002f9a:	46bd      	mov	sp, r7
 8002f9c:	bd80      	pop	{r7, pc}
	...

08002fa0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002fa0:	b480      	push	{r7}
 8002fa2:	b085      	sub	sp, #20
 8002fa4:	af00      	add	r7, sp, #0
 8002fa6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	f003 0307 	and.w	r3, r3, #7
 8002fae:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002fb0:	4b0c      	ldr	r3, [pc, #48]	; (8002fe4 <__NVIC_SetPriorityGrouping+0x44>)
 8002fb2:	68db      	ldr	r3, [r3, #12]
 8002fb4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002fb6:	68ba      	ldr	r2, [r7, #8]
 8002fb8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002fbc:	4013      	ands	r3, r2
 8002fbe:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002fc0:	68fb      	ldr	r3, [r7, #12]
 8002fc2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002fc4:	68bb      	ldr	r3, [r7, #8]
 8002fc6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002fc8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002fcc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002fd0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002fd2:	4a04      	ldr	r2, [pc, #16]	; (8002fe4 <__NVIC_SetPriorityGrouping+0x44>)
 8002fd4:	68bb      	ldr	r3, [r7, #8]
 8002fd6:	60d3      	str	r3, [r2, #12]
}
 8002fd8:	bf00      	nop
 8002fda:	3714      	adds	r7, #20
 8002fdc:	46bd      	mov	sp, r7
 8002fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fe2:	4770      	bx	lr
 8002fe4:	e000ed00 	.word	0xe000ed00

08002fe8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002fe8:	b480      	push	{r7}
 8002fea:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002fec:	4b04      	ldr	r3, [pc, #16]	; (8003000 <__NVIC_GetPriorityGrouping+0x18>)
 8002fee:	68db      	ldr	r3, [r3, #12]
 8002ff0:	0a1b      	lsrs	r3, r3, #8
 8002ff2:	f003 0307 	and.w	r3, r3, #7
}
 8002ff6:	4618      	mov	r0, r3
 8002ff8:	46bd      	mov	sp, r7
 8002ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ffe:	4770      	bx	lr
 8003000:	e000ed00 	.word	0xe000ed00

08003004 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003004:	b480      	push	{r7}
 8003006:	b083      	sub	sp, #12
 8003008:	af00      	add	r7, sp, #0
 800300a:	4603      	mov	r3, r0
 800300c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800300e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003012:	2b00      	cmp	r3, #0
 8003014:	db0b      	blt.n	800302e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003016:	79fb      	ldrb	r3, [r7, #7]
 8003018:	f003 021f 	and.w	r2, r3, #31
 800301c:	4907      	ldr	r1, [pc, #28]	; (800303c <__NVIC_EnableIRQ+0x38>)
 800301e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003022:	095b      	lsrs	r3, r3, #5
 8003024:	2001      	movs	r0, #1
 8003026:	fa00 f202 	lsl.w	r2, r0, r2
 800302a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800302e:	bf00      	nop
 8003030:	370c      	adds	r7, #12
 8003032:	46bd      	mov	sp, r7
 8003034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003038:	4770      	bx	lr
 800303a:	bf00      	nop
 800303c:	e000e100 	.word	0xe000e100

08003040 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003040:	b480      	push	{r7}
 8003042:	b083      	sub	sp, #12
 8003044:	af00      	add	r7, sp, #0
 8003046:	4603      	mov	r3, r0
 8003048:	6039      	str	r1, [r7, #0]
 800304a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800304c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003050:	2b00      	cmp	r3, #0
 8003052:	db0a      	blt.n	800306a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003054:	683b      	ldr	r3, [r7, #0]
 8003056:	b2da      	uxtb	r2, r3
 8003058:	490c      	ldr	r1, [pc, #48]	; (800308c <__NVIC_SetPriority+0x4c>)
 800305a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800305e:	0112      	lsls	r2, r2, #4
 8003060:	b2d2      	uxtb	r2, r2
 8003062:	440b      	add	r3, r1
 8003064:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003068:	e00a      	b.n	8003080 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800306a:	683b      	ldr	r3, [r7, #0]
 800306c:	b2da      	uxtb	r2, r3
 800306e:	4908      	ldr	r1, [pc, #32]	; (8003090 <__NVIC_SetPriority+0x50>)
 8003070:	79fb      	ldrb	r3, [r7, #7]
 8003072:	f003 030f 	and.w	r3, r3, #15
 8003076:	3b04      	subs	r3, #4
 8003078:	0112      	lsls	r2, r2, #4
 800307a:	b2d2      	uxtb	r2, r2
 800307c:	440b      	add	r3, r1
 800307e:	761a      	strb	r2, [r3, #24]
}
 8003080:	bf00      	nop
 8003082:	370c      	adds	r7, #12
 8003084:	46bd      	mov	sp, r7
 8003086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800308a:	4770      	bx	lr
 800308c:	e000e100 	.word	0xe000e100
 8003090:	e000ed00 	.word	0xe000ed00

08003094 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003094:	b480      	push	{r7}
 8003096:	b089      	sub	sp, #36	; 0x24
 8003098:	af00      	add	r7, sp, #0
 800309a:	60f8      	str	r0, [r7, #12]
 800309c:	60b9      	str	r1, [r7, #8]
 800309e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80030a0:	68fb      	ldr	r3, [r7, #12]
 80030a2:	f003 0307 	and.w	r3, r3, #7
 80030a6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80030a8:	69fb      	ldr	r3, [r7, #28]
 80030aa:	f1c3 0307 	rsb	r3, r3, #7
 80030ae:	2b04      	cmp	r3, #4
 80030b0:	bf28      	it	cs
 80030b2:	2304      	movcs	r3, #4
 80030b4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80030b6:	69fb      	ldr	r3, [r7, #28]
 80030b8:	3304      	adds	r3, #4
 80030ba:	2b06      	cmp	r3, #6
 80030bc:	d902      	bls.n	80030c4 <NVIC_EncodePriority+0x30>
 80030be:	69fb      	ldr	r3, [r7, #28]
 80030c0:	3b03      	subs	r3, #3
 80030c2:	e000      	b.n	80030c6 <NVIC_EncodePriority+0x32>
 80030c4:	2300      	movs	r3, #0
 80030c6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80030c8:	f04f 32ff 	mov.w	r2, #4294967295
 80030cc:	69bb      	ldr	r3, [r7, #24]
 80030ce:	fa02 f303 	lsl.w	r3, r2, r3
 80030d2:	43da      	mvns	r2, r3
 80030d4:	68bb      	ldr	r3, [r7, #8]
 80030d6:	401a      	ands	r2, r3
 80030d8:	697b      	ldr	r3, [r7, #20]
 80030da:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80030dc:	f04f 31ff 	mov.w	r1, #4294967295
 80030e0:	697b      	ldr	r3, [r7, #20]
 80030e2:	fa01 f303 	lsl.w	r3, r1, r3
 80030e6:	43d9      	mvns	r1, r3
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80030ec:	4313      	orrs	r3, r2
         );
}
 80030ee:	4618      	mov	r0, r3
 80030f0:	3724      	adds	r7, #36	; 0x24
 80030f2:	46bd      	mov	sp, r7
 80030f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030f8:	4770      	bx	lr
	...

080030fc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80030fc:	b580      	push	{r7, lr}
 80030fe:	b082      	sub	sp, #8
 8003100:	af00      	add	r7, sp, #0
 8003102:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	3b01      	subs	r3, #1
 8003108:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800310c:	d301      	bcc.n	8003112 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800310e:	2301      	movs	r3, #1
 8003110:	e00f      	b.n	8003132 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003112:	4a0a      	ldr	r2, [pc, #40]	; (800313c <SysTick_Config+0x40>)
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	3b01      	subs	r3, #1
 8003118:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800311a:	210f      	movs	r1, #15
 800311c:	f04f 30ff 	mov.w	r0, #4294967295
 8003120:	f7ff ff8e 	bl	8003040 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003124:	4b05      	ldr	r3, [pc, #20]	; (800313c <SysTick_Config+0x40>)
 8003126:	2200      	movs	r2, #0
 8003128:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800312a:	4b04      	ldr	r3, [pc, #16]	; (800313c <SysTick_Config+0x40>)
 800312c:	2207      	movs	r2, #7
 800312e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003130:	2300      	movs	r3, #0
}
 8003132:	4618      	mov	r0, r3
 8003134:	3708      	adds	r7, #8
 8003136:	46bd      	mov	sp, r7
 8003138:	bd80      	pop	{r7, pc}
 800313a:	bf00      	nop
 800313c:	e000e010 	.word	0xe000e010

08003140 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003140:	b580      	push	{r7, lr}
 8003142:	b082      	sub	sp, #8
 8003144:	af00      	add	r7, sp, #0
 8003146:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003148:	6878      	ldr	r0, [r7, #4]
 800314a:	f7ff ff29 	bl	8002fa0 <__NVIC_SetPriorityGrouping>
}
 800314e:	bf00      	nop
 8003150:	3708      	adds	r7, #8
 8003152:	46bd      	mov	sp, r7
 8003154:	bd80      	pop	{r7, pc}

08003156 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003156:	b580      	push	{r7, lr}
 8003158:	b086      	sub	sp, #24
 800315a:	af00      	add	r7, sp, #0
 800315c:	4603      	mov	r3, r0
 800315e:	60b9      	str	r1, [r7, #8]
 8003160:	607a      	str	r2, [r7, #4]
 8003162:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003164:	2300      	movs	r3, #0
 8003166:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003168:	f7ff ff3e 	bl	8002fe8 <__NVIC_GetPriorityGrouping>
 800316c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800316e:	687a      	ldr	r2, [r7, #4]
 8003170:	68b9      	ldr	r1, [r7, #8]
 8003172:	6978      	ldr	r0, [r7, #20]
 8003174:	f7ff ff8e 	bl	8003094 <NVIC_EncodePriority>
 8003178:	4602      	mov	r2, r0
 800317a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800317e:	4611      	mov	r1, r2
 8003180:	4618      	mov	r0, r3
 8003182:	f7ff ff5d 	bl	8003040 <__NVIC_SetPriority>
}
 8003186:	bf00      	nop
 8003188:	3718      	adds	r7, #24
 800318a:	46bd      	mov	sp, r7
 800318c:	bd80      	pop	{r7, pc}

0800318e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800318e:	b580      	push	{r7, lr}
 8003190:	b082      	sub	sp, #8
 8003192:	af00      	add	r7, sp, #0
 8003194:	4603      	mov	r3, r0
 8003196:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003198:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800319c:	4618      	mov	r0, r3
 800319e:	f7ff ff31 	bl	8003004 <__NVIC_EnableIRQ>
}
 80031a2:	bf00      	nop
 80031a4:	3708      	adds	r7, #8
 80031a6:	46bd      	mov	sp, r7
 80031a8:	bd80      	pop	{r7, pc}

080031aa <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80031aa:	b580      	push	{r7, lr}
 80031ac:	b082      	sub	sp, #8
 80031ae:	af00      	add	r7, sp, #0
 80031b0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80031b2:	6878      	ldr	r0, [r7, #4]
 80031b4:	f7ff ffa2 	bl	80030fc <SysTick_Config>
 80031b8:	4603      	mov	r3, r0
}
 80031ba:	4618      	mov	r0, r3
 80031bc:	3708      	adds	r7, #8
 80031be:	46bd      	mov	sp, r7
 80031c0:	bd80      	pop	{r7, pc}

080031c2 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef* hdac)
{ 
 80031c2:	b580      	push	{r7, lr}
 80031c4:	b082      	sub	sp, #8
 80031c6:	af00      	add	r7, sp, #0
 80031c8:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if(hdac == NULL)
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	2b00      	cmp	r3, #0
 80031ce:	d101      	bne.n	80031d4 <HAL_DAC_Init+0x12>
  {
     return HAL_ERROR;
 80031d0:	2301      	movs	r3, #1
 80031d2:	e014      	b.n	80031fe <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));
  
  if(hdac->State == HAL_DAC_STATE_RESET)
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	791b      	ldrb	r3, [r3, #4]
 80031d8:	b2db      	uxtb	r3, r3
 80031da:	2b00      	cmp	r3, #0
 80031dc:	d105      	bne.n	80031ea <HAL_DAC_Init+0x28>
    {
      hdac->MspInitCallback               = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	2200      	movs	r2, #0
 80031e2:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 80031e4:	6878      	ldr	r0, [r7, #4]
 80031e6:	f7ff f8a5 	bl	8002334 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }
  
  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	2202      	movs	r2, #2
 80031ee:	711a      	strb	r2, [r3, #4]
  
  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	2200      	movs	r2, #0
 80031f4:	611a      	str	r2, [r3, #16]
  
  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	2201      	movs	r2, #1
 80031fa:	711a      	strb	r2, [r3, #4]
  
  /* Return function status */
  return HAL_OK;
 80031fc:	2300      	movs	r3, #0
}
 80031fe:	4618      	mov	r0, r3
 8003200:	3708      	adds	r7, #8
 8003202:	46bd      	mov	sp, r7
 8003204:	bd80      	pop	{r7, pc}

08003206 <HAL_DAC_IRQHandler>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
void HAL_DAC_IRQHandler(DAC_HandleTypeDef* hdac)
{
 8003206:	b580      	push	{r7, lr}
 8003208:	b082      	sub	sp, #8
 800320a:	af00      	add	r7, sp, #0
 800320c:	6078      	str	r0, [r7, #4]
  /* Check underrun channel 1 flag */
  if(__HAL_DAC_GET_FLAG(hdac, DAC_FLAG_DMAUDR1))
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003214:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003218:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800321c:	d118      	bne.n	8003250 <HAL_DAC_IRQHandler+0x4a>
  {
    /* Change DAC state to error state */
    hdac->State = HAL_DAC_STATE_ERROR;
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	2204      	movs	r2, #4
 8003222:	711a      	strb	r2, [r3, #4]
    
    /* Set DAC error code to channel1 DMA underrun error */
    hdac->ErrorCode |= HAL_DAC_ERROR_DMAUNDERRUNCH1;
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	691b      	ldr	r3, [r3, #16]
 8003228:	f043 0201 	orr.w	r2, r3, #1
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	611a      	str	r2, [r3, #16]
    
    /* Clear the underrun flag */
    __HAL_DAC_CLEAR_FLAG(hdac,DAC_FLAG_DMAUDR1);
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003238:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Disable the selected DAC channel1 DMA request */
    hdac->Instance->CR &= ~DAC_CR_DMAEN1;
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	681a      	ldr	r2, [r3, #0]
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003248:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh1(hdac);
#else
    HAL_DAC_DMAUnderrunCallbackCh1(hdac);
 800324a:	6878      	ldr	r0, [r7, #4]
 800324c:	f000 f825 	bl	800329a <HAL_DAC_DMAUnderrunCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }
  /* Check underrun channel 2 flag */
  if(__HAL_DAC_GET_FLAG(hdac, DAC_FLAG_DMAUDR2))
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003256:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800325a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800325e:	d118      	bne.n	8003292 <HAL_DAC_IRQHandler+0x8c>
  {
    /* Change DAC state to error state */
    hdac->State = HAL_DAC_STATE_ERROR;
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	2204      	movs	r2, #4
 8003264:	711a      	strb	r2, [r3, #4]
    
    /* Set DAC error code to channel2 DMA underrun error */
    hdac->ErrorCode |= HAL_DAC_ERROR_DMAUNDERRUNCH2;
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	691b      	ldr	r3, [r3, #16]
 800326a:	f043 0202 	orr.w	r2, r3, #2
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	611a      	str	r2, [r3, #16]
    
    /* Clear the underrun flag */
    __HAL_DAC_CLEAR_FLAG(hdac,DAC_FLAG_DMAUDR2);
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 800327a:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Disable the selected DAC channel1 DMA request */
    hdac->Instance->CR &= ~DAC_CR_DMAEN2;
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	681a      	ldr	r2, [r3, #0]
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 800328a:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh2(hdac);
#else
    HAL_DACEx_DMAUnderrunCallbackCh2(hdac);
 800328c:	6878      	ldr	r0, [r7, #4]
 800328e:	f000 f85b 	bl	8003348 <HAL_DACEx_DMAUnderrunCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }
}
 8003292:	bf00      	nop
 8003294:	3708      	adds	r7, #8
 8003296:	46bd      	mov	sp, r7
 8003298:	bd80      	pop	{r7, pc}

0800329a <HAL_DAC_DMAUnderrunCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_DMAUnderrunCallbackCh1(DAC_HandleTypeDef *hdac)
{
 800329a:	b480      	push	{r7}
 800329c:	b083      	sub	sp, #12
 800329e:	af00      	add	r7, sp, #0
 80032a0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hdac);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DAC_DMAUnderrunCallbackCh1 could be implemented in the user file
   */
}
 80032a2:	bf00      	nop
 80032a4:	370c      	adds	r7, #12
 80032a6:	46bd      	mov	sp, r7
 80032a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032ac:	4770      	bx	lr

080032ae <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef* hdac, DAC_ChannelConfTypeDef* sConfig, uint32_t Channel)
{
 80032ae:	b480      	push	{r7}
 80032b0:	b087      	sub	sp, #28
 80032b2:	af00      	add	r7, sp, #0
 80032b4:	60f8      	str	r0, [r7, #12]
 80032b6:	60b9      	str	r1, [r7, #8]
 80032b8:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg1 = 0U, tmpreg2 = 0U;
 80032ba:	2300      	movs	r3, #0
 80032bc:	617b      	str	r3, [r7, #20]
 80032be:	2300      	movs	r3, #0
 80032c0:	613b      	str	r3, [r7, #16]
  assert_param(IS_DAC_TRIGGER(sConfig->DAC_Trigger));
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));
  assert_param(IS_DAC_CHANNEL(Channel));
  
  /* Process locked */
  __HAL_LOCK(hdac);
 80032c2:	68fb      	ldr	r3, [r7, #12]
 80032c4:	795b      	ldrb	r3, [r3, #5]
 80032c6:	2b01      	cmp	r3, #1
 80032c8:	d101      	bne.n	80032ce <HAL_DAC_ConfigChannel+0x20>
 80032ca:	2302      	movs	r3, #2
 80032cc:	e036      	b.n	800333c <HAL_DAC_ConfigChannel+0x8e>
 80032ce:	68fb      	ldr	r3, [r7, #12]
 80032d0:	2201      	movs	r2, #1
 80032d2:	715a      	strb	r2, [r3, #5]
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 80032d4:	68fb      	ldr	r3, [r7, #12]
 80032d6:	2202      	movs	r2, #2
 80032d8:	711a      	strb	r2, [r3, #4]
  
  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 80032da:	68fb      	ldr	r3, [r7, #12]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	617b      	str	r3, [r7, #20]
  /* Clear BOFFx, TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << Channel);
 80032e2:	f640 72fe 	movw	r2, #4094	; 0xffe
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	fa02 f303 	lsl.w	r3, r2, r3
 80032ec:	43db      	mvns	r3, r3
 80032ee:	697a      	ldr	r2, [r7, #20]
 80032f0:	4013      	ands	r3, r2
 80032f2:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: buffer output, trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set BOFFx bit according to DAC_OutputBuffer value */   
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 80032f4:	68bb      	ldr	r3, [r7, #8]
 80032f6:	681a      	ldr	r2, [r3, #0]
 80032f8:	68bb      	ldr	r3, [r7, #8]
 80032fa:	685b      	ldr	r3, [r3, #4]
 80032fc:	4313      	orrs	r3, r2
 80032fe:	613b      	str	r3, [r7, #16]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << Channel;
 8003300:	693a      	ldr	r2, [r7, #16]
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	fa02 f303 	lsl.w	r3, r2, r3
 8003308:	697a      	ldr	r2, [r7, #20]
 800330a:	4313      	orrs	r3, r2
 800330c:	617b      	str	r3, [r7, #20]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 800330e:	68fb      	ldr	r3, [r7, #12]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	697a      	ldr	r2, [r7, #20]
 8003314:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << Channel);
 8003316:	68fb      	ldr	r3, [r7, #12]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	6819      	ldr	r1, [r3, #0]
 800331c:	22c0      	movs	r2, #192	; 0xc0
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	fa02 f303 	lsl.w	r3, r2, r3
 8003324:	43da      	mvns	r2, r3
 8003326:	68fb      	ldr	r3, [r7, #12]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	400a      	ands	r2, r1
 800332c:	601a      	str	r2, [r3, #0]
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 800332e:	68fb      	ldr	r3, [r7, #12]
 8003330:	2201      	movs	r2, #1
 8003332:	711a      	strb	r2, [r3, #4]
  
  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8003334:	68fb      	ldr	r3, [r7, #12]
 8003336:	2200      	movs	r2, #0
 8003338:	715a      	strb	r2, [r3, #5]
  
  /* Return function status */
  return HAL_OK;
 800333a:	2300      	movs	r3, #0
}
 800333c:	4618      	mov	r0, r3
 800333e:	371c      	adds	r7, #28
 8003340:	46bd      	mov	sp, r7
 8003342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003346:	4770      	bx	lr

08003348 <HAL_DACEx_DMAUnderrunCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_DMAUnderrunCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8003348:	b480      	push	{r7}
 800334a:	b083      	sub	sp, #12
 800334c:	af00      	add	r7, sp, #0
 800334e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hdac);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DAC_DMAUnderrunCallbackCh2 could be implemented in the user file
   */
}
 8003350:	bf00      	nop
 8003352:	370c      	adds	r7, #12
 8003354:	46bd      	mov	sp, r7
 8003356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800335a:	4770      	bx	lr

0800335c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800335c:	b480      	push	{r7}
 800335e:	b089      	sub	sp, #36	; 0x24
 8003360:	af00      	add	r7, sp, #0
 8003362:	6078      	str	r0, [r7, #4]
 8003364:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003366:	2300      	movs	r3, #0
 8003368:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800336a:	2300      	movs	r3, #0
 800336c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800336e:	2300      	movs	r3, #0
 8003370:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003372:	2300      	movs	r3, #0
 8003374:	61fb      	str	r3, [r7, #28]
 8003376:	e16b      	b.n	8003650 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003378:	2201      	movs	r2, #1
 800337a:	69fb      	ldr	r3, [r7, #28]
 800337c:	fa02 f303 	lsl.w	r3, r2, r3
 8003380:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003382:	683b      	ldr	r3, [r7, #0]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	697a      	ldr	r2, [r7, #20]
 8003388:	4013      	ands	r3, r2
 800338a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800338c:	693a      	ldr	r2, [r7, #16]
 800338e:	697b      	ldr	r3, [r7, #20]
 8003390:	429a      	cmp	r2, r3
 8003392:	f040 815a 	bne.w	800364a <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003396:	683b      	ldr	r3, [r7, #0]
 8003398:	685b      	ldr	r3, [r3, #4]
 800339a:	2b01      	cmp	r3, #1
 800339c:	d00b      	beq.n	80033b6 <HAL_GPIO_Init+0x5a>
 800339e:	683b      	ldr	r3, [r7, #0]
 80033a0:	685b      	ldr	r3, [r3, #4]
 80033a2:	2b02      	cmp	r3, #2
 80033a4:	d007      	beq.n	80033b6 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80033a6:	683b      	ldr	r3, [r7, #0]
 80033a8:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80033aa:	2b11      	cmp	r3, #17
 80033ac:	d003      	beq.n	80033b6 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80033ae:	683b      	ldr	r3, [r7, #0]
 80033b0:	685b      	ldr	r3, [r3, #4]
 80033b2:	2b12      	cmp	r3, #18
 80033b4:	d130      	bne.n	8003418 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	689b      	ldr	r3, [r3, #8]
 80033ba:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80033bc:	69fb      	ldr	r3, [r7, #28]
 80033be:	005b      	lsls	r3, r3, #1
 80033c0:	2203      	movs	r2, #3
 80033c2:	fa02 f303 	lsl.w	r3, r2, r3
 80033c6:	43db      	mvns	r3, r3
 80033c8:	69ba      	ldr	r2, [r7, #24]
 80033ca:	4013      	ands	r3, r2
 80033cc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80033ce:	683b      	ldr	r3, [r7, #0]
 80033d0:	68da      	ldr	r2, [r3, #12]
 80033d2:	69fb      	ldr	r3, [r7, #28]
 80033d4:	005b      	lsls	r3, r3, #1
 80033d6:	fa02 f303 	lsl.w	r3, r2, r3
 80033da:	69ba      	ldr	r2, [r7, #24]
 80033dc:	4313      	orrs	r3, r2
 80033de:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	69ba      	ldr	r2, [r7, #24]
 80033e4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	685b      	ldr	r3, [r3, #4]
 80033ea:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80033ec:	2201      	movs	r2, #1
 80033ee:	69fb      	ldr	r3, [r7, #28]
 80033f0:	fa02 f303 	lsl.w	r3, r2, r3
 80033f4:	43db      	mvns	r3, r3
 80033f6:	69ba      	ldr	r2, [r7, #24]
 80033f8:	4013      	ands	r3, r2
 80033fa:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80033fc:	683b      	ldr	r3, [r7, #0]
 80033fe:	685b      	ldr	r3, [r3, #4]
 8003400:	091b      	lsrs	r3, r3, #4
 8003402:	f003 0201 	and.w	r2, r3, #1
 8003406:	69fb      	ldr	r3, [r7, #28]
 8003408:	fa02 f303 	lsl.w	r3, r2, r3
 800340c:	69ba      	ldr	r2, [r7, #24]
 800340e:	4313      	orrs	r3, r2
 8003410:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	69ba      	ldr	r2, [r7, #24]
 8003416:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	68db      	ldr	r3, [r3, #12]
 800341c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800341e:	69fb      	ldr	r3, [r7, #28]
 8003420:	005b      	lsls	r3, r3, #1
 8003422:	2203      	movs	r2, #3
 8003424:	fa02 f303 	lsl.w	r3, r2, r3
 8003428:	43db      	mvns	r3, r3
 800342a:	69ba      	ldr	r2, [r7, #24]
 800342c:	4013      	ands	r3, r2
 800342e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003430:	683b      	ldr	r3, [r7, #0]
 8003432:	689a      	ldr	r2, [r3, #8]
 8003434:	69fb      	ldr	r3, [r7, #28]
 8003436:	005b      	lsls	r3, r3, #1
 8003438:	fa02 f303 	lsl.w	r3, r2, r3
 800343c:	69ba      	ldr	r2, [r7, #24]
 800343e:	4313      	orrs	r3, r2
 8003440:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	69ba      	ldr	r2, [r7, #24]
 8003446:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003448:	683b      	ldr	r3, [r7, #0]
 800344a:	685b      	ldr	r3, [r3, #4]
 800344c:	2b02      	cmp	r3, #2
 800344e:	d003      	beq.n	8003458 <HAL_GPIO_Init+0xfc>
 8003450:	683b      	ldr	r3, [r7, #0]
 8003452:	685b      	ldr	r3, [r3, #4]
 8003454:	2b12      	cmp	r3, #18
 8003456:	d123      	bne.n	80034a0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003458:	69fb      	ldr	r3, [r7, #28]
 800345a:	08da      	lsrs	r2, r3, #3
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	3208      	adds	r2, #8
 8003460:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003464:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003466:	69fb      	ldr	r3, [r7, #28]
 8003468:	f003 0307 	and.w	r3, r3, #7
 800346c:	009b      	lsls	r3, r3, #2
 800346e:	220f      	movs	r2, #15
 8003470:	fa02 f303 	lsl.w	r3, r2, r3
 8003474:	43db      	mvns	r3, r3
 8003476:	69ba      	ldr	r2, [r7, #24]
 8003478:	4013      	ands	r3, r2
 800347a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800347c:	683b      	ldr	r3, [r7, #0]
 800347e:	691a      	ldr	r2, [r3, #16]
 8003480:	69fb      	ldr	r3, [r7, #28]
 8003482:	f003 0307 	and.w	r3, r3, #7
 8003486:	009b      	lsls	r3, r3, #2
 8003488:	fa02 f303 	lsl.w	r3, r2, r3
 800348c:	69ba      	ldr	r2, [r7, #24]
 800348e:	4313      	orrs	r3, r2
 8003490:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003492:	69fb      	ldr	r3, [r7, #28]
 8003494:	08da      	lsrs	r2, r3, #3
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	3208      	adds	r2, #8
 800349a:	69b9      	ldr	r1, [r7, #24]
 800349c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80034a6:	69fb      	ldr	r3, [r7, #28]
 80034a8:	005b      	lsls	r3, r3, #1
 80034aa:	2203      	movs	r2, #3
 80034ac:	fa02 f303 	lsl.w	r3, r2, r3
 80034b0:	43db      	mvns	r3, r3
 80034b2:	69ba      	ldr	r2, [r7, #24]
 80034b4:	4013      	ands	r3, r2
 80034b6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80034b8:	683b      	ldr	r3, [r7, #0]
 80034ba:	685b      	ldr	r3, [r3, #4]
 80034bc:	f003 0203 	and.w	r2, r3, #3
 80034c0:	69fb      	ldr	r3, [r7, #28]
 80034c2:	005b      	lsls	r3, r3, #1
 80034c4:	fa02 f303 	lsl.w	r3, r2, r3
 80034c8:	69ba      	ldr	r2, [r7, #24]
 80034ca:	4313      	orrs	r3, r2
 80034cc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	69ba      	ldr	r2, [r7, #24]
 80034d2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80034d4:	683b      	ldr	r3, [r7, #0]
 80034d6:	685b      	ldr	r3, [r3, #4]
 80034d8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80034dc:	2b00      	cmp	r3, #0
 80034de:	f000 80b4 	beq.w	800364a <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80034e2:	2300      	movs	r3, #0
 80034e4:	60fb      	str	r3, [r7, #12]
 80034e6:	4b5f      	ldr	r3, [pc, #380]	; (8003664 <HAL_GPIO_Init+0x308>)
 80034e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80034ea:	4a5e      	ldr	r2, [pc, #376]	; (8003664 <HAL_GPIO_Init+0x308>)
 80034ec:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80034f0:	6453      	str	r3, [r2, #68]	; 0x44
 80034f2:	4b5c      	ldr	r3, [pc, #368]	; (8003664 <HAL_GPIO_Init+0x308>)
 80034f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80034f6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80034fa:	60fb      	str	r3, [r7, #12]
 80034fc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80034fe:	4a5a      	ldr	r2, [pc, #360]	; (8003668 <HAL_GPIO_Init+0x30c>)
 8003500:	69fb      	ldr	r3, [r7, #28]
 8003502:	089b      	lsrs	r3, r3, #2
 8003504:	3302      	adds	r3, #2
 8003506:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800350a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800350c:	69fb      	ldr	r3, [r7, #28]
 800350e:	f003 0303 	and.w	r3, r3, #3
 8003512:	009b      	lsls	r3, r3, #2
 8003514:	220f      	movs	r2, #15
 8003516:	fa02 f303 	lsl.w	r3, r2, r3
 800351a:	43db      	mvns	r3, r3
 800351c:	69ba      	ldr	r2, [r7, #24]
 800351e:	4013      	ands	r3, r2
 8003520:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	4a51      	ldr	r2, [pc, #324]	; (800366c <HAL_GPIO_Init+0x310>)
 8003526:	4293      	cmp	r3, r2
 8003528:	d02b      	beq.n	8003582 <HAL_GPIO_Init+0x226>
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	4a50      	ldr	r2, [pc, #320]	; (8003670 <HAL_GPIO_Init+0x314>)
 800352e:	4293      	cmp	r3, r2
 8003530:	d025      	beq.n	800357e <HAL_GPIO_Init+0x222>
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	4a4f      	ldr	r2, [pc, #316]	; (8003674 <HAL_GPIO_Init+0x318>)
 8003536:	4293      	cmp	r3, r2
 8003538:	d01f      	beq.n	800357a <HAL_GPIO_Init+0x21e>
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	4a4e      	ldr	r2, [pc, #312]	; (8003678 <HAL_GPIO_Init+0x31c>)
 800353e:	4293      	cmp	r3, r2
 8003540:	d019      	beq.n	8003576 <HAL_GPIO_Init+0x21a>
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	4a4d      	ldr	r2, [pc, #308]	; (800367c <HAL_GPIO_Init+0x320>)
 8003546:	4293      	cmp	r3, r2
 8003548:	d013      	beq.n	8003572 <HAL_GPIO_Init+0x216>
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	4a4c      	ldr	r2, [pc, #304]	; (8003680 <HAL_GPIO_Init+0x324>)
 800354e:	4293      	cmp	r3, r2
 8003550:	d00d      	beq.n	800356e <HAL_GPIO_Init+0x212>
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	4a4b      	ldr	r2, [pc, #300]	; (8003684 <HAL_GPIO_Init+0x328>)
 8003556:	4293      	cmp	r3, r2
 8003558:	d007      	beq.n	800356a <HAL_GPIO_Init+0x20e>
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	4a4a      	ldr	r2, [pc, #296]	; (8003688 <HAL_GPIO_Init+0x32c>)
 800355e:	4293      	cmp	r3, r2
 8003560:	d101      	bne.n	8003566 <HAL_GPIO_Init+0x20a>
 8003562:	2307      	movs	r3, #7
 8003564:	e00e      	b.n	8003584 <HAL_GPIO_Init+0x228>
 8003566:	2308      	movs	r3, #8
 8003568:	e00c      	b.n	8003584 <HAL_GPIO_Init+0x228>
 800356a:	2306      	movs	r3, #6
 800356c:	e00a      	b.n	8003584 <HAL_GPIO_Init+0x228>
 800356e:	2305      	movs	r3, #5
 8003570:	e008      	b.n	8003584 <HAL_GPIO_Init+0x228>
 8003572:	2304      	movs	r3, #4
 8003574:	e006      	b.n	8003584 <HAL_GPIO_Init+0x228>
 8003576:	2303      	movs	r3, #3
 8003578:	e004      	b.n	8003584 <HAL_GPIO_Init+0x228>
 800357a:	2302      	movs	r3, #2
 800357c:	e002      	b.n	8003584 <HAL_GPIO_Init+0x228>
 800357e:	2301      	movs	r3, #1
 8003580:	e000      	b.n	8003584 <HAL_GPIO_Init+0x228>
 8003582:	2300      	movs	r3, #0
 8003584:	69fa      	ldr	r2, [r7, #28]
 8003586:	f002 0203 	and.w	r2, r2, #3
 800358a:	0092      	lsls	r2, r2, #2
 800358c:	4093      	lsls	r3, r2
 800358e:	69ba      	ldr	r2, [r7, #24]
 8003590:	4313      	orrs	r3, r2
 8003592:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003594:	4934      	ldr	r1, [pc, #208]	; (8003668 <HAL_GPIO_Init+0x30c>)
 8003596:	69fb      	ldr	r3, [r7, #28]
 8003598:	089b      	lsrs	r3, r3, #2
 800359a:	3302      	adds	r3, #2
 800359c:	69ba      	ldr	r2, [r7, #24]
 800359e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80035a2:	4b3a      	ldr	r3, [pc, #232]	; (800368c <HAL_GPIO_Init+0x330>)
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80035a8:	693b      	ldr	r3, [r7, #16]
 80035aa:	43db      	mvns	r3, r3
 80035ac:	69ba      	ldr	r2, [r7, #24]
 80035ae:	4013      	ands	r3, r2
 80035b0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80035b2:	683b      	ldr	r3, [r7, #0]
 80035b4:	685b      	ldr	r3, [r3, #4]
 80035b6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80035ba:	2b00      	cmp	r3, #0
 80035bc:	d003      	beq.n	80035c6 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80035be:	69ba      	ldr	r2, [r7, #24]
 80035c0:	693b      	ldr	r3, [r7, #16]
 80035c2:	4313      	orrs	r3, r2
 80035c4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80035c6:	4a31      	ldr	r2, [pc, #196]	; (800368c <HAL_GPIO_Init+0x330>)
 80035c8:	69bb      	ldr	r3, [r7, #24]
 80035ca:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80035cc:	4b2f      	ldr	r3, [pc, #188]	; (800368c <HAL_GPIO_Init+0x330>)
 80035ce:	685b      	ldr	r3, [r3, #4]
 80035d0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80035d2:	693b      	ldr	r3, [r7, #16]
 80035d4:	43db      	mvns	r3, r3
 80035d6:	69ba      	ldr	r2, [r7, #24]
 80035d8:	4013      	ands	r3, r2
 80035da:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80035dc:	683b      	ldr	r3, [r7, #0]
 80035de:	685b      	ldr	r3, [r3, #4]
 80035e0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80035e4:	2b00      	cmp	r3, #0
 80035e6:	d003      	beq.n	80035f0 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80035e8:	69ba      	ldr	r2, [r7, #24]
 80035ea:	693b      	ldr	r3, [r7, #16]
 80035ec:	4313      	orrs	r3, r2
 80035ee:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80035f0:	4a26      	ldr	r2, [pc, #152]	; (800368c <HAL_GPIO_Init+0x330>)
 80035f2:	69bb      	ldr	r3, [r7, #24]
 80035f4:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80035f6:	4b25      	ldr	r3, [pc, #148]	; (800368c <HAL_GPIO_Init+0x330>)
 80035f8:	689b      	ldr	r3, [r3, #8]
 80035fa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80035fc:	693b      	ldr	r3, [r7, #16]
 80035fe:	43db      	mvns	r3, r3
 8003600:	69ba      	ldr	r2, [r7, #24]
 8003602:	4013      	ands	r3, r2
 8003604:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003606:	683b      	ldr	r3, [r7, #0]
 8003608:	685b      	ldr	r3, [r3, #4]
 800360a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800360e:	2b00      	cmp	r3, #0
 8003610:	d003      	beq.n	800361a <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8003612:	69ba      	ldr	r2, [r7, #24]
 8003614:	693b      	ldr	r3, [r7, #16]
 8003616:	4313      	orrs	r3, r2
 8003618:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800361a:	4a1c      	ldr	r2, [pc, #112]	; (800368c <HAL_GPIO_Init+0x330>)
 800361c:	69bb      	ldr	r3, [r7, #24]
 800361e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003620:	4b1a      	ldr	r3, [pc, #104]	; (800368c <HAL_GPIO_Init+0x330>)
 8003622:	68db      	ldr	r3, [r3, #12]
 8003624:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003626:	693b      	ldr	r3, [r7, #16]
 8003628:	43db      	mvns	r3, r3
 800362a:	69ba      	ldr	r2, [r7, #24]
 800362c:	4013      	ands	r3, r2
 800362e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003630:	683b      	ldr	r3, [r7, #0]
 8003632:	685b      	ldr	r3, [r3, #4]
 8003634:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003638:	2b00      	cmp	r3, #0
 800363a:	d003      	beq.n	8003644 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 800363c:	69ba      	ldr	r2, [r7, #24]
 800363e:	693b      	ldr	r3, [r7, #16]
 8003640:	4313      	orrs	r3, r2
 8003642:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003644:	4a11      	ldr	r2, [pc, #68]	; (800368c <HAL_GPIO_Init+0x330>)
 8003646:	69bb      	ldr	r3, [r7, #24]
 8003648:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800364a:	69fb      	ldr	r3, [r7, #28]
 800364c:	3301      	adds	r3, #1
 800364e:	61fb      	str	r3, [r7, #28]
 8003650:	69fb      	ldr	r3, [r7, #28]
 8003652:	2b0f      	cmp	r3, #15
 8003654:	f67f ae90 	bls.w	8003378 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003658:	bf00      	nop
 800365a:	3724      	adds	r7, #36	; 0x24
 800365c:	46bd      	mov	sp, r7
 800365e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003662:	4770      	bx	lr
 8003664:	40023800 	.word	0x40023800
 8003668:	40013800 	.word	0x40013800
 800366c:	40020000 	.word	0x40020000
 8003670:	40020400 	.word	0x40020400
 8003674:	40020800 	.word	0x40020800
 8003678:	40020c00 	.word	0x40020c00
 800367c:	40021000 	.word	0x40021000
 8003680:	40021400 	.word	0x40021400
 8003684:	40021800 	.word	0x40021800
 8003688:	40021c00 	.word	0x40021c00
 800368c:	40013c00 	.word	0x40013c00

08003690 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003690:	b480      	push	{r7}
 8003692:	b085      	sub	sp, #20
 8003694:	af00      	add	r7, sp, #0
 8003696:	6078      	str	r0, [r7, #4]
 8003698:	460b      	mov	r3, r1
 800369a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	691a      	ldr	r2, [r3, #16]
 80036a0:	887b      	ldrh	r3, [r7, #2]
 80036a2:	4013      	ands	r3, r2
 80036a4:	2b00      	cmp	r3, #0
 80036a6:	d002      	beq.n	80036ae <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80036a8:	2301      	movs	r3, #1
 80036aa:	73fb      	strb	r3, [r7, #15]
 80036ac:	e001      	b.n	80036b2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80036ae:	2300      	movs	r3, #0
 80036b0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80036b2:	7bfb      	ldrb	r3, [r7, #15]
}
 80036b4:	4618      	mov	r0, r3
 80036b6:	3714      	adds	r7, #20
 80036b8:	46bd      	mov	sp, r7
 80036ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036be:	4770      	bx	lr

080036c0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80036c0:	b480      	push	{r7}
 80036c2:	b083      	sub	sp, #12
 80036c4:	af00      	add	r7, sp, #0
 80036c6:	6078      	str	r0, [r7, #4]
 80036c8:	460b      	mov	r3, r1
 80036ca:	807b      	strh	r3, [r7, #2]
 80036cc:	4613      	mov	r3, r2
 80036ce:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80036d0:	787b      	ldrb	r3, [r7, #1]
 80036d2:	2b00      	cmp	r3, #0
 80036d4:	d003      	beq.n	80036de <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80036d6:	887a      	ldrh	r2, [r7, #2]
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80036dc:	e003      	b.n	80036e6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80036de:	887b      	ldrh	r3, [r7, #2]
 80036e0:	041a      	lsls	r2, r3, #16
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	619a      	str	r2, [r3, #24]
}
 80036e6:	bf00      	nop
 80036e8:	370c      	adds	r7, #12
 80036ea:	46bd      	mov	sp, r7
 80036ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036f0:	4770      	bx	lr

080036f2 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80036f2:	b480      	push	{r7}
 80036f4:	b083      	sub	sp, #12
 80036f6:	af00      	add	r7, sp, #0
 80036f8:	6078      	str	r0, [r7, #4]
 80036fa:	460b      	mov	r3, r1
 80036fc:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	695a      	ldr	r2, [r3, #20]
 8003702:	887b      	ldrh	r3, [r7, #2]
 8003704:	401a      	ands	r2, r3
 8003706:	887b      	ldrh	r3, [r7, #2]
 8003708:	429a      	cmp	r2, r3
 800370a:	d104      	bne.n	8003716 <HAL_GPIO_TogglePin+0x24>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 800370c:	887b      	ldrh	r3, [r7, #2]
 800370e:	041a      	lsls	r2, r3, #16
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
  }
}
 8003714:	e002      	b.n	800371c <HAL_GPIO_TogglePin+0x2a>
    GPIOx->BSRR = GPIO_Pin;
 8003716:	887a      	ldrh	r2, [r7, #2]
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	619a      	str	r2, [r3, #24]
}
 800371c:	bf00      	nop
 800371e:	370c      	adds	r7, #12
 8003720:	46bd      	mov	sp, r7
 8003722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003726:	4770      	bx	lr

08003728 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003728:	b580      	push	{r7, lr}
 800372a:	b084      	sub	sp, #16
 800372c:	af00      	add	r7, sp, #0
 800372e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	2b00      	cmp	r3, #0
 8003734:	d101      	bne.n	800373a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003736:	2301      	movs	r3, #1
 8003738:	e11f      	b.n	800397a <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003740:	b2db      	uxtb	r3, r3
 8003742:	2b00      	cmp	r3, #0
 8003744:	d106      	bne.n	8003754 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	2200      	movs	r2, #0
 800374a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800374e:	6878      	ldr	r0, [r7, #4]
 8003750:	f7fe fe3c 	bl	80023cc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	2224      	movs	r2, #36	; 0x24
 8003758:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	681a      	ldr	r2, [r3, #0]
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	f022 0201 	bic.w	r2, r2, #1
 800376a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	681a      	ldr	r2, [r3, #0]
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800377a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	681a      	ldr	r2, [r3, #0]
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800378a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800378c:	f001 f974 	bl	8004a78 <HAL_RCC_GetPCLK1Freq>
 8003790:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	685b      	ldr	r3, [r3, #4]
 8003796:	4a7b      	ldr	r2, [pc, #492]	; (8003984 <HAL_I2C_Init+0x25c>)
 8003798:	4293      	cmp	r3, r2
 800379a:	d807      	bhi.n	80037ac <HAL_I2C_Init+0x84>
 800379c:	68fb      	ldr	r3, [r7, #12]
 800379e:	4a7a      	ldr	r2, [pc, #488]	; (8003988 <HAL_I2C_Init+0x260>)
 80037a0:	4293      	cmp	r3, r2
 80037a2:	bf94      	ite	ls
 80037a4:	2301      	movls	r3, #1
 80037a6:	2300      	movhi	r3, #0
 80037a8:	b2db      	uxtb	r3, r3
 80037aa:	e006      	b.n	80037ba <HAL_I2C_Init+0x92>
 80037ac:	68fb      	ldr	r3, [r7, #12]
 80037ae:	4a77      	ldr	r2, [pc, #476]	; (800398c <HAL_I2C_Init+0x264>)
 80037b0:	4293      	cmp	r3, r2
 80037b2:	bf94      	ite	ls
 80037b4:	2301      	movls	r3, #1
 80037b6:	2300      	movhi	r3, #0
 80037b8:	b2db      	uxtb	r3, r3
 80037ba:	2b00      	cmp	r3, #0
 80037bc:	d001      	beq.n	80037c2 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80037be:	2301      	movs	r3, #1
 80037c0:	e0db      	b.n	800397a <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80037c2:	68fb      	ldr	r3, [r7, #12]
 80037c4:	4a72      	ldr	r2, [pc, #456]	; (8003990 <HAL_I2C_Init+0x268>)
 80037c6:	fba2 2303 	umull	r2, r3, r2, r3
 80037ca:	0c9b      	lsrs	r3, r3, #18
 80037cc:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	685b      	ldr	r3, [r3, #4]
 80037d4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	68ba      	ldr	r2, [r7, #8]
 80037de:	430a      	orrs	r2, r1
 80037e0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	6a1b      	ldr	r3, [r3, #32]
 80037e8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	685b      	ldr	r3, [r3, #4]
 80037f0:	4a64      	ldr	r2, [pc, #400]	; (8003984 <HAL_I2C_Init+0x25c>)
 80037f2:	4293      	cmp	r3, r2
 80037f4:	d802      	bhi.n	80037fc <HAL_I2C_Init+0xd4>
 80037f6:	68bb      	ldr	r3, [r7, #8]
 80037f8:	3301      	adds	r3, #1
 80037fa:	e009      	b.n	8003810 <HAL_I2C_Init+0xe8>
 80037fc:	68bb      	ldr	r3, [r7, #8]
 80037fe:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8003802:	fb02 f303 	mul.w	r3, r2, r3
 8003806:	4a63      	ldr	r2, [pc, #396]	; (8003994 <HAL_I2C_Init+0x26c>)
 8003808:	fba2 2303 	umull	r2, r3, r2, r3
 800380c:	099b      	lsrs	r3, r3, #6
 800380e:	3301      	adds	r3, #1
 8003810:	687a      	ldr	r2, [r7, #4]
 8003812:	6812      	ldr	r2, [r2, #0]
 8003814:	430b      	orrs	r3, r1
 8003816:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	69db      	ldr	r3, [r3, #28]
 800381e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8003822:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	685b      	ldr	r3, [r3, #4]
 800382a:	4956      	ldr	r1, [pc, #344]	; (8003984 <HAL_I2C_Init+0x25c>)
 800382c:	428b      	cmp	r3, r1
 800382e:	d80d      	bhi.n	800384c <HAL_I2C_Init+0x124>
 8003830:	68fb      	ldr	r3, [r7, #12]
 8003832:	1e59      	subs	r1, r3, #1
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	685b      	ldr	r3, [r3, #4]
 8003838:	005b      	lsls	r3, r3, #1
 800383a:	fbb1 f3f3 	udiv	r3, r1, r3
 800383e:	3301      	adds	r3, #1
 8003840:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003844:	2b04      	cmp	r3, #4
 8003846:	bf38      	it	cc
 8003848:	2304      	movcc	r3, #4
 800384a:	e04f      	b.n	80038ec <HAL_I2C_Init+0x1c4>
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	689b      	ldr	r3, [r3, #8]
 8003850:	2b00      	cmp	r3, #0
 8003852:	d111      	bne.n	8003878 <HAL_I2C_Init+0x150>
 8003854:	68fb      	ldr	r3, [r7, #12]
 8003856:	1e58      	subs	r0, r3, #1
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	6859      	ldr	r1, [r3, #4]
 800385c:	460b      	mov	r3, r1
 800385e:	005b      	lsls	r3, r3, #1
 8003860:	440b      	add	r3, r1
 8003862:	fbb0 f3f3 	udiv	r3, r0, r3
 8003866:	3301      	adds	r3, #1
 8003868:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800386c:	2b00      	cmp	r3, #0
 800386e:	bf0c      	ite	eq
 8003870:	2301      	moveq	r3, #1
 8003872:	2300      	movne	r3, #0
 8003874:	b2db      	uxtb	r3, r3
 8003876:	e012      	b.n	800389e <HAL_I2C_Init+0x176>
 8003878:	68fb      	ldr	r3, [r7, #12]
 800387a:	1e58      	subs	r0, r3, #1
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	6859      	ldr	r1, [r3, #4]
 8003880:	460b      	mov	r3, r1
 8003882:	009b      	lsls	r3, r3, #2
 8003884:	440b      	add	r3, r1
 8003886:	0099      	lsls	r1, r3, #2
 8003888:	440b      	add	r3, r1
 800388a:	fbb0 f3f3 	udiv	r3, r0, r3
 800388e:	3301      	adds	r3, #1
 8003890:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003894:	2b00      	cmp	r3, #0
 8003896:	bf0c      	ite	eq
 8003898:	2301      	moveq	r3, #1
 800389a:	2300      	movne	r3, #0
 800389c:	b2db      	uxtb	r3, r3
 800389e:	2b00      	cmp	r3, #0
 80038a0:	d001      	beq.n	80038a6 <HAL_I2C_Init+0x17e>
 80038a2:	2301      	movs	r3, #1
 80038a4:	e022      	b.n	80038ec <HAL_I2C_Init+0x1c4>
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	689b      	ldr	r3, [r3, #8]
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	d10e      	bne.n	80038cc <HAL_I2C_Init+0x1a4>
 80038ae:	68fb      	ldr	r3, [r7, #12]
 80038b0:	1e58      	subs	r0, r3, #1
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	6859      	ldr	r1, [r3, #4]
 80038b6:	460b      	mov	r3, r1
 80038b8:	005b      	lsls	r3, r3, #1
 80038ba:	440b      	add	r3, r1
 80038bc:	fbb0 f3f3 	udiv	r3, r0, r3
 80038c0:	3301      	adds	r3, #1
 80038c2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80038c6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80038ca:	e00f      	b.n	80038ec <HAL_I2C_Init+0x1c4>
 80038cc:	68fb      	ldr	r3, [r7, #12]
 80038ce:	1e58      	subs	r0, r3, #1
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	6859      	ldr	r1, [r3, #4]
 80038d4:	460b      	mov	r3, r1
 80038d6:	009b      	lsls	r3, r3, #2
 80038d8:	440b      	add	r3, r1
 80038da:	0099      	lsls	r1, r3, #2
 80038dc:	440b      	add	r3, r1
 80038de:	fbb0 f3f3 	udiv	r3, r0, r3
 80038e2:	3301      	adds	r3, #1
 80038e4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80038e8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80038ec:	6879      	ldr	r1, [r7, #4]
 80038ee:	6809      	ldr	r1, [r1, #0]
 80038f0:	4313      	orrs	r3, r2
 80038f2:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	69da      	ldr	r2, [r3, #28]
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	6a1b      	ldr	r3, [r3, #32]
 8003906:	431a      	orrs	r2, r3
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	430a      	orrs	r2, r1
 800390e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	689b      	ldr	r3, [r3, #8]
 8003916:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800391a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800391e:	687a      	ldr	r2, [r7, #4]
 8003920:	6911      	ldr	r1, [r2, #16]
 8003922:	687a      	ldr	r2, [r7, #4]
 8003924:	68d2      	ldr	r2, [r2, #12]
 8003926:	4311      	orrs	r1, r2
 8003928:	687a      	ldr	r2, [r7, #4]
 800392a:	6812      	ldr	r2, [r2, #0]
 800392c:	430b      	orrs	r3, r1
 800392e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	68db      	ldr	r3, [r3, #12]
 8003936:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	695a      	ldr	r2, [r3, #20]
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	699b      	ldr	r3, [r3, #24]
 8003942:	431a      	orrs	r2, r3
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	430a      	orrs	r2, r1
 800394a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	681a      	ldr	r2, [r3, #0]
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	f042 0201 	orr.w	r2, r2, #1
 800395a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	2200      	movs	r2, #0
 8003960:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	2220      	movs	r2, #32
 8003966:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	2200      	movs	r2, #0
 800396e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	2200      	movs	r2, #0
 8003974:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003978:	2300      	movs	r3, #0
}
 800397a:	4618      	mov	r0, r3
 800397c:	3710      	adds	r7, #16
 800397e:	46bd      	mov	sp, r7
 8003980:	bd80      	pop	{r7, pc}
 8003982:	bf00      	nop
 8003984:	000186a0 	.word	0x000186a0
 8003988:	001e847f 	.word	0x001e847f
 800398c:	003d08ff 	.word	0x003d08ff
 8003990:	431bde83 	.word	0x431bde83
 8003994:	10624dd3 	.word	0x10624dd3

08003998 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003998:	b580      	push	{r7, lr}
 800399a:	b088      	sub	sp, #32
 800399c:	af02      	add	r7, sp, #8
 800399e:	60f8      	str	r0, [r7, #12]
 80039a0:	607a      	str	r2, [r7, #4]
 80039a2:	461a      	mov	r2, r3
 80039a4:	460b      	mov	r3, r1
 80039a6:	817b      	strh	r3, [r7, #10]
 80039a8:	4613      	mov	r3, r2
 80039aa:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80039ac:	f7ff f9ce 	bl	8002d4c <HAL_GetTick>
 80039b0:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 80039b2:	68fb      	ldr	r3, [r7, #12]
 80039b4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80039b8:	b2db      	uxtb	r3, r3
 80039ba:	2b20      	cmp	r3, #32
 80039bc:	f040 80e0 	bne.w	8003b80 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80039c0:	697b      	ldr	r3, [r7, #20]
 80039c2:	9300      	str	r3, [sp, #0]
 80039c4:	2319      	movs	r3, #25
 80039c6:	2201      	movs	r2, #1
 80039c8:	4970      	ldr	r1, [pc, #448]	; (8003b8c <HAL_I2C_Master_Transmit+0x1f4>)
 80039ca:	68f8      	ldr	r0, [r7, #12]
 80039cc:	f000 fa92 	bl	8003ef4 <I2C_WaitOnFlagUntilTimeout>
 80039d0:	4603      	mov	r3, r0
 80039d2:	2b00      	cmp	r3, #0
 80039d4:	d001      	beq.n	80039da <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 80039d6:	2302      	movs	r3, #2
 80039d8:	e0d3      	b.n	8003b82 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80039da:	68fb      	ldr	r3, [r7, #12]
 80039dc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80039e0:	2b01      	cmp	r3, #1
 80039e2:	d101      	bne.n	80039e8 <HAL_I2C_Master_Transmit+0x50>
 80039e4:	2302      	movs	r3, #2
 80039e6:	e0cc      	b.n	8003b82 <HAL_I2C_Master_Transmit+0x1ea>
 80039e8:	68fb      	ldr	r3, [r7, #12]
 80039ea:	2201      	movs	r2, #1
 80039ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80039f0:	68fb      	ldr	r3, [r7, #12]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	f003 0301 	and.w	r3, r3, #1
 80039fa:	2b01      	cmp	r3, #1
 80039fc:	d007      	beq.n	8003a0e <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80039fe:	68fb      	ldr	r3, [r7, #12]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	681a      	ldr	r2, [r3, #0]
 8003a04:	68fb      	ldr	r3, [r7, #12]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	f042 0201 	orr.w	r2, r2, #1
 8003a0c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003a0e:	68fb      	ldr	r3, [r7, #12]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	681a      	ldr	r2, [r3, #0]
 8003a14:	68fb      	ldr	r3, [r7, #12]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003a1c:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8003a1e:	68fb      	ldr	r3, [r7, #12]
 8003a20:	2221      	movs	r2, #33	; 0x21
 8003a22:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8003a26:	68fb      	ldr	r3, [r7, #12]
 8003a28:	2210      	movs	r2, #16
 8003a2a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8003a2e:	68fb      	ldr	r3, [r7, #12]
 8003a30:	2200      	movs	r2, #0
 8003a32:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003a34:	68fb      	ldr	r3, [r7, #12]
 8003a36:	687a      	ldr	r2, [r7, #4]
 8003a38:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003a3a:	68fb      	ldr	r3, [r7, #12]
 8003a3c:	893a      	ldrh	r2, [r7, #8]
 8003a3e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003a40:	68fb      	ldr	r3, [r7, #12]
 8003a42:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a44:	b29a      	uxth	r2, r3
 8003a46:	68fb      	ldr	r3, [r7, #12]
 8003a48:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003a4a:	68fb      	ldr	r3, [r7, #12]
 8003a4c:	4a50      	ldr	r2, [pc, #320]	; (8003b90 <HAL_I2C_Master_Transmit+0x1f8>)
 8003a4e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8003a50:	8979      	ldrh	r1, [r7, #10]
 8003a52:	697b      	ldr	r3, [r7, #20]
 8003a54:	6a3a      	ldr	r2, [r7, #32]
 8003a56:	68f8      	ldr	r0, [r7, #12]
 8003a58:	f000 f9ca 	bl	8003df0 <I2C_MasterRequestWrite>
 8003a5c:	4603      	mov	r3, r0
 8003a5e:	2b00      	cmp	r3, #0
 8003a60:	d001      	beq.n	8003a66 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8003a62:	2301      	movs	r3, #1
 8003a64:	e08d      	b.n	8003b82 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003a66:	2300      	movs	r3, #0
 8003a68:	613b      	str	r3, [r7, #16]
 8003a6a:	68fb      	ldr	r3, [r7, #12]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	695b      	ldr	r3, [r3, #20]
 8003a70:	613b      	str	r3, [r7, #16]
 8003a72:	68fb      	ldr	r3, [r7, #12]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	699b      	ldr	r3, [r3, #24]
 8003a78:	613b      	str	r3, [r7, #16]
 8003a7a:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8003a7c:	e066      	b.n	8003b4c <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003a7e:	697a      	ldr	r2, [r7, #20]
 8003a80:	6a39      	ldr	r1, [r7, #32]
 8003a82:	68f8      	ldr	r0, [r7, #12]
 8003a84:	f000 fb0c 	bl	80040a0 <I2C_WaitOnTXEFlagUntilTimeout>
 8003a88:	4603      	mov	r3, r0
 8003a8a:	2b00      	cmp	r3, #0
 8003a8c:	d00d      	beq.n	8003aaa <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003a8e:	68fb      	ldr	r3, [r7, #12]
 8003a90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a92:	2b04      	cmp	r3, #4
 8003a94:	d107      	bne.n	8003aa6 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003a96:	68fb      	ldr	r3, [r7, #12]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	681a      	ldr	r2, [r3, #0]
 8003a9c:	68fb      	ldr	r3, [r7, #12]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003aa4:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003aa6:	2301      	movs	r3, #1
 8003aa8:	e06b      	b.n	8003b82 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003aaa:	68fb      	ldr	r3, [r7, #12]
 8003aac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003aae:	781a      	ldrb	r2, [r3, #0]
 8003ab0:	68fb      	ldr	r3, [r7, #12]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003ab6:	68fb      	ldr	r3, [r7, #12]
 8003ab8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003aba:	1c5a      	adds	r2, r3, #1
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003ac0:	68fb      	ldr	r3, [r7, #12]
 8003ac2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ac4:	b29b      	uxth	r3, r3
 8003ac6:	3b01      	subs	r3, #1
 8003ac8:	b29a      	uxth	r2, r3
 8003aca:	68fb      	ldr	r3, [r7, #12]
 8003acc:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8003ace:	68fb      	ldr	r3, [r7, #12]
 8003ad0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003ad2:	3b01      	subs	r3, #1
 8003ad4:	b29a      	uxth	r2, r3
 8003ad6:	68fb      	ldr	r3, [r7, #12]
 8003ad8:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003ada:	68fb      	ldr	r3, [r7, #12]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	695b      	ldr	r3, [r3, #20]
 8003ae0:	f003 0304 	and.w	r3, r3, #4
 8003ae4:	2b04      	cmp	r3, #4
 8003ae6:	d11b      	bne.n	8003b20 <HAL_I2C_Master_Transmit+0x188>
 8003ae8:	68fb      	ldr	r3, [r7, #12]
 8003aea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003aec:	2b00      	cmp	r3, #0
 8003aee:	d017      	beq.n	8003b20 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003af0:	68fb      	ldr	r3, [r7, #12]
 8003af2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003af4:	781a      	ldrb	r2, [r3, #0]
 8003af6:	68fb      	ldr	r3, [r7, #12]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003afc:	68fb      	ldr	r3, [r7, #12]
 8003afe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b00:	1c5a      	adds	r2, r3, #1
 8003b02:	68fb      	ldr	r3, [r7, #12]
 8003b04:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8003b06:	68fb      	ldr	r3, [r7, #12]
 8003b08:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b0a:	b29b      	uxth	r3, r3
 8003b0c:	3b01      	subs	r3, #1
 8003b0e:	b29a      	uxth	r2, r3
 8003b10:	68fb      	ldr	r3, [r7, #12]
 8003b12:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8003b14:	68fb      	ldr	r3, [r7, #12]
 8003b16:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003b18:	3b01      	subs	r3, #1
 8003b1a:	b29a      	uxth	r2, r3
 8003b1c:	68fb      	ldr	r3, [r7, #12]
 8003b1e:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003b20:	697a      	ldr	r2, [r7, #20]
 8003b22:	6a39      	ldr	r1, [r7, #32]
 8003b24:	68f8      	ldr	r0, [r7, #12]
 8003b26:	f000 fafc 	bl	8004122 <I2C_WaitOnBTFFlagUntilTimeout>
 8003b2a:	4603      	mov	r3, r0
 8003b2c:	2b00      	cmp	r3, #0
 8003b2e:	d00d      	beq.n	8003b4c <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003b30:	68fb      	ldr	r3, [r7, #12]
 8003b32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b34:	2b04      	cmp	r3, #4
 8003b36:	d107      	bne.n	8003b48 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003b38:	68fb      	ldr	r3, [r7, #12]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	681a      	ldr	r2, [r3, #0]
 8003b3e:	68fb      	ldr	r3, [r7, #12]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003b46:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003b48:	2301      	movs	r3, #1
 8003b4a:	e01a      	b.n	8003b82 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8003b4c:	68fb      	ldr	r3, [r7, #12]
 8003b4e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003b50:	2b00      	cmp	r3, #0
 8003b52:	d194      	bne.n	8003a7e <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003b54:	68fb      	ldr	r3, [r7, #12]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	681a      	ldr	r2, [r3, #0]
 8003b5a:	68fb      	ldr	r3, [r7, #12]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003b62:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	2220      	movs	r2, #32
 8003b68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003b6c:	68fb      	ldr	r3, [r7, #12]
 8003b6e:	2200      	movs	r2, #0
 8003b70:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003b74:	68fb      	ldr	r3, [r7, #12]
 8003b76:	2200      	movs	r2, #0
 8003b78:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003b7c:	2300      	movs	r3, #0
 8003b7e:	e000      	b.n	8003b82 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8003b80:	2302      	movs	r3, #2
  }
}
 8003b82:	4618      	mov	r0, r3
 8003b84:	3718      	adds	r7, #24
 8003b86:	46bd      	mov	sp, r7
 8003b88:	bd80      	pop	{r7, pc}
 8003b8a:	bf00      	nop
 8003b8c:	00100002 	.word	0x00100002
 8003b90:	ffff0000 	.word	0xffff0000

08003b94 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8003b94:	b580      	push	{r7, lr}
 8003b96:	b08a      	sub	sp, #40	; 0x28
 8003b98:	af02      	add	r7, sp, #8
 8003b9a:	60f8      	str	r0, [r7, #12]
 8003b9c:	607a      	str	r2, [r7, #4]
 8003b9e:	603b      	str	r3, [r7, #0]
 8003ba0:	460b      	mov	r3, r1
 8003ba2:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8003ba4:	f7ff f8d2 	bl	8002d4c <HAL_GetTick>
 8003ba8:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 1U;
 8003baa:	2301      	movs	r3, #1
 8003bac:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003bae:	68fb      	ldr	r3, [r7, #12]
 8003bb0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003bb4:	b2db      	uxtb	r3, r3
 8003bb6:	2b20      	cmp	r3, #32
 8003bb8:	f040 8110 	bne.w	8003ddc <HAL_I2C_IsDeviceReady+0x248>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003bbc:	69fb      	ldr	r3, [r7, #28]
 8003bbe:	9300      	str	r3, [sp, #0]
 8003bc0:	2319      	movs	r3, #25
 8003bc2:	2201      	movs	r2, #1
 8003bc4:	4988      	ldr	r1, [pc, #544]	; (8003de8 <HAL_I2C_IsDeviceReady+0x254>)
 8003bc6:	68f8      	ldr	r0, [r7, #12]
 8003bc8:	f000 f994 	bl	8003ef4 <I2C_WaitOnFlagUntilTimeout>
 8003bcc:	4603      	mov	r3, r0
 8003bce:	2b00      	cmp	r3, #0
 8003bd0:	d001      	beq.n	8003bd6 <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 8003bd2:	2302      	movs	r3, #2
 8003bd4:	e103      	b.n	8003dde <HAL_I2C_IsDeviceReady+0x24a>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003bd6:	68fb      	ldr	r3, [r7, #12]
 8003bd8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003bdc:	2b01      	cmp	r3, #1
 8003bde:	d101      	bne.n	8003be4 <HAL_I2C_IsDeviceReady+0x50>
 8003be0:	2302      	movs	r3, #2
 8003be2:	e0fc      	b.n	8003dde <HAL_I2C_IsDeviceReady+0x24a>
 8003be4:	68fb      	ldr	r3, [r7, #12]
 8003be6:	2201      	movs	r2, #1
 8003be8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003bec:	68fb      	ldr	r3, [r7, #12]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	f003 0301 	and.w	r3, r3, #1
 8003bf6:	2b01      	cmp	r3, #1
 8003bf8:	d007      	beq.n	8003c0a <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003bfa:	68fb      	ldr	r3, [r7, #12]
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	681a      	ldr	r2, [r3, #0]
 8003c00:	68fb      	ldr	r3, [r7, #12]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	f042 0201 	orr.w	r2, r2, #1
 8003c08:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003c0a:	68fb      	ldr	r3, [r7, #12]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	681a      	ldr	r2, [r3, #0]
 8003c10:	68fb      	ldr	r3, [r7, #12]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003c18:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003c1a:	68fb      	ldr	r3, [r7, #12]
 8003c1c:	2224      	movs	r2, #36	; 0x24
 8003c1e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003c22:	68fb      	ldr	r3, [r7, #12]
 8003c24:	2200      	movs	r2, #0
 8003c26:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003c28:	68fb      	ldr	r3, [r7, #12]
 8003c2a:	4a70      	ldr	r2, [pc, #448]	; (8003dec <HAL_I2C_IsDeviceReady+0x258>)
 8003c2c:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003c2e:	68fb      	ldr	r3, [r7, #12]
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	681a      	ldr	r2, [r3, #0]
 8003c34:	68fb      	ldr	r3, [r7, #12]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003c3c:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 8003c3e:	69fb      	ldr	r3, [r7, #28]
 8003c40:	9300      	str	r3, [sp, #0]
 8003c42:	683b      	ldr	r3, [r7, #0]
 8003c44:	2200      	movs	r2, #0
 8003c46:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003c4a:	68f8      	ldr	r0, [r7, #12]
 8003c4c:	f000 f952 	bl	8003ef4 <I2C_WaitOnFlagUntilTimeout>
 8003c50:	4603      	mov	r3, r0
 8003c52:	2b00      	cmp	r3, #0
 8003c54:	d00c      	beq.n	8003c70 <HAL_I2C_IsDeviceReady+0xdc>
      {
        if (hi2c->Instance->CR1 & I2C_CR1_START)
 8003c56:	68fb      	ldr	r3, [r7, #12]
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c60:	2b00      	cmp	r3, #0
 8003c62:	d003      	beq.n	8003c6c <HAL_I2C_IsDeviceReady+0xd8>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003c64:	68fb      	ldr	r3, [r7, #12]
 8003c66:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003c6a:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 8003c6c:	2303      	movs	r3, #3
 8003c6e:	e0b6      	b.n	8003dde <HAL_I2C_IsDeviceReady+0x24a>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003c70:	897b      	ldrh	r3, [r7, #10]
 8003c72:	b2db      	uxtb	r3, r3
 8003c74:	461a      	mov	r2, r3
 8003c76:	68fb      	ldr	r3, [r7, #12]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003c7e:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 8003c80:	f7ff f864 	bl	8002d4c <HAL_GetTick>
 8003c84:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8003c86:	68fb      	ldr	r3, [r7, #12]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	695b      	ldr	r3, [r3, #20]
 8003c8c:	f003 0302 	and.w	r3, r3, #2
 8003c90:	2b02      	cmp	r3, #2
 8003c92:	bf0c      	ite	eq
 8003c94:	2301      	moveq	r3, #1
 8003c96:	2300      	movne	r3, #0
 8003c98:	b2db      	uxtb	r3, r3
 8003c9a:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	695b      	ldr	r3, [r3, #20]
 8003ca2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003ca6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003caa:	bf0c      	ite	eq
 8003cac:	2301      	moveq	r3, #1
 8003cae:	2300      	movne	r3, #0
 8003cb0:	b2db      	uxtb	r3, r3
 8003cb2:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8003cb4:	e025      	b.n	8003d02 <HAL_I2C_IsDeviceReady+0x16e>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8003cb6:	f7ff f849 	bl	8002d4c <HAL_GetTick>
 8003cba:	4602      	mov	r2, r0
 8003cbc:	69fb      	ldr	r3, [r7, #28]
 8003cbe:	1ad3      	subs	r3, r2, r3
 8003cc0:	683a      	ldr	r2, [r7, #0]
 8003cc2:	429a      	cmp	r2, r3
 8003cc4:	d302      	bcc.n	8003ccc <HAL_I2C_IsDeviceReady+0x138>
 8003cc6:	683b      	ldr	r3, [r7, #0]
 8003cc8:	2b00      	cmp	r3, #0
 8003cca:	d103      	bne.n	8003cd4 <HAL_I2C_IsDeviceReady+0x140>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	22a0      	movs	r2, #160	; 0xa0
 8003cd0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8003cd4:	68fb      	ldr	r3, [r7, #12]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	695b      	ldr	r3, [r3, #20]
 8003cda:	f003 0302 	and.w	r3, r3, #2
 8003cde:	2b02      	cmp	r3, #2
 8003ce0:	bf0c      	ite	eq
 8003ce2:	2301      	moveq	r3, #1
 8003ce4:	2300      	movne	r3, #0
 8003ce6:	b2db      	uxtb	r3, r3
 8003ce8:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8003cea:	68fb      	ldr	r3, [r7, #12]
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	695b      	ldr	r3, [r3, #20]
 8003cf0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003cf4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003cf8:	bf0c      	ite	eq
 8003cfa:	2301      	moveq	r3, #1
 8003cfc:	2300      	movne	r3, #0
 8003cfe:	b2db      	uxtb	r3, r3
 8003d00:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8003d02:	68fb      	ldr	r3, [r7, #12]
 8003d04:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003d08:	b2db      	uxtb	r3, r3
 8003d0a:	2ba0      	cmp	r3, #160	; 0xa0
 8003d0c:	d005      	beq.n	8003d1a <HAL_I2C_IsDeviceReady+0x186>
 8003d0e:	7dfb      	ldrb	r3, [r7, #23]
 8003d10:	2b00      	cmp	r3, #0
 8003d12:	d102      	bne.n	8003d1a <HAL_I2C_IsDeviceReady+0x186>
 8003d14:	7dbb      	ldrb	r3, [r7, #22]
 8003d16:	2b00      	cmp	r3, #0
 8003d18:	d0cd      	beq.n	8003cb6 <HAL_I2C_IsDeviceReady+0x122>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8003d1a:	68fb      	ldr	r3, [r7, #12]
 8003d1c:	2220      	movs	r2, #32
 8003d1e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8003d22:	68fb      	ldr	r3, [r7, #12]
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	695b      	ldr	r3, [r3, #20]
 8003d28:	f003 0302 	and.w	r3, r3, #2
 8003d2c:	2b02      	cmp	r3, #2
 8003d2e:	d129      	bne.n	8003d84 <HAL_I2C_IsDeviceReady+0x1f0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003d30:	68fb      	ldr	r3, [r7, #12]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	681a      	ldr	r2, [r3, #0]
 8003d36:	68fb      	ldr	r3, [r7, #12]
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003d3e:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003d40:	2300      	movs	r3, #0
 8003d42:	613b      	str	r3, [r7, #16]
 8003d44:	68fb      	ldr	r3, [r7, #12]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	695b      	ldr	r3, [r3, #20]
 8003d4a:	613b      	str	r3, [r7, #16]
 8003d4c:	68fb      	ldr	r3, [r7, #12]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	699b      	ldr	r3, [r3, #24]
 8003d52:	613b      	str	r3, [r7, #16]
 8003d54:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003d56:	69fb      	ldr	r3, [r7, #28]
 8003d58:	9300      	str	r3, [sp, #0]
 8003d5a:	2319      	movs	r3, #25
 8003d5c:	2201      	movs	r2, #1
 8003d5e:	4922      	ldr	r1, [pc, #136]	; (8003de8 <HAL_I2C_IsDeviceReady+0x254>)
 8003d60:	68f8      	ldr	r0, [r7, #12]
 8003d62:	f000 f8c7 	bl	8003ef4 <I2C_WaitOnFlagUntilTimeout>
 8003d66:	4603      	mov	r3, r0
 8003d68:	2b00      	cmp	r3, #0
 8003d6a:	d001      	beq.n	8003d70 <HAL_I2C_IsDeviceReady+0x1dc>
        {
          return HAL_ERROR;
 8003d6c:	2301      	movs	r3, #1
 8003d6e:	e036      	b.n	8003dde <HAL_I2C_IsDeviceReady+0x24a>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 8003d70:	68fb      	ldr	r3, [r7, #12]
 8003d72:	2220      	movs	r2, #32
 8003d74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003d78:	68fb      	ldr	r3, [r7, #12]
 8003d7a:	2200      	movs	r2, #0
 8003d7c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 8003d80:	2300      	movs	r3, #0
 8003d82:	e02c      	b.n	8003dde <HAL_I2C_IsDeviceReady+0x24a>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003d84:	68fb      	ldr	r3, [r7, #12]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	681a      	ldr	r2, [r3, #0]
 8003d8a:	68fb      	ldr	r3, [r7, #12]
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003d92:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003d94:	68fb      	ldr	r3, [r7, #12]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003d9c:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003d9e:	69fb      	ldr	r3, [r7, #28]
 8003da0:	9300      	str	r3, [sp, #0]
 8003da2:	2319      	movs	r3, #25
 8003da4:	2201      	movs	r2, #1
 8003da6:	4910      	ldr	r1, [pc, #64]	; (8003de8 <HAL_I2C_IsDeviceReady+0x254>)
 8003da8:	68f8      	ldr	r0, [r7, #12]
 8003daa:	f000 f8a3 	bl	8003ef4 <I2C_WaitOnFlagUntilTimeout>
 8003dae:	4603      	mov	r3, r0
 8003db0:	2b00      	cmp	r3, #0
 8003db2:	d001      	beq.n	8003db8 <HAL_I2C_IsDeviceReady+0x224>
        {
          return HAL_ERROR;
 8003db4:	2301      	movs	r3, #1
 8003db6:	e012      	b.n	8003dde <HAL_I2C_IsDeviceReady+0x24a>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 8003db8:	69bb      	ldr	r3, [r7, #24]
 8003dba:	3301      	adds	r3, #1
 8003dbc:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 8003dbe:	69ba      	ldr	r2, [r7, #24]
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	429a      	cmp	r2, r3
 8003dc4:	f4ff af33 	bcc.w	8003c2e <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 8003dc8:	68fb      	ldr	r3, [r7, #12]
 8003dca:	2220      	movs	r2, #32
 8003dcc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003dd0:	68fb      	ldr	r3, [r7, #12]
 8003dd2:	2200      	movs	r2, #0
 8003dd4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8003dd8:	2301      	movs	r3, #1
 8003dda:	e000      	b.n	8003dde <HAL_I2C_IsDeviceReady+0x24a>
  }
  else
  {
    return HAL_BUSY;
 8003ddc:	2302      	movs	r3, #2
  }
}
 8003dde:	4618      	mov	r0, r3
 8003de0:	3720      	adds	r7, #32
 8003de2:	46bd      	mov	sp, r7
 8003de4:	bd80      	pop	{r7, pc}
 8003de6:	bf00      	nop
 8003de8:	00100002 	.word	0x00100002
 8003dec:	ffff0000 	.word	0xffff0000

08003df0 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8003df0:	b580      	push	{r7, lr}
 8003df2:	b088      	sub	sp, #32
 8003df4:	af02      	add	r7, sp, #8
 8003df6:	60f8      	str	r0, [r7, #12]
 8003df8:	607a      	str	r2, [r7, #4]
 8003dfa:	603b      	str	r3, [r7, #0]
 8003dfc:	460b      	mov	r3, r1
 8003dfe:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003e00:	68fb      	ldr	r3, [r7, #12]
 8003e02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e04:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8003e06:	697b      	ldr	r3, [r7, #20]
 8003e08:	2b08      	cmp	r3, #8
 8003e0a:	d006      	beq.n	8003e1a <I2C_MasterRequestWrite+0x2a>
 8003e0c:	697b      	ldr	r3, [r7, #20]
 8003e0e:	2b01      	cmp	r3, #1
 8003e10:	d003      	beq.n	8003e1a <I2C_MasterRequestWrite+0x2a>
 8003e12:	697b      	ldr	r3, [r7, #20]
 8003e14:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003e18:	d108      	bne.n	8003e2c <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003e1a:	68fb      	ldr	r3, [r7, #12]
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	681a      	ldr	r2, [r3, #0]
 8003e20:	68fb      	ldr	r3, [r7, #12]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003e28:	601a      	str	r2, [r3, #0]
 8003e2a:	e00b      	b.n	8003e44 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8003e2c:	68fb      	ldr	r3, [r7, #12]
 8003e2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e30:	2b12      	cmp	r3, #18
 8003e32:	d107      	bne.n	8003e44 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003e34:	68fb      	ldr	r3, [r7, #12]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	681a      	ldr	r2, [r3, #0]
 8003e3a:	68fb      	ldr	r3, [r7, #12]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003e42:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003e44:	683b      	ldr	r3, [r7, #0]
 8003e46:	9300      	str	r3, [sp, #0]
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	2200      	movs	r2, #0
 8003e4c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003e50:	68f8      	ldr	r0, [r7, #12]
 8003e52:	f000 f84f 	bl	8003ef4 <I2C_WaitOnFlagUntilTimeout>
 8003e56:	4603      	mov	r3, r0
 8003e58:	2b00      	cmp	r3, #0
 8003e5a:	d00c      	beq.n	8003e76 <I2C_MasterRequestWrite+0x86>
  {
    if (hi2c->Instance->CR1 & I2C_CR1_START)
 8003e5c:	68fb      	ldr	r3, [r7, #12]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e66:	2b00      	cmp	r3, #0
 8003e68:	d003      	beq.n	8003e72 <I2C_MasterRequestWrite+0x82>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003e6a:	68fb      	ldr	r3, [r7, #12]
 8003e6c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003e70:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003e72:	2303      	movs	r3, #3
 8003e74:	e035      	b.n	8003ee2 <I2C_MasterRequestWrite+0xf2>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003e76:	68fb      	ldr	r3, [r7, #12]
 8003e78:	691b      	ldr	r3, [r3, #16]
 8003e7a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003e7e:	d108      	bne.n	8003e92 <I2C_MasterRequestWrite+0xa2>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003e80:	897b      	ldrh	r3, [r7, #10]
 8003e82:	b2db      	uxtb	r3, r3
 8003e84:	461a      	mov	r2, r3
 8003e86:	68fb      	ldr	r3, [r7, #12]
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003e8e:	611a      	str	r2, [r3, #16]
 8003e90:	e01b      	b.n	8003eca <I2C_MasterRequestWrite+0xda>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8003e92:	897b      	ldrh	r3, [r7, #10]
 8003e94:	11db      	asrs	r3, r3, #7
 8003e96:	b2db      	uxtb	r3, r3
 8003e98:	f003 0306 	and.w	r3, r3, #6
 8003e9c:	b2db      	uxtb	r3, r3
 8003e9e:	f063 030f 	orn	r3, r3, #15
 8003ea2:	b2da      	uxtb	r2, r3
 8003ea4:	68fb      	ldr	r3, [r7, #12]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8003eaa:	683b      	ldr	r3, [r7, #0]
 8003eac:	687a      	ldr	r2, [r7, #4]
 8003eae:	490f      	ldr	r1, [pc, #60]	; (8003eec <I2C_MasterRequestWrite+0xfc>)
 8003eb0:	68f8      	ldr	r0, [r7, #12]
 8003eb2:	f000 f876 	bl	8003fa2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003eb6:	4603      	mov	r3, r0
 8003eb8:	2b00      	cmp	r3, #0
 8003eba:	d001      	beq.n	8003ec0 <I2C_MasterRequestWrite+0xd0>
    {
      return HAL_ERROR;
 8003ebc:	2301      	movs	r3, #1
 8003ebe:	e010      	b.n	8003ee2 <I2C_MasterRequestWrite+0xf2>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8003ec0:	897b      	ldrh	r3, [r7, #10]
 8003ec2:	b2da      	uxtb	r2, r3
 8003ec4:	68fb      	ldr	r3, [r7, #12]
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003eca:	683b      	ldr	r3, [r7, #0]
 8003ecc:	687a      	ldr	r2, [r7, #4]
 8003ece:	4908      	ldr	r1, [pc, #32]	; (8003ef0 <I2C_MasterRequestWrite+0x100>)
 8003ed0:	68f8      	ldr	r0, [r7, #12]
 8003ed2:	f000 f866 	bl	8003fa2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003ed6:	4603      	mov	r3, r0
 8003ed8:	2b00      	cmp	r3, #0
 8003eda:	d001      	beq.n	8003ee0 <I2C_MasterRequestWrite+0xf0>
  {
    return HAL_ERROR;
 8003edc:	2301      	movs	r3, #1
 8003ede:	e000      	b.n	8003ee2 <I2C_MasterRequestWrite+0xf2>
  }

  return HAL_OK;
 8003ee0:	2300      	movs	r3, #0
}
 8003ee2:	4618      	mov	r0, r3
 8003ee4:	3718      	adds	r7, #24
 8003ee6:	46bd      	mov	sp, r7
 8003ee8:	bd80      	pop	{r7, pc}
 8003eea:	bf00      	nop
 8003eec:	00010008 	.word	0x00010008
 8003ef0:	00010002 	.word	0x00010002

08003ef4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003ef4:	b580      	push	{r7, lr}
 8003ef6:	b084      	sub	sp, #16
 8003ef8:	af00      	add	r7, sp, #0
 8003efa:	60f8      	str	r0, [r7, #12]
 8003efc:	60b9      	str	r1, [r7, #8]
 8003efe:	603b      	str	r3, [r7, #0]
 8003f00:	4613      	mov	r3, r2
 8003f02:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003f04:	e025      	b.n	8003f52 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003f06:	683b      	ldr	r3, [r7, #0]
 8003f08:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f0c:	d021      	beq.n	8003f52 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003f0e:	f7fe ff1d 	bl	8002d4c <HAL_GetTick>
 8003f12:	4602      	mov	r2, r0
 8003f14:	69bb      	ldr	r3, [r7, #24]
 8003f16:	1ad3      	subs	r3, r2, r3
 8003f18:	683a      	ldr	r2, [r7, #0]
 8003f1a:	429a      	cmp	r2, r3
 8003f1c:	d302      	bcc.n	8003f24 <I2C_WaitOnFlagUntilTimeout+0x30>
 8003f1e:	683b      	ldr	r3, [r7, #0]
 8003f20:	2b00      	cmp	r3, #0
 8003f22:	d116      	bne.n	8003f52 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8003f24:	68fb      	ldr	r3, [r7, #12]
 8003f26:	2200      	movs	r2, #0
 8003f28:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8003f2a:	68fb      	ldr	r3, [r7, #12]
 8003f2c:	2220      	movs	r2, #32
 8003f2e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8003f32:	68fb      	ldr	r3, [r7, #12]
 8003f34:	2200      	movs	r2, #0
 8003f36:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003f3a:	68fb      	ldr	r3, [r7, #12]
 8003f3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f3e:	f043 0220 	orr.w	r2, r3, #32
 8003f42:	68fb      	ldr	r3, [r7, #12]
 8003f44:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003f46:	68fb      	ldr	r3, [r7, #12]
 8003f48:	2200      	movs	r2, #0
 8003f4a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003f4e:	2301      	movs	r3, #1
 8003f50:	e023      	b.n	8003f9a <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003f52:	68bb      	ldr	r3, [r7, #8]
 8003f54:	0c1b      	lsrs	r3, r3, #16
 8003f56:	b2db      	uxtb	r3, r3
 8003f58:	2b01      	cmp	r3, #1
 8003f5a:	d10d      	bne.n	8003f78 <I2C_WaitOnFlagUntilTimeout+0x84>
 8003f5c:	68fb      	ldr	r3, [r7, #12]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	695b      	ldr	r3, [r3, #20]
 8003f62:	43da      	mvns	r2, r3
 8003f64:	68bb      	ldr	r3, [r7, #8]
 8003f66:	4013      	ands	r3, r2
 8003f68:	b29b      	uxth	r3, r3
 8003f6a:	2b00      	cmp	r3, #0
 8003f6c:	bf0c      	ite	eq
 8003f6e:	2301      	moveq	r3, #1
 8003f70:	2300      	movne	r3, #0
 8003f72:	b2db      	uxtb	r3, r3
 8003f74:	461a      	mov	r2, r3
 8003f76:	e00c      	b.n	8003f92 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8003f78:	68fb      	ldr	r3, [r7, #12]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	699b      	ldr	r3, [r3, #24]
 8003f7e:	43da      	mvns	r2, r3
 8003f80:	68bb      	ldr	r3, [r7, #8]
 8003f82:	4013      	ands	r3, r2
 8003f84:	b29b      	uxth	r3, r3
 8003f86:	2b00      	cmp	r3, #0
 8003f88:	bf0c      	ite	eq
 8003f8a:	2301      	moveq	r3, #1
 8003f8c:	2300      	movne	r3, #0
 8003f8e:	b2db      	uxtb	r3, r3
 8003f90:	461a      	mov	r2, r3
 8003f92:	79fb      	ldrb	r3, [r7, #7]
 8003f94:	429a      	cmp	r2, r3
 8003f96:	d0b6      	beq.n	8003f06 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003f98:	2300      	movs	r3, #0
}
 8003f9a:	4618      	mov	r0, r3
 8003f9c:	3710      	adds	r7, #16
 8003f9e:	46bd      	mov	sp, r7
 8003fa0:	bd80      	pop	{r7, pc}

08003fa2 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8003fa2:	b580      	push	{r7, lr}
 8003fa4:	b084      	sub	sp, #16
 8003fa6:	af00      	add	r7, sp, #0
 8003fa8:	60f8      	str	r0, [r7, #12]
 8003faa:	60b9      	str	r1, [r7, #8]
 8003fac:	607a      	str	r2, [r7, #4]
 8003fae:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003fb0:	e051      	b.n	8004056 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003fb2:	68fb      	ldr	r3, [r7, #12]
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	695b      	ldr	r3, [r3, #20]
 8003fb8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003fbc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003fc0:	d123      	bne.n	800400a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003fc2:	68fb      	ldr	r3, [r7, #12]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	681a      	ldr	r2, [r3, #0]
 8003fc8:	68fb      	ldr	r3, [r7, #12]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003fd0:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003fd2:	68fb      	ldr	r3, [r7, #12]
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003fda:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003fdc:	68fb      	ldr	r3, [r7, #12]
 8003fde:	2200      	movs	r2, #0
 8003fe0:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003fe2:	68fb      	ldr	r3, [r7, #12]
 8003fe4:	2220      	movs	r2, #32
 8003fe6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003fea:	68fb      	ldr	r3, [r7, #12]
 8003fec:	2200      	movs	r2, #0
 8003fee:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003ff2:	68fb      	ldr	r3, [r7, #12]
 8003ff4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ff6:	f043 0204 	orr.w	r2, r3, #4
 8003ffa:	68fb      	ldr	r3, [r7, #12]
 8003ffc:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003ffe:	68fb      	ldr	r3, [r7, #12]
 8004000:	2200      	movs	r2, #0
 8004002:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004006:	2301      	movs	r3, #1
 8004008:	e046      	b.n	8004098 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004010:	d021      	beq.n	8004056 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004012:	f7fe fe9b 	bl	8002d4c <HAL_GetTick>
 8004016:	4602      	mov	r2, r0
 8004018:	683b      	ldr	r3, [r7, #0]
 800401a:	1ad3      	subs	r3, r2, r3
 800401c:	687a      	ldr	r2, [r7, #4]
 800401e:	429a      	cmp	r2, r3
 8004020:	d302      	bcc.n	8004028 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	2b00      	cmp	r3, #0
 8004026:	d116      	bne.n	8004056 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004028:	68fb      	ldr	r3, [r7, #12]
 800402a:	2200      	movs	r2, #0
 800402c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800402e:	68fb      	ldr	r3, [r7, #12]
 8004030:	2220      	movs	r2, #32
 8004032:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004036:	68fb      	ldr	r3, [r7, #12]
 8004038:	2200      	movs	r2, #0
 800403a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800403e:	68fb      	ldr	r3, [r7, #12]
 8004040:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004042:	f043 0220 	orr.w	r2, r3, #32
 8004046:	68fb      	ldr	r3, [r7, #12]
 8004048:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800404a:	68fb      	ldr	r3, [r7, #12]
 800404c:	2200      	movs	r2, #0
 800404e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004052:	2301      	movs	r3, #1
 8004054:	e020      	b.n	8004098 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004056:	68bb      	ldr	r3, [r7, #8]
 8004058:	0c1b      	lsrs	r3, r3, #16
 800405a:	b2db      	uxtb	r3, r3
 800405c:	2b01      	cmp	r3, #1
 800405e:	d10c      	bne.n	800407a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8004060:	68fb      	ldr	r3, [r7, #12]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	695b      	ldr	r3, [r3, #20]
 8004066:	43da      	mvns	r2, r3
 8004068:	68bb      	ldr	r3, [r7, #8]
 800406a:	4013      	ands	r3, r2
 800406c:	b29b      	uxth	r3, r3
 800406e:	2b00      	cmp	r3, #0
 8004070:	bf14      	ite	ne
 8004072:	2301      	movne	r3, #1
 8004074:	2300      	moveq	r3, #0
 8004076:	b2db      	uxtb	r3, r3
 8004078:	e00b      	b.n	8004092 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 800407a:	68fb      	ldr	r3, [r7, #12]
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	699b      	ldr	r3, [r3, #24]
 8004080:	43da      	mvns	r2, r3
 8004082:	68bb      	ldr	r3, [r7, #8]
 8004084:	4013      	ands	r3, r2
 8004086:	b29b      	uxth	r3, r3
 8004088:	2b00      	cmp	r3, #0
 800408a:	bf14      	ite	ne
 800408c:	2301      	movne	r3, #1
 800408e:	2300      	moveq	r3, #0
 8004090:	b2db      	uxtb	r3, r3
 8004092:	2b00      	cmp	r3, #0
 8004094:	d18d      	bne.n	8003fb2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8004096:	2300      	movs	r3, #0
}
 8004098:	4618      	mov	r0, r3
 800409a:	3710      	adds	r7, #16
 800409c:	46bd      	mov	sp, r7
 800409e:	bd80      	pop	{r7, pc}

080040a0 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80040a0:	b580      	push	{r7, lr}
 80040a2:	b084      	sub	sp, #16
 80040a4:	af00      	add	r7, sp, #0
 80040a6:	60f8      	str	r0, [r7, #12]
 80040a8:	60b9      	str	r1, [r7, #8]
 80040aa:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80040ac:	e02d      	b.n	800410a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80040ae:	68f8      	ldr	r0, [r7, #12]
 80040b0:	f000 f878 	bl	80041a4 <I2C_IsAcknowledgeFailed>
 80040b4:	4603      	mov	r3, r0
 80040b6:	2b00      	cmp	r3, #0
 80040b8:	d001      	beq.n	80040be <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80040ba:	2301      	movs	r3, #1
 80040bc:	e02d      	b.n	800411a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80040be:	68bb      	ldr	r3, [r7, #8]
 80040c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80040c4:	d021      	beq.n	800410a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80040c6:	f7fe fe41 	bl	8002d4c <HAL_GetTick>
 80040ca:	4602      	mov	r2, r0
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	1ad3      	subs	r3, r2, r3
 80040d0:	68ba      	ldr	r2, [r7, #8]
 80040d2:	429a      	cmp	r2, r3
 80040d4:	d302      	bcc.n	80040dc <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80040d6:	68bb      	ldr	r3, [r7, #8]
 80040d8:	2b00      	cmp	r3, #0
 80040da:	d116      	bne.n	800410a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80040dc:	68fb      	ldr	r3, [r7, #12]
 80040de:	2200      	movs	r2, #0
 80040e0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80040e2:	68fb      	ldr	r3, [r7, #12]
 80040e4:	2220      	movs	r2, #32
 80040e6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80040ea:	68fb      	ldr	r3, [r7, #12]
 80040ec:	2200      	movs	r2, #0
 80040ee:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80040f2:	68fb      	ldr	r3, [r7, #12]
 80040f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040f6:	f043 0220 	orr.w	r2, r3, #32
 80040fa:	68fb      	ldr	r3, [r7, #12]
 80040fc:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80040fe:	68fb      	ldr	r3, [r7, #12]
 8004100:	2200      	movs	r2, #0
 8004102:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004106:	2301      	movs	r3, #1
 8004108:	e007      	b.n	800411a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800410a:	68fb      	ldr	r3, [r7, #12]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	695b      	ldr	r3, [r3, #20]
 8004110:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004114:	2b80      	cmp	r3, #128	; 0x80
 8004116:	d1ca      	bne.n	80040ae <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004118:	2300      	movs	r3, #0
}
 800411a:	4618      	mov	r0, r3
 800411c:	3710      	adds	r7, #16
 800411e:	46bd      	mov	sp, r7
 8004120:	bd80      	pop	{r7, pc}

08004122 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004122:	b580      	push	{r7, lr}
 8004124:	b084      	sub	sp, #16
 8004126:	af00      	add	r7, sp, #0
 8004128:	60f8      	str	r0, [r7, #12]
 800412a:	60b9      	str	r1, [r7, #8]
 800412c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800412e:	e02d      	b.n	800418c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004130:	68f8      	ldr	r0, [r7, #12]
 8004132:	f000 f837 	bl	80041a4 <I2C_IsAcknowledgeFailed>
 8004136:	4603      	mov	r3, r0
 8004138:	2b00      	cmp	r3, #0
 800413a:	d001      	beq.n	8004140 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800413c:	2301      	movs	r3, #1
 800413e:	e02d      	b.n	800419c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004140:	68bb      	ldr	r3, [r7, #8]
 8004142:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004146:	d021      	beq.n	800418c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004148:	f7fe fe00 	bl	8002d4c <HAL_GetTick>
 800414c:	4602      	mov	r2, r0
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	1ad3      	subs	r3, r2, r3
 8004152:	68ba      	ldr	r2, [r7, #8]
 8004154:	429a      	cmp	r2, r3
 8004156:	d302      	bcc.n	800415e <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8004158:	68bb      	ldr	r3, [r7, #8]
 800415a:	2b00      	cmp	r3, #0
 800415c:	d116      	bne.n	800418c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800415e:	68fb      	ldr	r3, [r7, #12]
 8004160:	2200      	movs	r2, #0
 8004162:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004164:	68fb      	ldr	r3, [r7, #12]
 8004166:	2220      	movs	r2, #32
 8004168:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800416c:	68fb      	ldr	r3, [r7, #12]
 800416e:	2200      	movs	r2, #0
 8004170:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004174:	68fb      	ldr	r3, [r7, #12]
 8004176:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004178:	f043 0220 	orr.w	r2, r3, #32
 800417c:	68fb      	ldr	r3, [r7, #12]
 800417e:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004180:	68fb      	ldr	r3, [r7, #12]
 8004182:	2200      	movs	r2, #0
 8004184:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004188:	2301      	movs	r3, #1
 800418a:	e007      	b.n	800419c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800418c:	68fb      	ldr	r3, [r7, #12]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	695b      	ldr	r3, [r3, #20]
 8004192:	f003 0304 	and.w	r3, r3, #4
 8004196:	2b04      	cmp	r3, #4
 8004198:	d1ca      	bne.n	8004130 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800419a:	2300      	movs	r3, #0
}
 800419c:	4618      	mov	r0, r3
 800419e:	3710      	adds	r7, #16
 80041a0:	46bd      	mov	sp, r7
 80041a2:	bd80      	pop	{r7, pc}

080041a4 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80041a4:	b480      	push	{r7}
 80041a6:	b083      	sub	sp, #12
 80041a8:	af00      	add	r7, sp, #0
 80041aa:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	695b      	ldr	r3, [r3, #20]
 80041b2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80041b6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80041ba:	d11b      	bne.n	80041f4 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80041c4:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	2200      	movs	r2, #0
 80041ca:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	2220      	movs	r2, #32
 80041d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	2200      	movs	r2, #0
 80041d8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041e0:	f043 0204 	orr.w	r2, r3, #4
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	2200      	movs	r2, #0
 80041ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80041f0:	2301      	movs	r3, #1
 80041f2:	e000      	b.n	80041f6 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80041f4:	2300      	movs	r3, #0
}
 80041f6:	4618      	mov	r0, r3
 80041f8:	370c      	adds	r7, #12
 80041fa:	46bd      	mov	sp, r7
 80041fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004200:	4770      	bx	lr
	...

08004204 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004204:	b580      	push	{r7, lr}
 8004206:	b086      	sub	sp, #24
 8004208:	af00      	add	r7, sp, #0
 800420a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	2b00      	cmp	r3, #0
 8004210:	d101      	bne.n	8004216 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004212:	2301      	movs	r3, #1
 8004214:	e25b      	b.n	80046ce <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	f003 0301 	and.w	r3, r3, #1
 800421e:	2b00      	cmp	r3, #0
 8004220:	d075      	beq.n	800430e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004222:	4ba3      	ldr	r3, [pc, #652]	; (80044b0 <HAL_RCC_OscConfig+0x2ac>)
 8004224:	689b      	ldr	r3, [r3, #8]
 8004226:	f003 030c 	and.w	r3, r3, #12
 800422a:	2b04      	cmp	r3, #4
 800422c:	d00c      	beq.n	8004248 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800422e:	4ba0      	ldr	r3, [pc, #640]	; (80044b0 <HAL_RCC_OscConfig+0x2ac>)
 8004230:	689b      	ldr	r3, [r3, #8]
 8004232:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004236:	2b08      	cmp	r3, #8
 8004238:	d112      	bne.n	8004260 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800423a:	4b9d      	ldr	r3, [pc, #628]	; (80044b0 <HAL_RCC_OscConfig+0x2ac>)
 800423c:	685b      	ldr	r3, [r3, #4]
 800423e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004242:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004246:	d10b      	bne.n	8004260 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004248:	4b99      	ldr	r3, [pc, #612]	; (80044b0 <HAL_RCC_OscConfig+0x2ac>)
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004250:	2b00      	cmp	r3, #0
 8004252:	d05b      	beq.n	800430c <HAL_RCC_OscConfig+0x108>
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	685b      	ldr	r3, [r3, #4]
 8004258:	2b00      	cmp	r3, #0
 800425a:	d157      	bne.n	800430c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800425c:	2301      	movs	r3, #1
 800425e:	e236      	b.n	80046ce <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	685b      	ldr	r3, [r3, #4]
 8004264:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004268:	d106      	bne.n	8004278 <HAL_RCC_OscConfig+0x74>
 800426a:	4b91      	ldr	r3, [pc, #580]	; (80044b0 <HAL_RCC_OscConfig+0x2ac>)
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	4a90      	ldr	r2, [pc, #576]	; (80044b0 <HAL_RCC_OscConfig+0x2ac>)
 8004270:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004274:	6013      	str	r3, [r2, #0]
 8004276:	e01d      	b.n	80042b4 <HAL_RCC_OscConfig+0xb0>
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	685b      	ldr	r3, [r3, #4]
 800427c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004280:	d10c      	bne.n	800429c <HAL_RCC_OscConfig+0x98>
 8004282:	4b8b      	ldr	r3, [pc, #556]	; (80044b0 <HAL_RCC_OscConfig+0x2ac>)
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	4a8a      	ldr	r2, [pc, #552]	; (80044b0 <HAL_RCC_OscConfig+0x2ac>)
 8004288:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800428c:	6013      	str	r3, [r2, #0]
 800428e:	4b88      	ldr	r3, [pc, #544]	; (80044b0 <HAL_RCC_OscConfig+0x2ac>)
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	4a87      	ldr	r2, [pc, #540]	; (80044b0 <HAL_RCC_OscConfig+0x2ac>)
 8004294:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004298:	6013      	str	r3, [r2, #0]
 800429a:	e00b      	b.n	80042b4 <HAL_RCC_OscConfig+0xb0>
 800429c:	4b84      	ldr	r3, [pc, #528]	; (80044b0 <HAL_RCC_OscConfig+0x2ac>)
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	4a83      	ldr	r2, [pc, #524]	; (80044b0 <HAL_RCC_OscConfig+0x2ac>)
 80042a2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80042a6:	6013      	str	r3, [r2, #0]
 80042a8:	4b81      	ldr	r3, [pc, #516]	; (80044b0 <HAL_RCC_OscConfig+0x2ac>)
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	4a80      	ldr	r2, [pc, #512]	; (80044b0 <HAL_RCC_OscConfig+0x2ac>)
 80042ae:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80042b2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	685b      	ldr	r3, [r3, #4]
 80042b8:	2b00      	cmp	r3, #0
 80042ba:	d013      	beq.n	80042e4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80042bc:	f7fe fd46 	bl	8002d4c <HAL_GetTick>
 80042c0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80042c2:	e008      	b.n	80042d6 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80042c4:	f7fe fd42 	bl	8002d4c <HAL_GetTick>
 80042c8:	4602      	mov	r2, r0
 80042ca:	693b      	ldr	r3, [r7, #16]
 80042cc:	1ad3      	subs	r3, r2, r3
 80042ce:	2b64      	cmp	r3, #100	; 0x64
 80042d0:	d901      	bls.n	80042d6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80042d2:	2303      	movs	r3, #3
 80042d4:	e1fb      	b.n	80046ce <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80042d6:	4b76      	ldr	r3, [pc, #472]	; (80044b0 <HAL_RCC_OscConfig+0x2ac>)
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80042de:	2b00      	cmp	r3, #0
 80042e0:	d0f0      	beq.n	80042c4 <HAL_RCC_OscConfig+0xc0>
 80042e2:	e014      	b.n	800430e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80042e4:	f7fe fd32 	bl	8002d4c <HAL_GetTick>
 80042e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80042ea:	e008      	b.n	80042fe <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80042ec:	f7fe fd2e 	bl	8002d4c <HAL_GetTick>
 80042f0:	4602      	mov	r2, r0
 80042f2:	693b      	ldr	r3, [r7, #16]
 80042f4:	1ad3      	subs	r3, r2, r3
 80042f6:	2b64      	cmp	r3, #100	; 0x64
 80042f8:	d901      	bls.n	80042fe <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80042fa:	2303      	movs	r3, #3
 80042fc:	e1e7      	b.n	80046ce <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80042fe:	4b6c      	ldr	r3, [pc, #432]	; (80044b0 <HAL_RCC_OscConfig+0x2ac>)
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004306:	2b00      	cmp	r3, #0
 8004308:	d1f0      	bne.n	80042ec <HAL_RCC_OscConfig+0xe8>
 800430a:	e000      	b.n	800430e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800430c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	f003 0302 	and.w	r3, r3, #2
 8004316:	2b00      	cmp	r3, #0
 8004318:	d063      	beq.n	80043e2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800431a:	4b65      	ldr	r3, [pc, #404]	; (80044b0 <HAL_RCC_OscConfig+0x2ac>)
 800431c:	689b      	ldr	r3, [r3, #8]
 800431e:	f003 030c 	and.w	r3, r3, #12
 8004322:	2b00      	cmp	r3, #0
 8004324:	d00b      	beq.n	800433e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004326:	4b62      	ldr	r3, [pc, #392]	; (80044b0 <HAL_RCC_OscConfig+0x2ac>)
 8004328:	689b      	ldr	r3, [r3, #8]
 800432a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800432e:	2b08      	cmp	r3, #8
 8004330:	d11c      	bne.n	800436c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004332:	4b5f      	ldr	r3, [pc, #380]	; (80044b0 <HAL_RCC_OscConfig+0x2ac>)
 8004334:	685b      	ldr	r3, [r3, #4]
 8004336:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800433a:	2b00      	cmp	r3, #0
 800433c:	d116      	bne.n	800436c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800433e:	4b5c      	ldr	r3, [pc, #368]	; (80044b0 <HAL_RCC_OscConfig+0x2ac>)
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	f003 0302 	and.w	r3, r3, #2
 8004346:	2b00      	cmp	r3, #0
 8004348:	d005      	beq.n	8004356 <HAL_RCC_OscConfig+0x152>
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	68db      	ldr	r3, [r3, #12]
 800434e:	2b01      	cmp	r3, #1
 8004350:	d001      	beq.n	8004356 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8004352:	2301      	movs	r3, #1
 8004354:	e1bb      	b.n	80046ce <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004356:	4b56      	ldr	r3, [pc, #344]	; (80044b0 <HAL_RCC_OscConfig+0x2ac>)
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	691b      	ldr	r3, [r3, #16]
 8004362:	00db      	lsls	r3, r3, #3
 8004364:	4952      	ldr	r1, [pc, #328]	; (80044b0 <HAL_RCC_OscConfig+0x2ac>)
 8004366:	4313      	orrs	r3, r2
 8004368:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800436a:	e03a      	b.n	80043e2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	68db      	ldr	r3, [r3, #12]
 8004370:	2b00      	cmp	r3, #0
 8004372:	d020      	beq.n	80043b6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004374:	4b4f      	ldr	r3, [pc, #316]	; (80044b4 <HAL_RCC_OscConfig+0x2b0>)
 8004376:	2201      	movs	r2, #1
 8004378:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800437a:	f7fe fce7 	bl	8002d4c <HAL_GetTick>
 800437e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004380:	e008      	b.n	8004394 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004382:	f7fe fce3 	bl	8002d4c <HAL_GetTick>
 8004386:	4602      	mov	r2, r0
 8004388:	693b      	ldr	r3, [r7, #16]
 800438a:	1ad3      	subs	r3, r2, r3
 800438c:	2b02      	cmp	r3, #2
 800438e:	d901      	bls.n	8004394 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004390:	2303      	movs	r3, #3
 8004392:	e19c      	b.n	80046ce <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004394:	4b46      	ldr	r3, [pc, #280]	; (80044b0 <HAL_RCC_OscConfig+0x2ac>)
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	f003 0302 	and.w	r3, r3, #2
 800439c:	2b00      	cmp	r3, #0
 800439e:	d0f0      	beq.n	8004382 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80043a0:	4b43      	ldr	r3, [pc, #268]	; (80044b0 <HAL_RCC_OscConfig+0x2ac>)
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	691b      	ldr	r3, [r3, #16]
 80043ac:	00db      	lsls	r3, r3, #3
 80043ae:	4940      	ldr	r1, [pc, #256]	; (80044b0 <HAL_RCC_OscConfig+0x2ac>)
 80043b0:	4313      	orrs	r3, r2
 80043b2:	600b      	str	r3, [r1, #0]
 80043b4:	e015      	b.n	80043e2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80043b6:	4b3f      	ldr	r3, [pc, #252]	; (80044b4 <HAL_RCC_OscConfig+0x2b0>)
 80043b8:	2200      	movs	r2, #0
 80043ba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80043bc:	f7fe fcc6 	bl	8002d4c <HAL_GetTick>
 80043c0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80043c2:	e008      	b.n	80043d6 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80043c4:	f7fe fcc2 	bl	8002d4c <HAL_GetTick>
 80043c8:	4602      	mov	r2, r0
 80043ca:	693b      	ldr	r3, [r7, #16]
 80043cc:	1ad3      	subs	r3, r2, r3
 80043ce:	2b02      	cmp	r3, #2
 80043d0:	d901      	bls.n	80043d6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80043d2:	2303      	movs	r3, #3
 80043d4:	e17b      	b.n	80046ce <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80043d6:	4b36      	ldr	r3, [pc, #216]	; (80044b0 <HAL_RCC_OscConfig+0x2ac>)
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	f003 0302 	and.w	r3, r3, #2
 80043de:	2b00      	cmp	r3, #0
 80043e0:	d1f0      	bne.n	80043c4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	f003 0308 	and.w	r3, r3, #8
 80043ea:	2b00      	cmp	r3, #0
 80043ec:	d030      	beq.n	8004450 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	695b      	ldr	r3, [r3, #20]
 80043f2:	2b00      	cmp	r3, #0
 80043f4:	d016      	beq.n	8004424 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80043f6:	4b30      	ldr	r3, [pc, #192]	; (80044b8 <HAL_RCC_OscConfig+0x2b4>)
 80043f8:	2201      	movs	r2, #1
 80043fa:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80043fc:	f7fe fca6 	bl	8002d4c <HAL_GetTick>
 8004400:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004402:	e008      	b.n	8004416 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004404:	f7fe fca2 	bl	8002d4c <HAL_GetTick>
 8004408:	4602      	mov	r2, r0
 800440a:	693b      	ldr	r3, [r7, #16]
 800440c:	1ad3      	subs	r3, r2, r3
 800440e:	2b02      	cmp	r3, #2
 8004410:	d901      	bls.n	8004416 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8004412:	2303      	movs	r3, #3
 8004414:	e15b      	b.n	80046ce <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004416:	4b26      	ldr	r3, [pc, #152]	; (80044b0 <HAL_RCC_OscConfig+0x2ac>)
 8004418:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800441a:	f003 0302 	and.w	r3, r3, #2
 800441e:	2b00      	cmp	r3, #0
 8004420:	d0f0      	beq.n	8004404 <HAL_RCC_OscConfig+0x200>
 8004422:	e015      	b.n	8004450 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004424:	4b24      	ldr	r3, [pc, #144]	; (80044b8 <HAL_RCC_OscConfig+0x2b4>)
 8004426:	2200      	movs	r2, #0
 8004428:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800442a:	f7fe fc8f 	bl	8002d4c <HAL_GetTick>
 800442e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004430:	e008      	b.n	8004444 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004432:	f7fe fc8b 	bl	8002d4c <HAL_GetTick>
 8004436:	4602      	mov	r2, r0
 8004438:	693b      	ldr	r3, [r7, #16]
 800443a:	1ad3      	subs	r3, r2, r3
 800443c:	2b02      	cmp	r3, #2
 800443e:	d901      	bls.n	8004444 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8004440:	2303      	movs	r3, #3
 8004442:	e144      	b.n	80046ce <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004444:	4b1a      	ldr	r3, [pc, #104]	; (80044b0 <HAL_RCC_OscConfig+0x2ac>)
 8004446:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004448:	f003 0302 	and.w	r3, r3, #2
 800444c:	2b00      	cmp	r3, #0
 800444e:	d1f0      	bne.n	8004432 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	f003 0304 	and.w	r3, r3, #4
 8004458:	2b00      	cmp	r3, #0
 800445a:	f000 80a0 	beq.w	800459e <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800445e:	2300      	movs	r3, #0
 8004460:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004462:	4b13      	ldr	r3, [pc, #76]	; (80044b0 <HAL_RCC_OscConfig+0x2ac>)
 8004464:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004466:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800446a:	2b00      	cmp	r3, #0
 800446c:	d10f      	bne.n	800448e <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800446e:	2300      	movs	r3, #0
 8004470:	60bb      	str	r3, [r7, #8]
 8004472:	4b0f      	ldr	r3, [pc, #60]	; (80044b0 <HAL_RCC_OscConfig+0x2ac>)
 8004474:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004476:	4a0e      	ldr	r2, [pc, #56]	; (80044b0 <HAL_RCC_OscConfig+0x2ac>)
 8004478:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800447c:	6413      	str	r3, [r2, #64]	; 0x40
 800447e:	4b0c      	ldr	r3, [pc, #48]	; (80044b0 <HAL_RCC_OscConfig+0x2ac>)
 8004480:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004482:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004486:	60bb      	str	r3, [r7, #8]
 8004488:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800448a:	2301      	movs	r3, #1
 800448c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800448e:	4b0b      	ldr	r3, [pc, #44]	; (80044bc <HAL_RCC_OscConfig+0x2b8>)
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004496:	2b00      	cmp	r3, #0
 8004498:	d121      	bne.n	80044de <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800449a:	4b08      	ldr	r3, [pc, #32]	; (80044bc <HAL_RCC_OscConfig+0x2b8>)
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	4a07      	ldr	r2, [pc, #28]	; (80044bc <HAL_RCC_OscConfig+0x2b8>)
 80044a0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80044a4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80044a6:	f7fe fc51 	bl	8002d4c <HAL_GetTick>
 80044aa:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80044ac:	e011      	b.n	80044d2 <HAL_RCC_OscConfig+0x2ce>
 80044ae:	bf00      	nop
 80044b0:	40023800 	.word	0x40023800
 80044b4:	42470000 	.word	0x42470000
 80044b8:	42470e80 	.word	0x42470e80
 80044bc:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80044c0:	f7fe fc44 	bl	8002d4c <HAL_GetTick>
 80044c4:	4602      	mov	r2, r0
 80044c6:	693b      	ldr	r3, [r7, #16]
 80044c8:	1ad3      	subs	r3, r2, r3
 80044ca:	2b02      	cmp	r3, #2
 80044cc:	d901      	bls.n	80044d2 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 80044ce:	2303      	movs	r3, #3
 80044d0:	e0fd      	b.n	80046ce <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80044d2:	4b81      	ldr	r3, [pc, #516]	; (80046d8 <HAL_RCC_OscConfig+0x4d4>)
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80044da:	2b00      	cmp	r3, #0
 80044dc:	d0f0      	beq.n	80044c0 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	689b      	ldr	r3, [r3, #8]
 80044e2:	2b01      	cmp	r3, #1
 80044e4:	d106      	bne.n	80044f4 <HAL_RCC_OscConfig+0x2f0>
 80044e6:	4b7d      	ldr	r3, [pc, #500]	; (80046dc <HAL_RCC_OscConfig+0x4d8>)
 80044e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80044ea:	4a7c      	ldr	r2, [pc, #496]	; (80046dc <HAL_RCC_OscConfig+0x4d8>)
 80044ec:	f043 0301 	orr.w	r3, r3, #1
 80044f0:	6713      	str	r3, [r2, #112]	; 0x70
 80044f2:	e01c      	b.n	800452e <HAL_RCC_OscConfig+0x32a>
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	689b      	ldr	r3, [r3, #8]
 80044f8:	2b05      	cmp	r3, #5
 80044fa:	d10c      	bne.n	8004516 <HAL_RCC_OscConfig+0x312>
 80044fc:	4b77      	ldr	r3, [pc, #476]	; (80046dc <HAL_RCC_OscConfig+0x4d8>)
 80044fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004500:	4a76      	ldr	r2, [pc, #472]	; (80046dc <HAL_RCC_OscConfig+0x4d8>)
 8004502:	f043 0304 	orr.w	r3, r3, #4
 8004506:	6713      	str	r3, [r2, #112]	; 0x70
 8004508:	4b74      	ldr	r3, [pc, #464]	; (80046dc <HAL_RCC_OscConfig+0x4d8>)
 800450a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800450c:	4a73      	ldr	r2, [pc, #460]	; (80046dc <HAL_RCC_OscConfig+0x4d8>)
 800450e:	f043 0301 	orr.w	r3, r3, #1
 8004512:	6713      	str	r3, [r2, #112]	; 0x70
 8004514:	e00b      	b.n	800452e <HAL_RCC_OscConfig+0x32a>
 8004516:	4b71      	ldr	r3, [pc, #452]	; (80046dc <HAL_RCC_OscConfig+0x4d8>)
 8004518:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800451a:	4a70      	ldr	r2, [pc, #448]	; (80046dc <HAL_RCC_OscConfig+0x4d8>)
 800451c:	f023 0301 	bic.w	r3, r3, #1
 8004520:	6713      	str	r3, [r2, #112]	; 0x70
 8004522:	4b6e      	ldr	r3, [pc, #440]	; (80046dc <HAL_RCC_OscConfig+0x4d8>)
 8004524:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004526:	4a6d      	ldr	r2, [pc, #436]	; (80046dc <HAL_RCC_OscConfig+0x4d8>)
 8004528:	f023 0304 	bic.w	r3, r3, #4
 800452c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	689b      	ldr	r3, [r3, #8]
 8004532:	2b00      	cmp	r3, #0
 8004534:	d015      	beq.n	8004562 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004536:	f7fe fc09 	bl	8002d4c <HAL_GetTick>
 800453a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800453c:	e00a      	b.n	8004554 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800453e:	f7fe fc05 	bl	8002d4c <HAL_GetTick>
 8004542:	4602      	mov	r2, r0
 8004544:	693b      	ldr	r3, [r7, #16]
 8004546:	1ad3      	subs	r3, r2, r3
 8004548:	f241 3288 	movw	r2, #5000	; 0x1388
 800454c:	4293      	cmp	r3, r2
 800454e:	d901      	bls.n	8004554 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8004550:	2303      	movs	r3, #3
 8004552:	e0bc      	b.n	80046ce <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004554:	4b61      	ldr	r3, [pc, #388]	; (80046dc <HAL_RCC_OscConfig+0x4d8>)
 8004556:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004558:	f003 0302 	and.w	r3, r3, #2
 800455c:	2b00      	cmp	r3, #0
 800455e:	d0ee      	beq.n	800453e <HAL_RCC_OscConfig+0x33a>
 8004560:	e014      	b.n	800458c <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004562:	f7fe fbf3 	bl	8002d4c <HAL_GetTick>
 8004566:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004568:	e00a      	b.n	8004580 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800456a:	f7fe fbef 	bl	8002d4c <HAL_GetTick>
 800456e:	4602      	mov	r2, r0
 8004570:	693b      	ldr	r3, [r7, #16]
 8004572:	1ad3      	subs	r3, r2, r3
 8004574:	f241 3288 	movw	r2, #5000	; 0x1388
 8004578:	4293      	cmp	r3, r2
 800457a:	d901      	bls.n	8004580 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 800457c:	2303      	movs	r3, #3
 800457e:	e0a6      	b.n	80046ce <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004580:	4b56      	ldr	r3, [pc, #344]	; (80046dc <HAL_RCC_OscConfig+0x4d8>)
 8004582:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004584:	f003 0302 	and.w	r3, r3, #2
 8004588:	2b00      	cmp	r3, #0
 800458a:	d1ee      	bne.n	800456a <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800458c:	7dfb      	ldrb	r3, [r7, #23]
 800458e:	2b01      	cmp	r3, #1
 8004590:	d105      	bne.n	800459e <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004592:	4b52      	ldr	r3, [pc, #328]	; (80046dc <HAL_RCC_OscConfig+0x4d8>)
 8004594:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004596:	4a51      	ldr	r2, [pc, #324]	; (80046dc <HAL_RCC_OscConfig+0x4d8>)
 8004598:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800459c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	699b      	ldr	r3, [r3, #24]
 80045a2:	2b00      	cmp	r3, #0
 80045a4:	f000 8092 	beq.w	80046cc <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80045a8:	4b4c      	ldr	r3, [pc, #304]	; (80046dc <HAL_RCC_OscConfig+0x4d8>)
 80045aa:	689b      	ldr	r3, [r3, #8]
 80045ac:	f003 030c 	and.w	r3, r3, #12
 80045b0:	2b08      	cmp	r3, #8
 80045b2:	d05c      	beq.n	800466e <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	699b      	ldr	r3, [r3, #24]
 80045b8:	2b02      	cmp	r3, #2
 80045ba:	d141      	bne.n	8004640 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80045bc:	4b48      	ldr	r3, [pc, #288]	; (80046e0 <HAL_RCC_OscConfig+0x4dc>)
 80045be:	2200      	movs	r2, #0
 80045c0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80045c2:	f7fe fbc3 	bl	8002d4c <HAL_GetTick>
 80045c6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80045c8:	e008      	b.n	80045dc <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80045ca:	f7fe fbbf 	bl	8002d4c <HAL_GetTick>
 80045ce:	4602      	mov	r2, r0
 80045d0:	693b      	ldr	r3, [r7, #16]
 80045d2:	1ad3      	subs	r3, r2, r3
 80045d4:	2b02      	cmp	r3, #2
 80045d6:	d901      	bls.n	80045dc <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 80045d8:	2303      	movs	r3, #3
 80045da:	e078      	b.n	80046ce <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80045dc:	4b3f      	ldr	r3, [pc, #252]	; (80046dc <HAL_RCC_OscConfig+0x4d8>)
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80045e4:	2b00      	cmp	r3, #0
 80045e6:	d1f0      	bne.n	80045ca <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	69da      	ldr	r2, [r3, #28]
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	6a1b      	ldr	r3, [r3, #32]
 80045f0:	431a      	orrs	r2, r3
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045f6:	019b      	lsls	r3, r3, #6
 80045f8:	431a      	orrs	r2, r3
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80045fe:	085b      	lsrs	r3, r3, #1
 8004600:	3b01      	subs	r3, #1
 8004602:	041b      	lsls	r3, r3, #16
 8004604:	431a      	orrs	r2, r3
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800460a:	061b      	lsls	r3, r3, #24
 800460c:	4933      	ldr	r1, [pc, #204]	; (80046dc <HAL_RCC_OscConfig+0x4d8>)
 800460e:	4313      	orrs	r3, r2
 8004610:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004612:	4b33      	ldr	r3, [pc, #204]	; (80046e0 <HAL_RCC_OscConfig+0x4dc>)
 8004614:	2201      	movs	r2, #1
 8004616:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004618:	f7fe fb98 	bl	8002d4c <HAL_GetTick>
 800461c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800461e:	e008      	b.n	8004632 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004620:	f7fe fb94 	bl	8002d4c <HAL_GetTick>
 8004624:	4602      	mov	r2, r0
 8004626:	693b      	ldr	r3, [r7, #16]
 8004628:	1ad3      	subs	r3, r2, r3
 800462a:	2b02      	cmp	r3, #2
 800462c:	d901      	bls.n	8004632 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 800462e:	2303      	movs	r3, #3
 8004630:	e04d      	b.n	80046ce <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004632:	4b2a      	ldr	r3, [pc, #168]	; (80046dc <HAL_RCC_OscConfig+0x4d8>)
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800463a:	2b00      	cmp	r3, #0
 800463c:	d0f0      	beq.n	8004620 <HAL_RCC_OscConfig+0x41c>
 800463e:	e045      	b.n	80046cc <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004640:	4b27      	ldr	r3, [pc, #156]	; (80046e0 <HAL_RCC_OscConfig+0x4dc>)
 8004642:	2200      	movs	r2, #0
 8004644:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004646:	f7fe fb81 	bl	8002d4c <HAL_GetTick>
 800464a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800464c:	e008      	b.n	8004660 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800464e:	f7fe fb7d 	bl	8002d4c <HAL_GetTick>
 8004652:	4602      	mov	r2, r0
 8004654:	693b      	ldr	r3, [r7, #16]
 8004656:	1ad3      	subs	r3, r2, r3
 8004658:	2b02      	cmp	r3, #2
 800465a:	d901      	bls.n	8004660 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 800465c:	2303      	movs	r3, #3
 800465e:	e036      	b.n	80046ce <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004660:	4b1e      	ldr	r3, [pc, #120]	; (80046dc <HAL_RCC_OscConfig+0x4d8>)
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004668:	2b00      	cmp	r3, #0
 800466a:	d1f0      	bne.n	800464e <HAL_RCC_OscConfig+0x44a>
 800466c:	e02e      	b.n	80046cc <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	699b      	ldr	r3, [r3, #24]
 8004672:	2b01      	cmp	r3, #1
 8004674:	d101      	bne.n	800467a <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8004676:	2301      	movs	r3, #1
 8004678:	e029      	b.n	80046ce <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800467a:	4b18      	ldr	r3, [pc, #96]	; (80046dc <HAL_RCC_OscConfig+0x4d8>)
 800467c:	685b      	ldr	r3, [r3, #4]
 800467e:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004680:	68fb      	ldr	r3, [r7, #12]
 8004682:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	69db      	ldr	r3, [r3, #28]
 800468a:	429a      	cmp	r2, r3
 800468c:	d11c      	bne.n	80046c8 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800468e:	68fb      	ldr	r3, [r7, #12]
 8004690:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004698:	429a      	cmp	r2, r3
 800469a:	d115      	bne.n	80046c8 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 800469c:	68fa      	ldr	r2, [r7, #12]
 800469e:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80046a2:	4013      	ands	r3, r2
 80046a4:	687a      	ldr	r2, [r7, #4]
 80046a6:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80046a8:	4293      	cmp	r3, r2
 80046aa:	d10d      	bne.n	80046c8 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80046ac:	68fb      	ldr	r3, [r7, #12]
 80046ae:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 80046b6:	429a      	cmp	r2, r3
 80046b8:	d106      	bne.n	80046c8 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 80046ba:	68fb      	ldr	r3, [r7, #12]
 80046bc:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80046c4:	429a      	cmp	r2, r3
 80046c6:	d001      	beq.n	80046cc <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 80046c8:	2301      	movs	r3, #1
 80046ca:	e000      	b.n	80046ce <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 80046cc:	2300      	movs	r3, #0
}
 80046ce:	4618      	mov	r0, r3
 80046d0:	3718      	adds	r7, #24
 80046d2:	46bd      	mov	sp, r7
 80046d4:	bd80      	pop	{r7, pc}
 80046d6:	bf00      	nop
 80046d8:	40007000 	.word	0x40007000
 80046dc:	40023800 	.word	0x40023800
 80046e0:	42470060 	.word	0x42470060

080046e4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80046e4:	b580      	push	{r7, lr}
 80046e6:	b084      	sub	sp, #16
 80046e8:	af00      	add	r7, sp, #0
 80046ea:	6078      	str	r0, [r7, #4]
 80046ec:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	2b00      	cmp	r3, #0
 80046f2:	d101      	bne.n	80046f8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80046f4:	2301      	movs	r3, #1
 80046f6:	e0cc      	b.n	8004892 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80046f8:	4b68      	ldr	r3, [pc, #416]	; (800489c <HAL_RCC_ClockConfig+0x1b8>)
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	f003 030f 	and.w	r3, r3, #15
 8004700:	683a      	ldr	r2, [r7, #0]
 8004702:	429a      	cmp	r2, r3
 8004704:	d90c      	bls.n	8004720 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004706:	4b65      	ldr	r3, [pc, #404]	; (800489c <HAL_RCC_ClockConfig+0x1b8>)
 8004708:	683a      	ldr	r2, [r7, #0]
 800470a:	b2d2      	uxtb	r2, r2
 800470c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800470e:	4b63      	ldr	r3, [pc, #396]	; (800489c <HAL_RCC_ClockConfig+0x1b8>)
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	f003 030f 	and.w	r3, r3, #15
 8004716:	683a      	ldr	r2, [r7, #0]
 8004718:	429a      	cmp	r2, r3
 800471a:	d001      	beq.n	8004720 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800471c:	2301      	movs	r3, #1
 800471e:	e0b8      	b.n	8004892 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	f003 0302 	and.w	r3, r3, #2
 8004728:	2b00      	cmp	r3, #0
 800472a:	d020      	beq.n	800476e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	f003 0304 	and.w	r3, r3, #4
 8004734:	2b00      	cmp	r3, #0
 8004736:	d005      	beq.n	8004744 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004738:	4b59      	ldr	r3, [pc, #356]	; (80048a0 <HAL_RCC_ClockConfig+0x1bc>)
 800473a:	689b      	ldr	r3, [r3, #8]
 800473c:	4a58      	ldr	r2, [pc, #352]	; (80048a0 <HAL_RCC_ClockConfig+0x1bc>)
 800473e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004742:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	f003 0308 	and.w	r3, r3, #8
 800474c:	2b00      	cmp	r3, #0
 800474e:	d005      	beq.n	800475c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004750:	4b53      	ldr	r3, [pc, #332]	; (80048a0 <HAL_RCC_ClockConfig+0x1bc>)
 8004752:	689b      	ldr	r3, [r3, #8]
 8004754:	4a52      	ldr	r2, [pc, #328]	; (80048a0 <HAL_RCC_ClockConfig+0x1bc>)
 8004756:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800475a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800475c:	4b50      	ldr	r3, [pc, #320]	; (80048a0 <HAL_RCC_ClockConfig+0x1bc>)
 800475e:	689b      	ldr	r3, [r3, #8]
 8004760:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	689b      	ldr	r3, [r3, #8]
 8004768:	494d      	ldr	r1, [pc, #308]	; (80048a0 <HAL_RCC_ClockConfig+0x1bc>)
 800476a:	4313      	orrs	r3, r2
 800476c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	f003 0301 	and.w	r3, r3, #1
 8004776:	2b00      	cmp	r3, #0
 8004778:	d044      	beq.n	8004804 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	685b      	ldr	r3, [r3, #4]
 800477e:	2b01      	cmp	r3, #1
 8004780:	d107      	bne.n	8004792 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004782:	4b47      	ldr	r3, [pc, #284]	; (80048a0 <HAL_RCC_ClockConfig+0x1bc>)
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800478a:	2b00      	cmp	r3, #0
 800478c:	d119      	bne.n	80047c2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800478e:	2301      	movs	r3, #1
 8004790:	e07f      	b.n	8004892 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	685b      	ldr	r3, [r3, #4]
 8004796:	2b02      	cmp	r3, #2
 8004798:	d003      	beq.n	80047a2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800479e:	2b03      	cmp	r3, #3
 80047a0:	d107      	bne.n	80047b2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80047a2:	4b3f      	ldr	r3, [pc, #252]	; (80048a0 <HAL_RCC_ClockConfig+0x1bc>)
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80047aa:	2b00      	cmp	r3, #0
 80047ac:	d109      	bne.n	80047c2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80047ae:	2301      	movs	r3, #1
 80047b0:	e06f      	b.n	8004892 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80047b2:	4b3b      	ldr	r3, [pc, #236]	; (80048a0 <HAL_RCC_ClockConfig+0x1bc>)
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	f003 0302 	and.w	r3, r3, #2
 80047ba:	2b00      	cmp	r3, #0
 80047bc:	d101      	bne.n	80047c2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80047be:	2301      	movs	r3, #1
 80047c0:	e067      	b.n	8004892 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80047c2:	4b37      	ldr	r3, [pc, #220]	; (80048a0 <HAL_RCC_ClockConfig+0x1bc>)
 80047c4:	689b      	ldr	r3, [r3, #8]
 80047c6:	f023 0203 	bic.w	r2, r3, #3
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	685b      	ldr	r3, [r3, #4]
 80047ce:	4934      	ldr	r1, [pc, #208]	; (80048a0 <HAL_RCC_ClockConfig+0x1bc>)
 80047d0:	4313      	orrs	r3, r2
 80047d2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80047d4:	f7fe faba 	bl	8002d4c <HAL_GetTick>
 80047d8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80047da:	e00a      	b.n	80047f2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80047dc:	f7fe fab6 	bl	8002d4c <HAL_GetTick>
 80047e0:	4602      	mov	r2, r0
 80047e2:	68fb      	ldr	r3, [r7, #12]
 80047e4:	1ad3      	subs	r3, r2, r3
 80047e6:	f241 3288 	movw	r2, #5000	; 0x1388
 80047ea:	4293      	cmp	r3, r2
 80047ec:	d901      	bls.n	80047f2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80047ee:	2303      	movs	r3, #3
 80047f0:	e04f      	b.n	8004892 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80047f2:	4b2b      	ldr	r3, [pc, #172]	; (80048a0 <HAL_RCC_ClockConfig+0x1bc>)
 80047f4:	689b      	ldr	r3, [r3, #8]
 80047f6:	f003 020c 	and.w	r2, r3, #12
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	685b      	ldr	r3, [r3, #4]
 80047fe:	009b      	lsls	r3, r3, #2
 8004800:	429a      	cmp	r2, r3
 8004802:	d1eb      	bne.n	80047dc <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004804:	4b25      	ldr	r3, [pc, #148]	; (800489c <HAL_RCC_ClockConfig+0x1b8>)
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	f003 030f 	and.w	r3, r3, #15
 800480c:	683a      	ldr	r2, [r7, #0]
 800480e:	429a      	cmp	r2, r3
 8004810:	d20c      	bcs.n	800482c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004812:	4b22      	ldr	r3, [pc, #136]	; (800489c <HAL_RCC_ClockConfig+0x1b8>)
 8004814:	683a      	ldr	r2, [r7, #0]
 8004816:	b2d2      	uxtb	r2, r2
 8004818:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800481a:	4b20      	ldr	r3, [pc, #128]	; (800489c <HAL_RCC_ClockConfig+0x1b8>)
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	f003 030f 	and.w	r3, r3, #15
 8004822:	683a      	ldr	r2, [r7, #0]
 8004824:	429a      	cmp	r2, r3
 8004826:	d001      	beq.n	800482c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004828:	2301      	movs	r3, #1
 800482a:	e032      	b.n	8004892 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	f003 0304 	and.w	r3, r3, #4
 8004834:	2b00      	cmp	r3, #0
 8004836:	d008      	beq.n	800484a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004838:	4b19      	ldr	r3, [pc, #100]	; (80048a0 <HAL_RCC_ClockConfig+0x1bc>)
 800483a:	689b      	ldr	r3, [r3, #8]
 800483c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	68db      	ldr	r3, [r3, #12]
 8004844:	4916      	ldr	r1, [pc, #88]	; (80048a0 <HAL_RCC_ClockConfig+0x1bc>)
 8004846:	4313      	orrs	r3, r2
 8004848:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	f003 0308 	and.w	r3, r3, #8
 8004852:	2b00      	cmp	r3, #0
 8004854:	d009      	beq.n	800486a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004856:	4b12      	ldr	r3, [pc, #72]	; (80048a0 <HAL_RCC_ClockConfig+0x1bc>)
 8004858:	689b      	ldr	r3, [r3, #8]
 800485a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	691b      	ldr	r3, [r3, #16]
 8004862:	00db      	lsls	r3, r3, #3
 8004864:	490e      	ldr	r1, [pc, #56]	; (80048a0 <HAL_RCC_ClockConfig+0x1bc>)
 8004866:	4313      	orrs	r3, r2
 8004868:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800486a:	f000 f821 	bl	80048b0 <HAL_RCC_GetSysClockFreq>
 800486e:	4601      	mov	r1, r0
 8004870:	4b0b      	ldr	r3, [pc, #44]	; (80048a0 <HAL_RCC_ClockConfig+0x1bc>)
 8004872:	689b      	ldr	r3, [r3, #8]
 8004874:	091b      	lsrs	r3, r3, #4
 8004876:	f003 030f 	and.w	r3, r3, #15
 800487a:	4a0a      	ldr	r2, [pc, #40]	; (80048a4 <HAL_RCC_ClockConfig+0x1c0>)
 800487c:	5cd3      	ldrb	r3, [r2, r3]
 800487e:	fa21 f303 	lsr.w	r3, r1, r3
 8004882:	4a09      	ldr	r2, [pc, #36]	; (80048a8 <HAL_RCC_ClockConfig+0x1c4>)
 8004884:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004886:	4b09      	ldr	r3, [pc, #36]	; (80048ac <HAL_RCC_ClockConfig+0x1c8>)
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	4618      	mov	r0, r3
 800488c:	f7fe fa1a 	bl	8002cc4 <HAL_InitTick>

  return HAL_OK;
 8004890:	2300      	movs	r3, #0
}
 8004892:	4618      	mov	r0, r3
 8004894:	3710      	adds	r7, #16
 8004896:	46bd      	mov	sp, r7
 8004898:	bd80      	pop	{r7, pc}
 800489a:	bf00      	nop
 800489c:	40023c00 	.word	0x40023c00
 80048a0:	40023800 	.word	0x40023800
 80048a4:	08009c4c 	.word	0x08009c4c
 80048a8:	20000008 	.word	0x20000008
 80048ac:	2000000c 	.word	0x2000000c

080048b0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80048b0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80048b2:	b085      	sub	sp, #20
 80048b4:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80048b6:	2300      	movs	r3, #0
 80048b8:	607b      	str	r3, [r7, #4]
 80048ba:	2300      	movs	r3, #0
 80048bc:	60fb      	str	r3, [r7, #12]
 80048be:	2300      	movs	r3, #0
 80048c0:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 80048c2:	2300      	movs	r3, #0
 80048c4:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80048c6:	4b63      	ldr	r3, [pc, #396]	; (8004a54 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80048c8:	689b      	ldr	r3, [r3, #8]
 80048ca:	f003 030c 	and.w	r3, r3, #12
 80048ce:	2b04      	cmp	r3, #4
 80048d0:	d007      	beq.n	80048e2 <HAL_RCC_GetSysClockFreq+0x32>
 80048d2:	2b08      	cmp	r3, #8
 80048d4:	d008      	beq.n	80048e8 <HAL_RCC_GetSysClockFreq+0x38>
 80048d6:	2b00      	cmp	r3, #0
 80048d8:	f040 80b4 	bne.w	8004a44 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80048dc:	4b5e      	ldr	r3, [pc, #376]	; (8004a58 <HAL_RCC_GetSysClockFreq+0x1a8>)
 80048de:	60bb      	str	r3, [r7, #8]
       break;
 80048e0:	e0b3      	b.n	8004a4a <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80048e2:	4b5e      	ldr	r3, [pc, #376]	; (8004a5c <HAL_RCC_GetSysClockFreq+0x1ac>)
 80048e4:	60bb      	str	r3, [r7, #8]
      break;
 80048e6:	e0b0      	b.n	8004a4a <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80048e8:	4b5a      	ldr	r3, [pc, #360]	; (8004a54 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80048ea:	685b      	ldr	r3, [r3, #4]
 80048ec:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80048f0:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80048f2:	4b58      	ldr	r3, [pc, #352]	; (8004a54 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80048f4:	685b      	ldr	r3, [r3, #4]
 80048f6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80048fa:	2b00      	cmp	r3, #0
 80048fc:	d04a      	beq.n	8004994 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80048fe:	4b55      	ldr	r3, [pc, #340]	; (8004a54 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8004900:	685b      	ldr	r3, [r3, #4]
 8004902:	099b      	lsrs	r3, r3, #6
 8004904:	f04f 0400 	mov.w	r4, #0
 8004908:	f240 11ff 	movw	r1, #511	; 0x1ff
 800490c:	f04f 0200 	mov.w	r2, #0
 8004910:	ea03 0501 	and.w	r5, r3, r1
 8004914:	ea04 0602 	and.w	r6, r4, r2
 8004918:	4629      	mov	r1, r5
 800491a:	4632      	mov	r2, r6
 800491c:	f04f 0300 	mov.w	r3, #0
 8004920:	f04f 0400 	mov.w	r4, #0
 8004924:	0154      	lsls	r4, r2, #5
 8004926:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800492a:	014b      	lsls	r3, r1, #5
 800492c:	4619      	mov	r1, r3
 800492e:	4622      	mov	r2, r4
 8004930:	1b49      	subs	r1, r1, r5
 8004932:	eb62 0206 	sbc.w	r2, r2, r6
 8004936:	f04f 0300 	mov.w	r3, #0
 800493a:	f04f 0400 	mov.w	r4, #0
 800493e:	0194      	lsls	r4, r2, #6
 8004940:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8004944:	018b      	lsls	r3, r1, #6
 8004946:	1a5b      	subs	r3, r3, r1
 8004948:	eb64 0402 	sbc.w	r4, r4, r2
 800494c:	f04f 0100 	mov.w	r1, #0
 8004950:	f04f 0200 	mov.w	r2, #0
 8004954:	00e2      	lsls	r2, r4, #3
 8004956:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800495a:	00d9      	lsls	r1, r3, #3
 800495c:	460b      	mov	r3, r1
 800495e:	4614      	mov	r4, r2
 8004960:	195b      	adds	r3, r3, r5
 8004962:	eb44 0406 	adc.w	r4, r4, r6
 8004966:	f04f 0100 	mov.w	r1, #0
 800496a:	f04f 0200 	mov.w	r2, #0
 800496e:	0262      	lsls	r2, r4, #9
 8004970:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8004974:	0259      	lsls	r1, r3, #9
 8004976:	460b      	mov	r3, r1
 8004978:	4614      	mov	r4, r2
 800497a:	4618      	mov	r0, r3
 800497c:	4621      	mov	r1, r4
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	f04f 0400 	mov.w	r4, #0
 8004984:	461a      	mov	r2, r3
 8004986:	4623      	mov	r3, r4
 8004988:	f7fc f90e 	bl	8000ba8 <__aeabi_uldivmod>
 800498c:	4603      	mov	r3, r0
 800498e:	460c      	mov	r4, r1
 8004990:	60fb      	str	r3, [r7, #12]
 8004992:	e049      	b.n	8004a28 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004994:	4b2f      	ldr	r3, [pc, #188]	; (8004a54 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8004996:	685b      	ldr	r3, [r3, #4]
 8004998:	099b      	lsrs	r3, r3, #6
 800499a:	f04f 0400 	mov.w	r4, #0
 800499e:	f240 11ff 	movw	r1, #511	; 0x1ff
 80049a2:	f04f 0200 	mov.w	r2, #0
 80049a6:	ea03 0501 	and.w	r5, r3, r1
 80049aa:	ea04 0602 	and.w	r6, r4, r2
 80049ae:	4629      	mov	r1, r5
 80049b0:	4632      	mov	r2, r6
 80049b2:	f04f 0300 	mov.w	r3, #0
 80049b6:	f04f 0400 	mov.w	r4, #0
 80049ba:	0154      	lsls	r4, r2, #5
 80049bc:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80049c0:	014b      	lsls	r3, r1, #5
 80049c2:	4619      	mov	r1, r3
 80049c4:	4622      	mov	r2, r4
 80049c6:	1b49      	subs	r1, r1, r5
 80049c8:	eb62 0206 	sbc.w	r2, r2, r6
 80049cc:	f04f 0300 	mov.w	r3, #0
 80049d0:	f04f 0400 	mov.w	r4, #0
 80049d4:	0194      	lsls	r4, r2, #6
 80049d6:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80049da:	018b      	lsls	r3, r1, #6
 80049dc:	1a5b      	subs	r3, r3, r1
 80049de:	eb64 0402 	sbc.w	r4, r4, r2
 80049e2:	f04f 0100 	mov.w	r1, #0
 80049e6:	f04f 0200 	mov.w	r2, #0
 80049ea:	00e2      	lsls	r2, r4, #3
 80049ec:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80049f0:	00d9      	lsls	r1, r3, #3
 80049f2:	460b      	mov	r3, r1
 80049f4:	4614      	mov	r4, r2
 80049f6:	195b      	adds	r3, r3, r5
 80049f8:	eb44 0406 	adc.w	r4, r4, r6
 80049fc:	f04f 0100 	mov.w	r1, #0
 8004a00:	f04f 0200 	mov.w	r2, #0
 8004a04:	02a2      	lsls	r2, r4, #10
 8004a06:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8004a0a:	0299      	lsls	r1, r3, #10
 8004a0c:	460b      	mov	r3, r1
 8004a0e:	4614      	mov	r4, r2
 8004a10:	4618      	mov	r0, r3
 8004a12:	4621      	mov	r1, r4
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	f04f 0400 	mov.w	r4, #0
 8004a1a:	461a      	mov	r2, r3
 8004a1c:	4623      	mov	r3, r4
 8004a1e:	f7fc f8c3 	bl	8000ba8 <__aeabi_uldivmod>
 8004a22:	4603      	mov	r3, r0
 8004a24:	460c      	mov	r4, r1
 8004a26:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004a28:	4b0a      	ldr	r3, [pc, #40]	; (8004a54 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8004a2a:	685b      	ldr	r3, [r3, #4]
 8004a2c:	0c1b      	lsrs	r3, r3, #16
 8004a2e:	f003 0303 	and.w	r3, r3, #3
 8004a32:	3301      	adds	r3, #1
 8004a34:	005b      	lsls	r3, r3, #1
 8004a36:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8004a38:	68fa      	ldr	r2, [r7, #12]
 8004a3a:	683b      	ldr	r3, [r7, #0]
 8004a3c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004a40:	60bb      	str	r3, [r7, #8]
      break;
 8004a42:	e002      	b.n	8004a4a <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004a44:	4b04      	ldr	r3, [pc, #16]	; (8004a58 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8004a46:	60bb      	str	r3, [r7, #8]
      break;
 8004a48:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004a4a:	68bb      	ldr	r3, [r7, #8]
}
 8004a4c:	4618      	mov	r0, r3
 8004a4e:	3714      	adds	r7, #20
 8004a50:	46bd      	mov	sp, r7
 8004a52:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004a54:	40023800 	.word	0x40023800
 8004a58:	00f42400 	.word	0x00f42400
 8004a5c:	007a1200 	.word	0x007a1200

08004a60 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004a60:	b480      	push	{r7}
 8004a62:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004a64:	4b03      	ldr	r3, [pc, #12]	; (8004a74 <HAL_RCC_GetHCLKFreq+0x14>)
 8004a66:	681b      	ldr	r3, [r3, #0]
}
 8004a68:	4618      	mov	r0, r3
 8004a6a:	46bd      	mov	sp, r7
 8004a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a70:	4770      	bx	lr
 8004a72:	bf00      	nop
 8004a74:	20000008 	.word	0x20000008

08004a78 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004a78:	b580      	push	{r7, lr}
 8004a7a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004a7c:	f7ff fff0 	bl	8004a60 <HAL_RCC_GetHCLKFreq>
 8004a80:	4601      	mov	r1, r0
 8004a82:	4b05      	ldr	r3, [pc, #20]	; (8004a98 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004a84:	689b      	ldr	r3, [r3, #8]
 8004a86:	0a9b      	lsrs	r3, r3, #10
 8004a88:	f003 0307 	and.w	r3, r3, #7
 8004a8c:	4a03      	ldr	r2, [pc, #12]	; (8004a9c <HAL_RCC_GetPCLK1Freq+0x24>)
 8004a8e:	5cd3      	ldrb	r3, [r2, r3]
 8004a90:	fa21 f303 	lsr.w	r3, r1, r3
}
 8004a94:	4618      	mov	r0, r3
 8004a96:	bd80      	pop	{r7, pc}
 8004a98:	40023800 	.word	0x40023800
 8004a9c:	08009c5c 	.word	0x08009c5c

08004aa0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004aa0:	b580      	push	{r7, lr}
 8004aa2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8004aa4:	f7ff ffdc 	bl	8004a60 <HAL_RCC_GetHCLKFreq>
 8004aa8:	4601      	mov	r1, r0
 8004aaa:	4b05      	ldr	r3, [pc, #20]	; (8004ac0 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004aac:	689b      	ldr	r3, [r3, #8]
 8004aae:	0b5b      	lsrs	r3, r3, #13
 8004ab0:	f003 0307 	and.w	r3, r3, #7
 8004ab4:	4a03      	ldr	r2, [pc, #12]	; (8004ac4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004ab6:	5cd3      	ldrb	r3, [r2, r3]
 8004ab8:	fa21 f303 	lsr.w	r3, r1, r3
}
 8004abc:	4618      	mov	r0, r3
 8004abe:	bd80      	pop	{r7, pc}
 8004ac0:	40023800 	.word	0x40023800
 8004ac4:	08009c5c 	.word	0x08009c5c

08004ac8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004ac8:	b580      	push	{r7, lr}
 8004aca:	b082      	sub	sp, #8
 8004acc:	af00      	add	r7, sp, #0
 8004ace:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	2b00      	cmp	r3, #0
 8004ad4:	d101      	bne.n	8004ada <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004ad6:	2301      	movs	r3, #1
 8004ad8:	e056      	b.n	8004b88 <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	2200      	movs	r2, #0
 8004ade:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004ae6:	b2db      	uxtb	r3, r3
 8004ae8:	2b00      	cmp	r3, #0
 8004aea:	d106      	bne.n	8004afa <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	2200      	movs	r2, #0
 8004af0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004af4:	6878      	ldr	r0, [r7, #4]
 8004af6:	f7fd fd09 	bl	800250c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	2202      	movs	r2, #2
 8004afe:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	681a      	ldr	r2, [r3, #0]
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004b10:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	685a      	ldr	r2, [r3, #4]
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	689b      	ldr	r3, [r3, #8]
 8004b1a:	431a      	orrs	r2, r3
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	68db      	ldr	r3, [r3, #12]
 8004b20:	431a      	orrs	r2, r3
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	691b      	ldr	r3, [r3, #16]
 8004b26:	431a      	orrs	r2, r3
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	695b      	ldr	r3, [r3, #20]
 8004b2c:	431a      	orrs	r2, r3
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	699b      	ldr	r3, [r3, #24]
 8004b32:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004b36:	431a      	orrs	r2, r3
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	69db      	ldr	r3, [r3, #28]
 8004b3c:	431a      	orrs	r2, r3
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	6a1b      	ldr	r3, [r3, #32]
 8004b42:	ea42 0103 	orr.w	r1, r2, r3
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	430a      	orrs	r2, r1
 8004b50:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	699b      	ldr	r3, [r3, #24]
 8004b56:	0c1b      	lsrs	r3, r3, #16
 8004b58:	f003 0104 	and.w	r1, r3, #4
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	430a      	orrs	r2, r1
 8004b66:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	69da      	ldr	r2, [r3, #28]
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004b76:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	2200      	movs	r2, #0
 8004b7c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	2201      	movs	r2, #1
 8004b82:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8004b86:	2300      	movs	r3, #0
}
 8004b88:	4618      	mov	r0, r3
 8004b8a:	3708      	adds	r7, #8
 8004b8c:	46bd      	mov	sp, r7
 8004b8e:	bd80      	pop	{r7, pc}

08004b90 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004b90:	b580      	push	{r7, lr}
 8004b92:	b082      	sub	sp, #8
 8004b94:	af00      	add	r7, sp, #0
 8004b96:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	2b00      	cmp	r3, #0
 8004b9c:	d101      	bne.n	8004ba2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004b9e:	2301      	movs	r3, #1
 8004ba0:	e01d      	b.n	8004bde <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004ba8:	b2db      	uxtb	r3, r3
 8004baa:	2b00      	cmp	r3, #0
 8004bac:	d106      	bne.n	8004bbc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	2200      	movs	r2, #0
 8004bb2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004bb6:	6878      	ldr	r0, [r7, #4]
 8004bb8:	f7fd fd10 	bl	80025dc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	2202      	movs	r2, #2
 8004bc0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	681a      	ldr	r2, [r3, #0]
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	3304      	adds	r3, #4
 8004bcc:	4619      	mov	r1, r3
 8004bce:	4610      	mov	r0, r2
 8004bd0:	f000 fbd6 	bl	8005380 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	2201      	movs	r2, #1
 8004bd8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004bdc:	2300      	movs	r3, #0
}
 8004bde:	4618      	mov	r0, r3
 8004be0:	3708      	adds	r7, #8
 8004be2:	46bd      	mov	sp, r7
 8004be4:	bd80      	pop	{r7, pc}

08004be6 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004be6:	b480      	push	{r7}
 8004be8:	b085      	sub	sp, #20
 8004bea:	af00      	add	r7, sp, #0
 8004bec:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	68da      	ldr	r2, [r3, #12]
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	f042 0201 	orr.w	r2, r2, #1
 8004bfc:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	689b      	ldr	r3, [r3, #8]
 8004c04:	f003 0307 	and.w	r3, r3, #7
 8004c08:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004c0a:	68fb      	ldr	r3, [r7, #12]
 8004c0c:	2b06      	cmp	r3, #6
 8004c0e:	d007      	beq.n	8004c20 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	681a      	ldr	r2, [r3, #0]
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	f042 0201 	orr.w	r2, r2, #1
 8004c1e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004c20:	2300      	movs	r3, #0
}
 8004c22:	4618      	mov	r0, r3
 8004c24:	3714      	adds	r7, #20
 8004c26:	46bd      	mov	sp, r7
 8004c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c2c:	4770      	bx	lr

08004c2e <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004c2e:	b580      	push	{r7, lr}
 8004c30:	b082      	sub	sp, #8
 8004c32:	af00      	add	r7, sp, #0
 8004c34:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	2b00      	cmp	r3, #0
 8004c3a:	d101      	bne.n	8004c40 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004c3c:	2301      	movs	r3, #1
 8004c3e:	e01d      	b.n	8004c7c <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004c46:	b2db      	uxtb	r3, r3
 8004c48:	2b00      	cmp	r3, #0
 8004c4a:	d106      	bne.n	8004c5a <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	2200      	movs	r2, #0
 8004c50:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004c54:	6878      	ldr	r0, [r7, #4]
 8004c56:	f7fd fdc5 	bl	80027e4 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	2202      	movs	r2, #2
 8004c5e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	681a      	ldr	r2, [r3, #0]
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	3304      	adds	r3, #4
 8004c6a:	4619      	mov	r1, r3
 8004c6c:	4610      	mov	r0, r2
 8004c6e:	f000 fb87 	bl	8005380 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	2201      	movs	r2, #1
 8004c76:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004c7a:	2300      	movs	r3, #0
}
 8004c7c:	4618      	mov	r0, r3
 8004c7e:	3708      	adds	r7, #8
 8004c80:	46bd      	mov	sp, r7
 8004c82:	bd80      	pop	{r7, pc}

08004c84 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004c84:	b580      	push	{r7, lr}
 8004c86:	b084      	sub	sp, #16
 8004c88:	af00      	add	r7, sp, #0
 8004c8a:	6078      	str	r0, [r7, #4]
 8004c8c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	2201      	movs	r2, #1
 8004c94:	6839      	ldr	r1, [r7, #0]
 8004c96:	4618      	mov	r0, r3
 8004c98:	f000 fe5c 	bl	8005954 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	4a15      	ldr	r2, [pc, #84]	; (8004cf8 <HAL_TIM_PWM_Start+0x74>)
 8004ca2:	4293      	cmp	r3, r2
 8004ca4:	d004      	beq.n	8004cb0 <HAL_TIM_PWM_Start+0x2c>
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	4a14      	ldr	r2, [pc, #80]	; (8004cfc <HAL_TIM_PWM_Start+0x78>)
 8004cac:	4293      	cmp	r3, r2
 8004cae:	d101      	bne.n	8004cb4 <HAL_TIM_PWM_Start+0x30>
 8004cb0:	2301      	movs	r3, #1
 8004cb2:	e000      	b.n	8004cb6 <HAL_TIM_PWM_Start+0x32>
 8004cb4:	2300      	movs	r3, #0
 8004cb6:	2b00      	cmp	r3, #0
 8004cb8:	d007      	beq.n	8004cca <HAL_TIM_PWM_Start+0x46>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004cc8:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	689b      	ldr	r3, [r3, #8]
 8004cd0:	f003 0307 	and.w	r3, r3, #7
 8004cd4:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004cd6:	68fb      	ldr	r3, [r7, #12]
 8004cd8:	2b06      	cmp	r3, #6
 8004cda:	d007      	beq.n	8004cec <HAL_TIM_PWM_Start+0x68>
  {
    __HAL_TIM_ENABLE(htim);
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	681a      	ldr	r2, [r3, #0]
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	f042 0201 	orr.w	r2, r2, #1
 8004cea:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004cec:	2300      	movs	r3, #0
}
 8004cee:	4618      	mov	r0, r3
 8004cf0:	3710      	adds	r7, #16
 8004cf2:	46bd      	mov	sp, r7
 8004cf4:	bd80      	pop	{r7, pc}
 8004cf6:	bf00      	nop
 8004cf8:	40010000 	.word	0x40010000
 8004cfc:	40010400 	.word	0x40010400

08004d00 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8004d00:	b580      	push	{r7, lr}
 8004d02:	b086      	sub	sp, #24
 8004d04:	af00      	add	r7, sp, #0
 8004d06:	6078      	str	r0, [r7, #4]
 8004d08:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	2b00      	cmp	r3, #0
 8004d0e:	d101      	bne.n	8004d14 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8004d10:	2301      	movs	r3, #1
 8004d12:	e083      	b.n	8004e1c <HAL_TIM_Encoder_Init+0x11c>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004d1a:	b2db      	uxtb	r3, r3
 8004d1c:	2b00      	cmp	r3, #0
 8004d1e:	d106      	bne.n	8004d2e <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	2200      	movs	r2, #0
 8004d24:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8004d28:	6878      	ldr	r0, [r7, #4]
 8004d2a:	f7fd fcdd 	bl	80026e8 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	2202      	movs	r2, #2
 8004d32:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	689b      	ldr	r3, [r3, #8]
 8004d3c:	687a      	ldr	r2, [r7, #4]
 8004d3e:	6812      	ldr	r2, [r2, #0]
 8004d40:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004d44:	f023 0307 	bic.w	r3, r3, #7
 8004d48:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	681a      	ldr	r2, [r3, #0]
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	3304      	adds	r3, #4
 8004d52:	4619      	mov	r1, r3
 8004d54:	4610      	mov	r0, r2
 8004d56:	f000 fb13 	bl	8005380 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	689b      	ldr	r3, [r3, #8]
 8004d60:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	699b      	ldr	r3, [r3, #24]
 8004d68:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	6a1b      	ldr	r3, [r3, #32]
 8004d70:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8004d72:	683b      	ldr	r3, [r7, #0]
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	697a      	ldr	r2, [r7, #20]
 8004d78:	4313      	orrs	r3, r2
 8004d7a:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8004d7c:	693b      	ldr	r3, [r7, #16]
 8004d7e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004d82:	f023 0303 	bic.w	r3, r3, #3
 8004d86:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8004d88:	683b      	ldr	r3, [r7, #0]
 8004d8a:	689a      	ldr	r2, [r3, #8]
 8004d8c:	683b      	ldr	r3, [r7, #0]
 8004d8e:	699b      	ldr	r3, [r3, #24]
 8004d90:	021b      	lsls	r3, r3, #8
 8004d92:	4313      	orrs	r3, r2
 8004d94:	693a      	ldr	r2, [r7, #16]
 8004d96:	4313      	orrs	r3, r2
 8004d98:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8004d9a:	693b      	ldr	r3, [r7, #16]
 8004d9c:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8004da0:	f023 030c 	bic.w	r3, r3, #12
 8004da4:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8004da6:	693b      	ldr	r3, [r7, #16]
 8004da8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004dac:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004db0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8004db2:	683b      	ldr	r3, [r7, #0]
 8004db4:	68da      	ldr	r2, [r3, #12]
 8004db6:	683b      	ldr	r3, [r7, #0]
 8004db8:	69db      	ldr	r3, [r3, #28]
 8004dba:	021b      	lsls	r3, r3, #8
 8004dbc:	4313      	orrs	r3, r2
 8004dbe:	693a      	ldr	r2, [r7, #16]
 8004dc0:	4313      	orrs	r3, r2
 8004dc2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8004dc4:	683b      	ldr	r3, [r7, #0]
 8004dc6:	691b      	ldr	r3, [r3, #16]
 8004dc8:	011a      	lsls	r2, r3, #4
 8004dca:	683b      	ldr	r3, [r7, #0]
 8004dcc:	6a1b      	ldr	r3, [r3, #32]
 8004dce:	031b      	lsls	r3, r3, #12
 8004dd0:	4313      	orrs	r3, r2
 8004dd2:	693a      	ldr	r2, [r7, #16]
 8004dd4:	4313      	orrs	r3, r2
 8004dd6:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8004dd8:	68fb      	ldr	r3, [r7, #12]
 8004dda:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8004dde:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8004de0:	68fb      	ldr	r3, [r7, #12]
 8004de2:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8004de6:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8004de8:	683b      	ldr	r3, [r7, #0]
 8004dea:	685a      	ldr	r2, [r3, #4]
 8004dec:	683b      	ldr	r3, [r7, #0]
 8004dee:	695b      	ldr	r3, [r3, #20]
 8004df0:	011b      	lsls	r3, r3, #4
 8004df2:	4313      	orrs	r3, r2
 8004df4:	68fa      	ldr	r2, [r7, #12]
 8004df6:	4313      	orrs	r3, r2
 8004df8:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	697a      	ldr	r2, [r7, #20]
 8004e00:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	693a      	ldr	r2, [r7, #16]
 8004e08:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	68fa      	ldr	r2, [r7, #12]
 8004e10:	621a      	str	r2, [r3, #32]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	2201      	movs	r2, #1
 8004e16:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004e1a:	2300      	movs	r3, #0
}
 8004e1c:	4618      	mov	r0, r3
 8004e1e:	3718      	adds	r7, #24
 8004e20:	46bd      	mov	sp, r7
 8004e22:	bd80      	pop	{r7, pc}

08004e24 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004e24:	b580      	push	{r7, lr}
 8004e26:	b082      	sub	sp, #8
 8004e28:	af00      	add	r7, sp, #0
 8004e2a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	691b      	ldr	r3, [r3, #16]
 8004e32:	f003 0302 	and.w	r3, r3, #2
 8004e36:	2b02      	cmp	r3, #2
 8004e38:	d122      	bne.n	8004e80 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	68db      	ldr	r3, [r3, #12]
 8004e40:	f003 0302 	and.w	r3, r3, #2
 8004e44:	2b02      	cmp	r3, #2
 8004e46:	d11b      	bne.n	8004e80 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	f06f 0202 	mvn.w	r2, #2
 8004e50:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	2201      	movs	r2, #1
 8004e56:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	699b      	ldr	r3, [r3, #24]
 8004e5e:	f003 0303 	and.w	r3, r3, #3
 8004e62:	2b00      	cmp	r3, #0
 8004e64:	d003      	beq.n	8004e6e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004e66:	6878      	ldr	r0, [r7, #4]
 8004e68:	f000 fa6b 	bl	8005342 <HAL_TIM_IC_CaptureCallback>
 8004e6c:	e005      	b.n	8004e7a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004e6e:	6878      	ldr	r0, [r7, #4]
 8004e70:	f000 fa5d 	bl	800532e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004e74:	6878      	ldr	r0, [r7, #4]
 8004e76:	f000 fa6e 	bl	8005356 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	2200      	movs	r2, #0
 8004e7e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	691b      	ldr	r3, [r3, #16]
 8004e86:	f003 0304 	and.w	r3, r3, #4
 8004e8a:	2b04      	cmp	r3, #4
 8004e8c:	d122      	bne.n	8004ed4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	68db      	ldr	r3, [r3, #12]
 8004e94:	f003 0304 	and.w	r3, r3, #4
 8004e98:	2b04      	cmp	r3, #4
 8004e9a:	d11b      	bne.n	8004ed4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	f06f 0204 	mvn.w	r2, #4
 8004ea4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	2202      	movs	r2, #2
 8004eaa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	699b      	ldr	r3, [r3, #24]
 8004eb2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004eb6:	2b00      	cmp	r3, #0
 8004eb8:	d003      	beq.n	8004ec2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004eba:	6878      	ldr	r0, [r7, #4]
 8004ebc:	f000 fa41 	bl	8005342 <HAL_TIM_IC_CaptureCallback>
 8004ec0:	e005      	b.n	8004ece <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004ec2:	6878      	ldr	r0, [r7, #4]
 8004ec4:	f000 fa33 	bl	800532e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004ec8:	6878      	ldr	r0, [r7, #4]
 8004eca:	f000 fa44 	bl	8005356 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	2200      	movs	r2, #0
 8004ed2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	691b      	ldr	r3, [r3, #16]
 8004eda:	f003 0308 	and.w	r3, r3, #8
 8004ede:	2b08      	cmp	r3, #8
 8004ee0:	d122      	bne.n	8004f28 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	68db      	ldr	r3, [r3, #12]
 8004ee8:	f003 0308 	and.w	r3, r3, #8
 8004eec:	2b08      	cmp	r3, #8
 8004eee:	d11b      	bne.n	8004f28 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	f06f 0208 	mvn.w	r2, #8
 8004ef8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	2204      	movs	r2, #4
 8004efe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	69db      	ldr	r3, [r3, #28]
 8004f06:	f003 0303 	and.w	r3, r3, #3
 8004f0a:	2b00      	cmp	r3, #0
 8004f0c:	d003      	beq.n	8004f16 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004f0e:	6878      	ldr	r0, [r7, #4]
 8004f10:	f000 fa17 	bl	8005342 <HAL_TIM_IC_CaptureCallback>
 8004f14:	e005      	b.n	8004f22 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004f16:	6878      	ldr	r0, [r7, #4]
 8004f18:	f000 fa09 	bl	800532e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004f1c:	6878      	ldr	r0, [r7, #4]
 8004f1e:	f000 fa1a 	bl	8005356 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	2200      	movs	r2, #0
 8004f26:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	691b      	ldr	r3, [r3, #16]
 8004f2e:	f003 0310 	and.w	r3, r3, #16
 8004f32:	2b10      	cmp	r3, #16
 8004f34:	d122      	bne.n	8004f7c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	68db      	ldr	r3, [r3, #12]
 8004f3c:	f003 0310 	and.w	r3, r3, #16
 8004f40:	2b10      	cmp	r3, #16
 8004f42:	d11b      	bne.n	8004f7c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	f06f 0210 	mvn.w	r2, #16
 8004f4c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	2208      	movs	r2, #8
 8004f52:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	69db      	ldr	r3, [r3, #28]
 8004f5a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004f5e:	2b00      	cmp	r3, #0
 8004f60:	d003      	beq.n	8004f6a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004f62:	6878      	ldr	r0, [r7, #4]
 8004f64:	f000 f9ed 	bl	8005342 <HAL_TIM_IC_CaptureCallback>
 8004f68:	e005      	b.n	8004f76 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004f6a:	6878      	ldr	r0, [r7, #4]
 8004f6c:	f000 f9df 	bl	800532e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004f70:	6878      	ldr	r0, [r7, #4]
 8004f72:	f000 f9f0 	bl	8005356 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	2200      	movs	r2, #0
 8004f7a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	691b      	ldr	r3, [r3, #16]
 8004f82:	f003 0301 	and.w	r3, r3, #1
 8004f86:	2b01      	cmp	r3, #1
 8004f88:	d10e      	bne.n	8004fa8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	68db      	ldr	r3, [r3, #12]
 8004f90:	f003 0301 	and.w	r3, r3, #1
 8004f94:	2b01      	cmp	r3, #1
 8004f96:	d107      	bne.n	8004fa8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	f06f 0201 	mvn.w	r2, #1
 8004fa0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004fa2:	6878      	ldr	r0, [r7, #4]
 8004fa4:	f7fc f85a 	bl	800105c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	691b      	ldr	r3, [r3, #16]
 8004fae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004fb2:	2b80      	cmp	r3, #128	; 0x80
 8004fb4:	d10e      	bne.n	8004fd4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	68db      	ldr	r3, [r3, #12]
 8004fbc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004fc0:	2b80      	cmp	r3, #128	; 0x80
 8004fc2:	d107      	bne.n	8004fd4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004fcc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004fce:	6878      	ldr	r0, [r7, #4]
 8004fd0:	f000 fd6c 	bl	8005aac <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	691b      	ldr	r3, [r3, #16]
 8004fda:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004fde:	2b40      	cmp	r3, #64	; 0x40
 8004fe0:	d10e      	bne.n	8005000 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	68db      	ldr	r3, [r3, #12]
 8004fe8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004fec:	2b40      	cmp	r3, #64	; 0x40
 8004fee:	d107      	bne.n	8005000 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004ff8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004ffa:	6878      	ldr	r0, [r7, #4]
 8004ffc:	f000 f9b5 	bl	800536a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	691b      	ldr	r3, [r3, #16]
 8005006:	f003 0320 	and.w	r3, r3, #32
 800500a:	2b20      	cmp	r3, #32
 800500c:	d10e      	bne.n	800502c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	68db      	ldr	r3, [r3, #12]
 8005014:	f003 0320 	and.w	r3, r3, #32
 8005018:	2b20      	cmp	r3, #32
 800501a:	d107      	bne.n	800502c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	f06f 0220 	mvn.w	r2, #32
 8005024:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005026:	6878      	ldr	r0, [r7, #4]
 8005028:	f000 fd36 	bl	8005a98 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800502c:	bf00      	nop
 800502e:	3708      	adds	r7, #8
 8005030:	46bd      	mov	sp, r7
 8005032:	bd80      	pop	{r7, pc}

08005034 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005034:	b580      	push	{r7, lr}
 8005036:	b084      	sub	sp, #16
 8005038:	af00      	add	r7, sp, #0
 800503a:	60f8      	str	r0, [r7, #12]
 800503c:	60b9      	str	r1, [r7, #8]
 800503e:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005040:	68fb      	ldr	r3, [r7, #12]
 8005042:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005046:	2b01      	cmp	r3, #1
 8005048:	d101      	bne.n	800504e <HAL_TIM_PWM_ConfigChannel+0x1a>
 800504a:	2302      	movs	r3, #2
 800504c:	e0b4      	b.n	80051b8 <HAL_TIM_PWM_ConfigChannel+0x184>
 800504e:	68fb      	ldr	r3, [r7, #12]
 8005050:	2201      	movs	r2, #1
 8005052:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005056:	68fb      	ldr	r3, [r7, #12]
 8005058:	2202      	movs	r2, #2
 800505a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	2b0c      	cmp	r3, #12
 8005062:	f200 809f 	bhi.w	80051a4 <HAL_TIM_PWM_ConfigChannel+0x170>
 8005066:	a201      	add	r2, pc, #4	; (adr r2, 800506c <HAL_TIM_PWM_ConfigChannel+0x38>)
 8005068:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800506c:	080050a1 	.word	0x080050a1
 8005070:	080051a5 	.word	0x080051a5
 8005074:	080051a5 	.word	0x080051a5
 8005078:	080051a5 	.word	0x080051a5
 800507c:	080050e1 	.word	0x080050e1
 8005080:	080051a5 	.word	0x080051a5
 8005084:	080051a5 	.word	0x080051a5
 8005088:	080051a5 	.word	0x080051a5
 800508c:	08005123 	.word	0x08005123
 8005090:	080051a5 	.word	0x080051a5
 8005094:	080051a5 	.word	0x080051a5
 8005098:	080051a5 	.word	0x080051a5
 800509c:	08005163 	.word	0x08005163
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80050a0:	68fb      	ldr	r3, [r7, #12]
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	68b9      	ldr	r1, [r7, #8]
 80050a6:	4618      	mov	r0, r3
 80050a8:	f000 fa0a 	bl	80054c0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80050ac:	68fb      	ldr	r3, [r7, #12]
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	699a      	ldr	r2, [r3, #24]
 80050b2:	68fb      	ldr	r3, [r7, #12]
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	f042 0208 	orr.w	r2, r2, #8
 80050ba:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80050bc:	68fb      	ldr	r3, [r7, #12]
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	699a      	ldr	r2, [r3, #24]
 80050c2:	68fb      	ldr	r3, [r7, #12]
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	f022 0204 	bic.w	r2, r2, #4
 80050ca:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80050cc:	68fb      	ldr	r3, [r7, #12]
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	6999      	ldr	r1, [r3, #24]
 80050d2:	68bb      	ldr	r3, [r7, #8]
 80050d4:	691a      	ldr	r2, [r3, #16]
 80050d6:	68fb      	ldr	r3, [r7, #12]
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	430a      	orrs	r2, r1
 80050dc:	619a      	str	r2, [r3, #24]
      break;
 80050de:	e062      	b.n	80051a6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80050e0:	68fb      	ldr	r3, [r7, #12]
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	68b9      	ldr	r1, [r7, #8]
 80050e6:	4618      	mov	r0, r3
 80050e8:	f000 fa5a 	bl	80055a0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80050ec:	68fb      	ldr	r3, [r7, #12]
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	699a      	ldr	r2, [r3, #24]
 80050f2:	68fb      	ldr	r3, [r7, #12]
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80050fa:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80050fc:	68fb      	ldr	r3, [r7, #12]
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	699a      	ldr	r2, [r3, #24]
 8005102:	68fb      	ldr	r3, [r7, #12]
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800510a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800510c:	68fb      	ldr	r3, [r7, #12]
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	6999      	ldr	r1, [r3, #24]
 8005112:	68bb      	ldr	r3, [r7, #8]
 8005114:	691b      	ldr	r3, [r3, #16]
 8005116:	021a      	lsls	r2, r3, #8
 8005118:	68fb      	ldr	r3, [r7, #12]
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	430a      	orrs	r2, r1
 800511e:	619a      	str	r2, [r3, #24]
      break;
 8005120:	e041      	b.n	80051a6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005122:	68fb      	ldr	r3, [r7, #12]
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	68b9      	ldr	r1, [r7, #8]
 8005128:	4618      	mov	r0, r3
 800512a:	f000 faaf 	bl	800568c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800512e:	68fb      	ldr	r3, [r7, #12]
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	69da      	ldr	r2, [r3, #28]
 8005134:	68fb      	ldr	r3, [r7, #12]
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	f042 0208 	orr.w	r2, r2, #8
 800513c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800513e:	68fb      	ldr	r3, [r7, #12]
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	69da      	ldr	r2, [r3, #28]
 8005144:	68fb      	ldr	r3, [r7, #12]
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	f022 0204 	bic.w	r2, r2, #4
 800514c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800514e:	68fb      	ldr	r3, [r7, #12]
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	69d9      	ldr	r1, [r3, #28]
 8005154:	68bb      	ldr	r3, [r7, #8]
 8005156:	691a      	ldr	r2, [r3, #16]
 8005158:	68fb      	ldr	r3, [r7, #12]
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	430a      	orrs	r2, r1
 800515e:	61da      	str	r2, [r3, #28]
      break;
 8005160:	e021      	b.n	80051a6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005162:	68fb      	ldr	r3, [r7, #12]
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	68b9      	ldr	r1, [r7, #8]
 8005168:	4618      	mov	r0, r3
 800516a:	f000 fb03 	bl	8005774 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800516e:	68fb      	ldr	r3, [r7, #12]
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	69da      	ldr	r2, [r3, #28]
 8005174:	68fb      	ldr	r3, [r7, #12]
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800517c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800517e:	68fb      	ldr	r3, [r7, #12]
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	69da      	ldr	r2, [r3, #28]
 8005184:	68fb      	ldr	r3, [r7, #12]
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800518c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800518e:	68fb      	ldr	r3, [r7, #12]
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	69d9      	ldr	r1, [r3, #28]
 8005194:	68bb      	ldr	r3, [r7, #8]
 8005196:	691b      	ldr	r3, [r3, #16]
 8005198:	021a      	lsls	r2, r3, #8
 800519a:	68fb      	ldr	r3, [r7, #12]
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	430a      	orrs	r2, r1
 80051a0:	61da      	str	r2, [r3, #28]
      break;
 80051a2:	e000      	b.n	80051a6 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 80051a4:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 80051a6:	68fb      	ldr	r3, [r7, #12]
 80051a8:	2201      	movs	r2, #1
 80051aa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80051ae:	68fb      	ldr	r3, [r7, #12]
 80051b0:	2200      	movs	r2, #0
 80051b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80051b6:	2300      	movs	r3, #0
}
 80051b8:	4618      	mov	r0, r3
 80051ba:	3710      	adds	r7, #16
 80051bc:	46bd      	mov	sp, r7
 80051be:	bd80      	pop	{r7, pc}

080051c0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80051c0:	b580      	push	{r7, lr}
 80051c2:	b084      	sub	sp, #16
 80051c4:	af00      	add	r7, sp, #0
 80051c6:	6078      	str	r0, [r7, #4]
 80051c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80051d0:	2b01      	cmp	r3, #1
 80051d2:	d101      	bne.n	80051d8 <HAL_TIM_ConfigClockSource+0x18>
 80051d4:	2302      	movs	r3, #2
 80051d6:	e0a6      	b.n	8005326 <HAL_TIM_ConfigClockSource+0x166>
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	2201      	movs	r2, #1
 80051dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	2202      	movs	r2, #2
 80051e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	689b      	ldr	r3, [r3, #8]
 80051ee:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80051f0:	68fb      	ldr	r3, [r7, #12]
 80051f2:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80051f6:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80051f8:	68fb      	ldr	r3, [r7, #12]
 80051fa:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80051fe:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	68fa      	ldr	r2, [r7, #12]
 8005206:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005208:	683b      	ldr	r3, [r7, #0]
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	2b40      	cmp	r3, #64	; 0x40
 800520e:	d067      	beq.n	80052e0 <HAL_TIM_ConfigClockSource+0x120>
 8005210:	2b40      	cmp	r3, #64	; 0x40
 8005212:	d80b      	bhi.n	800522c <HAL_TIM_ConfigClockSource+0x6c>
 8005214:	2b10      	cmp	r3, #16
 8005216:	d073      	beq.n	8005300 <HAL_TIM_ConfigClockSource+0x140>
 8005218:	2b10      	cmp	r3, #16
 800521a:	d802      	bhi.n	8005222 <HAL_TIM_ConfigClockSource+0x62>
 800521c:	2b00      	cmp	r3, #0
 800521e:	d06f      	beq.n	8005300 <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8005220:	e078      	b.n	8005314 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8005222:	2b20      	cmp	r3, #32
 8005224:	d06c      	beq.n	8005300 <HAL_TIM_ConfigClockSource+0x140>
 8005226:	2b30      	cmp	r3, #48	; 0x30
 8005228:	d06a      	beq.n	8005300 <HAL_TIM_ConfigClockSource+0x140>
      break;
 800522a:	e073      	b.n	8005314 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800522c:	2b70      	cmp	r3, #112	; 0x70
 800522e:	d00d      	beq.n	800524c <HAL_TIM_ConfigClockSource+0x8c>
 8005230:	2b70      	cmp	r3, #112	; 0x70
 8005232:	d804      	bhi.n	800523e <HAL_TIM_ConfigClockSource+0x7e>
 8005234:	2b50      	cmp	r3, #80	; 0x50
 8005236:	d033      	beq.n	80052a0 <HAL_TIM_ConfigClockSource+0xe0>
 8005238:	2b60      	cmp	r3, #96	; 0x60
 800523a:	d041      	beq.n	80052c0 <HAL_TIM_ConfigClockSource+0x100>
      break;
 800523c:	e06a      	b.n	8005314 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800523e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005242:	d066      	beq.n	8005312 <HAL_TIM_ConfigClockSource+0x152>
 8005244:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005248:	d017      	beq.n	800527a <HAL_TIM_ConfigClockSource+0xba>
      break;
 800524a:	e063      	b.n	8005314 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	6818      	ldr	r0, [r3, #0]
 8005250:	683b      	ldr	r3, [r7, #0]
 8005252:	6899      	ldr	r1, [r3, #8]
 8005254:	683b      	ldr	r3, [r7, #0]
 8005256:	685a      	ldr	r2, [r3, #4]
 8005258:	683b      	ldr	r3, [r7, #0]
 800525a:	68db      	ldr	r3, [r3, #12]
 800525c:	f000 fb5a 	bl	8005914 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	689b      	ldr	r3, [r3, #8]
 8005266:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005268:	68fb      	ldr	r3, [r7, #12]
 800526a:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800526e:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	68fa      	ldr	r2, [r7, #12]
 8005276:	609a      	str	r2, [r3, #8]
      break;
 8005278:	e04c      	b.n	8005314 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	6818      	ldr	r0, [r3, #0]
 800527e:	683b      	ldr	r3, [r7, #0]
 8005280:	6899      	ldr	r1, [r3, #8]
 8005282:	683b      	ldr	r3, [r7, #0]
 8005284:	685a      	ldr	r2, [r3, #4]
 8005286:	683b      	ldr	r3, [r7, #0]
 8005288:	68db      	ldr	r3, [r3, #12]
 800528a:	f000 fb43 	bl	8005914 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	689a      	ldr	r2, [r3, #8]
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800529c:	609a      	str	r2, [r3, #8]
      break;
 800529e:	e039      	b.n	8005314 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	6818      	ldr	r0, [r3, #0]
 80052a4:	683b      	ldr	r3, [r7, #0]
 80052a6:	6859      	ldr	r1, [r3, #4]
 80052a8:	683b      	ldr	r3, [r7, #0]
 80052aa:	68db      	ldr	r3, [r3, #12]
 80052ac:	461a      	mov	r2, r3
 80052ae:	f000 fab7 	bl	8005820 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	2150      	movs	r1, #80	; 0x50
 80052b8:	4618      	mov	r0, r3
 80052ba:	f000 fb10 	bl	80058de <TIM_ITRx_SetConfig>
      break;
 80052be:	e029      	b.n	8005314 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	6818      	ldr	r0, [r3, #0]
 80052c4:	683b      	ldr	r3, [r7, #0]
 80052c6:	6859      	ldr	r1, [r3, #4]
 80052c8:	683b      	ldr	r3, [r7, #0]
 80052ca:	68db      	ldr	r3, [r3, #12]
 80052cc:	461a      	mov	r2, r3
 80052ce:	f000 fad6 	bl	800587e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	2160      	movs	r1, #96	; 0x60
 80052d8:	4618      	mov	r0, r3
 80052da:	f000 fb00 	bl	80058de <TIM_ITRx_SetConfig>
      break;
 80052de:	e019      	b.n	8005314 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	6818      	ldr	r0, [r3, #0]
 80052e4:	683b      	ldr	r3, [r7, #0]
 80052e6:	6859      	ldr	r1, [r3, #4]
 80052e8:	683b      	ldr	r3, [r7, #0]
 80052ea:	68db      	ldr	r3, [r3, #12]
 80052ec:	461a      	mov	r2, r3
 80052ee:	f000 fa97 	bl	8005820 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	2140      	movs	r1, #64	; 0x40
 80052f8:	4618      	mov	r0, r3
 80052fa:	f000 faf0 	bl	80058de <TIM_ITRx_SetConfig>
      break;
 80052fe:	e009      	b.n	8005314 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	681a      	ldr	r2, [r3, #0]
 8005304:	683b      	ldr	r3, [r7, #0]
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	4619      	mov	r1, r3
 800530a:	4610      	mov	r0, r2
 800530c:	f000 fae7 	bl	80058de <TIM_ITRx_SetConfig>
      break;
 8005310:	e000      	b.n	8005314 <HAL_TIM_ConfigClockSource+0x154>
      break;
 8005312:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	2201      	movs	r2, #1
 8005318:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	2200      	movs	r2, #0
 8005320:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005324:	2300      	movs	r3, #0
}
 8005326:	4618      	mov	r0, r3
 8005328:	3710      	adds	r7, #16
 800532a:	46bd      	mov	sp, r7
 800532c:	bd80      	pop	{r7, pc}

0800532e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800532e:	b480      	push	{r7}
 8005330:	b083      	sub	sp, #12
 8005332:	af00      	add	r7, sp, #0
 8005334:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005336:	bf00      	nop
 8005338:	370c      	adds	r7, #12
 800533a:	46bd      	mov	sp, r7
 800533c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005340:	4770      	bx	lr

08005342 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005342:	b480      	push	{r7}
 8005344:	b083      	sub	sp, #12
 8005346:	af00      	add	r7, sp, #0
 8005348:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800534a:	bf00      	nop
 800534c:	370c      	adds	r7, #12
 800534e:	46bd      	mov	sp, r7
 8005350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005354:	4770      	bx	lr

08005356 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005356:	b480      	push	{r7}
 8005358:	b083      	sub	sp, #12
 800535a:	af00      	add	r7, sp, #0
 800535c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800535e:	bf00      	nop
 8005360:	370c      	adds	r7, #12
 8005362:	46bd      	mov	sp, r7
 8005364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005368:	4770      	bx	lr

0800536a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800536a:	b480      	push	{r7}
 800536c:	b083      	sub	sp, #12
 800536e:	af00      	add	r7, sp, #0
 8005370:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005372:	bf00      	nop
 8005374:	370c      	adds	r7, #12
 8005376:	46bd      	mov	sp, r7
 8005378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800537c:	4770      	bx	lr
	...

08005380 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005380:	b480      	push	{r7}
 8005382:	b085      	sub	sp, #20
 8005384:	af00      	add	r7, sp, #0
 8005386:	6078      	str	r0, [r7, #4]
 8005388:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	4a40      	ldr	r2, [pc, #256]	; (8005494 <TIM_Base_SetConfig+0x114>)
 8005394:	4293      	cmp	r3, r2
 8005396:	d013      	beq.n	80053c0 <TIM_Base_SetConfig+0x40>
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800539e:	d00f      	beq.n	80053c0 <TIM_Base_SetConfig+0x40>
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	4a3d      	ldr	r2, [pc, #244]	; (8005498 <TIM_Base_SetConfig+0x118>)
 80053a4:	4293      	cmp	r3, r2
 80053a6:	d00b      	beq.n	80053c0 <TIM_Base_SetConfig+0x40>
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	4a3c      	ldr	r2, [pc, #240]	; (800549c <TIM_Base_SetConfig+0x11c>)
 80053ac:	4293      	cmp	r3, r2
 80053ae:	d007      	beq.n	80053c0 <TIM_Base_SetConfig+0x40>
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	4a3b      	ldr	r2, [pc, #236]	; (80054a0 <TIM_Base_SetConfig+0x120>)
 80053b4:	4293      	cmp	r3, r2
 80053b6:	d003      	beq.n	80053c0 <TIM_Base_SetConfig+0x40>
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	4a3a      	ldr	r2, [pc, #232]	; (80054a4 <TIM_Base_SetConfig+0x124>)
 80053bc:	4293      	cmp	r3, r2
 80053be:	d108      	bne.n	80053d2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80053c0:	68fb      	ldr	r3, [r7, #12]
 80053c2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80053c6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80053c8:	683b      	ldr	r3, [r7, #0]
 80053ca:	685b      	ldr	r3, [r3, #4]
 80053cc:	68fa      	ldr	r2, [r7, #12]
 80053ce:	4313      	orrs	r3, r2
 80053d0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	4a2f      	ldr	r2, [pc, #188]	; (8005494 <TIM_Base_SetConfig+0x114>)
 80053d6:	4293      	cmp	r3, r2
 80053d8:	d02b      	beq.n	8005432 <TIM_Base_SetConfig+0xb2>
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80053e0:	d027      	beq.n	8005432 <TIM_Base_SetConfig+0xb2>
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	4a2c      	ldr	r2, [pc, #176]	; (8005498 <TIM_Base_SetConfig+0x118>)
 80053e6:	4293      	cmp	r3, r2
 80053e8:	d023      	beq.n	8005432 <TIM_Base_SetConfig+0xb2>
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	4a2b      	ldr	r2, [pc, #172]	; (800549c <TIM_Base_SetConfig+0x11c>)
 80053ee:	4293      	cmp	r3, r2
 80053f0:	d01f      	beq.n	8005432 <TIM_Base_SetConfig+0xb2>
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	4a2a      	ldr	r2, [pc, #168]	; (80054a0 <TIM_Base_SetConfig+0x120>)
 80053f6:	4293      	cmp	r3, r2
 80053f8:	d01b      	beq.n	8005432 <TIM_Base_SetConfig+0xb2>
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	4a29      	ldr	r2, [pc, #164]	; (80054a4 <TIM_Base_SetConfig+0x124>)
 80053fe:	4293      	cmp	r3, r2
 8005400:	d017      	beq.n	8005432 <TIM_Base_SetConfig+0xb2>
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	4a28      	ldr	r2, [pc, #160]	; (80054a8 <TIM_Base_SetConfig+0x128>)
 8005406:	4293      	cmp	r3, r2
 8005408:	d013      	beq.n	8005432 <TIM_Base_SetConfig+0xb2>
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	4a27      	ldr	r2, [pc, #156]	; (80054ac <TIM_Base_SetConfig+0x12c>)
 800540e:	4293      	cmp	r3, r2
 8005410:	d00f      	beq.n	8005432 <TIM_Base_SetConfig+0xb2>
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	4a26      	ldr	r2, [pc, #152]	; (80054b0 <TIM_Base_SetConfig+0x130>)
 8005416:	4293      	cmp	r3, r2
 8005418:	d00b      	beq.n	8005432 <TIM_Base_SetConfig+0xb2>
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	4a25      	ldr	r2, [pc, #148]	; (80054b4 <TIM_Base_SetConfig+0x134>)
 800541e:	4293      	cmp	r3, r2
 8005420:	d007      	beq.n	8005432 <TIM_Base_SetConfig+0xb2>
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	4a24      	ldr	r2, [pc, #144]	; (80054b8 <TIM_Base_SetConfig+0x138>)
 8005426:	4293      	cmp	r3, r2
 8005428:	d003      	beq.n	8005432 <TIM_Base_SetConfig+0xb2>
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	4a23      	ldr	r2, [pc, #140]	; (80054bc <TIM_Base_SetConfig+0x13c>)
 800542e:	4293      	cmp	r3, r2
 8005430:	d108      	bne.n	8005444 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005432:	68fb      	ldr	r3, [r7, #12]
 8005434:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005438:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800543a:	683b      	ldr	r3, [r7, #0]
 800543c:	68db      	ldr	r3, [r3, #12]
 800543e:	68fa      	ldr	r2, [r7, #12]
 8005440:	4313      	orrs	r3, r2
 8005442:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005444:	68fb      	ldr	r3, [r7, #12]
 8005446:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800544a:	683b      	ldr	r3, [r7, #0]
 800544c:	695b      	ldr	r3, [r3, #20]
 800544e:	4313      	orrs	r3, r2
 8005450:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	68fa      	ldr	r2, [r7, #12]
 8005456:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005458:	683b      	ldr	r3, [r7, #0]
 800545a:	689a      	ldr	r2, [r3, #8]
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005460:	683b      	ldr	r3, [r7, #0]
 8005462:	681a      	ldr	r2, [r3, #0]
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	4a0a      	ldr	r2, [pc, #40]	; (8005494 <TIM_Base_SetConfig+0x114>)
 800546c:	4293      	cmp	r3, r2
 800546e:	d003      	beq.n	8005478 <TIM_Base_SetConfig+0xf8>
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	4a0c      	ldr	r2, [pc, #48]	; (80054a4 <TIM_Base_SetConfig+0x124>)
 8005474:	4293      	cmp	r3, r2
 8005476:	d103      	bne.n	8005480 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005478:	683b      	ldr	r3, [r7, #0]
 800547a:	691a      	ldr	r2, [r3, #16]
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	2201      	movs	r2, #1
 8005484:	615a      	str	r2, [r3, #20]
}
 8005486:	bf00      	nop
 8005488:	3714      	adds	r7, #20
 800548a:	46bd      	mov	sp, r7
 800548c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005490:	4770      	bx	lr
 8005492:	bf00      	nop
 8005494:	40010000 	.word	0x40010000
 8005498:	40000400 	.word	0x40000400
 800549c:	40000800 	.word	0x40000800
 80054a0:	40000c00 	.word	0x40000c00
 80054a4:	40010400 	.word	0x40010400
 80054a8:	40014000 	.word	0x40014000
 80054ac:	40014400 	.word	0x40014400
 80054b0:	40014800 	.word	0x40014800
 80054b4:	40001800 	.word	0x40001800
 80054b8:	40001c00 	.word	0x40001c00
 80054bc:	40002000 	.word	0x40002000

080054c0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80054c0:	b480      	push	{r7}
 80054c2:	b087      	sub	sp, #28
 80054c4:	af00      	add	r7, sp, #0
 80054c6:	6078      	str	r0, [r7, #4]
 80054c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	6a1b      	ldr	r3, [r3, #32]
 80054ce:	f023 0201 	bic.w	r2, r3, #1
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	6a1b      	ldr	r3, [r3, #32]
 80054da:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	685b      	ldr	r3, [r3, #4]
 80054e0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	699b      	ldr	r3, [r3, #24]
 80054e6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80054e8:	68fb      	ldr	r3, [r7, #12]
 80054ea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80054ee:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80054f0:	68fb      	ldr	r3, [r7, #12]
 80054f2:	f023 0303 	bic.w	r3, r3, #3
 80054f6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80054f8:	683b      	ldr	r3, [r7, #0]
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	68fa      	ldr	r2, [r7, #12]
 80054fe:	4313      	orrs	r3, r2
 8005500:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005502:	697b      	ldr	r3, [r7, #20]
 8005504:	f023 0302 	bic.w	r3, r3, #2
 8005508:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800550a:	683b      	ldr	r3, [r7, #0]
 800550c:	689b      	ldr	r3, [r3, #8]
 800550e:	697a      	ldr	r2, [r7, #20]
 8005510:	4313      	orrs	r3, r2
 8005512:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	4a20      	ldr	r2, [pc, #128]	; (8005598 <TIM_OC1_SetConfig+0xd8>)
 8005518:	4293      	cmp	r3, r2
 800551a:	d003      	beq.n	8005524 <TIM_OC1_SetConfig+0x64>
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	4a1f      	ldr	r2, [pc, #124]	; (800559c <TIM_OC1_SetConfig+0xdc>)
 8005520:	4293      	cmp	r3, r2
 8005522:	d10c      	bne.n	800553e <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005524:	697b      	ldr	r3, [r7, #20]
 8005526:	f023 0308 	bic.w	r3, r3, #8
 800552a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800552c:	683b      	ldr	r3, [r7, #0]
 800552e:	68db      	ldr	r3, [r3, #12]
 8005530:	697a      	ldr	r2, [r7, #20]
 8005532:	4313      	orrs	r3, r2
 8005534:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005536:	697b      	ldr	r3, [r7, #20]
 8005538:	f023 0304 	bic.w	r3, r3, #4
 800553c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	4a15      	ldr	r2, [pc, #84]	; (8005598 <TIM_OC1_SetConfig+0xd8>)
 8005542:	4293      	cmp	r3, r2
 8005544:	d003      	beq.n	800554e <TIM_OC1_SetConfig+0x8e>
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	4a14      	ldr	r2, [pc, #80]	; (800559c <TIM_OC1_SetConfig+0xdc>)
 800554a:	4293      	cmp	r3, r2
 800554c:	d111      	bne.n	8005572 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800554e:	693b      	ldr	r3, [r7, #16]
 8005550:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005554:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005556:	693b      	ldr	r3, [r7, #16]
 8005558:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800555c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800555e:	683b      	ldr	r3, [r7, #0]
 8005560:	695b      	ldr	r3, [r3, #20]
 8005562:	693a      	ldr	r2, [r7, #16]
 8005564:	4313      	orrs	r3, r2
 8005566:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005568:	683b      	ldr	r3, [r7, #0]
 800556a:	699b      	ldr	r3, [r3, #24]
 800556c:	693a      	ldr	r2, [r7, #16]
 800556e:	4313      	orrs	r3, r2
 8005570:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	693a      	ldr	r2, [r7, #16]
 8005576:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	68fa      	ldr	r2, [r7, #12]
 800557c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800557e:	683b      	ldr	r3, [r7, #0]
 8005580:	685a      	ldr	r2, [r3, #4]
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	697a      	ldr	r2, [r7, #20]
 800558a:	621a      	str	r2, [r3, #32]
}
 800558c:	bf00      	nop
 800558e:	371c      	adds	r7, #28
 8005590:	46bd      	mov	sp, r7
 8005592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005596:	4770      	bx	lr
 8005598:	40010000 	.word	0x40010000
 800559c:	40010400 	.word	0x40010400

080055a0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80055a0:	b480      	push	{r7}
 80055a2:	b087      	sub	sp, #28
 80055a4:	af00      	add	r7, sp, #0
 80055a6:	6078      	str	r0, [r7, #4]
 80055a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	6a1b      	ldr	r3, [r3, #32]
 80055ae:	f023 0210 	bic.w	r2, r3, #16
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	6a1b      	ldr	r3, [r3, #32]
 80055ba:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	685b      	ldr	r3, [r3, #4]
 80055c0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	699b      	ldr	r3, [r3, #24]
 80055c6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80055c8:	68fb      	ldr	r3, [r7, #12]
 80055ca:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80055ce:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80055d0:	68fb      	ldr	r3, [r7, #12]
 80055d2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80055d6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80055d8:	683b      	ldr	r3, [r7, #0]
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	021b      	lsls	r3, r3, #8
 80055de:	68fa      	ldr	r2, [r7, #12]
 80055e0:	4313      	orrs	r3, r2
 80055e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80055e4:	697b      	ldr	r3, [r7, #20]
 80055e6:	f023 0320 	bic.w	r3, r3, #32
 80055ea:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80055ec:	683b      	ldr	r3, [r7, #0]
 80055ee:	689b      	ldr	r3, [r3, #8]
 80055f0:	011b      	lsls	r3, r3, #4
 80055f2:	697a      	ldr	r2, [r7, #20]
 80055f4:	4313      	orrs	r3, r2
 80055f6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	4a22      	ldr	r2, [pc, #136]	; (8005684 <TIM_OC2_SetConfig+0xe4>)
 80055fc:	4293      	cmp	r3, r2
 80055fe:	d003      	beq.n	8005608 <TIM_OC2_SetConfig+0x68>
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	4a21      	ldr	r2, [pc, #132]	; (8005688 <TIM_OC2_SetConfig+0xe8>)
 8005604:	4293      	cmp	r3, r2
 8005606:	d10d      	bne.n	8005624 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005608:	697b      	ldr	r3, [r7, #20]
 800560a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800560e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005610:	683b      	ldr	r3, [r7, #0]
 8005612:	68db      	ldr	r3, [r3, #12]
 8005614:	011b      	lsls	r3, r3, #4
 8005616:	697a      	ldr	r2, [r7, #20]
 8005618:	4313      	orrs	r3, r2
 800561a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800561c:	697b      	ldr	r3, [r7, #20]
 800561e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005622:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	4a17      	ldr	r2, [pc, #92]	; (8005684 <TIM_OC2_SetConfig+0xe4>)
 8005628:	4293      	cmp	r3, r2
 800562a:	d003      	beq.n	8005634 <TIM_OC2_SetConfig+0x94>
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	4a16      	ldr	r2, [pc, #88]	; (8005688 <TIM_OC2_SetConfig+0xe8>)
 8005630:	4293      	cmp	r3, r2
 8005632:	d113      	bne.n	800565c <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005634:	693b      	ldr	r3, [r7, #16]
 8005636:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800563a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800563c:	693b      	ldr	r3, [r7, #16]
 800563e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005642:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005644:	683b      	ldr	r3, [r7, #0]
 8005646:	695b      	ldr	r3, [r3, #20]
 8005648:	009b      	lsls	r3, r3, #2
 800564a:	693a      	ldr	r2, [r7, #16]
 800564c:	4313      	orrs	r3, r2
 800564e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005650:	683b      	ldr	r3, [r7, #0]
 8005652:	699b      	ldr	r3, [r3, #24]
 8005654:	009b      	lsls	r3, r3, #2
 8005656:	693a      	ldr	r2, [r7, #16]
 8005658:	4313      	orrs	r3, r2
 800565a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	693a      	ldr	r2, [r7, #16]
 8005660:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	68fa      	ldr	r2, [r7, #12]
 8005666:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005668:	683b      	ldr	r3, [r7, #0]
 800566a:	685a      	ldr	r2, [r3, #4]
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	697a      	ldr	r2, [r7, #20]
 8005674:	621a      	str	r2, [r3, #32]
}
 8005676:	bf00      	nop
 8005678:	371c      	adds	r7, #28
 800567a:	46bd      	mov	sp, r7
 800567c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005680:	4770      	bx	lr
 8005682:	bf00      	nop
 8005684:	40010000 	.word	0x40010000
 8005688:	40010400 	.word	0x40010400

0800568c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800568c:	b480      	push	{r7}
 800568e:	b087      	sub	sp, #28
 8005690:	af00      	add	r7, sp, #0
 8005692:	6078      	str	r0, [r7, #4]
 8005694:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	6a1b      	ldr	r3, [r3, #32]
 800569a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	6a1b      	ldr	r3, [r3, #32]
 80056a6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	685b      	ldr	r3, [r3, #4]
 80056ac:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	69db      	ldr	r3, [r3, #28]
 80056b2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80056b4:	68fb      	ldr	r3, [r7, #12]
 80056b6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80056ba:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80056bc:	68fb      	ldr	r3, [r7, #12]
 80056be:	f023 0303 	bic.w	r3, r3, #3
 80056c2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80056c4:	683b      	ldr	r3, [r7, #0]
 80056c6:	681b      	ldr	r3, [r3, #0]
 80056c8:	68fa      	ldr	r2, [r7, #12]
 80056ca:	4313      	orrs	r3, r2
 80056cc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80056ce:	697b      	ldr	r3, [r7, #20]
 80056d0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80056d4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80056d6:	683b      	ldr	r3, [r7, #0]
 80056d8:	689b      	ldr	r3, [r3, #8]
 80056da:	021b      	lsls	r3, r3, #8
 80056dc:	697a      	ldr	r2, [r7, #20]
 80056de:	4313      	orrs	r3, r2
 80056e0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	4a21      	ldr	r2, [pc, #132]	; (800576c <TIM_OC3_SetConfig+0xe0>)
 80056e6:	4293      	cmp	r3, r2
 80056e8:	d003      	beq.n	80056f2 <TIM_OC3_SetConfig+0x66>
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	4a20      	ldr	r2, [pc, #128]	; (8005770 <TIM_OC3_SetConfig+0xe4>)
 80056ee:	4293      	cmp	r3, r2
 80056f0:	d10d      	bne.n	800570e <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80056f2:	697b      	ldr	r3, [r7, #20]
 80056f4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80056f8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80056fa:	683b      	ldr	r3, [r7, #0]
 80056fc:	68db      	ldr	r3, [r3, #12]
 80056fe:	021b      	lsls	r3, r3, #8
 8005700:	697a      	ldr	r2, [r7, #20]
 8005702:	4313      	orrs	r3, r2
 8005704:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005706:	697b      	ldr	r3, [r7, #20]
 8005708:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800570c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	4a16      	ldr	r2, [pc, #88]	; (800576c <TIM_OC3_SetConfig+0xe0>)
 8005712:	4293      	cmp	r3, r2
 8005714:	d003      	beq.n	800571e <TIM_OC3_SetConfig+0x92>
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	4a15      	ldr	r2, [pc, #84]	; (8005770 <TIM_OC3_SetConfig+0xe4>)
 800571a:	4293      	cmp	r3, r2
 800571c:	d113      	bne.n	8005746 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800571e:	693b      	ldr	r3, [r7, #16]
 8005720:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005724:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005726:	693b      	ldr	r3, [r7, #16]
 8005728:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800572c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800572e:	683b      	ldr	r3, [r7, #0]
 8005730:	695b      	ldr	r3, [r3, #20]
 8005732:	011b      	lsls	r3, r3, #4
 8005734:	693a      	ldr	r2, [r7, #16]
 8005736:	4313      	orrs	r3, r2
 8005738:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800573a:	683b      	ldr	r3, [r7, #0]
 800573c:	699b      	ldr	r3, [r3, #24]
 800573e:	011b      	lsls	r3, r3, #4
 8005740:	693a      	ldr	r2, [r7, #16]
 8005742:	4313      	orrs	r3, r2
 8005744:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	693a      	ldr	r2, [r7, #16]
 800574a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	68fa      	ldr	r2, [r7, #12]
 8005750:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005752:	683b      	ldr	r3, [r7, #0]
 8005754:	685a      	ldr	r2, [r3, #4]
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	697a      	ldr	r2, [r7, #20]
 800575e:	621a      	str	r2, [r3, #32]
}
 8005760:	bf00      	nop
 8005762:	371c      	adds	r7, #28
 8005764:	46bd      	mov	sp, r7
 8005766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800576a:	4770      	bx	lr
 800576c:	40010000 	.word	0x40010000
 8005770:	40010400 	.word	0x40010400

08005774 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005774:	b480      	push	{r7}
 8005776:	b087      	sub	sp, #28
 8005778:	af00      	add	r7, sp, #0
 800577a:	6078      	str	r0, [r7, #4]
 800577c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	6a1b      	ldr	r3, [r3, #32]
 8005782:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	6a1b      	ldr	r3, [r3, #32]
 800578e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	685b      	ldr	r3, [r3, #4]
 8005794:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	69db      	ldr	r3, [r3, #28]
 800579a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800579c:	68fb      	ldr	r3, [r7, #12]
 800579e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80057a2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80057a4:	68fb      	ldr	r3, [r7, #12]
 80057a6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80057aa:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80057ac:	683b      	ldr	r3, [r7, #0]
 80057ae:	681b      	ldr	r3, [r3, #0]
 80057b0:	021b      	lsls	r3, r3, #8
 80057b2:	68fa      	ldr	r2, [r7, #12]
 80057b4:	4313      	orrs	r3, r2
 80057b6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80057b8:	693b      	ldr	r3, [r7, #16]
 80057ba:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80057be:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80057c0:	683b      	ldr	r3, [r7, #0]
 80057c2:	689b      	ldr	r3, [r3, #8]
 80057c4:	031b      	lsls	r3, r3, #12
 80057c6:	693a      	ldr	r2, [r7, #16]
 80057c8:	4313      	orrs	r3, r2
 80057ca:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	4a12      	ldr	r2, [pc, #72]	; (8005818 <TIM_OC4_SetConfig+0xa4>)
 80057d0:	4293      	cmp	r3, r2
 80057d2:	d003      	beq.n	80057dc <TIM_OC4_SetConfig+0x68>
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	4a11      	ldr	r2, [pc, #68]	; (800581c <TIM_OC4_SetConfig+0xa8>)
 80057d8:	4293      	cmp	r3, r2
 80057da:	d109      	bne.n	80057f0 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80057dc:	697b      	ldr	r3, [r7, #20]
 80057de:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80057e2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80057e4:	683b      	ldr	r3, [r7, #0]
 80057e6:	695b      	ldr	r3, [r3, #20]
 80057e8:	019b      	lsls	r3, r3, #6
 80057ea:	697a      	ldr	r2, [r7, #20]
 80057ec:	4313      	orrs	r3, r2
 80057ee:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	697a      	ldr	r2, [r7, #20]
 80057f4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	68fa      	ldr	r2, [r7, #12]
 80057fa:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80057fc:	683b      	ldr	r3, [r7, #0]
 80057fe:	685a      	ldr	r2, [r3, #4]
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	693a      	ldr	r2, [r7, #16]
 8005808:	621a      	str	r2, [r3, #32]
}
 800580a:	bf00      	nop
 800580c:	371c      	adds	r7, #28
 800580e:	46bd      	mov	sp, r7
 8005810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005814:	4770      	bx	lr
 8005816:	bf00      	nop
 8005818:	40010000 	.word	0x40010000
 800581c:	40010400 	.word	0x40010400

08005820 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005820:	b480      	push	{r7}
 8005822:	b087      	sub	sp, #28
 8005824:	af00      	add	r7, sp, #0
 8005826:	60f8      	str	r0, [r7, #12]
 8005828:	60b9      	str	r1, [r7, #8]
 800582a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800582c:	68fb      	ldr	r3, [r7, #12]
 800582e:	6a1b      	ldr	r3, [r3, #32]
 8005830:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005832:	68fb      	ldr	r3, [r7, #12]
 8005834:	6a1b      	ldr	r3, [r3, #32]
 8005836:	f023 0201 	bic.w	r2, r3, #1
 800583a:	68fb      	ldr	r3, [r7, #12]
 800583c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800583e:	68fb      	ldr	r3, [r7, #12]
 8005840:	699b      	ldr	r3, [r3, #24]
 8005842:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005844:	693b      	ldr	r3, [r7, #16]
 8005846:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800584a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	011b      	lsls	r3, r3, #4
 8005850:	693a      	ldr	r2, [r7, #16]
 8005852:	4313      	orrs	r3, r2
 8005854:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005856:	697b      	ldr	r3, [r7, #20]
 8005858:	f023 030a 	bic.w	r3, r3, #10
 800585c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800585e:	697a      	ldr	r2, [r7, #20]
 8005860:	68bb      	ldr	r3, [r7, #8]
 8005862:	4313      	orrs	r3, r2
 8005864:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005866:	68fb      	ldr	r3, [r7, #12]
 8005868:	693a      	ldr	r2, [r7, #16]
 800586a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800586c:	68fb      	ldr	r3, [r7, #12]
 800586e:	697a      	ldr	r2, [r7, #20]
 8005870:	621a      	str	r2, [r3, #32]
}
 8005872:	bf00      	nop
 8005874:	371c      	adds	r7, #28
 8005876:	46bd      	mov	sp, r7
 8005878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800587c:	4770      	bx	lr

0800587e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800587e:	b480      	push	{r7}
 8005880:	b087      	sub	sp, #28
 8005882:	af00      	add	r7, sp, #0
 8005884:	60f8      	str	r0, [r7, #12]
 8005886:	60b9      	str	r1, [r7, #8]
 8005888:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800588a:	68fb      	ldr	r3, [r7, #12]
 800588c:	6a1b      	ldr	r3, [r3, #32]
 800588e:	f023 0210 	bic.w	r2, r3, #16
 8005892:	68fb      	ldr	r3, [r7, #12]
 8005894:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005896:	68fb      	ldr	r3, [r7, #12]
 8005898:	699b      	ldr	r3, [r3, #24]
 800589a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800589c:	68fb      	ldr	r3, [r7, #12]
 800589e:	6a1b      	ldr	r3, [r3, #32]
 80058a0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80058a2:	697b      	ldr	r3, [r7, #20]
 80058a4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80058a8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	031b      	lsls	r3, r3, #12
 80058ae:	697a      	ldr	r2, [r7, #20]
 80058b0:	4313      	orrs	r3, r2
 80058b2:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80058b4:	693b      	ldr	r3, [r7, #16]
 80058b6:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80058ba:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80058bc:	68bb      	ldr	r3, [r7, #8]
 80058be:	011b      	lsls	r3, r3, #4
 80058c0:	693a      	ldr	r2, [r7, #16]
 80058c2:	4313      	orrs	r3, r2
 80058c4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80058c6:	68fb      	ldr	r3, [r7, #12]
 80058c8:	697a      	ldr	r2, [r7, #20]
 80058ca:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80058cc:	68fb      	ldr	r3, [r7, #12]
 80058ce:	693a      	ldr	r2, [r7, #16]
 80058d0:	621a      	str	r2, [r3, #32]
}
 80058d2:	bf00      	nop
 80058d4:	371c      	adds	r7, #28
 80058d6:	46bd      	mov	sp, r7
 80058d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058dc:	4770      	bx	lr

080058de <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80058de:	b480      	push	{r7}
 80058e0:	b085      	sub	sp, #20
 80058e2:	af00      	add	r7, sp, #0
 80058e4:	6078      	str	r0, [r7, #4]
 80058e6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	689b      	ldr	r3, [r3, #8]
 80058ec:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80058ee:	68fb      	ldr	r3, [r7, #12]
 80058f0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80058f4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80058f6:	683a      	ldr	r2, [r7, #0]
 80058f8:	68fb      	ldr	r3, [r7, #12]
 80058fa:	4313      	orrs	r3, r2
 80058fc:	f043 0307 	orr.w	r3, r3, #7
 8005900:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	68fa      	ldr	r2, [r7, #12]
 8005906:	609a      	str	r2, [r3, #8]
}
 8005908:	bf00      	nop
 800590a:	3714      	adds	r7, #20
 800590c:	46bd      	mov	sp, r7
 800590e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005912:	4770      	bx	lr

08005914 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005914:	b480      	push	{r7}
 8005916:	b087      	sub	sp, #28
 8005918:	af00      	add	r7, sp, #0
 800591a:	60f8      	str	r0, [r7, #12]
 800591c:	60b9      	str	r1, [r7, #8]
 800591e:	607a      	str	r2, [r7, #4]
 8005920:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005922:	68fb      	ldr	r3, [r7, #12]
 8005924:	689b      	ldr	r3, [r3, #8]
 8005926:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005928:	697b      	ldr	r3, [r7, #20]
 800592a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800592e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005930:	683b      	ldr	r3, [r7, #0]
 8005932:	021a      	lsls	r2, r3, #8
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	431a      	orrs	r2, r3
 8005938:	68bb      	ldr	r3, [r7, #8]
 800593a:	4313      	orrs	r3, r2
 800593c:	697a      	ldr	r2, [r7, #20]
 800593e:	4313      	orrs	r3, r2
 8005940:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005942:	68fb      	ldr	r3, [r7, #12]
 8005944:	697a      	ldr	r2, [r7, #20]
 8005946:	609a      	str	r2, [r3, #8]
}
 8005948:	bf00      	nop
 800594a:	371c      	adds	r7, #28
 800594c:	46bd      	mov	sp, r7
 800594e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005952:	4770      	bx	lr

08005954 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005954:	b480      	push	{r7}
 8005956:	b087      	sub	sp, #28
 8005958:	af00      	add	r7, sp, #0
 800595a:	60f8      	str	r0, [r7, #12]
 800595c:	60b9      	str	r1, [r7, #8]
 800595e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005960:	68bb      	ldr	r3, [r7, #8]
 8005962:	f003 031f 	and.w	r3, r3, #31
 8005966:	2201      	movs	r2, #1
 8005968:	fa02 f303 	lsl.w	r3, r2, r3
 800596c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800596e:	68fb      	ldr	r3, [r7, #12]
 8005970:	6a1a      	ldr	r2, [r3, #32]
 8005972:	697b      	ldr	r3, [r7, #20]
 8005974:	43db      	mvns	r3, r3
 8005976:	401a      	ands	r2, r3
 8005978:	68fb      	ldr	r3, [r7, #12]
 800597a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800597c:	68fb      	ldr	r3, [r7, #12]
 800597e:	6a1a      	ldr	r2, [r3, #32]
 8005980:	68bb      	ldr	r3, [r7, #8]
 8005982:	f003 031f 	and.w	r3, r3, #31
 8005986:	6879      	ldr	r1, [r7, #4]
 8005988:	fa01 f303 	lsl.w	r3, r1, r3
 800598c:	431a      	orrs	r2, r3
 800598e:	68fb      	ldr	r3, [r7, #12]
 8005990:	621a      	str	r2, [r3, #32]
}
 8005992:	bf00      	nop
 8005994:	371c      	adds	r7, #28
 8005996:	46bd      	mov	sp, r7
 8005998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800599c:	4770      	bx	lr
	...

080059a0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80059a0:	b480      	push	{r7}
 80059a2:	b085      	sub	sp, #20
 80059a4:	af00      	add	r7, sp, #0
 80059a6:	6078      	str	r0, [r7, #4]
 80059a8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80059b0:	2b01      	cmp	r3, #1
 80059b2:	d101      	bne.n	80059b8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80059b4:	2302      	movs	r3, #2
 80059b6:	e05a      	b.n	8005a6e <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	2201      	movs	r2, #1
 80059bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	2202      	movs	r2, #2
 80059c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	681b      	ldr	r3, [r3, #0]
 80059cc:	685b      	ldr	r3, [r3, #4]
 80059ce:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	681b      	ldr	r3, [r3, #0]
 80059d4:	689b      	ldr	r3, [r3, #8]
 80059d6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80059d8:	68fb      	ldr	r3, [r7, #12]
 80059da:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80059de:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80059e0:	683b      	ldr	r3, [r7, #0]
 80059e2:	681b      	ldr	r3, [r3, #0]
 80059e4:	68fa      	ldr	r2, [r7, #12]
 80059e6:	4313      	orrs	r3, r2
 80059e8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	681b      	ldr	r3, [r3, #0]
 80059ee:	68fa      	ldr	r2, [r7, #12]
 80059f0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	681b      	ldr	r3, [r3, #0]
 80059f6:	4a21      	ldr	r2, [pc, #132]	; (8005a7c <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80059f8:	4293      	cmp	r3, r2
 80059fa:	d022      	beq.n	8005a42 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	681b      	ldr	r3, [r3, #0]
 8005a00:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005a04:	d01d      	beq.n	8005a42 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	681b      	ldr	r3, [r3, #0]
 8005a0a:	4a1d      	ldr	r2, [pc, #116]	; (8005a80 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8005a0c:	4293      	cmp	r3, r2
 8005a0e:	d018      	beq.n	8005a42 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	681b      	ldr	r3, [r3, #0]
 8005a14:	4a1b      	ldr	r2, [pc, #108]	; (8005a84 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8005a16:	4293      	cmp	r3, r2
 8005a18:	d013      	beq.n	8005a42 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	681b      	ldr	r3, [r3, #0]
 8005a1e:	4a1a      	ldr	r2, [pc, #104]	; (8005a88 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8005a20:	4293      	cmp	r3, r2
 8005a22:	d00e      	beq.n	8005a42 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	681b      	ldr	r3, [r3, #0]
 8005a28:	4a18      	ldr	r2, [pc, #96]	; (8005a8c <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8005a2a:	4293      	cmp	r3, r2
 8005a2c:	d009      	beq.n	8005a42 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	681b      	ldr	r3, [r3, #0]
 8005a32:	4a17      	ldr	r2, [pc, #92]	; (8005a90 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8005a34:	4293      	cmp	r3, r2
 8005a36:	d004      	beq.n	8005a42 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	4a15      	ldr	r2, [pc, #84]	; (8005a94 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8005a3e:	4293      	cmp	r3, r2
 8005a40:	d10c      	bne.n	8005a5c <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005a42:	68bb      	ldr	r3, [r7, #8]
 8005a44:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005a48:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005a4a:	683b      	ldr	r3, [r7, #0]
 8005a4c:	685b      	ldr	r3, [r3, #4]
 8005a4e:	68ba      	ldr	r2, [r7, #8]
 8005a50:	4313      	orrs	r3, r2
 8005a52:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	68ba      	ldr	r2, [r7, #8]
 8005a5a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	2201      	movs	r2, #1
 8005a60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	2200      	movs	r2, #0
 8005a68:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005a6c:	2300      	movs	r3, #0
}
 8005a6e:	4618      	mov	r0, r3
 8005a70:	3714      	adds	r7, #20
 8005a72:	46bd      	mov	sp, r7
 8005a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a78:	4770      	bx	lr
 8005a7a:	bf00      	nop
 8005a7c:	40010000 	.word	0x40010000
 8005a80:	40000400 	.word	0x40000400
 8005a84:	40000800 	.word	0x40000800
 8005a88:	40000c00 	.word	0x40000c00
 8005a8c:	40010400 	.word	0x40010400
 8005a90:	40014000 	.word	0x40014000
 8005a94:	40001800 	.word	0x40001800

08005a98 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005a98:	b480      	push	{r7}
 8005a9a:	b083      	sub	sp, #12
 8005a9c:	af00      	add	r7, sp, #0
 8005a9e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005aa0:	bf00      	nop
 8005aa2:	370c      	adds	r7, #12
 8005aa4:	46bd      	mov	sp, r7
 8005aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aaa:	4770      	bx	lr

08005aac <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005aac:	b480      	push	{r7}
 8005aae:	b083      	sub	sp, #12
 8005ab0:	af00      	add	r7, sp, #0
 8005ab2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005ab4:	bf00      	nop
 8005ab6:	370c      	adds	r7, #12
 8005ab8:	46bd      	mov	sp, r7
 8005aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005abe:	4770      	bx	lr

08005ac0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005ac0:	b580      	push	{r7, lr}
 8005ac2:	b082      	sub	sp, #8
 8005ac4:	af00      	add	r7, sp, #0
 8005ac6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	2b00      	cmp	r3, #0
 8005acc:	d101      	bne.n	8005ad2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005ace:	2301      	movs	r3, #1
 8005ad0:	e03f      	b.n	8005b52 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8005ad8:	b2db      	uxtb	r3, r3
 8005ada:	2b00      	cmp	r3, #0
 8005adc:	d106      	bne.n	8005aec <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	2200      	movs	r2, #0
 8005ae2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005ae6:	6878      	ldr	r0, [r7, #4]
 8005ae8:	f7fc ff4a 	bl	8002980 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	2224      	movs	r2, #36	; 0x24
 8005af0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	681b      	ldr	r3, [r3, #0]
 8005af8:	68da      	ldr	r2, [r3, #12]
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	681b      	ldr	r3, [r3, #0]
 8005afe:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005b02:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005b04:	6878      	ldr	r0, [r7, #4]
 8005b06:	f000 f9b1 	bl	8005e6c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	681b      	ldr	r3, [r3, #0]
 8005b0e:	691a      	ldr	r2, [r3, #16]
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	681b      	ldr	r3, [r3, #0]
 8005b14:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005b18:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	681b      	ldr	r3, [r3, #0]
 8005b1e:	695a      	ldr	r2, [r3, #20]
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	681b      	ldr	r3, [r3, #0]
 8005b24:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005b28:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	681b      	ldr	r3, [r3, #0]
 8005b2e:	68da      	ldr	r2, [r3, #12]
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	681b      	ldr	r3, [r3, #0]
 8005b34:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005b38:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	2200      	movs	r2, #0
 8005b3e:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	2220      	movs	r2, #32
 8005b44:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	2220      	movs	r2, #32
 8005b4c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8005b50:	2300      	movs	r3, #0
}
 8005b52:	4618      	mov	r0, r3
 8005b54:	3708      	adds	r7, #8
 8005b56:	46bd      	mov	sp, r7
 8005b58:	bd80      	pop	{r7, pc}

08005b5a <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005b5a:	b580      	push	{r7, lr}
 8005b5c:	b088      	sub	sp, #32
 8005b5e:	af02      	add	r7, sp, #8
 8005b60:	60f8      	str	r0, [r7, #12]
 8005b62:	60b9      	str	r1, [r7, #8]
 8005b64:	603b      	str	r3, [r7, #0]
 8005b66:	4613      	mov	r3, r2
 8005b68:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 8005b6a:	2300      	movs	r3, #0
 8005b6c:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005b6e:	68fb      	ldr	r3, [r7, #12]
 8005b70:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8005b74:	b2db      	uxtb	r3, r3
 8005b76:	2b20      	cmp	r3, #32
 8005b78:	f040 8083 	bne.w	8005c82 <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 8005b7c:	68bb      	ldr	r3, [r7, #8]
 8005b7e:	2b00      	cmp	r3, #0
 8005b80:	d002      	beq.n	8005b88 <HAL_UART_Transmit+0x2e>
 8005b82:	88fb      	ldrh	r3, [r7, #6]
 8005b84:	2b00      	cmp	r3, #0
 8005b86:	d101      	bne.n	8005b8c <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 8005b88:	2301      	movs	r3, #1
 8005b8a:	e07b      	b.n	8005c84 <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8005b8c:	68fb      	ldr	r3, [r7, #12]
 8005b8e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8005b92:	2b01      	cmp	r3, #1
 8005b94:	d101      	bne.n	8005b9a <HAL_UART_Transmit+0x40>
 8005b96:	2302      	movs	r3, #2
 8005b98:	e074      	b.n	8005c84 <HAL_UART_Transmit+0x12a>
 8005b9a:	68fb      	ldr	r3, [r7, #12]
 8005b9c:	2201      	movs	r2, #1
 8005b9e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005ba2:	68fb      	ldr	r3, [r7, #12]
 8005ba4:	2200      	movs	r2, #0
 8005ba6:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005ba8:	68fb      	ldr	r3, [r7, #12]
 8005baa:	2221      	movs	r2, #33	; 0x21
 8005bac:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8005bb0:	f7fd f8cc 	bl	8002d4c <HAL_GetTick>
 8005bb4:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8005bb6:	68fb      	ldr	r3, [r7, #12]
 8005bb8:	88fa      	ldrh	r2, [r7, #6]
 8005bba:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8005bbc:	68fb      	ldr	r3, [r7, #12]
 8005bbe:	88fa      	ldrh	r2, [r7, #6]
 8005bc0:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8005bc2:	68fb      	ldr	r3, [r7, #12]
 8005bc4:	2200      	movs	r2, #0
 8005bc6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 8005bca:	e042      	b.n	8005c52 <HAL_UART_Transmit+0xf8>
    {
      huart->TxXferCount--;
 8005bcc:	68fb      	ldr	r3, [r7, #12]
 8005bce:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005bd0:	b29b      	uxth	r3, r3
 8005bd2:	3b01      	subs	r3, #1
 8005bd4:	b29a      	uxth	r2, r3
 8005bd6:	68fb      	ldr	r3, [r7, #12]
 8005bd8:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8005bda:	68fb      	ldr	r3, [r7, #12]
 8005bdc:	689b      	ldr	r3, [r3, #8]
 8005bde:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005be2:	d122      	bne.n	8005c2a <HAL_UART_Transmit+0xd0>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005be4:	683b      	ldr	r3, [r7, #0]
 8005be6:	9300      	str	r3, [sp, #0]
 8005be8:	697b      	ldr	r3, [r7, #20]
 8005bea:	2200      	movs	r2, #0
 8005bec:	2180      	movs	r1, #128	; 0x80
 8005bee:	68f8      	ldr	r0, [r7, #12]
 8005bf0:	f000 f8f2 	bl	8005dd8 <UART_WaitOnFlagUntilTimeout>
 8005bf4:	4603      	mov	r3, r0
 8005bf6:	2b00      	cmp	r3, #0
 8005bf8:	d001      	beq.n	8005bfe <HAL_UART_Transmit+0xa4>
        {
          return HAL_TIMEOUT;
 8005bfa:	2303      	movs	r3, #3
 8005bfc:	e042      	b.n	8005c84 <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 8005bfe:	68bb      	ldr	r3, [r7, #8]
 8005c00:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 8005c02:	693b      	ldr	r3, [r7, #16]
 8005c04:	881b      	ldrh	r3, [r3, #0]
 8005c06:	461a      	mov	r2, r3
 8005c08:	68fb      	ldr	r3, [r7, #12]
 8005c0a:	681b      	ldr	r3, [r3, #0]
 8005c0c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005c10:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8005c12:	68fb      	ldr	r3, [r7, #12]
 8005c14:	691b      	ldr	r3, [r3, #16]
 8005c16:	2b00      	cmp	r3, #0
 8005c18:	d103      	bne.n	8005c22 <HAL_UART_Transmit+0xc8>
        {
          pData += 2U;
 8005c1a:	68bb      	ldr	r3, [r7, #8]
 8005c1c:	3302      	adds	r3, #2
 8005c1e:	60bb      	str	r3, [r7, #8]
 8005c20:	e017      	b.n	8005c52 <HAL_UART_Transmit+0xf8>
        }
        else
        {
          pData += 1U;
 8005c22:	68bb      	ldr	r3, [r7, #8]
 8005c24:	3301      	adds	r3, #1
 8005c26:	60bb      	str	r3, [r7, #8]
 8005c28:	e013      	b.n	8005c52 <HAL_UART_Transmit+0xf8>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005c2a:	683b      	ldr	r3, [r7, #0]
 8005c2c:	9300      	str	r3, [sp, #0]
 8005c2e:	697b      	ldr	r3, [r7, #20]
 8005c30:	2200      	movs	r2, #0
 8005c32:	2180      	movs	r1, #128	; 0x80
 8005c34:	68f8      	ldr	r0, [r7, #12]
 8005c36:	f000 f8cf 	bl	8005dd8 <UART_WaitOnFlagUntilTimeout>
 8005c3a:	4603      	mov	r3, r0
 8005c3c:	2b00      	cmp	r3, #0
 8005c3e:	d001      	beq.n	8005c44 <HAL_UART_Transmit+0xea>
        {
          return HAL_TIMEOUT;
 8005c40:	2303      	movs	r3, #3
 8005c42:	e01f      	b.n	8005c84 <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8005c44:	68bb      	ldr	r3, [r7, #8]
 8005c46:	1c5a      	adds	r2, r3, #1
 8005c48:	60ba      	str	r2, [r7, #8]
 8005c4a:	781a      	ldrb	r2, [r3, #0]
 8005c4c:	68fb      	ldr	r3, [r7, #12]
 8005c4e:	681b      	ldr	r3, [r3, #0]
 8005c50:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 8005c52:	68fb      	ldr	r3, [r7, #12]
 8005c54:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005c56:	b29b      	uxth	r3, r3
 8005c58:	2b00      	cmp	r3, #0
 8005c5a:	d1b7      	bne.n	8005bcc <HAL_UART_Transmit+0x72>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005c5c:	683b      	ldr	r3, [r7, #0]
 8005c5e:	9300      	str	r3, [sp, #0]
 8005c60:	697b      	ldr	r3, [r7, #20]
 8005c62:	2200      	movs	r2, #0
 8005c64:	2140      	movs	r1, #64	; 0x40
 8005c66:	68f8      	ldr	r0, [r7, #12]
 8005c68:	f000 f8b6 	bl	8005dd8 <UART_WaitOnFlagUntilTimeout>
 8005c6c:	4603      	mov	r3, r0
 8005c6e:	2b00      	cmp	r3, #0
 8005c70:	d001      	beq.n	8005c76 <HAL_UART_Transmit+0x11c>
    {
      return HAL_TIMEOUT;
 8005c72:	2303      	movs	r3, #3
 8005c74:	e006      	b.n	8005c84 <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005c76:	68fb      	ldr	r3, [r7, #12]
 8005c78:	2220      	movs	r2, #32
 8005c7a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 8005c7e:	2300      	movs	r3, #0
 8005c80:	e000      	b.n	8005c84 <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 8005c82:	2302      	movs	r3, #2
  }
}
 8005c84:	4618      	mov	r0, r3
 8005c86:	3718      	adds	r7, #24
 8005c88:	46bd      	mov	sp, r7
 8005c8a:	bd80      	pop	{r7, pc}

08005c8c <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005c8c:	b580      	push	{r7, lr}
 8005c8e:	b088      	sub	sp, #32
 8005c90:	af02      	add	r7, sp, #8
 8005c92:	60f8      	str	r0, [r7, #12]
 8005c94:	60b9      	str	r1, [r7, #8]
 8005c96:	603b      	str	r3, [r7, #0]
 8005c98:	4613      	mov	r3, r2
 8005c9a:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 8005c9c:	2300      	movs	r3, #0
 8005c9e:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005ca0:	68fb      	ldr	r3, [r7, #12]
 8005ca2:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8005ca6:	b2db      	uxtb	r3, r3
 8005ca8:	2b20      	cmp	r3, #32
 8005caa:	f040 8090 	bne.w	8005dce <HAL_UART_Receive+0x142>
  {
    if ((pData == NULL) || (Size == 0U))
 8005cae:	68bb      	ldr	r3, [r7, #8]
 8005cb0:	2b00      	cmp	r3, #0
 8005cb2:	d002      	beq.n	8005cba <HAL_UART_Receive+0x2e>
 8005cb4:	88fb      	ldrh	r3, [r7, #6]
 8005cb6:	2b00      	cmp	r3, #0
 8005cb8:	d101      	bne.n	8005cbe <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8005cba:	2301      	movs	r3, #1
 8005cbc:	e088      	b.n	8005dd0 <HAL_UART_Receive+0x144>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8005cbe:	68fb      	ldr	r3, [r7, #12]
 8005cc0:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8005cc4:	2b01      	cmp	r3, #1
 8005cc6:	d101      	bne.n	8005ccc <HAL_UART_Receive+0x40>
 8005cc8:	2302      	movs	r3, #2
 8005cca:	e081      	b.n	8005dd0 <HAL_UART_Receive+0x144>
 8005ccc:	68fb      	ldr	r3, [r7, #12]
 8005cce:	2201      	movs	r2, #1
 8005cd0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005cd4:	68fb      	ldr	r3, [r7, #12]
 8005cd6:	2200      	movs	r2, #0
 8005cd8:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005cda:	68fb      	ldr	r3, [r7, #12]
 8005cdc:	2222      	movs	r2, #34	; 0x22
 8005cde:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8005ce2:	f7fd f833 	bl	8002d4c <HAL_GetTick>
 8005ce6:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8005ce8:	68fb      	ldr	r3, [r7, #12]
 8005cea:	88fa      	ldrh	r2, [r7, #6]
 8005cec:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8005cee:	68fb      	ldr	r3, [r7, #12]
 8005cf0:	88fa      	ldrh	r2, [r7, #6]
 8005cf2:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8005cf4:	68fb      	ldr	r3, [r7, #12]
 8005cf6:	2200      	movs	r2, #0
 8005cf8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8005cfc:	e05c      	b.n	8005db8 <HAL_UART_Receive+0x12c>
    {
      huart->RxXferCount--;
 8005cfe:	68fb      	ldr	r3, [r7, #12]
 8005d00:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005d02:	b29b      	uxth	r3, r3
 8005d04:	3b01      	subs	r3, #1
 8005d06:	b29a      	uxth	r2, r3
 8005d08:	68fb      	ldr	r3, [r7, #12]
 8005d0a:	85da      	strh	r2, [r3, #46]	; 0x2e
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8005d0c:	68fb      	ldr	r3, [r7, #12]
 8005d0e:	689b      	ldr	r3, [r3, #8]
 8005d10:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005d14:	d12b      	bne.n	8005d6e <HAL_UART_Receive+0xe2>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8005d16:	683b      	ldr	r3, [r7, #0]
 8005d18:	9300      	str	r3, [sp, #0]
 8005d1a:	697b      	ldr	r3, [r7, #20]
 8005d1c:	2200      	movs	r2, #0
 8005d1e:	2120      	movs	r1, #32
 8005d20:	68f8      	ldr	r0, [r7, #12]
 8005d22:	f000 f859 	bl	8005dd8 <UART_WaitOnFlagUntilTimeout>
 8005d26:	4603      	mov	r3, r0
 8005d28:	2b00      	cmp	r3, #0
 8005d2a:	d001      	beq.n	8005d30 <HAL_UART_Receive+0xa4>
        {
          return HAL_TIMEOUT;
 8005d2c:	2303      	movs	r3, #3
 8005d2e:	e04f      	b.n	8005dd0 <HAL_UART_Receive+0x144>
        }
        tmp = (uint16_t *) pData;
 8005d30:	68bb      	ldr	r3, [r7, #8]
 8005d32:	613b      	str	r3, [r7, #16]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8005d34:	68fb      	ldr	r3, [r7, #12]
 8005d36:	691b      	ldr	r3, [r3, #16]
 8005d38:	2b00      	cmp	r3, #0
 8005d3a:	d10c      	bne.n	8005d56 <HAL_UART_Receive+0xca>
        {
          *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8005d3c:	68fb      	ldr	r3, [r7, #12]
 8005d3e:	681b      	ldr	r3, [r3, #0]
 8005d40:	685b      	ldr	r3, [r3, #4]
 8005d42:	b29b      	uxth	r3, r3
 8005d44:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005d48:	b29a      	uxth	r2, r3
 8005d4a:	693b      	ldr	r3, [r7, #16]
 8005d4c:	801a      	strh	r2, [r3, #0]
          pData += 2U;
 8005d4e:	68bb      	ldr	r3, [r7, #8]
 8005d50:	3302      	adds	r3, #2
 8005d52:	60bb      	str	r3, [r7, #8]
 8005d54:	e030      	b.n	8005db8 <HAL_UART_Receive+0x12c>
        }
        else
        {
          *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 8005d56:	68fb      	ldr	r3, [r7, #12]
 8005d58:	681b      	ldr	r3, [r3, #0]
 8005d5a:	685b      	ldr	r3, [r3, #4]
 8005d5c:	b29b      	uxth	r3, r3
 8005d5e:	b2db      	uxtb	r3, r3
 8005d60:	b29a      	uxth	r2, r3
 8005d62:	693b      	ldr	r3, [r7, #16]
 8005d64:	801a      	strh	r2, [r3, #0]
          pData += 1U;
 8005d66:	68bb      	ldr	r3, [r7, #8]
 8005d68:	3301      	adds	r3, #1
 8005d6a:	60bb      	str	r3, [r7, #8]
 8005d6c:	e024      	b.n	8005db8 <HAL_UART_Receive+0x12c>
        }

      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8005d6e:	683b      	ldr	r3, [r7, #0]
 8005d70:	9300      	str	r3, [sp, #0]
 8005d72:	697b      	ldr	r3, [r7, #20]
 8005d74:	2200      	movs	r2, #0
 8005d76:	2120      	movs	r1, #32
 8005d78:	68f8      	ldr	r0, [r7, #12]
 8005d7a:	f000 f82d 	bl	8005dd8 <UART_WaitOnFlagUntilTimeout>
 8005d7e:	4603      	mov	r3, r0
 8005d80:	2b00      	cmp	r3, #0
 8005d82:	d001      	beq.n	8005d88 <HAL_UART_Receive+0xfc>
        {
          return HAL_TIMEOUT;
 8005d84:	2303      	movs	r3, #3
 8005d86:	e023      	b.n	8005dd0 <HAL_UART_Receive+0x144>
        }
        if (huart->Init.Parity == UART_PARITY_NONE)
 8005d88:	68fb      	ldr	r3, [r7, #12]
 8005d8a:	691b      	ldr	r3, [r3, #16]
 8005d8c:	2b00      	cmp	r3, #0
 8005d8e:	d108      	bne.n	8005da2 <HAL_UART_Receive+0x116>
        {
          *pData++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8005d90:	68fb      	ldr	r3, [r7, #12]
 8005d92:	681b      	ldr	r3, [r3, #0]
 8005d94:	6859      	ldr	r1, [r3, #4]
 8005d96:	68bb      	ldr	r3, [r7, #8]
 8005d98:	1c5a      	adds	r2, r3, #1
 8005d9a:	60ba      	str	r2, [r7, #8]
 8005d9c:	b2ca      	uxtb	r2, r1
 8005d9e:	701a      	strb	r2, [r3, #0]
 8005da0:	e00a      	b.n	8005db8 <HAL_UART_Receive+0x12c>
        }
        else
        {
          *pData++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8005da2:	68fb      	ldr	r3, [r7, #12]
 8005da4:	681b      	ldr	r3, [r3, #0]
 8005da6:	685b      	ldr	r3, [r3, #4]
 8005da8:	b2da      	uxtb	r2, r3
 8005daa:	68bb      	ldr	r3, [r7, #8]
 8005dac:	1c59      	adds	r1, r3, #1
 8005dae:	60b9      	str	r1, [r7, #8]
 8005db0:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8005db4:	b2d2      	uxtb	r2, r2
 8005db6:	701a      	strb	r2, [r3, #0]
    while (huart->RxXferCount > 0U)
 8005db8:	68fb      	ldr	r3, [r7, #12]
 8005dba:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005dbc:	b29b      	uxth	r3, r3
 8005dbe:	2b00      	cmp	r3, #0
 8005dc0:	d19d      	bne.n	8005cfe <HAL_UART_Receive+0x72>

      }
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8005dc2:	68fb      	ldr	r3, [r7, #12]
 8005dc4:	2220      	movs	r2, #32
 8005dc6:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    return HAL_OK;
 8005dca:	2300      	movs	r3, #0
 8005dcc:	e000      	b.n	8005dd0 <HAL_UART_Receive+0x144>
  }
  else
  {
    return HAL_BUSY;
 8005dce:	2302      	movs	r3, #2
  }
}
 8005dd0:	4618      	mov	r0, r3
 8005dd2:	3718      	adds	r7, #24
 8005dd4:	46bd      	mov	sp, r7
 8005dd6:	bd80      	pop	{r7, pc}

08005dd8 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8005dd8:	b580      	push	{r7, lr}
 8005dda:	b084      	sub	sp, #16
 8005ddc:	af00      	add	r7, sp, #0
 8005dde:	60f8      	str	r0, [r7, #12]
 8005de0:	60b9      	str	r1, [r7, #8]
 8005de2:	603b      	str	r3, [r7, #0]
 8005de4:	4613      	mov	r3, r2
 8005de6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005de8:	e02c      	b.n	8005e44 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005dea:	69bb      	ldr	r3, [r7, #24]
 8005dec:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005df0:	d028      	beq.n	8005e44 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8005df2:	69bb      	ldr	r3, [r7, #24]
 8005df4:	2b00      	cmp	r3, #0
 8005df6:	d007      	beq.n	8005e08 <UART_WaitOnFlagUntilTimeout+0x30>
 8005df8:	f7fc ffa8 	bl	8002d4c <HAL_GetTick>
 8005dfc:	4602      	mov	r2, r0
 8005dfe:	683b      	ldr	r3, [r7, #0]
 8005e00:	1ad3      	subs	r3, r2, r3
 8005e02:	69ba      	ldr	r2, [r7, #24]
 8005e04:	429a      	cmp	r2, r3
 8005e06:	d21d      	bcs.n	8005e44 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005e08:	68fb      	ldr	r3, [r7, #12]
 8005e0a:	681b      	ldr	r3, [r3, #0]
 8005e0c:	68da      	ldr	r2, [r3, #12]
 8005e0e:	68fb      	ldr	r3, [r7, #12]
 8005e10:	681b      	ldr	r3, [r3, #0]
 8005e12:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8005e16:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005e18:	68fb      	ldr	r3, [r7, #12]
 8005e1a:	681b      	ldr	r3, [r3, #0]
 8005e1c:	695a      	ldr	r2, [r3, #20]
 8005e1e:	68fb      	ldr	r3, [r7, #12]
 8005e20:	681b      	ldr	r3, [r3, #0]
 8005e22:	f022 0201 	bic.w	r2, r2, #1
 8005e26:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8005e28:	68fb      	ldr	r3, [r7, #12]
 8005e2a:	2220      	movs	r2, #32
 8005e2c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8005e30:	68fb      	ldr	r3, [r7, #12]
 8005e32:	2220      	movs	r2, #32
 8005e34:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8005e38:	68fb      	ldr	r3, [r7, #12]
 8005e3a:	2200      	movs	r2, #0
 8005e3c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 8005e40:	2303      	movs	r3, #3
 8005e42:	e00f      	b.n	8005e64 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005e44:	68fb      	ldr	r3, [r7, #12]
 8005e46:	681b      	ldr	r3, [r3, #0]
 8005e48:	681a      	ldr	r2, [r3, #0]
 8005e4a:	68bb      	ldr	r3, [r7, #8]
 8005e4c:	4013      	ands	r3, r2
 8005e4e:	68ba      	ldr	r2, [r7, #8]
 8005e50:	429a      	cmp	r2, r3
 8005e52:	bf0c      	ite	eq
 8005e54:	2301      	moveq	r3, #1
 8005e56:	2300      	movne	r3, #0
 8005e58:	b2db      	uxtb	r3, r3
 8005e5a:	461a      	mov	r2, r3
 8005e5c:	79fb      	ldrb	r3, [r7, #7]
 8005e5e:	429a      	cmp	r2, r3
 8005e60:	d0c3      	beq.n	8005dea <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005e62:	2300      	movs	r3, #0
}
 8005e64:	4618      	mov	r0, r3
 8005e66:	3710      	adds	r7, #16
 8005e68:	46bd      	mov	sp, r7
 8005e6a:	bd80      	pop	{r7, pc}

08005e6c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005e6c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005e70:	b085      	sub	sp, #20
 8005e72:	af00      	add	r7, sp, #0
 8005e74:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	681b      	ldr	r3, [r3, #0]
 8005e7a:	691b      	ldr	r3, [r3, #16]
 8005e7c:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	68da      	ldr	r2, [r3, #12]
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	681b      	ldr	r3, [r3, #0]
 8005e88:	430a      	orrs	r2, r1
 8005e8a:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	689a      	ldr	r2, [r3, #8]
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	691b      	ldr	r3, [r3, #16]
 8005e94:	431a      	orrs	r2, r3
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	695b      	ldr	r3, [r3, #20]
 8005e9a:	431a      	orrs	r2, r3
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	69db      	ldr	r3, [r3, #28]
 8005ea0:	4313      	orrs	r3, r2
 8005ea2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	681b      	ldr	r3, [r3, #0]
 8005ea8:	68db      	ldr	r3, [r3, #12]
 8005eaa:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8005eae:	f023 030c 	bic.w	r3, r3, #12
 8005eb2:	687a      	ldr	r2, [r7, #4]
 8005eb4:	6812      	ldr	r2, [r2, #0]
 8005eb6:	68f9      	ldr	r1, [r7, #12]
 8005eb8:	430b      	orrs	r3, r1
 8005eba:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	681b      	ldr	r3, [r3, #0]
 8005ec0:	695b      	ldr	r3, [r3, #20]
 8005ec2:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	699a      	ldr	r2, [r3, #24]
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	681b      	ldr	r3, [r3, #0]
 8005ece:	430a      	orrs	r2, r1
 8005ed0:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	69db      	ldr	r3, [r3, #28]
 8005ed6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005eda:	f040 818b 	bne.w	80061f4 <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	681b      	ldr	r3, [r3, #0]
 8005ee2:	4ac1      	ldr	r2, [pc, #772]	; (80061e8 <UART_SetConfig+0x37c>)
 8005ee4:	4293      	cmp	r3, r2
 8005ee6:	d005      	beq.n	8005ef4 <UART_SetConfig+0x88>
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	681b      	ldr	r3, [r3, #0]
 8005eec:	4abf      	ldr	r2, [pc, #764]	; (80061ec <UART_SetConfig+0x380>)
 8005eee:	4293      	cmp	r3, r2
 8005ef0:	f040 80bd 	bne.w	800606e <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005ef4:	f7fe fdd4 	bl	8004aa0 <HAL_RCC_GetPCLK2Freq>
 8005ef8:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005efa:	68bb      	ldr	r3, [r7, #8]
 8005efc:	461d      	mov	r5, r3
 8005efe:	f04f 0600 	mov.w	r6, #0
 8005f02:	46a8      	mov	r8, r5
 8005f04:	46b1      	mov	r9, r6
 8005f06:	eb18 0308 	adds.w	r3, r8, r8
 8005f0a:	eb49 0409 	adc.w	r4, r9, r9
 8005f0e:	4698      	mov	r8, r3
 8005f10:	46a1      	mov	r9, r4
 8005f12:	eb18 0805 	adds.w	r8, r8, r5
 8005f16:	eb49 0906 	adc.w	r9, r9, r6
 8005f1a:	f04f 0100 	mov.w	r1, #0
 8005f1e:	f04f 0200 	mov.w	r2, #0
 8005f22:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8005f26:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8005f2a:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8005f2e:	4688      	mov	r8, r1
 8005f30:	4691      	mov	r9, r2
 8005f32:	eb18 0005 	adds.w	r0, r8, r5
 8005f36:	eb49 0106 	adc.w	r1, r9, r6
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	685b      	ldr	r3, [r3, #4]
 8005f3e:	461d      	mov	r5, r3
 8005f40:	f04f 0600 	mov.w	r6, #0
 8005f44:	196b      	adds	r3, r5, r5
 8005f46:	eb46 0406 	adc.w	r4, r6, r6
 8005f4a:	461a      	mov	r2, r3
 8005f4c:	4623      	mov	r3, r4
 8005f4e:	f7fa fe2b 	bl	8000ba8 <__aeabi_uldivmod>
 8005f52:	4603      	mov	r3, r0
 8005f54:	460c      	mov	r4, r1
 8005f56:	461a      	mov	r2, r3
 8005f58:	4ba5      	ldr	r3, [pc, #660]	; (80061f0 <UART_SetConfig+0x384>)
 8005f5a:	fba3 2302 	umull	r2, r3, r3, r2
 8005f5e:	095b      	lsrs	r3, r3, #5
 8005f60:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8005f64:	68bb      	ldr	r3, [r7, #8]
 8005f66:	461d      	mov	r5, r3
 8005f68:	f04f 0600 	mov.w	r6, #0
 8005f6c:	46a9      	mov	r9, r5
 8005f6e:	46b2      	mov	sl, r6
 8005f70:	eb19 0309 	adds.w	r3, r9, r9
 8005f74:	eb4a 040a 	adc.w	r4, sl, sl
 8005f78:	4699      	mov	r9, r3
 8005f7a:	46a2      	mov	sl, r4
 8005f7c:	eb19 0905 	adds.w	r9, r9, r5
 8005f80:	eb4a 0a06 	adc.w	sl, sl, r6
 8005f84:	f04f 0100 	mov.w	r1, #0
 8005f88:	f04f 0200 	mov.w	r2, #0
 8005f8c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005f90:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8005f94:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8005f98:	4689      	mov	r9, r1
 8005f9a:	4692      	mov	sl, r2
 8005f9c:	eb19 0005 	adds.w	r0, r9, r5
 8005fa0:	eb4a 0106 	adc.w	r1, sl, r6
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	685b      	ldr	r3, [r3, #4]
 8005fa8:	461d      	mov	r5, r3
 8005faa:	f04f 0600 	mov.w	r6, #0
 8005fae:	196b      	adds	r3, r5, r5
 8005fb0:	eb46 0406 	adc.w	r4, r6, r6
 8005fb4:	461a      	mov	r2, r3
 8005fb6:	4623      	mov	r3, r4
 8005fb8:	f7fa fdf6 	bl	8000ba8 <__aeabi_uldivmod>
 8005fbc:	4603      	mov	r3, r0
 8005fbe:	460c      	mov	r4, r1
 8005fc0:	461a      	mov	r2, r3
 8005fc2:	4b8b      	ldr	r3, [pc, #556]	; (80061f0 <UART_SetConfig+0x384>)
 8005fc4:	fba3 1302 	umull	r1, r3, r3, r2
 8005fc8:	095b      	lsrs	r3, r3, #5
 8005fca:	2164      	movs	r1, #100	; 0x64
 8005fcc:	fb01 f303 	mul.w	r3, r1, r3
 8005fd0:	1ad3      	subs	r3, r2, r3
 8005fd2:	00db      	lsls	r3, r3, #3
 8005fd4:	3332      	adds	r3, #50	; 0x32
 8005fd6:	4a86      	ldr	r2, [pc, #536]	; (80061f0 <UART_SetConfig+0x384>)
 8005fd8:	fba2 2303 	umull	r2, r3, r2, r3
 8005fdc:	095b      	lsrs	r3, r3, #5
 8005fde:	005b      	lsls	r3, r3, #1
 8005fe0:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8005fe4:	4498      	add	r8, r3
 8005fe6:	68bb      	ldr	r3, [r7, #8]
 8005fe8:	461d      	mov	r5, r3
 8005fea:	f04f 0600 	mov.w	r6, #0
 8005fee:	46a9      	mov	r9, r5
 8005ff0:	46b2      	mov	sl, r6
 8005ff2:	eb19 0309 	adds.w	r3, r9, r9
 8005ff6:	eb4a 040a 	adc.w	r4, sl, sl
 8005ffa:	4699      	mov	r9, r3
 8005ffc:	46a2      	mov	sl, r4
 8005ffe:	eb19 0905 	adds.w	r9, r9, r5
 8006002:	eb4a 0a06 	adc.w	sl, sl, r6
 8006006:	f04f 0100 	mov.w	r1, #0
 800600a:	f04f 0200 	mov.w	r2, #0
 800600e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006012:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8006016:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800601a:	4689      	mov	r9, r1
 800601c:	4692      	mov	sl, r2
 800601e:	eb19 0005 	adds.w	r0, r9, r5
 8006022:	eb4a 0106 	adc.w	r1, sl, r6
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	685b      	ldr	r3, [r3, #4]
 800602a:	461d      	mov	r5, r3
 800602c:	f04f 0600 	mov.w	r6, #0
 8006030:	196b      	adds	r3, r5, r5
 8006032:	eb46 0406 	adc.w	r4, r6, r6
 8006036:	461a      	mov	r2, r3
 8006038:	4623      	mov	r3, r4
 800603a:	f7fa fdb5 	bl	8000ba8 <__aeabi_uldivmod>
 800603e:	4603      	mov	r3, r0
 8006040:	460c      	mov	r4, r1
 8006042:	461a      	mov	r2, r3
 8006044:	4b6a      	ldr	r3, [pc, #424]	; (80061f0 <UART_SetConfig+0x384>)
 8006046:	fba3 1302 	umull	r1, r3, r3, r2
 800604a:	095b      	lsrs	r3, r3, #5
 800604c:	2164      	movs	r1, #100	; 0x64
 800604e:	fb01 f303 	mul.w	r3, r1, r3
 8006052:	1ad3      	subs	r3, r2, r3
 8006054:	00db      	lsls	r3, r3, #3
 8006056:	3332      	adds	r3, #50	; 0x32
 8006058:	4a65      	ldr	r2, [pc, #404]	; (80061f0 <UART_SetConfig+0x384>)
 800605a:	fba2 2303 	umull	r2, r3, r2, r3
 800605e:	095b      	lsrs	r3, r3, #5
 8006060:	f003 0207 	and.w	r2, r3, #7
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	681b      	ldr	r3, [r3, #0]
 8006068:	4442      	add	r2, r8
 800606a:	609a      	str	r2, [r3, #8]
 800606c:	e26f      	b.n	800654e <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800606e:	f7fe fd03 	bl	8004a78 <HAL_RCC_GetPCLK1Freq>
 8006072:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8006074:	68bb      	ldr	r3, [r7, #8]
 8006076:	461d      	mov	r5, r3
 8006078:	f04f 0600 	mov.w	r6, #0
 800607c:	46a8      	mov	r8, r5
 800607e:	46b1      	mov	r9, r6
 8006080:	eb18 0308 	adds.w	r3, r8, r8
 8006084:	eb49 0409 	adc.w	r4, r9, r9
 8006088:	4698      	mov	r8, r3
 800608a:	46a1      	mov	r9, r4
 800608c:	eb18 0805 	adds.w	r8, r8, r5
 8006090:	eb49 0906 	adc.w	r9, r9, r6
 8006094:	f04f 0100 	mov.w	r1, #0
 8006098:	f04f 0200 	mov.w	r2, #0
 800609c:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80060a0:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80060a4:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80060a8:	4688      	mov	r8, r1
 80060aa:	4691      	mov	r9, r2
 80060ac:	eb18 0005 	adds.w	r0, r8, r5
 80060b0:	eb49 0106 	adc.w	r1, r9, r6
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	685b      	ldr	r3, [r3, #4]
 80060b8:	461d      	mov	r5, r3
 80060ba:	f04f 0600 	mov.w	r6, #0
 80060be:	196b      	adds	r3, r5, r5
 80060c0:	eb46 0406 	adc.w	r4, r6, r6
 80060c4:	461a      	mov	r2, r3
 80060c6:	4623      	mov	r3, r4
 80060c8:	f7fa fd6e 	bl	8000ba8 <__aeabi_uldivmod>
 80060cc:	4603      	mov	r3, r0
 80060ce:	460c      	mov	r4, r1
 80060d0:	461a      	mov	r2, r3
 80060d2:	4b47      	ldr	r3, [pc, #284]	; (80061f0 <UART_SetConfig+0x384>)
 80060d4:	fba3 2302 	umull	r2, r3, r3, r2
 80060d8:	095b      	lsrs	r3, r3, #5
 80060da:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80060de:	68bb      	ldr	r3, [r7, #8]
 80060e0:	461d      	mov	r5, r3
 80060e2:	f04f 0600 	mov.w	r6, #0
 80060e6:	46a9      	mov	r9, r5
 80060e8:	46b2      	mov	sl, r6
 80060ea:	eb19 0309 	adds.w	r3, r9, r9
 80060ee:	eb4a 040a 	adc.w	r4, sl, sl
 80060f2:	4699      	mov	r9, r3
 80060f4:	46a2      	mov	sl, r4
 80060f6:	eb19 0905 	adds.w	r9, r9, r5
 80060fa:	eb4a 0a06 	adc.w	sl, sl, r6
 80060fe:	f04f 0100 	mov.w	r1, #0
 8006102:	f04f 0200 	mov.w	r2, #0
 8006106:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800610a:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800610e:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8006112:	4689      	mov	r9, r1
 8006114:	4692      	mov	sl, r2
 8006116:	eb19 0005 	adds.w	r0, r9, r5
 800611a:	eb4a 0106 	adc.w	r1, sl, r6
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	685b      	ldr	r3, [r3, #4]
 8006122:	461d      	mov	r5, r3
 8006124:	f04f 0600 	mov.w	r6, #0
 8006128:	196b      	adds	r3, r5, r5
 800612a:	eb46 0406 	adc.w	r4, r6, r6
 800612e:	461a      	mov	r2, r3
 8006130:	4623      	mov	r3, r4
 8006132:	f7fa fd39 	bl	8000ba8 <__aeabi_uldivmod>
 8006136:	4603      	mov	r3, r0
 8006138:	460c      	mov	r4, r1
 800613a:	461a      	mov	r2, r3
 800613c:	4b2c      	ldr	r3, [pc, #176]	; (80061f0 <UART_SetConfig+0x384>)
 800613e:	fba3 1302 	umull	r1, r3, r3, r2
 8006142:	095b      	lsrs	r3, r3, #5
 8006144:	2164      	movs	r1, #100	; 0x64
 8006146:	fb01 f303 	mul.w	r3, r1, r3
 800614a:	1ad3      	subs	r3, r2, r3
 800614c:	00db      	lsls	r3, r3, #3
 800614e:	3332      	adds	r3, #50	; 0x32
 8006150:	4a27      	ldr	r2, [pc, #156]	; (80061f0 <UART_SetConfig+0x384>)
 8006152:	fba2 2303 	umull	r2, r3, r2, r3
 8006156:	095b      	lsrs	r3, r3, #5
 8006158:	005b      	lsls	r3, r3, #1
 800615a:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800615e:	4498      	add	r8, r3
 8006160:	68bb      	ldr	r3, [r7, #8]
 8006162:	461d      	mov	r5, r3
 8006164:	f04f 0600 	mov.w	r6, #0
 8006168:	46a9      	mov	r9, r5
 800616a:	46b2      	mov	sl, r6
 800616c:	eb19 0309 	adds.w	r3, r9, r9
 8006170:	eb4a 040a 	adc.w	r4, sl, sl
 8006174:	4699      	mov	r9, r3
 8006176:	46a2      	mov	sl, r4
 8006178:	eb19 0905 	adds.w	r9, r9, r5
 800617c:	eb4a 0a06 	adc.w	sl, sl, r6
 8006180:	f04f 0100 	mov.w	r1, #0
 8006184:	f04f 0200 	mov.w	r2, #0
 8006188:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800618c:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8006190:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8006194:	4689      	mov	r9, r1
 8006196:	4692      	mov	sl, r2
 8006198:	eb19 0005 	adds.w	r0, r9, r5
 800619c:	eb4a 0106 	adc.w	r1, sl, r6
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	685b      	ldr	r3, [r3, #4]
 80061a4:	461d      	mov	r5, r3
 80061a6:	f04f 0600 	mov.w	r6, #0
 80061aa:	196b      	adds	r3, r5, r5
 80061ac:	eb46 0406 	adc.w	r4, r6, r6
 80061b0:	461a      	mov	r2, r3
 80061b2:	4623      	mov	r3, r4
 80061b4:	f7fa fcf8 	bl	8000ba8 <__aeabi_uldivmod>
 80061b8:	4603      	mov	r3, r0
 80061ba:	460c      	mov	r4, r1
 80061bc:	461a      	mov	r2, r3
 80061be:	4b0c      	ldr	r3, [pc, #48]	; (80061f0 <UART_SetConfig+0x384>)
 80061c0:	fba3 1302 	umull	r1, r3, r3, r2
 80061c4:	095b      	lsrs	r3, r3, #5
 80061c6:	2164      	movs	r1, #100	; 0x64
 80061c8:	fb01 f303 	mul.w	r3, r1, r3
 80061cc:	1ad3      	subs	r3, r2, r3
 80061ce:	00db      	lsls	r3, r3, #3
 80061d0:	3332      	adds	r3, #50	; 0x32
 80061d2:	4a07      	ldr	r2, [pc, #28]	; (80061f0 <UART_SetConfig+0x384>)
 80061d4:	fba2 2303 	umull	r2, r3, r2, r3
 80061d8:	095b      	lsrs	r3, r3, #5
 80061da:	f003 0207 	and.w	r2, r3, #7
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	681b      	ldr	r3, [r3, #0]
 80061e2:	4442      	add	r2, r8
 80061e4:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 80061e6:	e1b2      	b.n	800654e <UART_SetConfig+0x6e2>
 80061e8:	40011000 	.word	0x40011000
 80061ec:	40011400 	.word	0x40011400
 80061f0:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	681b      	ldr	r3, [r3, #0]
 80061f8:	4ad7      	ldr	r2, [pc, #860]	; (8006558 <UART_SetConfig+0x6ec>)
 80061fa:	4293      	cmp	r3, r2
 80061fc:	d005      	beq.n	800620a <UART_SetConfig+0x39e>
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	681b      	ldr	r3, [r3, #0]
 8006202:	4ad6      	ldr	r2, [pc, #856]	; (800655c <UART_SetConfig+0x6f0>)
 8006204:	4293      	cmp	r3, r2
 8006206:	f040 80d1 	bne.w	80063ac <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 800620a:	f7fe fc49 	bl	8004aa0 <HAL_RCC_GetPCLK2Freq>
 800620e:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006210:	68bb      	ldr	r3, [r7, #8]
 8006212:	469a      	mov	sl, r3
 8006214:	f04f 0b00 	mov.w	fp, #0
 8006218:	46d0      	mov	r8, sl
 800621a:	46d9      	mov	r9, fp
 800621c:	eb18 0308 	adds.w	r3, r8, r8
 8006220:	eb49 0409 	adc.w	r4, r9, r9
 8006224:	4698      	mov	r8, r3
 8006226:	46a1      	mov	r9, r4
 8006228:	eb18 080a 	adds.w	r8, r8, sl
 800622c:	eb49 090b 	adc.w	r9, r9, fp
 8006230:	f04f 0100 	mov.w	r1, #0
 8006234:	f04f 0200 	mov.w	r2, #0
 8006238:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800623c:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8006240:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8006244:	4688      	mov	r8, r1
 8006246:	4691      	mov	r9, r2
 8006248:	eb1a 0508 	adds.w	r5, sl, r8
 800624c:	eb4b 0609 	adc.w	r6, fp, r9
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	685b      	ldr	r3, [r3, #4]
 8006254:	4619      	mov	r1, r3
 8006256:	f04f 0200 	mov.w	r2, #0
 800625a:	f04f 0300 	mov.w	r3, #0
 800625e:	f04f 0400 	mov.w	r4, #0
 8006262:	0094      	lsls	r4, r2, #2
 8006264:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8006268:	008b      	lsls	r3, r1, #2
 800626a:	461a      	mov	r2, r3
 800626c:	4623      	mov	r3, r4
 800626e:	4628      	mov	r0, r5
 8006270:	4631      	mov	r1, r6
 8006272:	f7fa fc99 	bl	8000ba8 <__aeabi_uldivmod>
 8006276:	4603      	mov	r3, r0
 8006278:	460c      	mov	r4, r1
 800627a:	461a      	mov	r2, r3
 800627c:	4bb8      	ldr	r3, [pc, #736]	; (8006560 <UART_SetConfig+0x6f4>)
 800627e:	fba3 2302 	umull	r2, r3, r3, r2
 8006282:	095b      	lsrs	r3, r3, #5
 8006284:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8006288:	68bb      	ldr	r3, [r7, #8]
 800628a:	469b      	mov	fp, r3
 800628c:	f04f 0c00 	mov.w	ip, #0
 8006290:	46d9      	mov	r9, fp
 8006292:	46e2      	mov	sl, ip
 8006294:	eb19 0309 	adds.w	r3, r9, r9
 8006298:	eb4a 040a 	adc.w	r4, sl, sl
 800629c:	4699      	mov	r9, r3
 800629e:	46a2      	mov	sl, r4
 80062a0:	eb19 090b 	adds.w	r9, r9, fp
 80062a4:	eb4a 0a0c 	adc.w	sl, sl, ip
 80062a8:	f04f 0100 	mov.w	r1, #0
 80062ac:	f04f 0200 	mov.w	r2, #0
 80062b0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80062b4:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80062b8:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80062bc:	4689      	mov	r9, r1
 80062be:	4692      	mov	sl, r2
 80062c0:	eb1b 0509 	adds.w	r5, fp, r9
 80062c4:	eb4c 060a 	adc.w	r6, ip, sl
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	685b      	ldr	r3, [r3, #4]
 80062cc:	4619      	mov	r1, r3
 80062ce:	f04f 0200 	mov.w	r2, #0
 80062d2:	f04f 0300 	mov.w	r3, #0
 80062d6:	f04f 0400 	mov.w	r4, #0
 80062da:	0094      	lsls	r4, r2, #2
 80062dc:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80062e0:	008b      	lsls	r3, r1, #2
 80062e2:	461a      	mov	r2, r3
 80062e4:	4623      	mov	r3, r4
 80062e6:	4628      	mov	r0, r5
 80062e8:	4631      	mov	r1, r6
 80062ea:	f7fa fc5d 	bl	8000ba8 <__aeabi_uldivmod>
 80062ee:	4603      	mov	r3, r0
 80062f0:	460c      	mov	r4, r1
 80062f2:	461a      	mov	r2, r3
 80062f4:	4b9a      	ldr	r3, [pc, #616]	; (8006560 <UART_SetConfig+0x6f4>)
 80062f6:	fba3 1302 	umull	r1, r3, r3, r2
 80062fa:	095b      	lsrs	r3, r3, #5
 80062fc:	2164      	movs	r1, #100	; 0x64
 80062fe:	fb01 f303 	mul.w	r3, r1, r3
 8006302:	1ad3      	subs	r3, r2, r3
 8006304:	011b      	lsls	r3, r3, #4
 8006306:	3332      	adds	r3, #50	; 0x32
 8006308:	4a95      	ldr	r2, [pc, #596]	; (8006560 <UART_SetConfig+0x6f4>)
 800630a:	fba2 2303 	umull	r2, r3, r2, r3
 800630e:	095b      	lsrs	r3, r3, #5
 8006310:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006314:	4498      	add	r8, r3
 8006316:	68bb      	ldr	r3, [r7, #8]
 8006318:	469b      	mov	fp, r3
 800631a:	f04f 0c00 	mov.w	ip, #0
 800631e:	46d9      	mov	r9, fp
 8006320:	46e2      	mov	sl, ip
 8006322:	eb19 0309 	adds.w	r3, r9, r9
 8006326:	eb4a 040a 	adc.w	r4, sl, sl
 800632a:	4699      	mov	r9, r3
 800632c:	46a2      	mov	sl, r4
 800632e:	eb19 090b 	adds.w	r9, r9, fp
 8006332:	eb4a 0a0c 	adc.w	sl, sl, ip
 8006336:	f04f 0100 	mov.w	r1, #0
 800633a:	f04f 0200 	mov.w	r2, #0
 800633e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006342:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8006346:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800634a:	4689      	mov	r9, r1
 800634c:	4692      	mov	sl, r2
 800634e:	eb1b 0509 	adds.w	r5, fp, r9
 8006352:	eb4c 060a 	adc.w	r6, ip, sl
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	685b      	ldr	r3, [r3, #4]
 800635a:	4619      	mov	r1, r3
 800635c:	f04f 0200 	mov.w	r2, #0
 8006360:	f04f 0300 	mov.w	r3, #0
 8006364:	f04f 0400 	mov.w	r4, #0
 8006368:	0094      	lsls	r4, r2, #2
 800636a:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800636e:	008b      	lsls	r3, r1, #2
 8006370:	461a      	mov	r2, r3
 8006372:	4623      	mov	r3, r4
 8006374:	4628      	mov	r0, r5
 8006376:	4631      	mov	r1, r6
 8006378:	f7fa fc16 	bl	8000ba8 <__aeabi_uldivmod>
 800637c:	4603      	mov	r3, r0
 800637e:	460c      	mov	r4, r1
 8006380:	461a      	mov	r2, r3
 8006382:	4b77      	ldr	r3, [pc, #476]	; (8006560 <UART_SetConfig+0x6f4>)
 8006384:	fba3 1302 	umull	r1, r3, r3, r2
 8006388:	095b      	lsrs	r3, r3, #5
 800638a:	2164      	movs	r1, #100	; 0x64
 800638c:	fb01 f303 	mul.w	r3, r1, r3
 8006390:	1ad3      	subs	r3, r2, r3
 8006392:	011b      	lsls	r3, r3, #4
 8006394:	3332      	adds	r3, #50	; 0x32
 8006396:	4a72      	ldr	r2, [pc, #456]	; (8006560 <UART_SetConfig+0x6f4>)
 8006398:	fba2 2303 	umull	r2, r3, r2, r3
 800639c:	095b      	lsrs	r3, r3, #5
 800639e:	f003 020f 	and.w	r2, r3, #15
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	681b      	ldr	r3, [r3, #0]
 80063a6:	4442      	add	r2, r8
 80063a8:	609a      	str	r2, [r3, #8]
 80063aa:	e0d0      	b.n	800654e <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 80063ac:	f7fe fb64 	bl	8004a78 <HAL_RCC_GetPCLK1Freq>
 80063b0:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80063b2:	68bb      	ldr	r3, [r7, #8]
 80063b4:	469a      	mov	sl, r3
 80063b6:	f04f 0b00 	mov.w	fp, #0
 80063ba:	46d0      	mov	r8, sl
 80063bc:	46d9      	mov	r9, fp
 80063be:	eb18 0308 	adds.w	r3, r8, r8
 80063c2:	eb49 0409 	adc.w	r4, r9, r9
 80063c6:	4698      	mov	r8, r3
 80063c8:	46a1      	mov	r9, r4
 80063ca:	eb18 080a 	adds.w	r8, r8, sl
 80063ce:	eb49 090b 	adc.w	r9, r9, fp
 80063d2:	f04f 0100 	mov.w	r1, #0
 80063d6:	f04f 0200 	mov.w	r2, #0
 80063da:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80063de:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80063e2:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80063e6:	4688      	mov	r8, r1
 80063e8:	4691      	mov	r9, r2
 80063ea:	eb1a 0508 	adds.w	r5, sl, r8
 80063ee:	eb4b 0609 	adc.w	r6, fp, r9
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	685b      	ldr	r3, [r3, #4]
 80063f6:	4619      	mov	r1, r3
 80063f8:	f04f 0200 	mov.w	r2, #0
 80063fc:	f04f 0300 	mov.w	r3, #0
 8006400:	f04f 0400 	mov.w	r4, #0
 8006404:	0094      	lsls	r4, r2, #2
 8006406:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800640a:	008b      	lsls	r3, r1, #2
 800640c:	461a      	mov	r2, r3
 800640e:	4623      	mov	r3, r4
 8006410:	4628      	mov	r0, r5
 8006412:	4631      	mov	r1, r6
 8006414:	f7fa fbc8 	bl	8000ba8 <__aeabi_uldivmod>
 8006418:	4603      	mov	r3, r0
 800641a:	460c      	mov	r4, r1
 800641c:	461a      	mov	r2, r3
 800641e:	4b50      	ldr	r3, [pc, #320]	; (8006560 <UART_SetConfig+0x6f4>)
 8006420:	fba3 2302 	umull	r2, r3, r3, r2
 8006424:	095b      	lsrs	r3, r3, #5
 8006426:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800642a:	68bb      	ldr	r3, [r7, #8]
 800642c:	469b      	mov	fp, r3
 800642e:	f04f 0c00 	mov.w	ip, #0
 8006432:	46d9      	mov	r9, fp
 8006434:	46e2      	mov	sl, ip
 8006436:	eb19 0309 	adds.w	r3, r9, r9
 800643a:	eb4a 040a 	adc.w	r4, sl, sl
 800643e:	4699      	mov	r9, r3
 8006440:	46a2      	mov	sl, r4
 8006442:	eb19 090b 	adds.w	r9, r9, fp
 8006446:	eb4a 0a0c 	adc.w	sl, sl, ip
 800644a:	f04f 0100 	mov.w	r1, #0
 800644e:	f04f 0200 	mov.w	r2, #0
 8006452:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006456:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800645a:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800645e:	4689      	mov	r9, r1
 8006460:	4692      	mov	sl, r2
 8006462:	eb1b 0509 	adds.w	r5, fp, r9
 8006466:	eb4c 060a 	adc.w	r6, ip, sl
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	685b      	ldr	r3, [r3, #4]
 800646e:	4619      	mov	r1, r3
 8006470:	f04f 0200 	mov.w	r2, #0
 8006474:	f04f 0300 	mov.w	r3, #0
 8006478:	f04f 0400 	mov.w	r4, #0
 800647c:	0094      	lsls	r4, r2, #2
 800647e:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8006482:	008b      	lsls	r3, r1, #2
 8006484:	461a      	mov	r2, r3
 8006486:	4623      	mov	r3, r4
 8006488:	4628      	mov	r0, r5
 800648a:	4631      	mov	r1, r6
 800648c:	f7fa fb8c 	bl	8000ba8 <__aeabi_uldivmod>
 8006490:	4603      	mov	r3, r0
 8006492:	460c      	mov	r4, r1
 8006494:	461a      	mov	r2, r3
 8006496:	4b32      	ldr	r3, [pc, #200]	; (8006560 <UART_SetConfig+0x6f4>)
 8006498:	fba3 1302 	umull	r1, r3, r3, r2
 800649c:	095b      	lsrs	r3, r3, #5
 800649e:	2164      	movs	r1, #100	; 0x64
 80064a0:	fb01 f303 	mul.w	r3, r1, r3
 80064a4:	1ad3      	subs	r3, r2, r3
 80064a6:	011b      	lsls	r3, r3, #4
 80064a8:	3332      	adds	r3, #50	; 0x32
 80064aa:	4a2d      	ldr	r2, [pc, #180]	; (8006560 <UART_SetConfig+0x6f4>)
 80064ac:	fba2 2303 	umull	r2, r3, r2, r3
 80064b0:	095b      	lsrs	r3, r3, #5
 80064b2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80064b6:	4498      	add	r8, r3
 80064b8:	68bb      	ldr	r3, [r7, #8]
 80064ba:	469b      	mov	fp, r3
 80064bc:	f04f 0c00 	mov.w	ip, #0
 80064c0:	46d9      	mov	r9, fp
 80064c2:	46e2      	mov	sl, ip
 80064c4:	eb19 0309 	adds.w	r3, r9, r9
 80064c8:	eb4a 040a 	adc.w	r4, sl, sl
 80064cc:	4699      	mov	r9, r3
 80064ce:	46a2      	mov	sl, r4
 80064d0:	eb19 090b 	adds.w	r9, r9, fp
 80064d4:	eb4a 0a0c 	adc.w	sl, sl, ip
 80064d8:	f04f 0100 	mov.w	r1, #0
 80064dc:	f04f 0200 	mov.w	r2, #0
 80064e0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80064e4:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80064e8:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80064ec:	4689      	mov	r9, r1
 80064ee:	4692      	mov	sl, r2
 80064f0:	eb1b 0509 	adds.w	r5, fp, r9
 80064f4:	eb4c 060a 	adc.w	r6, ip, sl
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	685b      	ldr	r3, [r3, #4]
 80064fc:	4619      	mov	r1, r3
 80064fe:	f04f 0200 	mov.w	r2, #0
 8006502:	f04f 0300 	mov.w	r3, #0
 8006506:	f04f 0400 	mov.w	r4, #0
 800650a:	0094      	lsls	r4, r2, #2
 800650c:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8006510:	008b      	lsls	r3, r1, #2
 8006512:	461a      	mov	r2, r3
 8006514:	4623      	mov	r3, r4
 8006516:	4628      	mov	r0, r5
 8006518:	4631      	mov	r1, r6
 800651a:	f7fa fb45 	bl	8000ba8 <__aeabi_uldivmod>
 800651e:	4603      	mov	r3, r0
 8006520:	460c      	mov	r4, r1
 8006522:	461a      	mov	r2, r3
 8006524:	4b0e      	ldr	r3, [pc, #56]	; (8006560 <UART_SetConfig+0x6f4>)
 8006526:	fba3 1302 	umull	r1, r3, r3, r2
 800652a:	095b      	lsrs	r3, r3, #5
 800652c:	2164      	movs	r1, #100	; 0x64
 800652e:	fb01 f303 	mul.w	r3, r1, r3
 8006532:	1ad3      	subs	r3, r2, r3
 8006534:	011b      	lsls	r3, r3, #4
 8006536:	3332      	adds	r3, #50	; 0x32
 8006538:	4a09      	ldr	r2, [pc, #36]	; (8006560 <UART_SetConfig+0x6f4>)
 800653a:	fba2 2303 	umull	r2, r3, r2, r3
 800653e:	095b      	lsrs	r3, r3, #5
 8006540:	f003 020f 	and.w	r2, r3, #15
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	681b      	ldr	r3, [r3, #0]
 8006548:	4442      	add	r2, r8
 800654a:	609a      	str	r2, [r3, #8]
}
 800654c:	e7ff      	b.n	800654e <UART_SetConfig+0x6e2>
 800654e:	bf00      	nop
 8006550:	3714      	adds	r7, #20
 8006552:	46bd      	mov	sp, r7
 8006554:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006558:	40011000 	.word	0x40011000
 800655c:	40011400 	.word	0x40011400
 8006560:	51eb851f 	.word	0x51eb851f

08006564 <clearerr>:
 8006564:	b538      	push	{r3, r4, r5, lr}
 8006566:	4b0e      	ldr	r3, [pc, #56]	; (80065a0 <clearerr+0x3c>)
 8006568:	681d      	ldr	r5, [r3, #0]
 800656a:	4604      	mov	r4, r0
 800656c:	b125      	cbz	r5, 8006578 <clearerr+0x14>
 800656e:	69ab      	ldr	r3, [r5, #24]
 8006570:	b913      	cbnz	r3, 8006578 <clearerr+0x14>
 8006572:	4628      	mov	r0, r5
 8006574:	f000 f862 	bl	800663c <__sinit>
 8006578:	4b0a      	ldr	r3, [pc, #40]	; (80065a4 <clearerr+0x40>)
 800657a:	429c      	cmp	r4, r3
 800657c:	d105      	bne.n	800658a <clearerr+0x26>
 800657e:	686c      	ldr	r4, [r5, #4]
 8006580:	89a3      	ldrh	r3, [r4, #12]
 8006582:	f023 0360 	bic.w	r3, r3, #96	; 0x60
 8006586:	81a3      	strh	r3, [r4, #12]
 8006588:	bd38      	pop	{r3, r4, r5, pc}
 800658a:	4b07      	ldr	r3, [pc, #28]	; (80065a8 <clearerr+0x44>)
 800658c:	429c      	cmp	r4, r3
 800658e:	d101      	bne.n	8006594 <clearerr+0x30>
 8006590:	68ac      	ldr	r4, [r5, #8]
 8006592:	e7f5      	b.n	8006580 <clearerr+0x1c>
 8006594:	4b05      	ldr	r3, [pc, #20]	; (80065ac <clearerr+0x48>)
 8006596:	429c      	cmp	r4, r3
 8006598:	bf08      	it	eq
 800659a:	68ec      	ldreq	r4, [r5, #12]
 800659c:	e7f0      	b.n	8006580 <clearerr+0x1c>
 800659e:	bf00      	nop
 80065a0:	20000014 	.word	0x20000014
 80065a4:	08009c84 	.word	0x08009c84
 80065a8:	08009ca4 	.word	0x08009ca4
 80065ac:	08009c64 	.word	0x08009c64

080065b0 <__errno>:
 80065b0:	4b01      	ldr	r3, [pc, #4]	; (80065b8 <__errno+0x8>)
 80065b2:	6818      	ldr	r0, [r3, #0]
 80065b4:	4770      	bx	lr
 80065b6:	bf00      	nop
 80065b8:	20000014 	.word	0x20000014

080065bc <std>:
 80065bc:	2300      	movs	r3, #0
 80065be:	b510      	push	{r4, lr}
 80065c0:	4604      	mov	r4, r0
 80065c2:	e9c0 3300 	strd	r3, r3, [r0]
 80065c6:	6083      	str	r3, [r0, #8]
 80065c8:	8181      	strh	r1, [r0, #12]
 80065ca:	6643      	str	r3, [r0, #100]	; 0x64
 80065cc:	81c2      	strh	r2, [r0, #14]
 80065ce:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80065d2:	6183      	str	r3, [r0, #24]
 80065d4:	4619      	mov	r1, r3
 80065d6:	2208      	movs	r2, #8
 80065d8:	305c      	adds	r0, #92	; 0x5c
 80065da:	f000 f90b 	bl	80067f4 <memset>
 80065de:	4b05      	ldr	r3, [pc, #20]	; (80065f4 <std+0x38>)
 80065e0:	6263      	str	r3, [r4, #36]	; 0x24
 80065e2:	4b05      	ldr	r3, [pc, #20]	; (80065f8 <std+0x3c>)
 80065e4:	62a3      	str	r3, [r4, #40]	; 0x28
 80065e6:	4b05      	ldr	r3, [pc, #20]	; (80065fc <std+0x40>)
 80065e8:	62e3      	str	r3, [r4, #44]	; 0x2c
 80065ea:	4b05      	ldr	r3, [pc, #20]	; (8006600 <std+0x44>)
 80065ec:	6224      	str	r4, [r4, #32]
 80065ee:	6323      	str	r3, [r4, #48]	; 0x30
 80065f0:	bd10      	pop	{r4, pc}
 80065f2:	bf00      	nop
 80065f4:	080072b1 	.word	0x080072b1
 80065f8:	080072d3 	.word	0x080072d3
 80065fc:	0800730b 	.word	0x0800730b
 8006600:	0800732f 	.word	0x0800732f

08006604 <_cleanup_r>:
 8006604:	4901      	ldr	r1, [pc, #4]	; (800660c <_cleanup_r+0x8>)
 8006606:	f000 b8a1 	b.w	800674c <_fwalk_reent>
 800660a:	bf00      	nop
 800660c:	08008295 	.word	0x08008295

08006610 <__sfmoreglue>:
 8006610:	b570      	push	{r4, r5, r6, lr}
 8006612:	1e4a      	subs	r2, r1, #1
 8006614:	2568      	movs	r5, #104	; 0x68
 8006616:	4355      	muls	r5, r2
 8006618:	460e      	mov	r6, r1
 800661a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800661e:	f000 f8f1 	bl	8006804 <_malloc_r>
 8006622:	4604      	mov	r4, r0
 8006624:	b140      	cbz	r0, 8006638 <__sfmoreglue+0x28>
 8006626:	2100      	movs	r1, #0
 8006628:	e9c0 1600 	strd	r1, r6, [r0]
 800662c:	300c      	adds	r0, #12
 800662e:	60a0      	str	r0, [r4, #8]
 8006630:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8006634:	f000 f8de 	bl	80067f4 <memset>
 8006638:	4620      	mov	r0, r4
 800663a:	bd70      	pop	{r4, r5, r6, pc}

0800663c <__sinit>:
 800663c:	6983      	ldr	r3, [r0, #24]
 800663e:	b510      	push	{r4, lr}
 8006640:	4604      	mov	r4, r0
 8006642:	bb33      	cbnz	r3, 8006692 <__sinit+0x56>
 8006644:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 8006648:	6503      	str	r3, [r0, #80]	; 0x50
 800664a:	4b12      	ldr	r3, [pc, #72]	; (8006694 <__sinit+0x58>)
 800664c:	4a12      	ldr	r2, [pc, #72]	; (8006698 <__sinit+0x5c>)
 800664e:	681b      	ldr	r3, [r3, #0]
 8006650:	6282      	str	r2, [r0, #40]	; 0x28
 8006652:	4298      	cmp	r0, r3
 8006654:	bf04      	itt	eq
 8006656:	2301      	moveq	r3, #1
 8006658:	6183      	streq	r3, [r0, #24]
 800665a:	f000 f81f 	bl	800669c <__sfp>
 800665e:	6060      	str	r0, [r4, #4]
 8006660:	4620      	mov	r0, r4
 8006662:	f000 f81b 	bl	800669c <__sfp>
 8006666:	60a0      	str	r0, [r4, #8]
 8006668:	4620      	mov	r0, r4
 800666a:	f000 f817 	bl	800669c <__sfp>
 800666e:	2200      	movs	r2, #0
 8006670:	60e0      	str	r0, [r4, #12]
 8006672:	2104      	movs	r1, #4
 8006674:	6860      	ldr	r0, [r4, #4]
 8006676:	f7ff ffa1 	bl	80065bc <std>
 800667a:	2201      	movs	r2, #1
 800667c:	2109      	movs	r1, #9
 800667e:	68a0      	ldr	r0, [r4, #8]
 8006680:	f7ff ff9c 	bl	80065bc <std>
 8006684:	2202      	movs	r2, #2
 8006686:	2112      	movs	r1, #18
 8006688:	68e0      	ldr	r0, [r4, #12]
 800668a:	f7ff ff97 	bl	80065bc <std>
 800668e:	2301      	movs	r3, #1
 8006690:	61a3      	str	r3, [r4, #24]
 8006692:	bd10      	pop	{r4, pc}
 8006694:	08009cc4 	.word	0x08009cc4
 8006698:	08006605 	.word	0x08006605

0800669c <__sfp>:
 800669c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800669e:	4b1b      	ldr	r3, [pc, #108]	; (800670c <__sfp+0x70>)
 80066a0:	681e      	ldr	r6, [r3, #0]
 80066a2:	69b3      	ldr	r3, [r6, #24]
 80066a4:	4607      	mov	r7, r0
 80066a6:	b913      	cbnz	r3, 80066ae <__sfp+0x12>
 80066a8:	4630      	mov	r0, r6
 80066aa:	f7ff ffc7 	bl	800663c <__sinit>
 80066ae:	3648      	adds	r6, #72	; 0x48
 80066b0:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80066b4:	3b01      	subs	r3, #1
 80066b6:	d503      	bpl.n	80066c0 <__sfp+0x24>
 80066b8:	6833      	ldr	r3, [r6, #0]
 80066ba:	b133      	cbz	r3, 80066ca <__sfp+0x2e>
 80066bc:	6836      	ldr	r6, [r6, #0]
 80066be:	e7f7      	b.n	80066b0 <__sfp+0x14>
 80066c0:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80066c4:	b16d      	cbz	r5, 80066e2 <__sfp+0x46>
 80066c6:	3468      	adds	r4, #104	; 0x68
 80066c8:	e7f4      	b.n	80066b4 <__sfp+0x18>
 80066ca:	2104      	movs	r1, #4
 80066cc:	4638      	mov	r0, r7
 80066ce:	f7ff ff9f 	bl	8006610 <__sfmoreglue>
 80066d2:	6030      	str	r0, [r6, #0]
 80066d4:	2800      	cmp	r0, #0
 80066d6:	d1f1      	bne.n	80066bc <__sfp+0x20>
 80066d8:	230c      	movs	r3, #12
 80066da:	603b      	str	r3, [r7, #0]
 80066dc:	4604      	mov	r4, r0
 80066de:	4620      	mov	r0, r4
 80066e0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80066e2:	4b0b      	ldr	r3, [pc, #44]	; (8006710 <__sfp+0x74>)
 80066e4:	6665      	str	r5, [r4, #100]	; 0x64
 80066e6:	e9c4 5500 	strd	r5, r5, [r4]
 80066ea:	60a5      	str	r5, [r4, #8]
 80066ec:	e9c4 3503 	strd	r3, r5, [r4, #12]
 80066f0:	e9c4 5505 	strd	r5, r5, [r4, #20]
 80066f4:	2208      	movs	r2, #8
 80066f6:	4629      	mov	r1, r5
 80066f8:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80066fc:	f000 f87a 	bl	80067f4 <memset>
 8006700:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8006704:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8006708:	e7e9      	b.n	80066de <__sfp+0x42>
 800670a:	bf00      	nop
 800670c:	08009cc4 	.word	0x08009cc4
 8006710:	ffff0001 	.word	0xffff0001

08006714 <_fwalk>:
 8006714:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006718:	4688      	mov	r8, r1
 800671a:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800671e:	2600      	movs	r6, #0
 8006720:	b914      	cbnz	r4, 8006728 <_fwalk+0x14>
 8006722:	4630      	mov	r0, r6
 8006724:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006728:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 800672c:	3f01      	subs	r7, #1
 800672e:	d501      	bpl.n	8006734 <_fwalk+0x20>
 8006730:	6824      	ldr	r4, [r4, #0]
 8006732:	e7f5      	b.n	8006720 <_fwalk+0xc>
 8006734:	89ab      	ldrh	r3, [r5, #12]
 8006736:	2b01      	cmp	r3, #1
 8006738:	d906      	bls.n	8006748 <_fwalk+0x34>
 800673a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800673e:	3301      	adds	r3, #1
 8006740:	d002      	beq.n	8006748 <_fwalk+0x34>
 8006742:	4628      	mov	r0, r5
 8006744:	47c0      	blx	r8
 8006746:	4306      	orrs	r6, r0
 8006748:	3568      	adds	r5, #104	; 0x68
 800674a:	e7ef      	b.n	800672c <_fwalk+0x18>

0800674c <_fwalk_reent>:
 800674c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006750:	4680      	mov	r8, r0
 8006752:	4689      	mov	r9, r1
 8006754:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8006758:	2600      	movs	r6, #0
 800675a:	b914      	cbnz	r4, 8006762 <_fwalk_reent+0x16>
 800675c:	4630      	mov	r0, r6
 800675e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006762:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 8006766:	3f01      	subs	r7, #1
 8006768:	d501      	bpl.n	800676e <_fwalk_reent+0x22>
 800676a:	6824      	ldr	r4, [r4, #0]
 800676c:	e7f5      	b.n	800675a <_fwalk_reent+0xe>
 800676e:	89ab      	ldrh	r3, [r5, #12]
 8006770:	2b01      	cmp	r3, #1
 8006772:	d907      	bls.n	8006784 <_fwalk_reent+0x38>
 8006774:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006778:	3301      	adds	r3, #1
 800677a:	d003      	beq.n	8006784 <_fwalk_reent+0x38>
 800677c:	4629      	mov	r1, r5
 800677e:	4640      	mov	r0, r8
 8006780:	47c8      	blx	r9
 8006782:	4306      	orrs	r6, r0
 8006784:	3568      	adds	r5, #104	; 0x68
 8006786:	e7ee      	b.n	8006766 <_fwalk_reent+0x1a>

08006788 <getchar>:
 8006788:	4b07      	ldr	r3, [pc, #28]	; (80067a8 <getchar+0x20>)
 800678a:	b510      	push	{r4, lr}
 800678c:	681c      	ldr	r4, [r3, #0]
 800678e:	b124      	cbz	r4, 800679a <getchar+0x12>
 8006790:	69a3      	ldr	r3, [r4, #24]
 8006792:	b913      	cbnz	r3, 800679a <getchar+0x12>
 8006794:	4620      	mov	r0, r4
 8006796:	f7ff ff51 	bl	800663c <__sinit>
 800679a:	6861      	ldr	r1, [r4, #4]
 800679c:	4620      	mov	r0, r4
 800679e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80067a2:	f001 bdb3 	b.w	800830c <_getc_r>
 80067a6:	bf00      	nop
 80067a8:	20000014 	.word	0x20000014

080067ac <__libc_init_array>:
 80067ac:	b570      	push	{r4, r5, r6, lr}
 80067ae:	4e0d      	ldr	r6, [pc, #52]	; (80067e4 <__libc_init_array+0x38>)
 80067b0:	4c0d      	ldr	r4, [pc, #52]	; (80067e8 <__libc_init_array+0x3c>)
 80067b2:	1ba4      	subs	r4, r4, r6
 80067b4:	10a4      	asrs	r4, r4, #2
 80067b6:	2500      	movs	r5, #0
 80067b8:	42a5      	cmp	r5, r4
 80067ba:	d109      	bne.n	80067d0 <__libc_init_array+0x24>
 80067bc:	4e0b      	ldr	r6, [pc, #44]	; (80067ec <__libc_init_array+0x40>)
 80067be:	4c0c      	ldr	r4, [pc, #48]	; (80067f0 <__libc_init_array+0x44>)
 80067c0:	f002 fc2c 	bl	800901c <_init>
 80067c4:	1ba4      	subs	r4, r4, r6
 80067c6:	10a4      	asrs	r4, r4, #2
 80067c8:	2500      	movs	r5, #0
 80067ca:	42a5      	cmp	r5, r4
 80067cc:	d105      	bne.n	80067da <__libc_init_array+0x2e>
 80067ce:	bd70      	pop	{r4, r5, r6, pc}
 80067d0:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80067d4:	4798      	blx	r3
 80067d6:	3501      	adds	r5, #1
 80067d8:	e7ee      	b.n	80067b8 <__libc_init_array+0xc>
 80067da:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80067de:	4798      	blx	r3
 80067e0:	3501      	adds	r5, #1
 80067e2:	e7f2      	b.n	80067ca <__libc_init_array+0x1e>
 80067e4:	08009f30 	.word	0x08009f30
 80067e8:	08009f30 	.word	0x08009f30
 80067ec:	08009f30 	.word	0x08009f30
 80067f0:	08009f34 	.word	0x08009f34

080067f4 <memset>:
 80067f4:	4402      	add	r2, r0
 80067f6:	4603      	mov	r3, r0
 80067f8:	4293      	cmp	r3, r2
 80067fa:	d100      	bne.n	80067fe <memset+0xa>
 80067fc:	4770      	bx	lr
 80067fe:	f803 1b01 	strb.w	r1, [r3], #1
 8006802:	e7f9      	b.n	80067f8 <memset+0x4>

08006804 <_malloc_r>:
 8006804:	b570      	push	{r4, r5, r6, lr}
 8006806:	1ccd      	adds	r5, r1, #3
 8006808:	f025 0503 	bic.w	r5, r5, #3
 800680c:	3508      	adds	r5, #8
 800680e:	2d0c      	cmp	r5, #12
 8006810:	bf38      	it	cc
 8006812:	250c      	movcc	r5, #12
 8006814:	2d00      	cmp	r5, #0
 8006816:	4606      	mov	r6, r0
 8006818:	db01      	blt.n	800681e <_malloc_r+0x1a>
 800681a:	42a9      	cmp	r1, r5
 800681c:	d903      	bls.n	8006826 <_malloc_r+0x22>
 800681e:	230c      	movs	r3, #12
 8006820:	6033      	str	r3, [r6, #0]
 8006822:	2000      	movs	r0, #0
 8006824:	bd70      	pop	{r4, r5, r6, pc}
 8006826:	f001 fe34 	bl	8008492 <__malloc_lock>
 800682a:	4a21      	ldr	r2, [pc, #132]	; (80068b0 <_malloc_r+0xac>)
 800682c:	6814      	ldr	r4, [r2, #0]
 800682e:	4621      	mov	r1, r4
 8006830:	b991      	cbnz	r1, 8006858 <_malloc_r+0x54>
 8006832:	4c20      	ldr	r4, [pc, #128]	; (80068b4 <_malloc_r+0xb0>)
 8006834:	6823      	ldr	r3, [r4, #0]
 8006836:	b91b      	cbnz	r3, 8006840 <_malloc_r+0x3c>
 8006838:	4630      	mov	r0, r6
 800683a:	f000 fd29 	bl	8007290 <_sbrk_r>
 800683e:	6020      	str	r0, [r4, #0]
 8006840:	4629      	mov	r1, r5
 8006842:	4630      	mov	r0, r6
 8006844:	f000 fd24 	bl	8007290 <_sbrk_r>
 8006848:	1c43      	adds	r3, r0, #1
 800684a:	d124      	bne.n	8006896 <_malloc_r+0x92>
 800684c:	230c      	movs	r3, #12
 800684e:	6033      	str	r3, [r6, #0]
 8006850:	4630      	mov	r0, r6
 8006852:	f001 fe1f 	bl	8008494 <__malloc_unlock>
 8006856:	e7e4      	b.n	8006822 <_malloc_r+0x1e>
 8006858:	680b      	ldr	r3, [r1, #0]
 800685a:	1b5b      	subs	r3, r3, r5
 800685c:	d418      	bmi.n	8006890 <_malloc_r+0x8c>
 800685e:	2b0b      	cmp	r3, #11
 8006860:	d90f      	bls.n	8006882 <_malloc_r+0x7e>
 8006862:	600b      	str	r3, [r1, #0]
 8006864:	50cd      	str	r5, [r1, r3]
 8006866:	18cc      	adds	r4, r1, r3
 8006868:	4630      	mov	r0, r6
 800686a:	f001 fe13 	bl	8008494 <__malloc_unlock>
 800686e:	f104 000b 	add.w	r0, r4, #11
 8006872:	1d23      	adds	r3, r4, #4
 8006874:	f020 0007 	bic.w	r0, r0, #7
 8006878:	1ac3      	subs	r3, r0, r3
 800687a:	d0d3      	beq.n	8006824 <_malloc_r+0x20>
 800687c:	425a      	negs	r2, r3
 800687e:	50e2      	str	r2, [r4, r3]
 8006880:	e7d0      	b.n	8006824 <_malloc_r+0x20>
 8006882:	428c      	cmp	r4, r1
 8006884:	684b      	ldr	r3, [r1, #4]
 8006886:	bf16      	itet	ne
 8006888:	6063      	strne	r3, [r4, #4]
 800688a:	6013      	streq	r3, [r2, #0]
 800688c:	460c      	movne	r4, r1
 800688e:	e7eb      	b.n	8006868 <_malloc_r+0x64>
 8006890:	460c      	mov	r4, r1
 8006892:	6849      	ldr	r1, [r1, #4]
 8006894:	e7cc      	b.n	8006830 <_malloc_r+0x2c>
 8006896:	1cc4      	adds	r4, r0, #3
 8006898:	f024 0403 	bic.w	r4, r4, #3
 800689c:	42a0      	cmp	r0, r4
 800689e:	d005      	beq.n	80068ac <_malloc_r+0xa8>
 80068a0:	1a21      	subs	r1, r4, r0
 80068a2:	4630      	mov	r0, r6
 80068a4:	f000 fcf4 	bl	8007290 <_sbrk_r>
 80068a8:	3001      	adds	r0, #1
 80068aa:	d0cf      	beq.n	800684c <_malloc_r+0x48>
 80068ac:	6025      	str	r5, [r4, #0]
 80068ae:	e7db      	b.n	8006868 <_malloc_r+0x64>
 80068b0:	2000060c 	.word	0x2000060c
 80068b4:	20000610 	.word	0x20000610

080068b8 <__cvt>:
 80068b8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80068bc:	ec55 4b10 	vmov	r4, r5, d0
 80068c0:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 80068c2:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 80068c6:	2d00      	cmp	r5, #0
 80068c8:	460e      	mov	r6, r1
 80068ca:	4691      	mov	r9, r2
 80068cc:	4619      	mov	r1, r3
 80068ce:	bfb8      	it	lt
 80068d0:	4622      	movlt	r2, r4
 80068d2:	462b      	mov	r3, r5
 80068d4:	f027 0720 	bic.w	r7, r7, #32
 80068d8:	bfbb      	ittet	lt
 80068da:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 80068de:	461d      	movlt	r5, r3
 80068e0:	2300      	movge	r3, #0
 80068e2:	232d      	movlt	r3, #45	; 0x2d
 80068e4:	bfb8      	it	lt
 80068e6:	4614      	movlt	r4, r2
 80068e8:	2f46      	cmp	r7, #70	; 0x46
 80068ea:	700b      	strb	r3, [r1, #0]
 80068ec:	d004      	beq.n	80068f8 <__cvt+0x40>
 80068ee:	2f45      	cmp	r7, #69	; 0x45
 80068f0:	d100      	bne.n	80068f4 <__cvt+0x3c>
 80068f2:	3601      	adds	r6, #1
 80068f4:	2102      	movs	r1, #2
 80068f6:	e000      	b.n	80068fa <__cvt+0x42>
 80068f8:	2103      	movs	r1, #3
 80068fa:	ab03      	add	r3, sp, #12
 80068fc:	9301      	str	r3, [sp, #4]
 80068fe:	ab02      	add	r3, sp, #8
 8006900:	9300      	str	r3, [sp, #0]
 8006902:	4632      	mov	r2, r6
 8006904:	4653      	mov	r3, sl
 8006906:	ec45 4b10 	vmov	d0, r4, r5
 800690a:	f000 fe85 	bl	8007618 <_dtoa_r>
 800690e:	2f47      	cmp	r7, #71	; 0x47
 8006910:	4680      	mov	r8, r0
 8006912:	d102      	bne.n	800691a <__cvt+0x62>
 8006914:	f019 0f01 	tst.w	r9, #1
 8006918:	d026      	beq.n	8006968 <__cvt+0xb0>
 800691a:	2f46      	cmp	r7, #70	; 0x46
 800691c:	eb08 0906 	add.w	r9, r8, r6
 8006920:	d111      	bne.n	8006946 <__cvt+0x8e>
 8006922:	f898 3000 	ldrb.w	r3, [r8]
 8006926:	2b30      	cmp	r3, #48	; 0x30
 8006928:	d10a      	bne.n	8006940 <__cvt+0x88>
 800692a:	2200      	movs	r2, #0
 800692c:	2300      	movs	r3, #0
 800692e:	4620      	mov	r0, r4
 8006930:	4629      	mov	r1, r5
 8006932:	f7fa f8c9 	bl	8000ac8 <__aeabi_dcmpeq>
 8006936:	b918      	cbnz	r0, 8006940 <__cvt+0x88>
 8006938:	f1c6 0601 	rsb	r6, r6, #1
 800693c:	f8ca 6000 	str.w	r6, [sl]
 8006940:	f8da 3000 	ldr.w	r3, [sl]
 8006944:	4499      	add	r9, r3
 8006946:	2200      	movs	r2, #0
 8006948:	2300      	movs	r3, #0
 800694a:	4620      	mov	r0, r4
 800694c:	4629      	mov	r1, r5
 800694e:	f7fa f8bb 	bl	8000ac8 <__aeabi_dcmpeq>
 8006952:	b938      	cbnz	r0, 8006964 <__cvt+0xac>
 8006954:	2230      	movs	r2, #48	; 0x30
 8006956:	9b03      	ldr	r3, [sp, #12]
 8006958:	454b      	cmp	r3, r9
 800695a:	d205      	bcs.n	8006968 <__cvt+0xb0>
 800695c:	1c59      	adds	r1, r3, #1
 800695e:	9103      	str	r1, [sp, #12]
 8006960:	701a      	strb	r2, [r3, #0]
 8006962:	e7f8      	b.n	8006956 <__cvt+0x9e>
 8006964:	f8cd 900c 	str.w	r9, [sp, #12]
 8006968:	9b03      	ldr	r3, [sp, #12]
 800696a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800696c:	eba3 0308 	sub.w	r3, r3, r8
 8006970:	4640      	mov	r0, r8
 8006972:	6013      	str	r3, [r2, #0]
 8006974:	b004      	add	sp, #16
 8006976:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0800697a <__exponent>:
 800697a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800697c:	2900      	cmp	r1, #0
 800697e:	4604      	mov	r4, r0
 8006980:	bfba      	itte	lt
 8006982:	4249      	neglt	r1, r1
 8006984:	232d      	movlt	r3, #45	; 0x2d
 8006986:	232b      	movge	r3, #43	; 0x2b
 8006988:	2909      	cmp	r1, #9
 800698a:	f804 2b02 	strb.w	r2, [r4], #2
 800698e:	7043      	strb	r3, [r0, #1]
 8006990:	dd20      	ble.n	80069d4 <__exponent+0x5a>
 8006992:	f10d 0307 	add.w	r3, sp, #7
 8006996:	461f      	mov	r7, r3
 8006998:	260a      	movs	r6, #10
 800699a:	fb91 f5f6 	sdiv	r5, r1, r6
 800699e:	fb06 1115 	mls	r1, r6, r5, r1
 80069a2:	3130      	adds	r1, #48	; 0x30
 80069a4:	2d09      	cmp	r5, #9
 80069a6:	f803 1c01 	strb.w	r1, [r3, #-1]
 80069aa:	f103 32ff 	add.w	r2, r3, #4294967295
 80069ae:	4629      	mov	r1, r5
 80069b0:	dc09      	bgt.n	80069c6 <__exponent+0x4c>
 80069b2:	3130      	adds	r1, #48	; 0x30
 80069b4:	3b02      	subs	r3, #2
 80069b6:	f802 1c01 	strb.w	r1, [r2, #-1]
 80069ba:	42bb      	cmp	r3, r7
 80069bc:	4622      	mov	r2, r4
 80069be:	d304      	bcc.n	80069ca <__exponent+0x50>
 80069c0:	1a10      	subs	r0, r2, r0
 80069c2:	b003      	add	sp, #12
 80069c4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80069c6:	4613      	mov	r3, r2
 80069c8:	e7e7      	b.n	800699a <__exponent+0x20>
 80069ca:	f813 2b01 	ldrb.w	r2, [r3], #1
 80069ce:	f804 2b01 	strb.w	r2, [r4], #1
 80069d2:	e7f2      	b.n	80069ba <__exponent+0x40>
 80069d4:	2330      	movs	r3, #48	; 0x30
 80069d6:	4419      	add	r1, r3
 80069d8:	7083      	strb	r3, [r0, #2]
 80069da:	1d02      	adds	r2, r0, #4
 80069dc:	70c1      	strb	r1, [r0, #3]
 80069de:	e7ef      	b.n	80069c0 <__exponent+0x46>

080069e0 <_printf_float>:
 80069e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80069e4:	b08d      	sub	sp, #52	; 0x34
 80069e6:	460c      	mov	r4, r1
 80069e8:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 80069ec:	4616      	mov	r6, r2
 80069ee:	461f      	mov	r7, r3
 80069f0:	4605      	mov	r5, r0
 80069f2:	f001 fcb7 	bl	8008364 <_localeconv_r>
 80069f6:	6803      	ldr	r3, [r0, #0]
 80069f8:	9304      	str	r3, [sp, #16]
 80069fa:	4618      	mov	r0, r3
 80069fc:	f7f9 fbe8 	bl	80001d0 <strlen>
 8006a00:	2300      	movs	r3, #0
 8006a02:	930a      	str	r3, [sp, #40]	; 0x28
 8006a04:	f8d8 3000 	ldr.w	r3, [r8]
 8006a08:	9005      	str	r0, [sp, #20]
 8006a0a:	3307      	adds	r3, #7
 8006a0c:	f023 0307 	bic.w	r3, r3, #7
 8006a10:	f103 0208 	add.w	r2, r3, #8
 8006a14:	f894 a018 	ldrb.w	sl, [r4, #24]
 8006a18:	f8d4 b000 	ldr.w	fp, [r4]
 8006a1c:	f8c8 2000 	str.w	r2, [r8]
 8006a20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a24:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8006a28:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8006a2c:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8006a30:	9307      	str	r3, [sp, #28]
 8006a32:	f8cd 8018 	str.w	r8, [sp, #24]
 8006a36:	f04f 32ff 	mov.w	r2, #4294967295
 8006a3a:	4ba7      	ldr	r3, [pc, #668]	; (8006cd8 <_printf_float+0x2f8>)
 8006a3c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006a40:	f7fa f874 	bl	8000b2c <__aeabi_dcmpun>
 8006a44:	bb70      	cbnz	r0, 8006aa4 <_printf_float+0xc4>
 8006a46:	f04f 32ff 	mov.w	r2, #4294967295
 8006a4a:	4ba3      	ldr	r3, [pc, #652]	; (8006cd8 <_printf_float+0x2f8>)
 8006a4c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006a50:	f7fa f84e 	bl	8000af0 <__aeabi_dcmple>
 8006a54:	bb30      	cbnz	r0, 8006aa4 <_printf_float+0xc4>
 8006a56:	2200      	movs	r2, #0
 8006a58:	2300      	movs	r3, #0
 8006a5a:	4640      	mov	r0, r8
 8006a5c:	4649      	mov	r1, r9
 8006a5e:	f7fa f83d 	bl	8000adc <__aeabi_dcmplt>
 8006a62:	b110      	cbz	r0, 8006a6a <_printf_float+0x8a>
 8006a64:	232d      	movs	r3, #45	; 0x2d
 8006a66:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006a6a:	4a9c      	ldr	r2, [pc, #624]	; (8006cdc <_printf_float+0x2fc>)
 8006a6c:	4b9c      	ldr	r3, [pc, #624]	; (8006ce0 <_printf_float+0x300>)
 8006a6e:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 8006a72:	bf8c      	ite	hi
 8006a74:	4690      	movhi	r8, r2
 8006a76:	4698      	movls	r8, r3
 8006a78:	2303      	movs	r3, #3
 8006a7a:	f02b 0204 	bic.w	r2, fp, #4
 8006a7e:	6123      	str	r3, [r4, #16]
 8006a80:	6022      	str	r2, [r4, #0]
 8006a82:	f04f 0900 	mov.w	r9, #0
 8006a86:	9700      	str	r7, [sp, #0]
 8006a88:	4633      	mov	r3, r6
 8006a8a:	aa0b      	add	r2, sp, #44	; 0x2c
 8006a8c:	4621      	mov	r1, r4
 8006a8e:	4628      	mov	r0, r5
 8006a90:	f000 f9e6 	bl	8006e60 <_printf_common>
 8006a94:	3001      	adds	r0, #1
 8006a96:	f040 808d 	bne.w	8006bb4 <_printf_float+0x1d4>
 8006a9a:	f04f 30ff 	mov.w	r0, #4294967295
 8006a9e:	b00d      	add	sp, #52	; 0x34
 8006aa0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006aa4:	4642      	mov	r2, r8
 8006aa6:	464b      	mov	r3, r9
 8006aa8:	4640      	mov	r0, r8
 8006aaa:	4649      	mov	r1, r9
 8006aac:	f7fa f83e 	bl	8000b2c <__aeabi_dcmpun>
 8006ab0:	b110      	cbz	r0, 8006ab8 <_printf_float+0xd8>
 8006ab2:	4a8c      	ldr	r2, [pc, #560]	; (8006ce4 <_printf_float+0x304>)
 8006ab4:	4b8c      	ldr	r3, [pc, #560]	; (8006ce8 <_printf_float+0x308>)
 8006ab6:	e7da      	b.n	8006a6e <_printf_float+0x8e>
 8006ab8:	6861      	ldr	r1, [r4, #4]
 8006aba:	1c4b      	adds	r3, r1, #1
 8006abc:	f44b 6280 	orr.w	r2, fp, #1024	; 0x400
 8006ac0:	a80a      	add	r0, sp, #40	; 0x28
 8006ac2:	d13e      	bne.n	8006b42 <_printf_float+0x162>
 8006ac4:	2306      	movs	r3, #6
 8006ac6:	6063      	str	r3, [r4, #4]
 8006ac8:	2300      	movs	r3, #0
 8006aca:	e9cd 0302 	strd	r0, r3, [sp, #8]
 8006ace:	ab09      	add	r3, sp, #36	; 0x24
 8006ad0:	9300      	str	r3, [sp, #0]
 8006ad2:	ec49 8b10 	vmov	d0, r8, r9
 8006ad6:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8006ada:	6022      	str	r2, [r4, #0]
 8006adc:	f8cd a004 	str.w	sl, [sp, #4]
 8006ae0:	6861      	ldr	r1, [r4, #4]
 8006ae2:	4628      	mov	r0, r5
 8006ae4:	f7ff fee8 	bl	80068b8 <__cvt>
 8006ae8:	f00a 03df 	and.w	r3, sl, #223	; 0xdf
 8006aec:	2b47      	cmp	r3, #71	; 0x47
 8006aee:	4680      	mov	r8, r0
 8006af0:	d109      	bne.n	8006b06 <_printf_float+0x126>
 8006af2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006af4:	1cd8      	adds	r0, r3, #3
 8006af6:	db02      	blt.n	8006afe <_printf_float+0x11e>
 8006af8:	6862      	ldr	r2, [r4, #4]
 8006afa:	4293      	cmp	r3, r2
 8006afc:	dd47      	ble.n	8006b8e <_printf_float+0x1ae>
 8006afe:	f1aa 0a02 	sub.w	sl, sl, #2
 8006b02:	fa5f fa8a 	uxtb.w	sl, sl
 8006b06:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 8006b0a:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006b0c:	d824      	bhi.n	8006b58 <_printf_float+0x178>
 8006b0e:	3901      	subs	r1, #1
 8006b10:	4652      	mov	r2, sl
 8006b12:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8006b16:	9109      	str	r1, [sp, #36]	; 0x24
 8006b18:	f7ff ff2f 	bl	800697a <__exponent>
 8006b1c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006b1e:	1813      	adds	r3, r2, r0
 8006b20:	2a01      	cmp	r2, #1
 8006b22:	4681      	mov	r9, r0
 8006b24:	6123      	str	r3, [r4, #16]
 8006b26:	dc02      	bgt.n	8006b2e <_printf_float+0x14e>
 8006b28:	6822      	ldr	r2, [r4, #0]
 8006b2a:	07d1      	lsls	r1, r2, #31
 8006b2c:	d501      	bpl.n	8006b32 <_printf_float+0x152>
 8006b2e:	3301      	adds	r3, #1
 8006b30:	6123      	str	r3, [r4, #16]
 8006b32:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8006b36:	2b00      	cmp	r3, #0
 8006b38:	d0a5      	beq.n	8006a86 <_printf_float+0xa6>
 8006b3a:	232d      	movs	r3, #45	; 0x2d
 8006b3c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006b40:	e7a1      	b.n	8006a86 <_printf_float+0xa6>
 8006b42:	f1ba 0f67 	cmp.w	sl, #103	; 0x67
 8006b46:	f000 8177 	beq.w	8006e38 <_printf_float+0x458>
 8006b4a:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 8006b4e:	d1bb      	bne.n	8006ac8 <_printf_float+0xe8>
 8006b50:	2900      	cmp	r1, #0
 8006b52:	d1b9      	bne.n	8006ac8 <_printf_float+0xe8>
 8006b54:	2301      	movs	r3, #1
 8006b56:	e7b6      	b.n	8006ac6 <_printf_float+0xe6>
 8006b58:	f1ba 0f66 	cmp.w	sl, #102	; 0x66
 8006b5c:	d119      	bne.n	8006b92 <_printf_float+0x1b2>
 8006b5e:	2900      	cmp	r1, #0
 8006b60:	6863      	ldr	r3, [r4, #4]
 8006b62:	dd0c      	ble.n	8006b7e <_printf_float+0x19e>
 8006b64:	6121      	str	r1, [r4, #16]
 8006b66:	b913      	cbnz	r3, 8006b6e <_printf_float+0x18e>
 8006b68:	6822      	ldr	r2, [r4, #0]
 8006b6a:	07d2      	lsls	r2, r2, #31
 8006b6c:	d502      	bpl.n	8006b74 <_printf_float+0x194>
 8006b6e:	3301      	adds	r3, #1
 8006b70:	440b      	add	r3, r1
 8006b72:	6123      	str	r3, [r4, #16]
 8006b74:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006b76:	65a3      	str	r3, [r4, #88]	; 0x58
 8006b78:	f04f 0900 	mov.w	r9, #0
 8006b7c:	e7d9      	b.n	8006b32 <_printf_float+0x152>
 8006b7e:	b913      	cbnz	r3, 8006b86 <_printf_float+0x1a6>
 8006b80:	6822      	ldr	r2, [r4, #0]
 8006b82:	07d0      	lsls	r0, r2, #31
 8006b84:	d501      	bpl.n	8006b8a <_printf_float+0x1aa>
 8006b86:	3302      	adds	r3, #2
 8006b88:	e7f3      	b.n	8006b72 <_printf_float+0x192>
 8006b8a:	2301      	movs	r3, #1
 8006b8c:	e7f1      	b.n	8006b72 <_printf_float+0x192>
 8006b8e:	f04f 0a67 	mov.w	sl, #103	; 0x67
 8006b92:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8006b96:	4293      	cmp	r3, r2
 8006b98:	db05      	blt.n	8006ba6 <_printf_float+0x1c6>
 8006b9a:	6822      	ldr	r2, [r4, #0]
 8006b9c:	6123      	str	r3, [r4, #16]
 8006b9e:	07d1      	lsls	r1, r2, #31
 8006ba0:	d5e8      	bpl.n	8006b74 <_printf_float+0x194>
 8006ba2:	3301      	adds	r3, #1
 8006ba4:	e7e5      	b.n	8006b72 <_printf_float+0x192>
 8006ba6:	2b00      	cmp	r3, #0
 8006ba8:	bfd4      	ite	le
 8006baa:	f1c3 0302 	rsble	r3, r3, #2
 8006bae:	2301      	movgt	r3, #1
 8006bb0:	4413      	add	r3, r2
 8006bb2:	e7de      	b.n	8006b72 <_printf_float+0x192>
 8006bb4:	6823      	ldr	r3, [r4, #0]
 8006bb6:	055a      	lsls	r2, r3, #21
 8006bb8:	d407      	bmi.n	8006bca <_printf_float+0x1ea>
 8006bba:	6923      	ldr	r3, [r4, #16]
 8006bbc:	4642      	mov	r2, r8
 8006bbe:	4631      	mov	r1, r6
 8006bc0:	4628      	mov	r0, r5
 8006bc2:	47b8      	blx	r7
 8006bc4:	3001      	adds	r0, #1
 8006bc6:	d12b      	bne.n	8006c20 <_printf_float+0x240>
 8006bc8:	e767      	b.n	8006a9a <_printf_float+0xba>
 8006bca:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 8006bce:	f240 80dc 	bls.w	8006d8a <_printf_float+0x3aa>
 8006bd2:	2200      	movs	r2, #0
 8006bd4:	2300      	movs	r3, #0
 8006bd6:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8006bda:	f7f9 ff75 	bl	8000ac8 <__aeabi_dcmpeq>
 8006bde:	2800      	cmp	r0, #0
 8006be0:	d033      	beq.n	8006c4a <_printf_float+0x26a>
 8006be2:	2301      	movs	r3, #1
 8006be4:	4a41      	ldr	r2, [pc, #260]	; (8006cec <_printf_float+0x30c>)
 8006be6:	4631      	mov	r1, r6
 8006be8:	4628      	mov	r0, r5
 8006bea:	47b8      	blx	r7
 8006bec:	3001      	adds	r0, #1
 8006bee:	f43f af54 	beq.w	8006a9a <_printf_float+0xba>
 8006bf2:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006bf6:	429a      	cmp	r2, r3
 8006bf8:	db02      	blt.n	8006c00 <_printf_float+0x220>
 8006bfa:	6823      	ldr	r3, [r4, #0]
 8006bfc:	07d8      	lsls	r0, r3, #31
 8006bfe:	d50f      	bpl.n	8006c20 <_printf_float+0x240>
 8006c00:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006c04:	4631      	mov	r1, r6
 8006c06:	4628      	mov	r0, r5
 8006c08:	47b8      	blx	r7
 8006c0a:	3001      	adds	r0, #1
 8006c0c:	f43f af45 	beq.w	8006a9a <_printf_float+0xba>
 8006c10:	f04f 0800 	mov.w	r8, #0
 8006c14:	f104 091a 	add.w	r9, r4, #26
 8006c18:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006c1a:	3b01      	subs	r3, #1
 8006c1c:	4543      	cmp	r3, r8
 8006c1e:	dc09      	bgt.n	8006c34 <_printf_float+0x254>
 8006c20:	6823      	ldr	r3, [r4, #0]
 8006c22:	079b      	lsls	r3, r3, #30
 8006c24:	f100 8103 	bmi.w	8006e2e <_printf_float+0x44e>
 8006c28:	68e0      	ldr	r0, [r4, #12]
 8006c2a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006c2c:	4298      	cmp	r0, r3
 8006c2e:	bfb8      	it	lt
 8006c30:	4618      	movlt	r0, r3
 8006c32:	e734      	b.n	8006a9e <_printf_float+0xbe>
 8006c34:	2301      	movs	r3, #1
 8006c36:	464a      	mov	r2, r9
 8006c38:	4631      	mov	r1, r6
 8006c3a:	4628      	mov	r0, r5
 8006c3c:	47b8      	blx	r7
 8006c3e:	3001      	adds	r0, #1
 8006c40:	f43f af2b 	beq.w	8006a9a <_printf_float+0xba>
 8006c44:	f108 0801 	add.w	r8, r8, #1
 8006c48:	e7e6      	b.n	8006c18 <_printf_float+0x238>
 8006c4a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006c4c:	2b00      	cmp	r3, #0
 8006c4e:	dc2b      	bgt.n	8006ca8 <_printf_float+0x2c8>
 8006c50:	2301      	movs	r3, #1
 8006c52:	4a26      	ldr	r2, [pc, #152]	; (8006cec <_printf_float+0x30c>)
 8006c54:	4631      	mov	r1, r6
 8006c56:	4628      	mov	r0, r5
 8006c58:	47b8      	blx	r7
 8006c5a:	3001      	adds	r0, #1
 8006c5c:	f43f af1d 	beq.w	8006a9a <_printf_float+0xba>
 8006c60:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006c62:	b923      	cbnz	r3, 8006c6e <_printf_float+0x28e>
 8006c64:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006c66:	b913      	cbnz	r3, 8006c6e <_printf_float+0x28e>
 8006c68:	6823      	ldr	r3, [r4, #0]
 8006c6a:	07d9      	lsls	r1, r3, #31
 8006c6c:	d5d8      	bpl.n	8006c20 <_printf_float+0x240>
 8006c6e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006c72:	4631      	mov	r1, r6
 8006c74:	4628      	mov	r0, r5
 8006c76:	47b8      	blx	r7
 8006c78:	3001      	adds	r0, #1
 8006c7a:	f43f af0e 	beq.w	8006a9a <_printf_float+0xba>
 8006c7e:	f04f 0900 	mov.w	r9, #0
 8006c82:	f104 0a1a 	add.w	sl, r4, #26
 8006c86:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006c88:	425b      	negs	r3, r3
 8006c8a:	454b      	cmp	r3, r9
 8006c8c:	dc01      	bgt.n	8006c92 <_printf_float+0x2b2>
 8006c8e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006c90:	e794      	b.n	8006bbc <_printf_float+0x1dc>
 8006c92:	2301      	movs	r3, #1
 8006c94:	4652      	mov	r2, sl
 8006c96:	4631      	mov	r1, r6
 8006c98:	4628      	mov	r0, r5
 8006c9a:	47b8      	blx	r7
 8006c9c:	3001      	adds	r0, #1
 8006c9e:	f43f aefc 	beq.w	8006a9a <_printf_float+0xba>
 8006ca2:	f109 0901 	add.w	r9, r9, #1
 8006ca6:	e7ee      	b.n	8006c86 <_printf_float+0x2a6>
 8006ca8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006caa:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8006cac:	429a      	cmp	r2, r3
 8006cae:	bfa8      	it	ge
 8006cb0:	461a      	movge	r2, r3
 8006cb2:	2a00      	cmp	r2, #0
 8006cb4:	4691      	mov	r9, r2
 8006cb6:	dd07      	ble.n	8006cc8 <_printf_float+0x2e8>
 8006cb8:	4613      	mov	r3, r2
 8006cba:	4631      	mov	r1, r6
 8006cbc:	4642      	mov	r2, r8
 8006cbe:	4628      	mov	r0, r5
 8006cc0:	47b8      	blx	r7
 8006cc2:	3001      	adds	r0, #1
 8006cc4:	f43f aee9 	beq.w	8006a9a <_printf_float+0xba>
 8006cc8:	f104 031a 	add.w	r3, r4, #26
 8006ccc:	f04f 0b00 	mov.w	fp, #0
 8006cd0:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006cd4:	9306      	str	r3, [sp, #24]
 8006cd6:	e015      	b.n	8006d04 <_printf_float+0x324>
 8006cd8:	7fefffff 	.word	0x7fefffff
 8006cdc:	08009ccc 	.word	0x08009ccc
 8006ce0:	08009cc8 	.word	0x08009cc8
 8006ce4:	08009cd4 	.word	0x08009cd4
 8006ce8:	08009cd0 	.word	0x08009cd0
 8006cec:	08009cd8 	.word	0x08009cd8
 8006cf0:	2301      	movs	r3, #1
 8006cf2:	9a06      	ldr	r2, [sp, #24]
 8006cf4:	4631      	mov	r1, r6
 8006cf6:	4628      	mov	r0, r5
 8006cf8:	47b8      	blx	r7
 8006cfa:	3001      	adds	r0, #1
 8006cfc:	f43f aecd 	beq.w	8006a9a <_printf_float+0xba>
 8006d00:	f10b 0b01 	add.w	fp, fp, #1
 8006d04:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8006d08:	ebaa 0309 	sub.w	r3, sl, r9
 8006d0c:	455b      	cmp	r3, fp
 8006d0e:	dcef      	bgt.n	8006cf0 <_printf_float+0x310>
 8006d10:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006d14:	429a      	cmp	r2, r3
 8006d16:	44d0      	add	r8, sl
 8006d18:	db15      	blt.n	8006d46 <_printf_float+0x366>
 8006d1a:	6823      	ldr	r3, [r4, #0]
 8006d1c:	07da      	lsls	r2, r3, #31
 8006d1e:	d412      	bmi.n	8006d46 <_printf_float+0x366>
 8006d20:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006d22:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006d24:	eba3 020a 	sub.w	r2, r3, sl
 8006d28:	eba3 0a01 	sub.w	sl, r3, r1
 8006d2c:	4592      	cmp	sl, r2
 8006d2e:	bfa8      	it	ge
 8006d30:	4692      	movge	sl, r2
 8006d32:	f1ba 0f00 	cmp.w	sl, #0
 8006d36:	dc0e      	bgt.n	8006d56 <_printf_float+0x376>
 8006d38:	f04f 0800 	mov.w	r8, #0
 8006d3c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8006d40:	f104 091a 	add.w	r9, r4, #26
 8006d44:	e019      	b.n	8006d7a <_printf_float+0x39a>
 8006d46:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006d4a:	4631      	mov	r1, r6
 8006d4c:	4628      	mov	r0, r5
 8006d4e:	47b8      	blx	r7
 8006d50:	3001      	adds	r0, #1
 8006d52:	d1e5      	bne.n	8006d20 <_printf_float+0x340>
 8006d54:	e6a1      	b.n	8006a9a <_printf_float+0xba>
 8006d56:	4653      	mov	r3, sl
 8006d58:	4642      	mov	r2, r8
 8006d5a:	4631      	mov	r1, r6
 8006d5c:	4628      	mov	r0, r5
 8006d5e:	47b8      	blx	r7
 8006d60:	3001      	adds	r0, #1
 8006d62:	d1e9      	bne.n	8006d38 <_printf_float+0x358>
 8006d64:	e699      	b.n	8006a9a <_printf_float+0xba>
 8006d66:	2301      	movs	r3, #1
 8006d68:	464a      	mov	r2, r9
 8006d6a:	4631      	mov	r1, r6
 8006d6c:	4628      	mov	r0, r5
 8006d6e:	47b8      	blx	r7
 8006d70:	3001      	adds	r0, #1
 8006d72:	f43f ae92 	beq.w	8006a9a <_printf_float+0xba>
 8006d76:	f108 0801 	add.w	r8, r8, #1
 8006d7a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006d7e:	1a9b      	subs	r3, r3, r2
 8006d80:	eba3 030a 	sub.w	r3, r3, sl
 8006d84:	4543      	cmp	r3, r8
 8006d86:	dcee      	bgt.n	8006d66 <_printf_float+0x386>
 8006d88:	e74a      	b.n	8006c20 <_printf_float+0x240>
 8006d8a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006d8c:	2a01      	cmp	r2, #1
 8006d8e:	dc01      	bgt.n	8006d94 <_printf_float+0x3b4>
 8006d90:	07db      	lsls	r3, r3, #31
 8006d92:	d53a      	bpl.n	8006e0a <_printf_float+0x42a>
 8006d94:	2301      	movs	r3, #1
 8006d96:	4642      	mov	r2, r8
 8006d98:	4631      	mov	r1, r6
 8006d9a:	4628      	mov	r0, r5
 8006d9c:	47b8      	blx	r7
 8006d9e:	3001      	adds	r0, #1
 8006da0:	f43f ae7b 	beq.w	8006a9a <_printf_float+0xba>
 8006da4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006da8:	4631      	mov	r1, r6
 8006daa:	4628      	mov	r0, r5
 8006dac:	47b8      	blx	r7
 8006dae:	3001      	adds	r0, #1
 8006db0:	f108 0801 	add.w	r8, r8, #1
 8006db4:	f43f ae71 	beq.w	8006a9a <_printf_float+0xba>
 8006db8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006dba:	2200      	movs	r2, #0
 8006dbc:	f103 3aff 	add.w	sl, r3, #4294967295
 8006dc0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8006dc4:	2300      	movs	r3, #0
 8006dc6:	f7f9 fe7f 	bl	8000ac8 <__aeabi_dcmpeq>
 8006dca:	b9c8      	cbnz	r0, 8006e00 <_printf_float+0x420>
 8006dcc:	4653      	mov	r3, sl
 8006dce:	4642      	mov	r2, r8
 8006dd0:	4631      	mov	r1, r6
 8006dd2:	4628      	mov	r0, r5
 8006dd4:	47b8      	blx	r7
 8006dd6:	3001      	adds	r0, #1
 8006dd8:	d10e      	bne.n	8006df8 <_printf_float+0x418>
 8006dda:	e65e      	b.n	8006a9a <_printf_float+0xba>
 8006ddc:	2301      	movs	r3, #1
 8006dde:	4652      	mov	r2, sl
 8006de0:	4631      	mov	r1, r6
 8006de2:	4628      	mov	r0, r5
 8006de4:	47b8      	blx	r7
 8006de6:	3001      	adds	r0, #1
 8006de8:	f43f ae57 	beq.w	8006a9a <_printf_float+0xba>
 8006dec:	f108 0801 	add.w	r8, r8, #1
 8006df0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006df2:	3b01      	subs	r3, #1
 8006df4:	4543      	cmp	r3, r8
 8006df6:	dcf1      	bgt.n	8006ddc <_printf_float+0x3fc>
 8006df8:	464b      	mov	r3, r9
 8006dfa:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8006dfe:	e6de      	b.n	8006bbe <_printf_float+0x1de>
 8006e00:	f04f 0800 	mov.w	r8, #0
 8006e04:	f104 0a1a 	add.w	sl, r4, #26
 8006e08:	e7f2      	b.n	8006df0 <_printf_float+0x410>
 8006e0a:	2301      	movs	r3, #1
 8006e0c:	e7df      	b.n	8006dce <_printf_float+0x3ee>
 8006e0e:	2301      	movs	r3, #1
 8006e10:	464a      	mov	r2, r9
 8006e12:	4631      	mov	r1, r6
 8006e14:	4628      	mov	r0, r5
 8006e16:	47b8      	blx	r7
 8006e18:	3001      	adds	r0, #1
 8006e1a:	f43f ae3e 	beq.w	8006a9a <_printf_float+0xba>
 8006e1e:	f108 0801 	add.w	r8, r8, #1
 8006e22:	68e3      	ldr	r3, [r4, #12]
 8006e24:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8006e26:	1a9b      	subs	r3, r3, r2
 8006e28:	4543      	cmp	r3, r8
 8006e2a:	dcf0      	bgt.n	8006e0e <_printf_float+0x42e>
 8006e2c:	e6fc      	b.n	8006c28 <_printf_float+0x248>
 8006e2e:	f04f 0800 	mov.w	r8, #0
 8006e32:	f104 0919 	add.w	r9, r4, #25
 8006e36:	e7f4      	b.n	8006e22 <_printf_float+0x442>
 8006e38:	2900      	cmp	r1, #0
 8006e3a:	f43f ae8b 	beq.w	8006b54 <_printf_float+0x174>
 8006e3e:	2300      	movs	r3, #0
 8006e40:	e9cd 0302 	strd	r0, r3, [sp, #8]
 8006e44:	ab09      	add	r3, sp, #36	; 0x24
 8006e46:	9300      	str	r3, [sp, #0]
 8006e48:	ec49 8b10 	vmov	d0, r8, r9
 8006e4c:	6022      	str	r2, [r4, #0]
 8006e4e:	f8cd a004 	str.w	sl, [sp, #4]
 8006e52:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8006e56:	4628      	mov	r0, r5
 8006e58:	f7ff fd2e 	bl	80068b8 <__cvt>
 8006e5c:	4680      	mov	r8, r0
 8006e5e:	e648      	b.n	8006af2 <_printf_float+0x112>

08006e60 <_printf_common>:
 8006e60:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006e64:	4691      	mov	r9, r2
 8006e66:	461f      	mov	r7, r3
 8006e68:	688a      	ldr	r2, [r1, #8]
 8006e6a:	690b      	ldr	r3, [r1, #16]
 8006e6c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006e70:	4293      	cmp	r3, r2
 8006e72:	bfb8      	it	lt
 8006e74:	4613      	movlt	r3, r2
 8006e76:	f8c9 3000 	str.w	r3, [r9]
 8006e7a:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006e7e:	4606      	mov	r6, r0
 8006e80:	460c      	mov	r4, r1
 8006e82:	b112      	cbz	r2, 8006e8a <_printf_common+0x2a>
 8006e84:	3301      	adds	r3, #1
 8006e86:	f8c9 3000 	str.w	r3, [r9]
 8006e8a:	6823      	ldr	r3, [r4, #0]
 8006e8c:	0699      	lsls	r1, r3, #26
 8006e8e:	bf42      	ittt	mi
 8006e90:	f8d9 3000 	ldrmi.w	r3, [r9]
 8006e94:	3302      	addmi	r3, #2
 8006e96:	f8c9 3000 	strmi.w	r3, [r9]
 8006e9a:	6825      	ldr	r5, [r4, #0]
 8006e9c:	f015 0506 	ands.w	r5, r5, #6
 8006ea0:	d107      	bne.n	8006eb2 <_printf_common+0x52>
 8006ea2:	f104 0a19 	add.w	sl, r4, #25
 8006ea6:	68e3      	ldr	r3, [r4, #12]
 8006ea8:	f8d9 2000 	ldr.w	r2, [r9]
 8006eac:	1a9b      	subs	r3, r3, r2
 8006eae:	42ab      	cmp	r3, r5
 8006eb0:	dc28      	bgt.n	8006f04 <_printf_common+0xa4>
 8006eb2:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8006eb6:	6822      	ldr	r2, [r4, #0]
 8006eb8:	3300      	adds	r3, #0
 8006eba:	bf18      	it	ne
 8006ebc:	2301      	movne	r3, #1
 8006ebe:	0692      	lsls	r2, r2, #26
 8006ec0:	d42d      	bmi.n	8006f1e <_printf_common+0xbe>
 8006ec2:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006ec6:	4639      	mov	r1, r7
 8006ec8:	4630      	mov	r0, r6
 8006eca:	47c0      	blx	r8
 8006ecc:	3001      	adds	r0, #1
 8006ece:	d020      	beq.n	8006f12 <_printf_common+0xb2>
 8006ed0:	6823      	ldr	r3, [r4, #0]
 8006ed2:	68e5      	ldr	r5, [r4, #12]
 8006ed4:	f8d9 2000 	ldr.w	r2, [r9]
 8006ed8:	f003 0306 	and.w	r3, r3, #6
 8006edc:	2b04      	cmp	r3, #4
 8006ede:	bf08      	it	eq
 8006ee0:	1aad      	subeq	r5, r5, r2
 8006ee2:	68a3      	ldr	r3, [r4, #8]
 8006ee4:	6922      	ldr	r2, [r4, #16]
 8006ee6:	bf0c      	ite	eq
 8006ee8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006eec:	2500      	movne	r5, #0
 8006eee:	4293      	cmp	r3, r2
 8006ef0:	bfc4      	itt	gt
 8006ef2:	1a9b      	subgt	r3, r3, r2
 8006ef4:	18ed      	addgt	r5, r5, r3
 8006ef6:	f04f 0900 	mov.w	r9, #0
 8006efa:	341a      	adds	r4, #26
 8006efc:	454d      	cmp	r5, r9
 8006efe:	d11a      	bne.n	8006f36 <_printf_common+0xd6>
 8006f00:	2000      	movs	r0, #0
 8006f02:	e008      	b.n	8006f16 <_printf_common+0xb6>
 8006f04:	2301      	movs	r3, #1
 8006f06:	4652      	mov	r2, sl
 8006f08:	4639      	mov	r1, r7
 8006f0a:	4630      	mov	r0, r6
 8006f0c:	47c0      	blx	r8
 8006f0e:	3001      	adds	r0, #1
 8006f10:	d103      	bne.n	8006f1a <_printf_common+0xba>
 8006f12:	f04f 30ff 	mov.w	r0, #4294967295
 8006f16:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006f1a:	3501      	adds	r5, #1
 8006f1c:	e7c3      	b.n	8006ea6 <_printf_common+0x46>
 8006f1e:	18e1      	adds	r1, r4, r3
 8006f20:	1c5a      	adds	r2, r3, #1
 8006f22:	2030      	movs	r0, #48	; 0x30
 8006f24:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006f28:	4422      	add	r2, r4
 8006f2a:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006f2e:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006f32:	3302      	adds	r3, #2
 8006f34:	e7c5      	b.n	8006ec2 <_printf_common+0x62>
 8006f36:	2301      	movs	r3, #1
 8006f38:	4622      	mov	r2, r4
 8006f3a:	4639      	mov	r1, r7
 8006f3c:	4630      	mov	r0, r6
 8006f3e:	47c0      	blx	r8
 8006f40:	3001      	adds	r0, #1
 8006f42:	d0e6      	beq.n	8006f12 <_printf_common+0xb2>
 8006f44:	f109 0901 	add.w	r9, r9, #1
 8006f48:	e7d8      	b.n	8006efc <_printf_common+0x9c>
	...

08006f4c <_printf_i>:
 8006f4c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8006f50:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8006f54:	460c      	mov	r4, r1
 8006f56:	7e09      	ldrb	r1, [r1, #24]
 8006f58:	b085      	sub	sp, #20
 8006f5a:	296e      	cmp	r1, #110	; 0x6e
 8006f5c:	4617      	mov	r7, r2
 8006f5e:	4606      	mov	r6, r0
 8006f60:	4698      	mov	r8, r3
 8006f62:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8006f64:	f000 80b3 	beq.w	80070ce <_printf_i+0x182>
 8006f68:	d822      	bhi.n	8006fb0 <_printf_i+0x64>
 8006f6a:	2963      	cmp	r1, #99	; 0x63
 8006f6c:	d036      	beq.n	8006fdc <_printf_i+0x90>
 8006f6e:	d80a      	bhi.n	8006f86 <_printf_i+0x3a>
 8006f70:	2900      	cmp	r1, #0
 8006f72:	f000 80b9 	beq.w	80070e8 <_printf_i+0x19c>
 8006f76:	2958      	cmp	r1, #88	; 0x58
 8006f78:	f000 8083 	beq.w	8007082 <_printf_i+0x136>
 8006f7c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006f80:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8006f84:	e032      	b.n	8006fec <_printf_i+0xa0>
 8006f86:	2964      	cmp	r1, #100	; 0x64
 8006f88:	d001      	beq.n	8006f8e <_printf_i+0x42>
 8006f8a:	2969      	cmp	r1, #105	; 0x69
 8006f8c:	d1f6      	bne.n	8006f7c <_printf_i+0x30>
 8006f8e:	6820      	ldr	r0, [r4, #0]
 8006f90:	6813      	ldr	r3, [r2, #0]
 8006f92:	0605      	lsls	r5, r0, #24
 8006f94:	f103 0104 	add.w	r1, r3, #4
 8006f98:	d52a      	bpl.n	8006ff0 <_printf_i+0xa4>
 8006f9a:	681b      	ldr	r3, [r3, #0]
 8006f9c:	6011      	str	r1, [r2, #0]
 8006f9e:	2b00      	cmp	r3, #0
 8006fa0:	da03      	bge.n	8006faa <_printf_i+0x5e>
 8006fa2:	222d      	movs	r2, #45	; 0x2d
 8006fa4:	425b      	negs	r3, r3
 8006fa6:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8006faa:	486f      	ldr	r0, [pc, #444]	; (8007168 <_printf_i+0x21c>)
 8006fac:	220a      	movs	r2, #10
 8006fae:	e039      	b.n	8007024 <_printf_i+0xd8>
 8006fb0:	2973      	cmp	r1, #115	; 0x73
 8006fb2:	f000 809d 	beq.w	80070f0 <_printf_i+0x1a4>
 8006fb6:	d808      	bhi.n	8006fca <_printf_i+0x7e>
 8006fb8:	296f      	cmp	r1, #111	; 0x6f
 8006fba:	d020      	beq.n	8006ffe <_printf_i+0xb2>
 8006fbc:	2970      	cmp	r1, #112	; 0x70
 8006fbe:	d1dd      	bne.n	8006f7c <_printf_i+0x30>
 8006fc0:	6823      	ldr	r3, [r4, #0]
 8006fc2:	f043 0320 	orr.w	r3, r3, #32
 8006fc6:	6023      	str	r3, [r4, #0]
 8006fc8:	e003      	b.n	8006fd2 <_printf_i+0x86>
 8006fca:	2975      	cmp	r1, #117	; 0x75
 8006fcc:	d017      	beq.n	8006ffe <_printf_i+0xb2>
 8006fce:	2978      	cmp	r1, #120	; 0x78
 8006fd0:	d1d4      	bne.n	8006f7c <_printf_i+0x30>
 8006fd2:	2378      	movs	r3, #120	; 0x78
 8006fd4:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8006fd8:	4864      	ldr	r0, [pc, #400]	; (800716c <_printf_i+0x220>)
 8006fda:	e055      	b.n	8007088 <_printf_i+0x13c>
 8006fdc:	6813      	ldr	r3, [r2, #0]
 8006fde:	1d19      	adds	r1, r3, #4
 8006fe0:	681b      	ldr	r3, [r3, #0]
 8006fe2:	6011      	str	r1, [r2, #0]
 8006fe4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006fe8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006fec:	2301      	movs	r3, #1
 8006fee:	e08c      	b.n	800710a <_printf_i+0x1be>
 8006ff0:	681b      	ldr	r3, [r3, #0]
 8006ff2:	6011      	str	r1, [r2, #0]
 8006ff4:	f010 0f40 	tst.w	r0, #64	; 0x40
 8006ff8:	bf18      	it	ne
 8006ffa:	b21b      	sxthne	r3, r3
 8006ffc:	e7cf      	b.n	8006f9e <_printf_i+0x52>
 8006ffe:	6813      	ldr	r3, [r2, #0]
 8007000:	6825      	ldr	r5, [r4, #0]
 8007002:	1d18      	adds	r0, r3, #4
 8007004:	6010      	str	r0, [r2, #0]
 8007006:	0628      	lsls	r0, r5, #24
 8007008:	d501      	bpl.n	800700e <_printf_i+0xc2>
 800700a:	681b      	ldr	r3, [r3, #0]
 800700c:	e002      	b.n	8007014 <_printf_i+0xc8>
 800700e:	0668      	lsls	r0, r5, #25
 8007010:	d5fb      	bpl.n	800700a <_printf_i+0xbe>
 8007012:	881b      	ldrh	r3, [r3, #0]
 8007014:	4854      	ldr	r0, [pc, #336]	; (8007168 <_printf_i+0x21c>)
 8007016:	296f      	cmp	r1, #111	; 0x6f
 8007018:	bf14      	ite	ne
 800701a:	220a      	movne	r2, #10
 800701c:	2208      	moveq	r2, #8
 800701e:	2100      	movs	r1, #0
 8007020:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8007024:	6865      	ldr	r5, [r4, #4]
 8007026:	60a5      	str	r5, [r4, #8]
 8007028:	2d00      	cmp	r5, #0
 800702a:	f2c0 8095 	blt.w	8007158 <_printf_i+0x20c>
 800702e:	6821      	ldr	r1, [r4, #0]
 8007030:	f021 0104 	bic.w	r1, r1, #4
 8007034:	6021      	str	r1, [r4, #0]
 8007036:	2b00      	cmp	r3, #0
 8007038:	d13d      	bne.n	80070b6 <_printf_i+0x16a>
 800703a:	2d00      	cmp	r5, #0
 800703c:	f040 808e 	bne.w	800715c <_printf_i+0x210>
 8007040:	4665      	mov	r5, ip
 8007042:	2a08      	cmp	r2, #8
 8007044:	d10b      	bne.n	800705e <_printf_i+0x112>
 8007046:	6823      	ldr	r3, [r4, #0]
 8007048:	07db      	lsls	r3, r3, #31
 800704a:	d508      	bpl.n	800705e <_printf_i+0x112>
 800704c:	6923      	ldr	r3, [r4, #16]
 800704e:	6862      	ldr	r2, [r4, #4]
 8007050:	429a      	cmp	r2, r3
 8007052:	bfde      	ittt	le
 8007054:	2330      	movle	r3, #48	; 0x30
 8007056:	f805 3c01 	strble.w	r3, [r5, #-1]
 800705a:	f105 35ff 	addle.w	r5, r5, #4294967295
 800705e:	ebac 0305 	sub.w	r3, ip, r5
 8007062:	6123      	str	r3, [r4, #16]
 8007064:	f8cd 8000 	str.w	r8, [sp]
 8007068:	463b      	mov	r3, r7
 800706a:	aa03      	add	r2, sp, #12
 800706c:	4621      	mov	r1, r4
 800706e:	4630      	mov	r0, r6
 8007070:	f7ff fef6 	bl	8006e60 <_printf_common>
 8007074:	3001      	adds	r0, #1
 8007076:	d14d      	bne.n	8007114 <_printf_i+0x1c8>
 8007078:	f04f 30ff 	mov.w	r0, #4294967295
 800707c:	b005      	add	sp, #20
 800707e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007082:	4839      	ldr	r0, [pc, #228]	; (8007168 <_printf_i+0x21c>)
 8007084:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8007088:	6813      	ldr	r3, [r2, #0]
 800708a:	6821      	ldr	r1, [r4, #0]
 800708c:	1d1d      	adds	r5, r3, #4
 800708e:	681b      	ldr	r3, [r3, #0]
 8007090:	6015      	str	r5, [r2, #0]
 8007092:	060a      	lsls	r2, r1, #24
 8007094:	d50b      	bpl.n	80070ae <_printf_i+0x162>
 8007096:	07ca      	lsls	r2, r1, #31
 8007098:	bf44      	itt	mi
 800709a:	f041 0120 	orrmi.w	r1, r1, #32
 800709e:	6021      	strmi	r1, [r4, #0]
 80070a0:	b91b      	cbnz	r3, 80070aa <_printf_i+0x15e>
 80070a2:	6822      	ldr	r2, [r4, #0]
 80070a4:	f022 0220 	bic.w	r2, r2, #32
 80070a8:	6022      	str	r2, [r4, #0]
 80070aa:	2210      	movs	r2, #16
 80070ac:	e7b7      	b.n	800701e <_printf_i+0xd2>
 80070ae:	064d      	lsls	r5, r1, #25
 80070b0:	bf48      	it	mi
 80070b2:	b29b      	uxthmi	r3, r3
 80070b4:	e7ef      	b.n	8007096 <_printf_i+0x14a>
 80070b6:	4665      	mov	r5, ip
 80070b8:	fbb3 f1f2 	udiv	r1, r3, r2
 80070bc:	fb02 3311 	mls	r3, r2, r1, r3
 80070c0:	5cc3      	ldrb	r3, [r0, r3]
 80070c2:	f805 3d01 	strb.w	r3, [r5, #-1]!
 80070c6:	460b      	mov	r3, r1
 80070c8:	2900      	cmp	r1, #0
 80070ca:	d1f5      	bne.n	80070b8 <_printf_i+0x16c>
 80070cc:	e7b9      	b.n	8007042 <_printf_i+0xf6>
 80070ce:	6813      	ldr	r3, [r2, #0]
 80070d0:	6825      	ldr	r5, [r4, #0]
 80070d2:	6961      	ldr	r1, [r4, #20]
 80070d4:	1d18      	adds	r0, r3, #4
 80070d6:	6010      	str	r0, [r2, #0]
 80070d8:	0628      	lsls	r0, r5, #24
 80070da:	681b      	ldr	r3, [r3, #0]
 80070dc:	d501      	bpl.n	80070e2 <_printf_i+0x196>
 80070de:	6019      	str	r1, [r3, #0]
 80070e0:	e002      	b.n	80070e8 <_printf_i+0x19c>
 80070e2:	066a      	lsls	r2, r5, #25
 80070e4:	d5fb      	bpl.n	80070de <_printf_i+0x192>
 80070e6:	8019      	strh	r1, [r3, #0]
 80070e8:	2300      	movs	r3, #0
 80070ea:	6123      	str	r3, [r4, #16]
 80070ec:	4665      	mov	r5, ip
 80070ee:	e7b9      	b.n	8007064 <_printf_i+0x118>
 80070f0:	6813      	ldr	r3, [r2, #0]
 80070f2:	1d19      	adds	r1, r3, #4
 80070f4:	6011      	str	r1, [r2, #0]
 80070f6:	681d      	ldr	r5, [r3, #0]
 80070f8:	6862      	ldr	r2, [r4, #4]
 80070fa:	2100      	movs	r1, #0
 80070fc:	4628      	mov	r0, r5
 80070fe:	f7f9 f86f 	bl	80001e0 <memchr>
 8007102:	b108      	cbz	r0, 8007108 <_printf_i+0x1bc>
 8007104:	1b40      	subs	r0, r0, r5
 8007106:	6060      	str	r0, [r4, #4]
 8007108:	6863      	ldr	r3, [r4, #4]
 800710a:	6123      	str	r3, [r4, #16]
 800710c:	2300      	movs	r3, #0
 800710e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007112:	e7a7      	b.n	8007064 <_printf_i+0x118>
 8007114:	6923      	ldr	r3, [r4, #16]
 8007116:	462a      	mov	r2, r5
 8007118:	4639      	mov	r1, r7
 800711a:	4630      	mov	r0, r6
 800711c:	47c0      	blx	r8
 800711e:	3001      	adds	r0, #1
 8007120:	d0aa      	beq.n	8007078 <_printf_i+0x12c>
 8007122:	6823      	ldr	r3, [r4, #0]
 8007124:	079b      	lsls	r3, r3, #30
 8007126:	d413      	bmi.n	8007150 <_printf_i+0x204>
 8007128:	68e0      	ldr	r0, [r4, #12]
 800712a:	9b03      	ldr	r3, [sp, #12]
 800712c:	4298      	cmp	r0, r3
 800712e:	bfb8      	it	lt
 8007130:	4618      	movlt	r0, r3
 8007132:	e7a3      	b.n	800707c <_printf_i+0x130>
 8007134:	2301      	movs	r3, #1
 8007136:	464a      	mov	r2, r9
 8007138:	4639      	mov	r1, r7
 800713a:	4630      	mov	r0, r6
 800713c:	47c0      	blx	r8
 800713e:	3001      	adds	r0, #1
 8007140:	d09a      	beq.n	8007078 <_printf_i+0x12c>
 8007142:	3501      	adds	r5, #1
 8007144:	68e3      	ldr	r3, [r4, #12]
 8007146:	9a03      	ldr	r2, [sp, #12]
 8007148:	1a9b      	subs	r3, r3, r2
 800714a:	42ab      	cmp	r3, r5
 800714c:	dcf2      	bgt.n	8007134 <_printf_i+0x1e8>
 800714e:	e7eb      	b.n	8007128 <_printf_i+0x1dc>
 8007150:	2500      	movs	r5, #0
 8007152:	f104 0919 	add.w	r9, r4, #25
 8007156:	e7f5      	b.n	8007144 <_printf_i+0x1f8>
 8007158:	2b00      	cmp	r3, #0
 800715a:	d1ac      	bne.n	80070b6 <_printf_i+0x16a>
 800715c:	7803      	ldrb	r3, [r0, #0]
 800715e:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007162:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007166:	e76c      	b.n	8007042 <_printf_i+0xf6>
 8007168:	08009cda 	.word	0x08009cda
 800716c:	08009ceb 	.word	0x08009ceb

08007170 <iprintf>:
 8007170:	b40f      	push	{r0, r1, r2, r3}
 8007172:	4b0a      	ldr	r3, [pc, #40]	; (800719c <iprintf+0x2c>)
 8007174:	b513      	push	{r0, r1, r4, lr}
 8007176:	681c      	ldr	r4, [r3, #0]
 8007178:	b124      	cbz	r4, 8007184 <iprintf+0x14>
 800717a:	69a3      	ldr	r3, [r4, #24]
 800717c:	b913      	cbnz	r3, 8007184 <iprintf+0x14>
 800717e:	4620      	mov	r0, r4
 8007180:	f7ff fa5c 	bl	800663c <__sinit>
 8007184:	ab05      	add	r3, sp, #20
 8007186:	9a04      	ldr	r2, [sp, #16]
 8007188:	68a1      	ldr	r1, [r4, #8]
 800718a:	9301      	str	r3, [sp, #4]
 800718c:	4620      	mov	r0, r4
 800718e:	f001 fce3 	bl	8008b58 <_vfiprintf_r>
 8007192:	b002      	add	sp, #8
 8007194:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007198:	b004      	add	sp, #16
 800719a:	4770      	bx	lr
 800719c:	20000014 	.word	0x20000014

080071a0 <putchar>:
 80071a0:	b538      	push	{r3, r4, r5, lr}
 80071a2:	4b08      	ldr	r3, [pc, #32]	; (80071c4 <putchar+0x24>)
 80071a4:	681c      	ldr	r4, [r3, #0]
 80071a6:	4605      	mov	r5, r0
 80071a8:	b124      	cbz	r4, 80071b4 <putchar+0x14>
 80071aa:	69a3      	ldr	r3, [r4, #24]
 80071ac:	b913      	cbnz	r3, 80071b4 <putchar+0x14>
 80071ae:	4620      	mov	r0, r4
 80071b0:	f7ff fa44 	bl	800663c <__sinit>
 80071b4:	68a2      	ldr	r2, [r4, #8]
 80071b6:	4629      	mov	r1, r5
 80071b8:	4620      	mov	r0, r4
 80071ba:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80071be:	f001 bde1 	b.w	8008d84 <_putc_r>
 80071c2:	bf00      	nop
 80071c4:	20000014 	.word	0x20000014

080071c8 <_puts_r>:
 80071c8:	b570      	push	{r4, r5, r6, lr}
 80071ca:	460e      	mov	r6, r1
 80071cc:	4605      	mov	r5, r0
 80071ce:	b118      	cbz	r0, 80071d8 <_puts_r+0x10>
 80071d0:	6983      	ldr	r3, [r0, #24]
 80071d2:	b90b      	cbnz	r3, 80071d8 <_puts_r+0x10>
 80071d4:	f7ff fa32 	bl	800663c <__sinit>
 80071d8:	69ab      	ldr	r3, [r5, #24]
 80071da:	68ac      	ldr	r4, [r5, #8]
 80071dc:	b913      	cbnz	r3, 80071e4 <_puts_r+0x1c>
 80071de:	4628      	mov	r0, r5
 80071e0:	f7ff fa2c 	bl	800663c <__sinit>
 80071e4:	4b23      	ldr	r3, [pc, #140]	; (8007274 <_puts_r+0xac>)
 80071e6:	429c      	cmp	r4, r3
 80071e8:	d117      	bne.n	800721a <_puts_r+0x52>
 80071ea:	686c      	ldr	r4, [r5, #4]
 80071ec:	89a3      	ldrh	r3, [r4, #12]
 80071ee:	071b      	lsls	r3, r3, #28
 80071f0:	d51d      	bpl.n	800722e <_puts_r+0x66>
 80071f2:	6923      	ldr	r3, [r4, #16]
 80071f4:	b1db      	cbz	r3, 800722e <_puts_r+0x66>
 80071f6:	3e01      	subs	r6, #1
 80071f8:	68a3      	ldr	r3, [r4, #8]
 80071fa:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80071fe:	3b01      	subs	r3, #1
 8007200:	60a3      	str	r3, [r4, #8]
 8007202:	b9e9      	cbnz	r1, 8007240 <_puts_r+0x78>
 8007204:	2b00      	cmp	r3, #0
 8007206:	da2e      	bge.n	8007266 <_puts_r+0x9e>
 8007208:	4622      	mov	r2, r4
 800720a:	210a      	movs	r1, #10
 800720c:	4628      	mov	r0, r5
 800720e:	f000 f893 	bl	8007338 <__swbuf_r>
 8007212:	3001      	adds	r0, #1
 8007214:	d011      	beq.n	800723a <_puts_r+0x72>
 8007216:	200a      	movs	r0, #10
 8007218:	e011      	b.n	800723e <_puts_r+0x76>
 800721a:	4b17      	ldr	r3, [pc, #92]	; (8007278 <_puts_r+0xb0>)
 800721c:	429c      	cmp	r4, r3
 800721e:	d101      	bne.n	8007224 <_puts_r+0x5c>
 8007220:	68ac      	ldr	r4, [r5, #8]
 8007222:	e7e3      	b.n	80071ec <_puts_r+0x24>
 8007224:	4b15      	ldr	r3, [pc, #84]	; (800727c <_puts_r+0xb4>)
 8007226:	429c      	cmp	r4, r3
 8007228:	bf08      	it	eq
 800722a:	68ec      	ldreq	r4, [r5, #12]
 800722c:	e7de      	b.n	80071ec <_puts_r+0x24>
 800722e:	4621      	mov	r1, r4
 8007230:	4628      	mov	r0, r5
 8007232:	f000 f8e5 	bl	8007400 <__swsetup_r>
 8007236:	2800      	cmp	r0, #0
 8007238:	d0dd      	beq.n	80071f6 <_puts_r+0x2e>
 800723a:	f04f 30ff 	mov.w	r0, #4294967295
 800723e:	bd70      	pop	{r4, r5, r6, pc}
 8007240:	2b00      	cmp	r3, #0
 8007242:	da04      	bge.n	800724e <_puts_r+0x86>
 8007244:	69a2      	ldr	r2, [r4, #24]
 8007246:	429a      	cmp	r2, r3
 8007248:	dc06      	bgt.n	8007258 <_puts_r+0x90>
 800724a:	290a      	cmp	r1, #10
 800724c:	d004      	beq.n	8007258 <_puts_r+0x90>
 800724e:	6823      	ldr	r3, [r4, #0]
 8007250:	1c5a      	adds	r2, r3, #1
 8007252:	6022      	str	r2, [r4, #0]
 8007254:	7019      	strb	r1, [r3, #0]
 8007256:	e7cf      	b.n	80071f8 <_puts_r+0x30>
 8007258:	4622      	mov	r2, r4
 800725a:	4628      	mov	r0, r5
 800725c:	f000 f86c 	bl	8007338 <__swbuf_r>
 8007260:	3001      	adds	r0, #1
 8007262:	d1c9      	bne.n	80071f8 <_puts_r+0x30>
 8007264:	e7e9      	b.n	800723a <_puts_r+0x72>
 8007266:	6823      	ldr	r3, [r4, #0]
 8007268:	200a      	movs	r0, #10
 800726a:	1c5a      	adds	r2, r3, #1
 800726c:	6022      	str	r2, [r4, #0]
 800726e:	7018      	strb	r0, [r3, #0]
 8007270:	e7e5      	b.n	800723e <_puts_r+0x76>
 8007272:	bf00      	nop
 8007274:	08009c84 	.word	0x08009c84
 8007278:	08009ca4 	.word	0x08009ca4
 800727c:	08009c64 	.word	0x08009c64

08007280 <puts>:
 8007280:	4b02      	ldr	r3, [pc, #8]	; (800728c <puts+0xc>)
 8007282:	4601      	mov	r1, r0
 8007284:	6818      	ldr	r0, [r3, #0]
 8007286:	f7ff bf9f 	b.w	80071c8 <_puts_r>
 800728a:	bf00      	nop
 800728c:	20000014 	.word	0x20000014

08007290 <_sbrk_r>:
 8007290:	b538      	push	{r3, r4, r5, lr}
 8007292:	4c06      	ldr	r4, [pc, #24]	; (80072ac <_sbrk_r+0x1c>)
 8007294:	2300      	movs	r3, #0
 8007296:	4605      	mov	r5, r0
 8007298:	4608      	mov	r0, r1
 800729a:	6023      	str	r3, [r4, #0]
 800729c:	f7fb fc84 	bl	8002ba8 <_sbrk>
 80072a0:	1c43      	adds	r3, r0, #1
 80072a2:	d102      	bne.n	80072aa <_sbrk_r+0x1a>
 80072a4:	6823      	ldr	r3, [r4, #0]
 80072a6:	b103      	cbz	r3, 80072aa <_sbrk_r+0x1a>
 80072a8:	602b      	str	r3, [r5, #0]
 80072aa:	bd38      	pop	{r3, r4, r5, pc}
 80072ac:	200009d8 	.word	0x200009d8

080072b0 <__sread>:
 80072b0:	b510      	push	{r4, lr}
 80072b2:	460c      	mov	r4, r1
 80072b4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80072b8:	f001 fd9a 	bl	8008df0 <_read_r>
 80072bc:	2800      	cmp	r0, #0
 80072be:	bfab      	itete	ge
 80072c0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80072c2:	89a3      	ldrhlt	r3, [r4, #12]
 80072c4:	181b      	addge	r3, r3, r0
 80072c6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80072ca:	bfac      	ite	ge
 80072cc:	6563      	strge	r3, [r4, #84]	; 0x54
 80072ce:	81a3      	strhlt	r3, [r4, #12]
 80072d0:	bd10      	pop	{r4, pc}

080072d2 <__swrite>:
 80072d2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80072d6:	461f      	mov	r7, r3
 80072d8:	898b      	ldrh	r3, [r1, #12]
 80072da:	05db      	lsls	r3, r3, #23
 80072dc:	4605      	mov	r5, r0
 80072de:	460c      	mov	r4, r1
 80072e0:	4616      	mov	r6, r2
 80072e2:	d505      	bpl.n	80072f0 <__swrite+0x1e>
 80072e4:	2302      	movs	r3, #2
 80072e6:	2200      	movs	r2, #0
 80072e8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80072ec:	f001 f848 	bl	8008380 <_lseek_r>
 80072f0:	89a3      	ldrh	r3, [r4, #12]
 80072f2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80072f6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80072fa:	81a3      	strh	r3, [r4, #12]
 80072fc:	4632      	mov	r2, r6
 80072fe:	463b      	mov	r3, r7
 8007300:	4628      	mov	r0, r5
 8007302:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007306:	f000 b869 	b.w	80073dc <_write_r>

0800730a <__sseek>:
 800730a:	b510      	push	{r4, lr}
 800730c:	460c      	mov	r4, r1
 800730e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007312:	f001 f835 	bl	8008380 <_lseek_r>
 8007316:	1c43      	adds	r3, r0, #1
 8007318:	89a3      	ldrh	r3, [r4, #12]
 800731a:	bf15      	itete	ne
 800731c:	6560      	strne	r0, [r4, #84]	; 0x54
 800731e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8007322:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8007326:	81a3      	strheq	r3, [r4, #12]
 8007328:	bf18      	it	ne
 800732a:	81a3      	strhne	r3, [r4, #12]
 800732c:	bd10      	pop	{r4, pc}

0800732e <__sclose>:
 800732e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007332:	f000 b8d3 	b.w	80074dc <_close_r>
	...

08007338 <__swbuf_r>:
 8007338:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800733a:	460e      	mov	r6, r1
 800733c:	4614      	mov	r4, r2
 800733e:	4605      	mov	r5, r0
 8007340:	b118      	cbz	r0, 800734a <__swbuf_r+0x12>
 8007342:	6983      	ldr	r3, [r0, #24]
 8007344:	b90b      	cbnz	r3, 800734a <__swbuf_r+0x12>
 8007346:	f7ff f979 	bl	800663c <__sinit>
 800734a:	4b21      	ldr	r3, [pc, #132]	; (80073d0 <__swbuf_r+0x98>)
 800734c:	429c      	cmp	r4, r3
 800734e:	d12a      	bne.n	80073a6 <__swbuf_r+0x6e>
 8007350:	686c      	ldr	r4, [r5, #4]
 8007352:	69a3      	ldr	r3, [r4, #24]
 8007354:	60a3      	str	r3, [r4, #8]
 8007356:	89a3      	ldrh	r3, [r4, #12]
 8007358:	071a      	lsls	r2, r3, #28
 800735a:	d52e      	bpl.n	80073ba <__swbuf_r+0x82>
 800735c:	6923      	ldr	r3, [r4, #16]
 800735e:	b363      	cbz	r3, 80073ba <__swbuf_r+0x82>
 8007360:	6923      	ldr	r3, [r4, #16]
 8007362:	6820      	ldr	r0, [r4, #0]
 8007364:	1ac0      	subs	r0, r0, r3
 8007366:	6963      	ldr	r3, [r4, #20]
 8007368:	b2f6      	uxtb	r6, r6
 800736a:	4283      	cmp	r3, r0
 800736c:	4637      	mov	r7, r6
 800736e:	dc04      	bgt.n	800737a <__swbuf_r+0x42>
 8007370:	4621      	mov	r1, r4
 8007372:	4628      	mov	r0, r5
 8007374:	f000 ff8e 	bl	8008294 <_fflush_r>
 8007378:	bb28      	cbnz	r0, 80073c6 <__swbuf_r+0x8e>
 800737a:	68a3      	ldr	r3, [r4, #8]
 800737c:	3b01      	subs	r3, #1
 800737e:	60a3      	str	r3, [r4, #8]
 8007380:	6823      	ldr	r3, [r4, #0]
 8007382:	1c5a      	adds	r2, r3, #1
 8007384:	6022      	str	r2, [r4, #0]
 8007386:	701e      	strb	r6, [r3, #0]
 8007388:	6963      	ldr	r3, [r4, #20]
 800738a:	3001      	adds	r0, #1
 800738c:	4283      	cmp	r3, r0
 800738e:	d004      	beq.n	800739a <__swbuf_r+0x62>
 8007390:	89a3      	ldrh	r3, [r4, #12]
 8007392:	07db      	lsls	r3, r3, #31
 8007394:	d519      	bpl.n	80073ca <__swbuf_r+0x92>
 8007396:	2e0a      	cmp	r6, #10
 8007398:	d117      	bne.n	80073ca <__swbuf_r+0x92>
 800739a:	4621      	mov	r1, r4
 800739c:	4628      	mov	r0, r5
 800739e:	f000 ff79 	bl	8008294 <_fflush_r>
 80073a2:	b190      	cbz	r0, 80073ca <__swbuf_r+0x92>
 80073a4:	e00f      	b.n	80073c6 <__swbuf_r+0x8e>
 80073a6:	4b0b      	ldr	r3, [pc, #44]	; (80073d4 <__swbuf_r+0x9c>)
 80073a8:	429c      	cmp	r4, r3
 80073aa:	d101      	bne.n	80073b0 <__swbuf_r+0x78>
 80073ac:	68ac      	ldr	r4, [r5, #8]
 80073ae:	e7d0      	b.n	8007352 <__swbuf_r+0x1a>
 80073b0:	4b09      	ldr	r3, [pc, #36]	; (80073d8 <__swbuf_r+0xa0>)
 80073b2:	429c      	cmp	r4, r3
 80073b4:	bf08      	it	eq
 80073b6:	68ec      	ldreq	r4, [r5, #12]
 80073b8:	e7cb      	b.n	8007352 <__swbuf_r+0x1a>
 80073ba:	4621      	mov	r1, r4
 80073bc:	4628      	mov	r0, r5
 80073be:	f000 f81f 	bl	8007400 <__swsetup_r>
 80073c2:	2800      	cmp	r0, #0
 80073c4:	d0cc      	beq.n	8007360 <__swbuf_r+0x28>
 80073c6:	f04f 37ff 	mov.w	r7, #4294967295
 80073ca:	4638      	mov	r0, r7
 80073cc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80073ce:	bf00      	nop
 80073d0:	08009c84 	.word	0x08009c84
 80073d4:	08009ca4 	.word	0x08009ca4
 80073d8:	08009c64 	.word	0x08009c64

080073dc <_write_r>:
 80073dc:	b538      	push	{r3, r4, r5, lr}
 80073de:	4c07      	ldr	r4, [pc, #28]	; (80073fc <_write_r+0x20>)
 80073e0:	4605      	mov	r5, r0
 80073e2:	4608      	mov	r0, r1
 80073e4:	4611      	mov	r1, r2
 80073e6:	2200      	movs	r2, #0
 80073e8:	6022      	str	r2, [r4, #0]
 80073ea:	461a      	mov	r2, r3
 80073ec:	f7fb fb8c 	bl	8002b08 <_write>
 80073f0:	1c43      	adds	r3, r0, #1
 80073f2:	d102      	bne.n	80073fa <_write_r+0x1e>
 80073f4:	6823      	ldr	r3, [r4, #0]
 80073f6:	b103      	cbz	r3, 80073fa <_write_r+0x1e>
 80073f8:	602b      	str	r3, [r5, #0]
 80073fa:	bd38      	pop	{r3, r4, r5, pc}
 80073fc:	200009d8 	.word	0x200009d8

08007400 <__swsetup_r>:
 8007400:	4b32      	ldr	r3, [pc, #200]	; (80074cc <__swsetup_r+0xcc>)
 8007402:	b570      	push	{r4, r5, r6, lr}
 8007404:	681d      	ldr	r5, [r3, #0]
 8007406:	4606      	mov	r6, r0
 8007408:	460c      	mov	r4, r1
 800740a:	b125      	cbz	r5, 8007416 <__swsetup_r+0x16>
 800740c:	69ab      	ldr	r3, [r5, #24]
 800740e:	b913      	cbnz	r3, 8007416 <__swsetup_r+0x16>
 8007410:	4628      	mov	r0, r5
 8007412:	f7ff f913 	bl	800663c <__sinit>
 8007416:	4b2e      	ldr	r3, [pc, #184]	; (80074d0 <__swsetup_r+0xd0>)
 8007418:	429c      	cmp	r4, r3
 800741a:	d10f      	bne.n	800743c <__swsetup_r+0x3c>
 800741c:	686c      	ldr	r4, [r5, #4]
 800741e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007422:	b29a      	uxth	r2, r3
 8007424:	0715      	lsls	r5, r2, #28
 8007426:	d42c      	bmi.n	8007482 <__swsetup_r+0x82>
 8007428:	06d0      	lsls	r0, r2, #27
 800742a:	d411      	bmi.n	8007450 <__swsetup_r+0x50>
 800742c:	2209      	movs	r2, #9
 800742e:	6032      	str	r2, [r6, #0]
 8007430:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007434:	81a3      	strh	r3, [r4, #12]
 8007436:	f04f 30ff 	mov.w	r0, #4294967295
 800743a:	e03e      	b.n	80074ba <__swsetup_r+0xba>
 800743c:	4b25      	ldr	r3, [pc, #148]	; (80074d4 <__swsetup_r+0xd4>)
 800743e:	429c      	cmp	r4, r3
 8007440:	d101      	bne.n	8007446 <__swsetup_r+0x46>
 8007442:	68ac      	ldr	r4, [r5, #8]
 8007444:	e7eb      	b.n	800741e <__swsetup_r+0x1e>
 8007446:	4b24      	ldr	r3, [pc, #144]	; (80074d8 <__swsetup_r+0xd8>)
 8007448:	429c      	cmp	r4, r3
 800744a:	bf08      	it	eq
 800744c:	68ec      	ldreq	r4, [r5, #12]
 800744e:	e7e6      	b.n	800741e <__swsetup_r+0x1e>
 8007450:	0751      	lsls	r1, r2, #29
 8007452:	d512      	bpl.n	800747a <__swsetup_r+0x7a>
 8007454:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007456:	b141      	cbz	r1, 800746a <__swsetup_r+0x6a>
 8007458:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800745c:	4299      	cmp	r1, r3
 800745e:	d002      	beq.n	8007466 <__swsetup_r+0x66>
 8007460:	4630      	mov	r0, r6
 8007462:	f001 fb01 	bl	8008a68 <_free_r>
 8007466:	2300      	movs	r3, #0
 8007468:	6363      	str	r3, [r4, #52]	; 0x34
 800746a:	89a3      	ldrh	r3, [r4, #12]
 800746c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8007470:	81a3      	strh	r3, [r4, #12]
 8007472:	2300      	movs	r3, #0
 8007474:	6063      	str	r3, [r4, #4]
 8007476:	6923      	ldr	r3, [r4, #16]
 8007478:	6023      	str	r3, [r4, #0]
 800747a:	89a3      	ldrh	r3, [r4, #12]
 800747c:	f043 0308 	orr.w	r3, r3, #8
 8007480:	81a3      	strh	r3, [r4, #12]
 8007482:	6923      	ldr	r3, [r4, #16]
 8007484:	b94b      	cbnz	r3, 800749a <__swsetup_r+0x9a>
 8007486:	89a3      	ldrh	r3, [r4, #12]
 8007488:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800748c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007490:	d003      	beq.n	800749a <__swsetup_r+0x9a>
 8007492:	4621      	mov	r1, r4
 8007494:	4630      	mov	r0, r6
 8007496:	f000 ffa9 	bl	80083ec <__smakebuf_r>
 800749a:	89a2      	ldrh	r2, [r4, #12]
 800749c:	f012 0301 	ands.w	r3, r2, #1
 80074a0:	d00c      	beq.n	80074bc <__swsetup_r+0xbc>
 80074a2:	2300      	movs	r3, #0
 80074a4:	60a3      	str	r3, [r4, #8]
 80074a6:	6963      	ldr	r3, [r4, #20]
 80074a8:	425b      	negs	r3, r3
 80074aa:	61a3      	str	r3, [r4, #24]
 80074ac:	6923      	ldr	r3, [r4, #16]
 80074ae:	b953      	cbnz	r3, 80074c6 <__swsetup_r+0xc6>
 80074b0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80074b4:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 80074b8:	d1ba      	bne.n	8007430 <__swsetup_r+0x30>
 80074ba:	bd70      	pop	{r4, r5, r6, pc}
 80074bc:	0792      	lsls	r2, r2, #30
 80074be:	bf58      	it	pl
 80074c0:	6963      	ldrpl	r3, [r4, #20]
 80074c2:	60a3      	str	r3, [r4, #8]
 80074c4:	e7f2      	b.n	80074ac <__swsetup_r+0xac>
 80074c6:	2000      	movs	r0, #0
 80074c8:	e7f7      	b.n	80074ba <__swsetup_r+0xba>
 80074ca:	bf00      	nop
 80074cc:	20000014 	.word	0x20000014
 80074d0:	08009c84 	.word	0x08009c84
 80074d4:	08009ca4 	.word	0x08009ca4
 80074d8:	08009c64 	.word	0x08009c64

080074dc <_close_r>:
 80074dc:	b538      	push	{r3, r4, r5, lr}
 80074de:	4c06      	ldr	r4, [pc, #24]	; (80074f8 <_close_r+0x1c>)
 80074e0:	2300      	movs	r3, #0
 80074e2:	4605      	mov	r5, r0
 80074e4:	4608      	mov	r0, r1
 80074e6:	6023      	str	r3, [r4, #0]
 80074e8:	f7fb fb2a 	bl	8002b40 <_close>
 80074ec:	1c43      	adds	r3, r0, #1
 80074ee:	d102      	bne.n	80074f6 <_close_r+0x1a>
 80074f0:	6823      	ldr	r3, [r4, #0]
 80074f2:	b103      	cbz	r3, 80074f6 <_close_r+0x1a>
 80074f4:	602b      	str	r3, [r5, #0]
 80074f6:	bd38      	pop	{r3, r4, r5, pc}
 80074f8:	200009d8 	.word	0x200009d8

080074fc <quorem>:
 80074fc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007500:	6903      	ldr	r3, [r0, #16]
 8007502:	690c      	ldr	r4, [r1, #16]
 8007504:	42a3      	cmp	r3, r4
 8007506:	4680      	mov	r8, r0
 8007508:	f2c0 8082 	blt.w	8007610 <quorem+0x114>
 800750c:	3c01      	subs	r4, #1
 800750e:	f101 0714 	add.w	r7, r1, #20
 8007512:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 8007516:	f100 0614 	add.w	r6, r0, #20
 800751a:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 800751e:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 8007522:	eb06 030c 	add.w	r3, r6, ip
 8007526:	3501      	adds	r5, #1
 8007528:	eb07 090c 	add.w	r9, r7, ip
 800752c:	9301      	str	r3, [sp, #4]
 800752e:	fbb0 f5f5 	udiv	r5, r0, r5
 8007532:	b395      	cbz	r5, 800759a <quorem+0x9e>
 8007534:	f04f 0a00 	mov.w	sl, #0
 8007538:	4638      	mov	r0, r7
 800753a:	46b6      	mov	lr, r6
 800753c:	46d3      	mov	fp, sl
 800753e:	f850 2b04 	ldr.w	r2, [r0], #4
 8007542:	b293      	uxth	r3, r2
 8007544:	fb05 a303 	mla	r3, r5, r3, sl
 8007548:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800754c:	b29b      	uxth	r3, r3
 800754e:	ebab 0303 	sub.w	r3, fp, r3
 8007552:	0c12      	lsrs	r2, r2, #16
 8007554:	f8de b000 	ldr.w	fp, [lr]
 8007558:	fb05 a202 	mla	r2, r5, r2, sl
 800755c:	fa13 f38b 	uxtah	r3, r3, fp
 8007560:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 8007564:	fa1f fb82 	uxth.w	fp, r2
 8007568:	f8de 2000 	ldr.w	r2, [lr]
 800756c:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 8007570:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8007574:	b29b      	uxth	r3, r3
 8007576:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800757a:	4581      	cmp	r9, r0
 800757c:	ea4f 4b22 	mov.w	fp, r2, asr #16
 8007580:	f84e 3b04 	str.w	r3, [lr], #4
 8007584:	d2db      	bcs.n	800753e <quorem+0x42>
 8007586:	f856 300c 	ldr.w	r3, [r6, ip]
 800758a:	b933      	cbnz	r3, 800759a <quorem+0x9e>
 800758c:	9b01      	ldr	r3, [sp, #4]
 800758e:	3b04      	subs	r3, #4
 8007590:	429e      	cmp	r6, r3
 8007592:	461a      	mov	r2, r3
 8007594:	d330      	bcc.n	80075f8 <quorem+0xfc>
 8007596:	f8c8 4010 	str.w	r4, [r8, #16]
 800759a:	4640      	mov	r0, r8
 800759c:	f001 f990 	bl	80088c0 <__mcmp>
 80075a0:	2800      	cmp	r0, #0
 80075a2:	db25      	blt.n	80075f0 <quorem+0xf4>
 80075a4:	3501      	adds	r5, #1
 80075a6:	4630      	mov	r0, r6
 80075a8:	f04f 0c00 	mov.w	ip, #0
 80075ac:	f857 2b04 	ldr.w	r2, [r7], #4
 80075b0:	f8d0 e000 	ldr.w	lr, [r0]
 80075b4:	b293      	uxth	r3, r2
 80075b6:	ebac 0303 	sub.w	r3, ip, r3
 80075ba:	0c12      	lsrs	r2, r2, #16
 80075bc:	fa13 f38e 	uxtah	r3, r3, lr
 80075c0:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 80075c4:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80075c8:	b29b      	uxth	r3, r3
 80075ca:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80075ce:	45b9      	cmp	r9, r7
 80075d0:	ea4f 4c22 	mov.w	ip, r2, asr #16
 80075d4:	f840 3b04 	str.w	r3, [r0], #4
 80075d8:	d2e8      	bcs.n	80075ac <quorem+0xb0>
 80075da:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 80075de:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 80075e2:	b92a      	cbnz	r2, 80075f0 <quorem+0xf4>
 80075e4:	3b04      	subs	r3, #4
 80075e6:	429e      	cmp	r6, r3
 80075e8:	461a      	mov	r2, r3
 80075ea:	d30b      	bcc.n	8007604 <quorem+0x108>
 80075ec:	f8c8 4010 	str.w	r4, [r8, #16]
 80075f0:	4628      	mov	r0, r5
 80075f2:	b003      	add	sp, #12
 80075f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80075f8:	6812      	ldr	r2, [r2, #0]
 80075fa:	3b04      	subs	r3, #4
 80075fc:	2a00      	cmp	r2, #0
 80075fe:	d1ca      	bne.n	8007596 <quorem+0x9a>
 8007600:	3c01      	subs	r4, #1
 8007602:	e7c5      	b.n	8007590 <quorem+0x94>
 8007604:	6812      	ldr	r2, [r2, #0]
 8007606:	3b04      	subs	r3, #4
 8007608:	2a00      	cmp	r2, #0
 800760a:	d1ef      	bne.n	80075ec <quorem+0xf0>
 800760c:	3c01      	subs	r4, #1
 800760e:	e7ea      	b.n	80075e6 <quorem+0xea>
 8007610:	2000      	movs	r0, #0
 8007612:	e7ee      	b.n	80075f2 <quorem+0xf6>
 8007614:	0000      	movs	r0, r0
	...

08007618 <_dtoa_r>:
 8007618:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800761c:	ec57 6b10 	vmov	r6, r7, d0
 8007620:	b097      	sub	sp, #92	; 0x5c
 8007622:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8007624:	9106      	str	r1, [sp, #24]
 8007626:	4604      	mov	r4, r0
 8007628:	920b      	str	r2, [sp, #44]	; 0x2c
 800762a:	9312      	str	r3, [sp, #72]	; 0x48
 800762c:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8007630:	e9cd 6700 	strd	r6, r7, [sp]
 8007634:	b93d      	cbnz	r5, 8007646 <_dtoa_r+0x2e>
 8007636:	2010      	movs	r0, #16
 8007638:	f000 ff18 	bl	800846c <malloc>
 800763c:	6260      	str	r0, [r4, #36]	; 0x24
 800763e:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8007642:	6005      	str	r5, [r0, #0]
 8007644:	60c5      	str	r5, [r0, #12]
 8007646:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007648:	6819      	ldr	r1, [r3, #0]
 800764a:	b151      	cbz	r1, 8007662 <_dtoa_r+0x4a>
 800764c:	685a      	ldr	r2, [r3, #4]
 800764e:	604a      	str	r2, [r1, #4]
 8007650:	2301      	movs	r3, #1
 8007652:	4093      	lsls	r3, r2
 8007654:	608b      	str	r3, [r1, #8]
 8007656:	4620      	mov	r0, r4
 8007658:	f000 ff51 	bl	80084fe <_Bfree>
 800765c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800765e:	2200      	movs	r2, #0
 8007660:	601a      	str	r2, [r3, #0]
 8007662:	1e3b      	subs	r3, r7, #0
 8007664:	bfbb      	ittet	lt
 8007666:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800766a:	9301      	strlt	r3, [sp, #4]
 800766c:	2300      	movge	r3, #0
 800766e:	2201      	movlt	r2, #1
 8007670:	bfac      	ite	ge
 8007672:	f8c8 3000 	strge.w	r3, [r8]
 8007676:	f8c8 2000 	strlt.w	r2, [r8]
 800767a:	4baf      	ldr	r3, [pc, #700]	; (8007938 <_dtoa_r+0x320>)
 800767c:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8007680:	ea33 0308 	bics.w	r3, r3, r8
 8007684:	d114      	bne.n	80076b0 <_dtoa_r+0x98>
 8007686:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8007688:	f242 730f 	movw	r3, #9999	; 0x270f
 800768c:	6013      	str	r3, [r2, #0]
 800768e:	9b00      	ldr	r3, [sp, #0]
 8007690:	b923      	cbnz	r3, 800769c <_dtoa_r+0x84>
 8007692:	f3c8 0013 	ubfx	r0, r8, #0, #20
 8007696:	2800      	cmp	r0, #0
 8007698:	f000 8542 	beq.w	8008120 <_dtoa_r+0xb08>
 800769c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800769e:	f8df b2ac 	ldr.w	fp, [pc, #684]	; 800794c <_dtoa_r+0x334>
 80076a2:	2b00      	cmp	r3, #0
 80076a4:	f000 8544 	beq.w	8008130 <_dtoa_r+0xb18>
 80076a8:	f10b 0303 	add.w	r3, fp, #3
 80076ac:	f000 bd3e 	b.w	800812c <_dtoa_r+0xb14>
 80076b0:	e9dd 6700 	ldrd	r6, r7, [sp]
 80076b4:	2200      	movs	r2, #0
 80076b6:	2300      	movs	r3, #0
 80076b8:	4630      	mov	r0, r6
 80076ba:	4639      	mov	r1, r7
 80076bc:	f7f9 fa04 	bl	8000ac8 <__aeabi_dcmpeq>
 80076c0:	4681      	mov	r9, r0
 80076c2:	b168      	cbz	r0, 80076e0 <_dtoa_r+0xc8>
 80076c4:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80076c6:	2301      	movs	r3, #1
 80076c8:	6013      	str	r3, [r2, #0]
 80076ca:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80076cc:	2b00      	cmp	r3, #0
 80076ce:	f000 8524 	beq.w	800811a <_dtoa_r+0xb02>
 80076d2:	4b9a      	ldr	r3, [pc, #616]	; (800793c <_dtoa_r+0x324>)
 80076d4:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80076d6:	f103 3bff 	add.w	fp, r3, #4294967295
 80076da:	6013      	str	r3, [r2, #0]
 80076dc:	f000 bd28 	b.w	8008130 <_dtoa_r+0xb18>
 80076e0:	aa14      	add	r2, sp, #80	; 0x50
 80076e2:	a915      	add	r1, sp, #84	; 0x54
 80076e4:	ec47 6b10 	vmov	d0, r6, r7
 80076e8:	4620      	mov	r0, r4
 80076ea:	f001 f960 	bl	80089ae <__d2b>
 80076ee:	f3c8 550a 	ubfx	r5, r8, #20, #11
 80076f2:	9004      	str	r0, [sp, #16]
 80076f4:	2d00      	cmp	r5, #0
 80076f6:	d07c      	beq.n	80077f2 <_dtoa_r+0x1da>
 80076f8:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80076fc:	f043 5b7f 	orr.w	fp, r3, #1069547520	; 0x3fc00000
 8007700:	46b2      	mov	sl, r6
 8007702:	f44b 1b40 	orr.w	fp, fp, #3145728	; 0x300000
 8007706:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800770a:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
 800770e:	2200      	movs	r2, #0
 8007710:	4b8b      	ldr	r3, [pc, #556]	; (8007940 <_dtoa_r+0x328>)
 8007712:	4650      	mov	r0, sl
 8007714:	4659      	mov	r1, fp
 8007716:	f7f8 fdb7 	bl	8000288 <__aeabi_dsub>
 800771a:	a381      	add	r3, pc, #516	; (adr r3, 8007920 <_dtoa_r+0x308>)
 800771c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007720:	f7f8 ff6a 	bl	80005f8 <__aeabi_dmul>
 8007724:	a380      	add	r3, pc, #512	; (adr r3, 8007928 <_dtoa_r+0x310>)
 8007726:	e9d3 2300 	ldrd	r2, r3, [r3]
 800772a:	f7f8 fdaf 	bl	800028c <__adddf3>
 800772e:	4606      	mov	r6, r0
 8007730:	4628      	mov	r0, r5
 8007732:	460f      	mov	r7, r1
 8007734:	f7f8 fef6 	bl	8000524 <__aeabi_i2d>
 8007738:	a37d      	add	r3, pc, #500	; (adr r3, 8007930 <_dtoa_r+0x318>)
 800773a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800773e:	f7f8 ff5b 	bl	80005f8 <__aeabi_dmul>
 8007742:	4602      	mov	r2, r0
 8007744:	460b      	mov	r3, r1
 8007746:	4630      	mov	r0, r6
 8007748:	4639      	mov	r1, r7
 800774a:	f7f8 fd9f 	bl	800028c <__adddf3>
 800774e:	4606      	mov	r6, r0
 8007750:	460f      	mov	r7, r1
 8007752:	f7f9 fa01 	bl	8000b58 <__aeabi_d2iz>
 8007756:	2200      	movs	r2, #0
 8007758:	4682      	mov	sl, r0
 800775a:	2300      	movs	r3, #0
 800775c:	4630      	mov	r0, r6
 800775e:	4639      	mov	r1, r7
 8007760:	f7f9 f9bc 	bl	8000adc <__aeabi_dcmplt>
 8007764:	b148      	cbz	r0, 800777a <_dtoa_r+0x162>
 8007766:	4650      	mov	r0, sl
 8007768:	f7f8 fedc 	bl	8000524 <__aeabi_i2d>
 800776c:	4632      	mov	r2, r6
 800776e:	463b      	mov	r3, r7
 8007770:	f7f9 f9aa 	bl	8000ac8 <__aeabi_dcmpeq>
 8007774:	b908      	cbnz	r0, 800777a <_dtoa_r+0x162>
 8007776:	f10a 3aff 	add.w	sl, sl, #4294967295
 800777a:	f1ba 0f16 	cmp.w	sl, #22
 800777e:	d859      	bhi.n	8007834 <_dtoa_r+0x21c>
 8007780:	4970      	ldr	r1, [pc, #448]	; (8007944 <_dtoa_r+0x32c>)
 8007782:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 8007786:	e9dd 2300 	ldrd	r2, r3, [sp]
 800778a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800778e:	f7f9 f9c3 	bl	8000b18 <__aeabi_dcmpgt>
 8007792:	2800      	cmp	r0, #0
 8007794:	d050      	beq.n	8007838 <_dtoa_r+0x220>
 8007796:	f10a 3aff 	add.w	sl, sl, #4294967295
 800779a:	2300      	movs	r3, #0
 800779c:	930f      	str	r3, [sp, #60]	; 0x3c
 800779e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80077a0:	1b5d      	subs	r5, r3, r5
 80077a2:	f1b5 0801 	subs.w	r8, r5, #1
 80077a6:	bf49      	itett	mi
 80077a8:	f1c5 0301 	rsbmi	r3, r5, #1
 80077ac:	2300      	movpl	r3, #0
 80077ae:	9305      	strmi	r3, [sp, #20]
 80077b0:	f04f 0800 	movmi.w	r8, #0
 80077b4:	bf58      	it	pl
 80077b6:	9305      	strpl	r3, [sp, #20]
 80077b8:	f1ba 0f00 	cmp.w	sl, #0
 80077bc:	db3e      	blt.n	800783c <_dtoa_r+0x224>
 80077be:	2300      	movs	r3, #0
 80077c0:	44d0      	add	r8, sl
 80077c2:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 80077c6:	9307      	str	r3, [sp, #28]
 80077c8:	9b06      	ldr	r3, [sp, #24]
 80077ca:	2b09      	cmp	r3, #9
 80077cc:	f200 8090 	bhi.w	80078f0 <_dtoa_r+0x2d8>
 80077d0:	2b05      	cmp	r3, #5
 80077d2:	bfc4      	itt	gt
 80077d4:	3b04      	subgt	r3, #4
 80077d6:	9306      	strgt	r3, [sp, #24]
 80077d8:	9b06      	ldr	r3, [sp, #24]
 80077da:	f1a3 0302 	sub.w	r3, r3, #2
 80077de:	bfcc      	ite	gt
 80077e0:	2500      	movgt	r5, #0
 80077e2:	2501      	movle	r5, #1
 80077e4:	2b03      	cmp	r3, #3
 80077e6:	f200 808f 	bhi.w	8007908 <_dtoa_r+0x2f0>
 80077ea:	e8df f003 	tbb	[pc, r3]
 80077ee:	7f7d      	.short	0x7f7d
 80077f0:	7131      	.short	0x7131
 80077f2:	e9dd 5314 	ldrd	r5, r3, [sp, #80]	; 0x50
 80077f6:	441d      	add	r5, r3
 80077f8:	f205 4032 	addw	r0, r5, #1074	; 0x432
 80077fc:	2820      	cmp	r0, #32
 80077fe:	dd13      	ble.n	8007828 <_dtoa_r+0x210>
 8007800:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 8007804:	9b00      	ldr	r3, [sp, #0]
 8007806:	fa08 f800 	lsl.w	r8, r8, r0
 800780a:	f205 4012 	addw	r0, r5, #1042	; 0x412
 800780e:	fa23 f000 	lsr.w	r0, r3, r0
 8007812:	ea48 0000 	orr.w	r0, r8, r0
 8007816:	f7f8 fe75 	bl	8000504 <__aeabi_ui2d>
 800781a:	2301      	movs	r3, #1
 800781c:	4682      	mov	sl, r0
 800781e:	f1a1 7bf8 	sub.w	fp, r1, #32505856	; 0x1f00000
 8007822:	3d01      	subs	r5, #1
 8007824:	9313      	str	r3, [sp, #76]	; 0x4c
 8007826:	e772      	b.n	800770e <_dtoa_r+0xf6>
 8007828:	9b00      	ldr	r3, [sp, #0]
 800782a:	f1c0 0020 	rsb	r0, r0, #32
 800782e:	fa03 f000 	lsl.w	r0, r3, r0
 8007832:	e7f0      	b.n	8007816 <_dtoa_r+0x1fe>
 8007834:	2301      	movs	r3, #1
 8007836:	e7b1      	b.n	800779c <_dtoa_r+0x184>
 8007838:	900f      	str	r0, [sp, #60]	; 0x3c
 800783a:	e7b0      	b.n	800779e <_dtoa_r+0x186>
 800783c:	9b05      	ldr	r3, [sp, #20]
 800783e:	eba3 030a 	sub.w	r3, r3, sl
 8007842:	9305      	str	r3, [sp, #20]
 8007844:	f1ca 0300 	rsb	r3, sl, #0
 8007848:	9307      	str	r3, [sp, #28]
 800784a:	2300      	movs	r3, #0
 800784c:	930e      	str	r3, [sp, #56]	; 0x38
 800784e:	e7bb      	b.n	80077c8 <_dtoa_r+0x1b0>
 8007850:	2301      	movs	r3, #1
 8007852:	930a      	str	r3, [sp, #40]	; 0x28
 8007854:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007856:	2b00      	cmp	r3, #0
 8007858:	dd59      	ble.n	800790e <_dtoa_r+0x2f6>
 800785a:	9302      	str	r3, [sp, #8]
 800785c:	4699      	mov	r9, r3
 800785e:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8007860:	2200      	movs	r2, #0
 8007862:	6072      	str	r2, [r6, #4]
 8007864:	2204      	movs	r2, #4
 8007866:	f102 0014 	add.w	r0, r2, #20
 800786a:	4298      	cmp	r0, r3
 800786c:	6871      	ldr	r1, [r6, #4]
 800786e:	d953      	bls.n	8007918 <_dtoa_r+0x300>
 8007870:	4620      	mov	r0, r4
 8007872:	f000 fe10 	bl	8008496 <_Balloc>
 8007876:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007878:	6030      	str	r0, [r6, #0]
 800787a:	f1b9 0f0e 	cmp.w	r9, #14
 800787e:	f8d3 b000 	ldr.w	fp, [r3]
 8007882:	f200 80e6 	bhi.w	8007a52 <_dtoa_r+0x43a>
 8007886:	2d00      	cmp	r5, #0
 8007888:	f000 80e3 	beq.w	8007a52 <_dtoa_r+0x43a>
 800788c:	ed9d 7b00 	vldr	d7, [sp]
 8007890:	f1ba 0f00 	cmp.w	sl, #0
 8007894:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 8007898:	dd74      	ble.n	8007984 <_dtoa_r+0x36c>
 800789a:	4a2a      	ldr	r2, [pc, #168]	; (8007944 <_dtoa_r+0x32c>)
 800789c:	f00a 030f 	and.w	r3, sl, #15
 80078a0:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80078a4:	ed93 7b00 	vldr	d7, [r3]
 80078a8:	ea4f 162a 	mov.w	r6, sl, asr #4
 80078ac:	06f0      	lsls	r0, r6, #27
 80078ae:	ed8d 7b08 	vstr	d7, [sp, #32]
 80078b2:	d565      	bpl.n	8007980 <_dtoa_r+0x368>
 80078b4:	4b24      	ldr	r3, [pc, #144]	; (8007948 <_dtoa_r+0x330>)
 80078b6:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80078ba:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80078be:	f7f8 ffc5 	bl	800084c <__aeabi_ddiv>
 80078c2:	e9cd 0100 	strd	r0, r1, [sp]
 80078c6:	f006 060f 	and.w	r6, r6, #15
 80078ca:	2503      	movs	r5, #3
 80078cc:	4f1e      	ldr	r7, [pc, #120]	; (8007948 <_dtoa_r+0x330>)
 80078ce:	e04c      	b.n	800796a <_dtoa_r+0x352>
 80078d0:	2301      	movs	r3, #1
 80078d2:	930a      	str	r3, [sp, #40]	; 0x28
 80078d4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80078d6:	4453      	add	r3, sl
 80078d8:	f103 0901 	add.w	r9, r3, #1
 80078dc:	9302      	str	r3, [sp, #8]
 80078de:	464b      	mov	r3, r9
 80078e0:	2b01      	cmp	r3, #1
 80078e2:	bfb8      	it	lt
 80078e4:	2301      	movlt	r3, #1
 80078e6:	e7ba      	b.n	800785e <_dtoa_r+0x246>
 80078e8:	2300      	movs	r3, #0
 80078ea:	e7b2      	b.n	8007852 <_dtoa_r+0x23a>
 80078ec:	2300      	movs	r3, #0
 80078ee:	e7f0      	b.n	80078d2 <_dtoa_r+0x2ba>
 80078f0:	2501      	movs	r5, #1
 80078f2:	2300      	movs	r3, #0
 80078f4:	9306      	str	r3, [sp, #24]
 80078f6:	950a      	str	r5, [sp, #40]	; 0x28
 80078f8:	f04f 33ff 	mov.w	r3, #4294967295
 80078fc:	9302      	str	r3, [sp, #8]
 80078fe:	4699      	mov	r9, r3
 8007900:	2200      	movs	r2, #0
 8007902:	2312      	movs	r3, #18
 8007904:	920b      	str	r2, [sp, #44]	; 0x2c
 8007906:	e7aa      	b.n	800785e <_dtoa_r+0x246>
 8007908:	2301      	movs	r3, #1
 800790a:	930a      	str	r3, [sp, #40]	; 0x28
 800790c:	e7f4      	b.n	80078f8 <_dtoa_r+0x2e0>
 800790e:	2301      	movs	r3, #1
 8007910:	9302      	str	r3, [sp, #8]
 8007912:	4699      	mov	r9, r3
 8007914:	461a      	mov	r2, r3
 8007916:	e7f5      	b.n	8007904 <_dtoa_r+0x2ec>
 8007918:	3101      	adds	r1, #1
 800791a:	6071      	str	r1, [r6, #4]
 800791c:	0052      	lsls	r2, r2, #1
 800791e:	e7a2      	b.n	8007866 <_dtoa_r+0x24e>
 8007920:	636f4361 	.word	0x636f4361
 8007924:	3fd287a7 	.word	0x3fd287a7
 8007928:	8b60c8b3 	.word	0x8b60c8b3
 800792c:	3fc68a28 	.word	0x3fc68a28
 8007930:	509f79fb 	.word	0x509f79fb
 8007934:	3fd34413 	.word	0x3fd34413
 8007938:	7ff00000 	.word	0x7ff00000
 800793c:	08009cd9 	.word	0x08009cd9
 8007940:	3ff80000 	.word	0x3ff80000
 8007944:	08009d38 	.word	0x08009d38
 8007948:	08009d10 	.word	0x08009d10
 800794c:	08009d05 	.word	0x08009d05
 8007950:	07f1      	lsls	r1, r6, #31
 8007952:	d508      	bpl.n	8007966 <_dtoa_r+0x34e>
 8007954:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8007958:	e9d7 2300 	ldrd	r2, r3, [r7]
 800795c:	f7f8 fe4c 	bl	80005f8 <__aeabi_dmul>
 8007960:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8007964:	3501      	adds	r5, #1
 8007966:	1076      	asrs	r6, r6, #1
 8007968:	3708      	adds	r7, #8
 800796a:	2e00      	cmp	r6, #0
 800796c:	d1f0      	bne.n	8007950 <_dtoa_r+0x338>
 800796e:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8007972:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007976:	f7f8 ff69 	bl	800084c <__aeabi_ddiv>
 800797a:	e9cd 0100 	strd	r0, r1, [sp]
 800797e:	e01a      	b.n	80079b6 <_dtoa_r+0x39e>
 8007980:	2502      	movs	r5, #2
 8007982:	e7a3      	b.n	80078cc <_dtoa_r+0x2b4>
 8007984:	f000 80a0 	beq.w	8007ac8 <_dtoa_r+0x4b0>
 8007988:	f1ca 0600 	rsb	r6, sl, #0
 800798c:	4b9f      	ldr	r3, [pc, #636]	; (8007c0c <_dtoa_r+0x5f4>)
 800798e:	4fa0      	ldr	r7, [pc, #640]	; (8007c10 <_dtoa_r+0x5f8>)
 8007990:	f006 020f 	and.w	r2, r6, #15
 8007994:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007998:	e9d3 2300 	ldrd	r2, r3, [r3]
 800799c:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80079a0:	f7f8 fe2a 	bl	80005f8 <__aeabi_dmul>
 80079a4:	e9cd 0100 	strd	r0, r1, [sp]
 80079a8:	1136      	asrs	r6, r6, #4
 80079aa:	2300      	movs	r3, #0
 80079ac:	2502      	movs	r5, #2
 80079ae:	2e00      	cmp	r6, #0
 80079b0:	d17f      	bne.n	8007ab2 <_dtoa_r+0x49a>
 80079b2:	2b00      	cmp	r3, #0
 80079b4:	d1e1      	bne.n	800797a <_dtoa_r+0x362>
 80079b6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80079b8:	2b00      	cmp	r3, #0
 80079ba:	f000 8087 	beq.w	8007acc <_dtoa_r+0x4b4>
 80079be:	e9dd 6700 	ldrd	r6, r7, [sp]
 80079c2:	2200      	movs	r2, #0
 80079c4:	4b93      	ldr	r3, [pc, #588]	; (8007c14 <_dtoa_r+0x5fc>)
 80079c6:	4630      	mov	r0, r6
 80079c8:	4639      	mov	r1, r7
 80079ca:	f7f9 f887 	bl	8000adc <__aeabi_dcmplt>
 80079ce:	2800      	cmp	r0, #0
 80079d0:	d07c      	beq.n	8007acc <_dtoa_r+0x4b4>
 80079d2:	f1b9 0f00 	cmp.w	r9, #0
 80079d6:	d079      	beq.n	8007acc <_dtoa_r+0x4b4>
 80079d8:	9b02      	ldr	r3, [sp, #8]
 80079da:	2b00      	cmp	r3, #0
 80079dc:	dd35      	ble.n	8007a4a <_dtoa_r+0x432>
 80079de:	f10a 33ff 	add.w	r3, sl, #4294967295
 80079e2:	9308      	str	r3, [sp, #32]
 80079e4:	4639      	mov	r1, r7
 80079e6:	2200      	movs	r2, #0
 80079e8:	4b8b      	ldr	r3, [pc, #556]	; (8007c18 <_dtoa_r+0x600>)
 80079ea:	4630      	mov	r0, r6
 80079ec:	f7f8 fe04 	bl	80005f8 <__aeabi_dmul>
 80079f0:	e9cd 0100 	strd	r0, r1, [sp]
 80079f4:	9f02      	ldr	r7, [sp, #8]
 80079f6:	3501      	adds	r5, #1
 80079f8:	4628      	mov	r0, r5
 80079fa:	f7f8 fd93 	bl	8000524 <__aeabi_i2d>
 80079fe:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007a02:	f7f8 fdf9 	bl	80005f8 <__aeabi_dmul>
 8007a06:	2200      	movs	r2, #0
 8007a08:	4b84      	ldr	r3, [pc, #528]	; (8007c1c <_dtoa_r+0x604>)
 8007a0a:	f7f8 fc3f 	bl	800028c <__adddf3>
 8007a0e:	4605      	mov	r5, r0
 8007a10:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 8007a14:	2f00      	cmp	r7, #0
 8007a16:	d15d      	bne.n	8007ad4 <_dtoa_r+0x4bc>
 8007a18:	2200      	movs	r2, #0
 8007a1a:	4b81      	ldr	r3, [pc, #516]	; (8007c20 <_dtoa_r+0x608>)
 8007a1c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007a20:	f7f8 fc32 	bl	8000288 <__aeabi_dsub>
 8007a24:	462a      	mov	r2, r5
 8007a26:	4633      	mov	r3, r6
 8007a28:	e9cd 0100 	strd	r0, r1, [sp]
 8007a2c:	f7f9 f874 	bl	8000b18 <__aeabi_dcmpgt>
 8007a30:	2800      	cmp	r0, #0
 8007a32:	f040 8288 	bne.w	8007f46 <_dtoa_r+0x92e>
 8007a36:	462a      	mov	r2, r5
 8007a38:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 8007a3c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007a40:	f7f9 f84c 	bl	8000adc <__aeabi_dcmplt>
 8007a44:	2800      	cmp	r0, #0
 8007a46:	f040 827c 	bne.w	8007f42 <_dtoa_r+0x92a>
 8007a4a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8007a4e:	e9cd 2300 	strd	r2, r3, [sp]
 8007a52:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8007a54:	2b00      	cmp	r3, #0
 8007a56:	f2c0 8150 	blt.w	8007cfa <_dtoa_r+0x6e2>
 8007a5a:	f1ba 0f0e 	cmp.w	sl, #14
 8007a5e:	f300 814c 	bgt.w	8007cfa <_dtoa_r+0x6e2>
 8007a62:	4b6a      	ldr	r3, [pc, #424]	; (8007c0c <_dtoa_r+0x5f4>)
 8007a64:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8007a68:	ed93 7b00 	vldr	d7, [r3]
 8007a6c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007a6e:	2b00      	cmp	r3, #0
 8007a70:	ed8d 7b02 	vstr	d7, [sp, #8]
 8007a74:	f280 80d8 	bge.w	8007c28 <_dtoa_r+0x610>
 8007a78:	f1b9 0f00 	cmp.w	r9, #0
 8007a7c:	f300 80d4 	bgt.w	8007c28 <_dtoa_r+0x610>
 8007a80:	f040 825e 	bne.w	8007f40 <_dtoa_r+0x928>
 8007a84:	2200      	movs	r2, #0
 8007a86:	4b66      	ldr	r3, [pc, #408]	; (8007c20 <_dtoa_r+0x608>)
 8007a88:	ec51 0b17 	vmov	r0, r1, d7
 8007a8c:	f7f8 fdb4 	bl	80005f8 <__aeabi_dmul>
 8007a90:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007a94:	f7f9 f836 	bl	8000b04 <__aeabi_dcmpge>
 8007a98:	464f      	mov	r7, r9
 8007a9a:	464e      	mov	r6, r9
 8007a9c:	2800      	cmp	r0, #0
 8007a9e:	f040 8234 	bne.w	8007f0a <_dtoa_r+0x8f2>
 8007aa2:	2331      	movs	r3, #49	; 0x31
 8007aa4:	f10b 0501 	add.w	r5, fp, #1
 8007aa8:	f88b 3000 	strb.w	r3, [fp]
 8007aac:	f10a 0a01 	add.w	sl, sl, #1
 8007ab0:	e22f      	b.n	8007f12 <_dtoa_r+0x8fa>
 8007ab2:	07f2      	lsls	r2, r6, #31
 8007ab4:	d505      	bpl.n	8007ac2 <_dtoa_r+0x4aa>
 8007ab6:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007aba:	f7f8 fd9d 	bl	80005f8 <__aeabi_dmul>
 8007abe:	3501      	adds	r5, #1
 8007ac0:	2301      	movs	r3, #1
 8007ac2:	1076      	asrs	r6, r6, #1
 8007ac4:	3708      	adds	r7, #8
 8007ac6:	e772      	b.n	80079ae <_dtoa_r+0x396>
 8007ac8:	2502      	movs	r5, #2
 8007aca:	e774      	b.n	80079b6 <_dtoa_r+0x39e>
 8007acc:	f8cd a020 	str.w	sl, [sp, #32]
 8007ad0:	464f      	mov	r7, r9
 8007ad2:	e791      	b.n	80079f8 <_dtoa_r+0x3e0>
 8007ad4:	4b4d      	ldr	r3, [pc, #308]	; (8007c0c <_dtoa_r+0x5f4>)
 8007ad6:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8007ada:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 8007ade:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007ae0:	2b00      	cmp	r3, #0
 8007ae2:	d047      	beq.n	8007b74 <_dtoa_r+0x55c>
 8007ae4:	4602      	mov	r2, r0
 8007ae6:	460b      	mov	r3, r1
 8007ae8:	2000      	movs	r0, #0
 8007aea:	494e      	ldr	r1, [pc, #312]	; (8007c24 <_dtoa_r+0x60c>)
 8007aec:	f7f8 feae 	bl	800084c <__aeabi_ddiv>
 8007af0:	462a      	mov	r2, r5
 8007af2:	4633      	mov	r3, r6
 8007af4:	f7f8 fbc8 	bl	8000288 <__aeabi_dsub>
 8007af8:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8007afc:	465d      	mov	r5, fp
 8007afe:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007b02:	f7f9 f829 	bl	8000b58 <__aeabi_d2iz>
 8007b06:	4606      	mov	r6, r0
 8007b08:	f7f8 fd0c 	bl	8000524 <__aeabi_i2d>
 8007b0c:	4602      	mov	r2, r0
 8007b0e:	460b      	mov	r3, r1
 8007b10:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007b14:	f7f8 fbb8 	bl	8000288 <__aeabi_dsub>
 8007b18:	3630      	adds	r6, #48	; 0x30
 8007b1a:	f805 6b01 	strb.w	r6, [r5], #1
 8007b1e:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8007b22:	e9cd 0100 	strd	r0, r1, [sp]
 8007b26:	f7f8 ffd9 	bl	8000adc <__aeabi_dcmplt>
 8007b2a:	2800      	cmp	r0, #0
 8007b2c:	d163      	bne.n	8007bf6 <_dtoa_r+0x5de>
 8007b2e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007b32:	2000      	movs	r0, #0
 8007b34:	4937      	ldr	r1, [pc, #220]	; (8007c14 <_dtoa_r+0x5fc>)
 8007b36:	f7f8 fba7 	bl	8000288 <__aeabi_dsub>
 8007b3a:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8007b3e:	f7f8 ffcd 	bl	8000adc <__aeabi_dcmplt>
 8007b42:	2800      	cmp	r0, #0
 8007b44:	f040 80b7 	bne.w	8007cb6 <_dtoa_r+0x69e>
 8007b48:	eba5 030b 	sub.w	r3, r5, fp
 8007b4c:	429f      	cmp	r7, r3
 8007b4e:	f77f af7c 	ble.w	8007a4a <_dtoa_r+0x432>
 8007b52:	2200      	movs	r2, #0
 8007b54:	4b30      	ldr	r3, [pc, #192]	; (8007c18 <_dtoa_r+0x600>)
 8007b56:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8007b5a:	f7f8 fd4d 	bl	80005f8 <__aeabi_dmul>
 8007b5e:	2200      	movs	r2, #0
 8007b60:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8007b64:	4b2c      	ldr	r3, [pc, #176]	; (8007c18 <_dtoa_r+0x600>)
 8007b66:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007b6a:	f7f8 fd45 	bl	80005f8 <__aeabi_dmul>
 8007b6e:	e9cd 0100 	strd	r0, r1, [sp]
 8007b72:	e7c4      	b.n	8007afe <_dtoa_r+0x4e6>
 8007b74:	462a      	mov	r2, r5
 8007b76:	4633      	mov	r3, r6
 8007b78:	f7f8 fd3e 	bl	80005f8 <__aeabi_dmul>
 8007b7c:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8007b80:	eb0b 0507 	add.w	r5, fp, r7
 8007b84:	465e      	mov	r6, fp
 8007b86:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007b8a:	f7f8 ffe5 	bl	8000b58 <__aeabi_d2iz>
 8007b8e:	4607      	mov	r7, r0
 8007b90:	f7f8 fcc8 	bl	8000524 <__aeabi_i2d>
 8007b94:	3730      	adds	r7, #48	; 0x30
 8007b96:	4602      	mov	r2, r0
 8007b98:	460b      	mov	r3, r1
 8007b9a:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007b9e:	f7f8 fb73 	bl	8000288 <__aeabi_dsub>
 8007ba2:	f806 7b01 	strb.w	r7, [r6], #1
 8007ba6:	42ae      	cmp	r6, r5
 8007ba8:	e9cd 0100 	strd	r0, r1, [sp]
 8007bac:	f04f 0200 	mov.w	r2, #0
 8007bb0:	d126      	bne.n	8007c00 <_dtoa_r+0x5e8>
 8007bb2:	4b1c      	ldr	r3, [pc, #112]	; (8007c24 <_dtoa_r+0x60c>)
 8007bb4:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8007bb8:	f7f8 fb68 	bl	800028c <__adddf3>
 8007bbc:	4602      	mov	r2, r0
 8007bbe:	460b      	mov	r3, r1
 8007bc0:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007bc4:	f7f8 ffa8 	bl	8000b18 <__aeabi_dcmpgt>
 8007bc8:	2800      	cmp	r0, #0
 8007bca:	d174      	bne.n	8007cb6 <_dtoa_r+0x69e>
 8007bcc:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8007bd0:	2000      	movs	r0, #0
 8007bd2:	4914      	ldr	r1, [pc, #80]	; (8007c24 <_dtoa_r+0x60c>)
 8007bd4:	f7f8 fb58 	bl	8000288 <__aeabi_dsub>
 8007bd8:	4602      	mov	r2, r0
 8007bda:	460b      	mov	r3, r1
 8007bdc:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007be0:	f7f8 ff7c 	bl	8000adc <__aeabi_dcmplt>
 8007be4:	2800      	cmp	r0, #0
 8007be6:	f43f af30 	beq.w	8007a4a <_dtoa_r+0x432>
 8007bea:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8007bee:	2b30      	cmp	r3, #48	; 0x30
 8007bf0:	f105 32ff 	add.w	r2, r5, #4294967295
 8007bf4:	d002      	beq.n	8007bfc <_dtoa_r+0x5e4>
 8007bf6:	f8dd a020 	ldr.w	sl, [sp, #32]
 8007bfa:	e04a      	b.n	8007c92 <_dtoa_r+0x67a>
 8007bfc:	4615      	mov	r5, r2
 8007bfe:	e7f4      	b.n	8007bea <_dtoa_r+0x5d2>
 8007c00:	4b05      	ldr	r3, [pc, #20]	; (8007c18 <_dtoa_r+0x600>)
 8007c02:	f7f8 fcf9 	bl	80005f8 <__aeabi_dmul>
 8007c06:	e9cd 0100 	strd	r0, r1, [sp]
 8007c0a:	e7bc      	b.n	8007b86 <_dtoa_r+0x56e>
 8007c0c:	08009d38 	.word	0x08009d38
 8007c10:	08009d10 	.word	0x08009d10
 8007c14:	3ff00000 	.word	0x3ff00000
 8007c18:	40240000 	.word	0x40240000
 8007c1c:	401c0000 	.word	0x401c0000
 8007c20:	40140000 	.word	0x40140000
 8007c24:	3fe00000 	.word	0x3fe00000
 8007c28:	e9dd 6700 	ldrd	r6, r7, [sp]
 8007c2c:	465d      	mov	r5, fp
 8007c2e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007c32:	4630      	mov	r0, r6
 8007c34:	4639      	mov	r1, r7
 8007c36:	f7f8 fe09 	bl	800084c <__aeabi_ddiv>
 8007c3a:	f7f8 ff8d 	bl	8000b58 <__aeabi_d2iz>
 8007c3e:	4680      	mov	r8, r0
 8007c40:	f7f8 fc70 	bl	8000524 <__aeabi_i2d>
 8007c44:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007c48:	f7f8 fcd6 	bl	80005f8 <__aeabi_dmul>
 8007c4c:	4602      	mov	r2, r0
 8007c4e:	460b      	mov	r3, r1
 8007c50:	4630      	mov	r0, r6
 8007c52:	4639      	mov	r1, r7
 8007c54:	f108 0630 	add.w	r6, r8, #48	; 0x30
 8007c58:	f7f8 fb16 	bl	8000288 <__aeabi_dsub>
 8007c5c:	f805 6b01 	strb.w	r6, [r5], #1
 8007c60:	eba5 060b 	sub.w	r6, r5, fp
 8007c64:	45b1      	cmp	r9, r6
 8007c66:	4602      	mov	r2, r0
 8007c68:	460b      	mov	r3, r1
 8007c6a:	d139      	bne.n	8007ce0 <_dtoa_r+0x6c8>
 8007c6c:	f7f8 fb0e 	bl	800028c <__adddf3>
 8007c70:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007c74:	4606      	mov	r6, r0
 8007c76:	460f      	mov	r7, r1
 8007c78:	f7f8 ff4e 	bl	8000b18 <__aeabi_dcmpgt>
 8007c7c:	b9c8      	cbnz	r0, 8007cb2 <_dtoa_r+0x69a>
 8007c7e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007c82:	4630      	mov	r0, r6
 8007c84:	4639      	mov	r1, r7
 8007c86:	f7f8 ff1f 	bl	8000ac8 <__aeabi_dcmpeq>
 8007c8a:	b110      	cbz	r0, 8007c92 <_dtoa_r+0x67a>
 8007c8c:	f018 0f01 	tst.w	r8, #1
 8007c90:	d10f      	bne.n	8007cb2 <_dtoa_r+0x69a>
 8007c92:	9904      	ldr	r1, [sp, #16]
 8007c94:	4620      	mov	r0, r4
 8007c96:	f000 fc32 	bl	80084fe <_Bfree>
 8007c9a:	2300      	movs	r3, #0
 8007c9c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8007c9e:	702b      	strb	r3, [r5, #0]
 8007ca0:	f10a 0301 	add.w	r3, sl, #1
 8007ca4:	6013      	str	r3, [r2, #0]
 8007ca6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007ca8:	2b00      	cmp	r3, #0
 8007caa:	f000 8241 	beq.w	8008130 <_dtoa_r+0xb18>
 8007cae:	601d      	str	r5, [r3, #0]
 8007cb0:	e23e      	b.n	8008130 <_dtoa_r+0xb18>
 8007cb2:	f8cd a020 	str.w	sl, [sp, #32]
 8007cb6:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8007cba:	2a39      	cmp	r2, #57	; 0x39
 8007cbc:	f105 33ff 	add.w	r3, r5, #4294967295
 8007cc0:	d108      	bne.n	8007cd4 <_dtoa_r+0x6bc>
 8007cc2:	459b      	cmp	fp, r3
 8007cc4:	d10a      	bne.n	8007cdc <_dtoa_r+0x6c4>
 8007cc6:	9b08      	ldr	r3, [sp, #32]
 8007cc8:	3301      	adds	r3, #1
 8007cca:	9308      	str	r3, [sp, #32]
 8007ccc:	2330      	movs	r3, #48	; 0x30
 8007cce:	f88b 3000 	strb.w	r3, [fp]
 8007cd2:	465b      	mov	r3, fp
 8007cd4:	781a      	ldrb	r2, [r3, #0]
 8007cd6:	3201      	adds	r2, #1
 8007cd8:	701a      	strb	r2, [r3, #0]
 8007cda:	e78c      	b.n	8007bf6 <_dtoa_r+0x5de>
 8007cdc:	461d      	mov	r5, r3
 8007cde:	e7ea      	b.n	8007cb6 <_dtoa_r+0x69e>
 8007ce0:	2200      	movs	r2, #0
 8007ce2:	4b9b      	ldr	r3, [pc, #620]	; (8007f50 <_dtoa_r+0x938>)
 8007ce4:	f7f8 fc88 	bl	80005f8 <__aeabi_dmul>
 8007ce8:	2200      	movs	r2, #0
 8007cea:	2300      	movs	r3, #0
 8007cec:	4606      	mov	r6, r0
 8007cee:	460f      	mov	r7, r1
 8007cf0:	f7f8 feea 	bl	8000ac8 <__aeabi_dcmpeq>
 8007cf4:	2800      	cmp	r0, #0
 8007cf6:	d09a      	beq.n	8007c2e <_dtoa_r+0x616>
 8007cf8:	e7cb      	b.n	8007c92 <_dtoa_r+0x67a>
 8007cfa:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007cfc:	2a00      	cmp	r2, #0
 8007cfe:	f000 808b 	beq.w	8007e18 <_dtoa_r+0x800>
 8007d02:	9a06      	ldr	r2, [sp, #24]
 8007d04:	2a01      	cmp	r2, #1
 8007d06:	dc6e      	bgt.n	8007de6 <_dtoa_r+0x7ce>
 8007d08:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8007d0a:	2a00      	cmp	r2, #0
 8007d0c:	d067      	beq.n	8007dde <_dtoa_r+0x7c6>
 8007d0e:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8007d12:	9f07      	ldr	r7, [sp, #28]
 8007d14:	9d05      	ldr	r5, [sp, #20]
 8007d16:	9a05      	ldr	r2, [sp, #20]
 8007d18:	2101      	movs	r1, #1
 8007d1a:	441a      	add	r2, r3
 8007d1c:	4620      	mov	r0, r4
 8007d1e:	9205      	str	r2, [sp, #20]
 8007d20:	4498      	add	r8, r3
 8007d22:	f000 fc8c 	bl	800863e <__i2b>
 8007d26:	4606      	mov	r6, r0
 8007d28:	2d00      	cmp	r5, #0
 8007d2a:	dd0c      	ble.n	8007d46 <_dtoa_r+0x72e>
 8007d2c:	f1b8 0f00 	cmp.w	r8, #0
 8007d30:	dd09      	ble.n	8007d46 <_dtoa_r+0x72e>
 8007d32:	4545      	cmp	r5, r8
 8007d34:	9a05      	ldr	r2, [sp, #20]
 8007d36:	462b      	mov	r3, r5
 8007d38:	bfa8      	it	ge
 8007d3a:	4643      	movge	r3, r8
 8007d3c:	1ad2      	subs	r2, r2, r3
 8007d3e:	9205      	str	r2, [sp, #20]
 8007d40:	1aed      	subs	r5, r5, r3
 8007d42:	eba8 0803 	sub.w	r8, r8, r3
 8007d46:	9b07      	ldr	r3, [sp, #28]
 8007d48:	b1eb      	cbz	r3, 8007d86 <_dtoa_r+0x76e>
 8007d4a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007d4c:	2b00      	cmp	r3, #0
 8007d4e:	d067      	beq.n	8007e20 <_dtoa_r+0x808>
 8007d50:	b18f      	cbz	r7, 8007d76 <_dtoa_r+0x75e>
 8007d52:	4631      	mov	r1, r6
 8007d54:	463a      	mov	r2, r7
 8007d56:	4620      	mov	r0, r4
 8007d58:	f000 fd10 	bl	800877c <__pow5mult>
 8007d5c:	9a04      	ldr	r2, [sp, #16]
 8007d5e:	4601      	mov	r1, r0
 8007d60:	4606      	mov	r6, r0
 8007d62:	4620      	mov	r0, r4
 8007d64:	f000 fc74 	bl	8008650 <__multiply>
 8007d68:	9904      	ldr	r1, [sp, #16]
 8007d6a:	9008      	str	r0, [sp, #32]
 8007d6c:	4620      	mov	r0, r4
 8007d6e:	f000 fbc6 	bl	80084fe <_Bfree>
 8007d72:	9b08      	ldr	r3, [sp, #32]
 8007d74:	9304      	str	r3, [sp, #16]
 8007d76:	9b07      	ldr	r3, [sp, #28]
 8007d78:	1bda      	subs	r2, r3, r7
 8007d7a:	d004      	beq.n	8007d86 <_dtoa_r+0x76e>
 8007d7c:	9904      	ldr	r1, [sp, #16]
 8007d7e:	4620      	mov	r0, r4
 8007d80:	f000 fcfc 	bl	800877c <__pow5mult>
 8007d84:	9004      	str	r0, [sp, #16]
 8007d86:	2101      	movs	r1, #1
 8007d88:	4620      	mov	r0, r4
 8007d8a:	f000 fc58 	bl	800863e <__i2b>
 8007d8e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007d90:	4607      	mov	r7, r0
 8007d92:	2b00      	cmp	r3, #0
 8007d94:	f000 81d0 	beq.w	8008138 <_dtoa_r+0xb20>
 8007d98:	461a      	mov	r2, r3
 8007d9a:	4601      	mov	r1, r0
 8007d9c:	4620      	mov	r0, r4
 8007d9e:	f000 fced 	bl	800877c <__pow5mult>
 8007da2:	9b06      	ldr	r3, [sp, #24]
 8007da4:	2b01      	cmp	r3, #1
 8007da6:	4607      	mov	r7, r0
 8007da8:	dc40      	bgt.n	8007e2c <_dtoa_r+0x814>
 8007daa:	9b00      	ldr	r3, [sp, #0]
 8007dac:	2b00      	cmp	r3, #0
 8007dae:	d139      	bne.n	8007e24 <_dtoa_r+0x80c>
 8007db0:	9b01      	ldr	r3, [sp, #4]
 8007db2:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007db6:	2b00      	cmp	r3, #0
 8007db8:	d136      	bne.n	8007e28 <_dtoa_r+0x810>
 8007dba:	9b01      	ldr	r3, [sp, #4]
 8007dbc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8007dc0:	0d1b      	lsrs	r3, r3, #20
 8007dc2:	051b      	lsls	r3, r3, #20
 8007dc4:	b12b      	cbz	r3, 8007dd2 <_dtoa_r+0x7ba>
 8007dc6:	9b05      	ldr	r3, [sp, #20]
 8007dc8:	3301      	adds	r3, #1
 8007dca:	9305      	str	r3, [sp, #20]
 8007dcc:	f108 0801 	add.w	r8, r8, #1
 8007dd0:	2301      	movs	r3, #1
 8007dd2:	9307      	str	r3, [sp, #28]
 8007dd4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007dd6:	2b00      	cmp	r3, #0
 8007dd8:	d12a      	bne.n	8007e30 <_dtoa_r+0x818>
 8007dda:	2001      	movs	r0, #1
 8007ddc:	e030      	b.n	8007e40 <_dtoa_r+0x828>
 8007dde:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8007de0:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8007de4:	e795      	b.n	8007d12 <_dtoa_r+0x6fa>
 8007de6:	9b07      	ldr	r3, [sp, #28]
 8007de8:	f109 37ff 	add.w	r7, r9, #4294967295
 8007dec:	42bb      	cmp	r3, r7
 8007dee:	bfbf      	itttt	lt
 8007df0:	9b07      	ldrlt	r3, [sp, #28]
 8007df2:	9707      	strlt	r7, [sp, #28]
 8007df4:	1afa      	sublt	r2, r7, r3
 8007df6:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 8007df8:	bfbb      	ittet	lt
 8007dfa:	189b      	addlt	r3, r3, r2
 8007dfc:	930e      	strlt	r3, [sp, #56]	; 0x38
 8007dfe:	1bdf      	subge	r7, r3, r7
 8007e00:	2700      	movlt	r7, #0
 8007e02:	f1b9 0f00 	cmp.w	r9, #0
 8007e06:	bfb5      	itete	lt
 8007e08:	9b05      	ldrlt	r3, [sp, #20]
 8007e0a:	9d05      	ldrge	r5, [sp, #20]
 8007e0c:	eba3 0509 	sublt.w	r5, r3, r9
 8007e10:	464b      	movge	r3, r9
 8007e12:	bfb8      	it	lt
 8007e14:	2300      	movlt	r3, #0
 8007e16:	e77e      	b.n	8007d16 <_dtoa_r+0x6fe>
 8007e18:	9f07      	ldr	r7, [sp, #28]
 8007e1a:	9d05      	ldr	r5, [sp, #20]
 8007e1c:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 8007e1e:	e783      	b.n	8007d28 <_dtoa_r+0x710>
 8007e20:	9a07      	ldr	r2, [sp, #28]
 8007e22:	e7ab      	b.n	8007d7c <_dtoa_r+0x764>
 8007e24:	2300      	movs	r3, #0
 8007e26:	e7d4      	b.n	8007dd2 <_dtoa_r+0x7ba>
 8007e28:	9b00      	ldr	r3, [sp, #0]
 8007e2a:	e7d2      	b.n	8007dd2 <_dtoa_r+0x7ba>
 8007e2c:	2300      	movs	r3, #0
 8007e2e:	9307      	str	r3, [sp, #28]
 8007e30:	693b      	ldr	r3, [r7, #16]
 8007e32:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 8007e36:	6918      	ldr	r0, [r3, #16]
 8007e38:	f000 fbb3 	bl	80085a2 <__hi0bits>
 8007e3c:	f1c0 0020 	rsb	r0, r0, #32
 8007e40:	4440      	add	r0, r8
 8007e42:	f010 001f 	ands.w	r0, r0, #31
 8007e46:	d047      	beq.n	8007ed8 <_dtoa_r+0x8c0>
 8007e48:	f1c0 0320 	rsb	r3, r0, #32
 8007e4c:	2b04      	cmp	r3, #4
 8007e4e:	dd3b      	ble.n	8007ec8 <_dtoa_r+0x8b0>
 8007e50:	9b05      	ldr	r3, [sp, #20]
 8007e52:	f1c0 001c 	rsb	r0, r0, #28
 8007e56:	4403      	add	r3, r0
 8007e58:	9305      	str	r3, [sp, #20]
 8007e5a:	4405      	add	r5, r0
 8007e5c:	4480      	add	r8, r0
 8007e5e:	9b05      	ldr	r3, [sp, #20]
 8007e60:	2b00      	cmp	r3, #0
 8007e62:	dd05      	ble.n	8007e70 <_dtoa_r+0x858>
 8007e64:	461a      	mov	r2, r3
 8007e66:	9904      	ldr	r1, [sp, #16]
 8007e68:	4620      	mov	r0, r4
 8007e6a:	f000 fcd5 	bl	8008818 <__lshift>
 8007e6e:	9004      	str	r0, [sp, #16]
 8007e70:	f1b8 0f00 	cmp.w	r8, #0
 8007e74:	dd05      	ble.n	8007e82 <_dtoa_r+0x86a>
 8007e76:	4639      	mov	r1, r7
 8007e78:	4642      	mov	r2, r8
 8007e7a:	4620      	mov	r0, r4
 8007e7c:	f000 fccc 	bl	8008818 <__lshift>
 8007e80:	4607      	mov	r7, r0
 8007e82:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007e84:	b353      	cbz	r3, 8007edc <_dtoa_r+0x8c4>
 8007e86:	4639      	mov	r1, r7
 8007e88:	9804      	ldr	r0, [sp, #16]
 8007e8a:	f000 fd19 	bl	80088c0 <__mcmp>
 8007e8e:	2800      	cmp	r0, #0
 8007e90:	da24      	bge.n	8007edc <_dtoa_r+0x8c4>
 8007e92:	2300      	movs	r3, #0
 8007e94:	220a      	movs	r2, #10
 8007e96:	9904      	ldr	r1, [sp, #16]
 8007e98:	4620      	mov	r0, r4
 8007e9a:	f000 fb47 	bl	800852c <__multadd>
 8007e9e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007ea0:	9004      	str	r0, [sp, #16]
 8007ea2:	f10a 3aff 	add.w	sl, sl, #4294967295
 8007ea6:	2b00      	cmp	r3, #0
 8007ea8:	f000 814d 	beq.w	8008146 <_dtoa_r+0xb2e>
 8007eac:	2300      	movs	r3, #0
 8007eae:	4631      	mov	r1, r6
 8007eb0:	220a      	movs	r2, #10
 8007eb2:	4620      	mov	r0, r4
 8007eb4:	f000 fb3a 	bl	800852c <__multadd>
 8007eb8:	9b02      	ldr	r3, [sp, #8]
 8007eba:	2b00      	cmp	r3, #0
 8007ebc:	4606      	mov	r6, r0
 8007ebe:	dc4f      	bgt.n	8007f60 <_dtoa_r+0x948>
 8007ec0:	9b06      	ldr	r3, [sp, #24]
 8007ec2:	2b02      	cmp	r3, #2
 8007ec4:	dd4c      	ble.n	8007f60 <_dtoa_r+0x948>
 8007ec6:	e011      	b.n	8007eec <_dtoa_r+0x8d4>
 8007ec8:	d0c9      	beq.n	8007e5e <_dtoa_r+0x846>
 8007eca:	9a05      	ldr	r2, [sp, #20]
 8007ecc:	331c      	adds	r3, #28
 8007ece:	441a      	add	r2, r3
 8007ed0:	9205      	str	r2, [sp, #20]
 8007ed2:	441d      	add	r5, r3
 8007ed4:	4498      	add	r8, r3
 8007ed6:	e7c2      	b.n	8007e5e <_dtoa_r+0x846>
 8007ed8:	4603      	mov	r3, r0
 8007eda:	e7f6      	b.n	8007eca <_dtoa_r+0x8b2>
 8007edc:	f1b9 0f00 	cmp.w	r9, #0
 8007ee0:	dc38      	bgt.n	8007f54 <_dtoa_r+0x93c>
 8007ee2:	9b06      	ldr	r3, [sp, #24]
 8007ee4:	2b02      	cmp	r3, #2
 8007ee6:	dd35      	ble.n	8007f54 <_dtoa_r+0x93c>
 8007ee8:	f8cd 9008 	str.w	r9, [sp, #8]
 8007eec:	9b02      	ldr	r3, [sp, #8]
 8007eee:	b963      	cbnz	r3, 8007f0a <_dtoa_r+0x8f2>
 8007ef0:	4639      	mov	r1, r7
 8007ef2:	2205      	movs	r2, #5
 8007ef4:	4620      	mov	r0, r4
 8007ef6:	f000 fb19 	bl	800852c <__multadd>
 8007efa:	4601      	mov	r1, r0
 8007efc:	4607      	mov	r7, r0
 8007efe:	9804      	ldr	r0, [sp, #16]
 8007f00:	f000 fcde 	bl	80088c0 <__mcmp>
 8007f04:	2800      	cmp	r0, #0
 8007f06:	f73f adcc 	bgt.w	8007aa2 <_dtoa_r+0x48a>
 8007f0a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007f0c:	465d      	mov	r5, fp
 8007f0e:	ea6f 0a03 	mvn.w	sl, r3
 8007f12:	f04f 0900 	mov.w	r9, #0
 8007f16:	4639      	mov	r1, r7
 8007f18:	4620      	mov	r0, r4
 8007f1a:	f000 faf0 	bl	80084fe <_Bfree>
 8007f1e:	2e00      	cmp	r6, #0
 8007f20:	f43f aeb7 	beq.w	8007c92 <_dtoa_r+0x67a>
 8007f24:	f1b9 0f00 	cmp.w	r9, #0
 8007f28:	d005      	beq.n	8007f36 <_dtoa_r+0x91e>
 8007f2a:	45b1      	cmp	r9, r6
 8007f2c:	d003      	beq.n	8007f36 <_dtoa_r+0x91e>
 8007f2e:	4649      	mov	r1, r9
 8007f30:	4620      	mov	r0, r4
 8007f32:	f000 fae4 	bl	80084fe <_Bfree>
 8007f36:	4631      	mov	r1, r6
 8007f38:	4620      	mov	r0, r4
 8007f3a:	f000 fae0 	bl	80084fe <_Bfree>
 8007f3e:	e6a8      	b.n	8007c92 <_dtoa_r+0x67a>
 8007f40:	2700      	movs	r7, #0
 8007f42:	463e      	mov	r6, r7
 8007f44:	e7e1      	b.n	8007f0a <_dtoa_r+0x8f2>
 8007f46:	f8dd a020 	ldr.w	sl, [sp, #32]
 8007f4a:	463e      	mov	r6, r7
 8007f4c:	e5a9      	b.n	8007aa2 <_dtoa_r+0x48a>
 8007f4e:	bf00      	nop
 8007f50:	40240000 	.word	0x40240000
 8007f54:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007f56:	f8cd 9008 	str.w	r9, [sp, #8]
 8007f5a:	2b00      	cmp	r3, #0
 8007f5c:	f000 80fa 	beq.w	8008154 <_dtoa_r+0xb3c>
 8007f60:	2d00      	cmp	r5, #0
 8007f62:	dd05      	ble.n	8007f70 <_dtoa_r+0x958>
 8007f64:	4631      	mov	r1, r6
 8007f66:	462a      	mov	r2, r5
 8007f68:	4620      	mov	r0, r4
 8007f6a:	f000 fc55 	bl	8008818 <__lshift>
 8007f6e:	4606      	mov	r6, r0
 8007f70:	9b07      	ldr	r3, [sp, #28]
 8007f72:	2b00      	cmp	r3, #0
 8007f74:	d04c      	beq.n	8008010 <_dtoa_r+0x9f8>
 8007f76:	6871      	ldr	r1, [r6, #4]
 8007f78:	4620      	mov	r0, r4
 8007f7a:	f000 fa8c 	bl	8008496 <_Balloc>
 8007f7e:	6932      	ldr	r2, [r6, #16]
 8007f80:	3202      	adds	r2, #2
 8007f82:	4605      	mov	r5, r0
 8007f84:	0092      	lsls	r2, r2, #2
 8007f86:	f106 010c 	add.w	r1, r6, #12
 8007f8a:	300c      	adds	r0, #12
 8007f8c:	f000 fa76 	bl	800847c <memcpy>
 8007f90:	2201      	movs	r2, #1
 8007f92:	4629      	mov	r1, r5
 8007f94:	4620      	mov	r0, r4
 8007f96:	f000 fc3f 	bl	8008818 <__lshift>
 8007f9a:	9b00      	ldr	r3, [sp, #0]
 8007f9c:	f8cd b014 	str.w	fp, [sp, #20]
 8007fa0:	f003 0301 	and.w	r3, r3, #1
 8007fa4:	46b1      	mov	r9, r6
 8007fa6:	9307      	str	r3, [sp, #28]
 8007fa8:	4606      	mov	r6, r0
 8007faa:	4639      	mov	r1, r7
 8007fac:	9804      	ldr	r0, [sp, #16]
 8007fae:	f7ff faa5 	bl	80074fc <quorem>
 8007fb2:	4649      	mov	r1, r9
 8007fb4:	4605      	mov	r5, r0
 8007fb6:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8007fba:	9804      	ldr	r0, [sp, #16]
 8007fbc:	f000 fc80 	bl	80088c0 <__mcmp>
 8007fc0:	4632      	mov	r2, r6
 8007fc2:	9000      	str	r0, [sp, #0]
 8007fc4:	4639      	mov	r1, r7
 8007fc6:	4620      	mov	r0, r4
 8007fc8:	f000 fc94 	bl	80088f4 <__mdiff>
 8007fcc:	68c3      	ldr	r3, [r0, #12]
 8007fce:	4602      	mov	r2, r0
 8007fd0:	bb03      	cbnz	r3, 8008014 <_dtoa_r+0x9fc>
 8007fd2:	4601      	mov	r1, r0
 8007fd4:	9008      	str	r0, [sp, #32]
 8007fd6:	9804      	ldr	r0, [sp, #16]
 8007fd8:	f000 fc72 	bl	80088c0 <__mcmp>
 8007fdc:	9a08      	ldr	r2, [sp, #32]
 8007fde:	4603      	mov	r3, r0
 8007fe0:	4611      	mov	r1, r2
 8007fe2:	4620      	mov	r0, r4
 8007fe4:	9308      	str	r3, [sp, #32]
 8007fe6:	f000 fa8a 	bl	80084fe <_Bfree>
 8007fea:	9b08      	ldr	r3, [sp, #32]
 8007fec:	b9a3      	cbnz	r3, 8008018 <_dtoa_r+0xa00>
 8007fee:	9a06      	ldr	r2, [sp, #24]
 8007ff0:	b992      	cbnz	r2, 8008018 <_dtoa_r+0xa00>
 8007ff2:	9a07      	ldr	r2, [sp, #28]
 8007ff4:	b982      	cbnz	r2, 8008018 <_dtoa_r+0xa00>
 8007ff6:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8007ffa:	d029      	beq.n	8008050 <_dtoa_r+0xa38>
 8007ffc:	9b00      	ldr	r3, [sp, #0]
 8007ffe:	2b00      	cmp	r3, #0
 8008000:	dd01      	ble.n	8008006 <_dtoa_r+0x9ee>
 8008002:	f105 0831 	add.w	r8, r5, #49	; 0x31
 8008006:	9b05      	ldr	r3, [sp, #20]
 8008008:	1c5d      	adds	r5, r3, #1
 800800a:	f883 8000 	strb.w	r8, [r3]
 800800e:	e782      	b.n	8007f16 <_dtoa_r+0x8fe>
 8008010:	4630      	mov	r0, r6
 8008012:	e7c2      	b.n	8007f9a <_dtoa_r+0x982>
 8008014:	2301      	movs	r3, #1
 8008016:	e7e3      	b.n	8007fe0 <_dtoa_r+0x9c8>
 8008018:	9a00      	ldr	r2, [sp, #0]
 800801a:	2a00      	cmp	r2, #0
 800801c:	db04      	blt.n	8008028 <_dtoa_r+0xa10>
 800801e:	d125      	bne.n	800806c <_dtoa_r+0xa54>
 8008020:	9a06      	ldr	r2, [sp, #24]
 8008022:	bb1a      	cbnz	r2, 800806c <_dtoa_r+0xa54>
 8008024:	9a07      	ldr	r2, [sp, #28]
 8008026:	bb0a      	cbnz	r2, 800806c <_dtoa_r+0xa54>
 8008028:	2b00      	cmp	r3, #0
 800802a:	ddec      	ble.n	8008006 <_dtoa_r+0x9ee>
 800802c:	2201      	movs	r2, #1
 800802e:	9904      	ldr	r1, [sp, #16]
 8008030:	4620      	mov	r0, r4
 8008032:	f000 fbf1 	bl	8008818 <__lshift>
 8008036:	4639      	mov	r1, r7
 8008038:	9004      	str	r0, [sp, #16]
 800803a:	f000 fc41 	bl	80088c0 <__mcmp>
 800803e:	2800      	cmp	r0, #0
 8008040:	dc03      	bgt.n	800804a <_dtoa_r+0xa32>
 8008042:	d1e0      	bne.n	8008006 <_dtoa_r+0x9ee>
 8008044:	f018 0f01 	tst.w	r8, #1
 8008048:	d0dd      	beq.n	8008006 <_dtoa_r+0x9ee>
 800804a:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800804e:	d1d8      	bne.n	8008002 <_dtoa_r+0x9ea>
 8008050:	9b05      	ldr	r3, [sp, #20]
 8008052:	9a05      	ldr	r2, [sp, #20]
 8008054:	1c5d      	adds	r5, r3, #1
 8008056:	2339      	movs	r3, #57	; 0x39
 8008058:	7013      	strb	r3, [r2, #0]
 800805a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800805e:	2b39      	cmp	r3, #57	; 0x39
 8008060:	f105 32ff 	add.w	r2, r5, #4294967295
 8008064:	d04f      	beq.n	8008106 <_dtoa_r+0xaee>
 8008066:	3301      	adds	r3, #1
 8008068:	7013      	strb	r3, [r2, #0]
 800806a:	e754      	b.n	8007f16 <_dtoa_r+0x8fe>
 800806c:	9a05      	ldr	r2, [sp, #20]
 800806e:	2b00      	cmp	r3, #0
 8008070:	f102 0501 	add.w	r5, r2, #1
 8008074:	dd06      	ble.n	8008084 <_dtoa_r+0xa6c>
 8008076:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800807a:	d0e9      	beq.n	8008050 <_dtoa_r+0xa38>
 800807c:	f108 0801 	add.w	r8, r8, #1
 8008080:	9b05      	ldr	r3, [sp, #20]
 8008082:	e7c2      	b.n	800800a <_dtoa_r+0x9f2>
 8008084:	9a02      	ldr	r2, [sp, #8]
 8008086:	f805 8c01 	strb.w	r8, [r5, #-1]
 800808a:	eba5 030b 	sub.w	r3, r5, fp
 800808e:	4293      	cmp	r3, r2
 8008090:	d021      	beq.n	80080d6 <_dtoa_r+0xabe>
 8008092:	2300      	movs	r3, #0
 8008094:	220a      	movs	r2, #10
 8008096:	9904      	ldr	r1, [sp, #16]
 8008098:	4620      	mov	r0, r4
 800809a:	f000 fa47 	bl	800852c <__multadd>
 800809e:	45b1      	cmp	r9, r6
 80080a0:	9004      	str	r0, [sp, #16]
 80080a2:	f04f 0300 	mov.w	r3, #0
 80080a6:	f04f 020a 	mov.w	r2, #10
 80080aa:	4649      	mov	r1, r9
 80080ac:	4620      	mov	r0, r4
 80080ae:	d105      	bne.n	80080bc <_dtoa_r+0xaa4>
 80080b0:	f000 fa3c 	bl	800852c <__multadd>
 80080b4:	4681      	mov	r9, r0
 80080b6:	4606      	mov	r6, r0
 80080b8:	9505      	str	r5, [sp, #20]
 80080ba:	e776      	b.n	8007faa <_dtoa_r+0x992>
 80080bc:	f000 fa36 	bl	800852c <__multadd>
 80080c0:	4631      	mov	r1, r6
 80080c2:	4681      	mov	r9, r0
 80080c4:	2300      	movs	r3, #0
 80080c6:	220a      	movs	r2, #10
 80080c8:	4620      	mov	r0, r4
 80080ca:	f000 fa2f 	bl	800852c <__multadd>
 80080ce:	4606      	mov	r6, r0
 80080d0:	e7f2      	b.n	80080b8 <_dtoa_r+0xaa0>
 80080d2:	f04f 0900 	mov.w	r9, #0
 80080d6:	2201      	movs	r2, #1
 80080d8:	9904      	ldr	r1, [sp, #16]
 80080da:	4620      	mov	r0, r4
 80080dc:	f000 fb9c 	bl	8008818 <__lshift>
 80080e0:	4639      	mov	r1, r7
 80080e2:	9004      	str	r0, [sp, #16]
 80080e4:	f000 fbec 	bl	80088c0 <__mcmp>
 80080e8:	2800      	cmp	r0, #0
 80080ea:	dcb6      	bgt.n	800805a <_dtoa_r+0xa42>
 80080ec:	d102      	bne.n	80080f4 <_dtoa_r+0xadc>
 80080ee:	f018 0f01 	tst.w	r8, #1
 80080f2:	d1b2      	bne.n	800805a <_dtoa_r+0xa42>
 80080f4:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80080f8:	2b30      	cmp	r3, #48	; 0x30
 80080fa:	f105 32ff 	add.w	r2, r5, #4294967295
 80080fe:	f47f af0a 	bne.w	8007f16 <_dtoa_r+0x8fe>
 8008102:	4615      	mov	r5, r2
 8008104:	e7f6      	b.n	80080f4 <_dtoa_r+0xadc>
 8008106:	4593      	cmp	fp, r2
 8008108:	d105      	bne.n	8008116 <_dtoa_r+0xafe>
 800810a:	2331      	movs	r3, #49	; 0x31
 800810c:	f10a 0a01 	add.w	sl, sl, #1
 8008110:	f88b 3000 	strb.w	r3, [fp]
 8008114:	e6ff      	b.n	8007f16 <_dtoa_r+0x8fe>
 8008116:	4615      	mov	r5, r2
 8008118:	e79f      	b.n	800805a <_dtoa_r+0xa42>
 800811a:	f8df b064 	ldr.w	fp, [pc, #100]	; 8008180 <_dtoa_r+0xb68>
 800811e:	e007      	b.n	8008130 <_dtoa_r+0xb18>
 8008120:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008122:	f8df b060 	ldr.w	fp, [pc, #96]	; 8008184 <_dtoa_r+0xb6c>
 8008126:	b11b      	cbz	r3, 8008130 <_dtoa_r+0xb18>
 8008128:	f10b 0308 	add.w	r3, fp, #8
 800812c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800812e:	6013      	str	r3, [r2, #0]
 8008130:	4658      	mov	r0, fp
 8008132:	b017      	add	sp, #92	; 0x5c
 8008134:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008138:	9b06      	ldr	r3, [sp, #24]
 800813a:	2b01      	cmp	r3, #1
 800813c:	f77f ae35 	ble.w	8007daa <_dtoa_r+0x792>
 8008140:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008142:	9307      	str	r3, [sp, #28]
 8008144:	e649      	b.n	8007dda <_dtoa_r+0x7c2>
 8008146:	9b02      	ldr	r3, [sp, #8]
 8008148:	2b00      	cmp	r3, #0
 800814a:	dc03      	bgt.n	8008154 <_dtoa_r+0xb3c>
 800814c:	9b06      	ldr	r3, [sp, #24]
 800814e:	2b02      	cmp	r3, #2
 8008150:	f73f aecc 	bgt.w	8007eec <_dtoa_r+0x8d4>
 8008154:	465d      	mov	r5, fp
 8008156:	4639      	mov	r1, r7
 8008158:	9804      	ldr	r0, [sp, #16]
 800815a:	f7ff f9cf 	bl	80074fc <quorem>
 800815e:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8008162:	f805 8b01 	strb.w	r8, [r5], #1
 8008166:	9a02      	ldr	r2, [sp, #8]
 8008168:	eba5 030b 	sub.w	r3, r5, fp
 800816c:	429a      	cmp	r2, r3
 800816e:	ddb0      	ble.n	80080d2 <_dtoa_r+0xaba>
 8008170:	2300      	movs	r3, #0
 8008172:	220a      	movs	r2, #10
 8008174:	9904      	ldr	r1, [sp, #16]
 8008176:	4620      	mov	r0, r4
 8008178:	f000 f9d8 	bl	800852c <__multadd>
 800817c:	9004      	str	r0, [sp, #16]
 800817e:	e7ea      	b.n	8008156 <_dtoa_r+0xb3e>
 8008180:	08009cd8 	.word	0x08009cd8
 8008184:	08009cfc 	.word	0x08009cfc

08008188 <__sflush_r>:
 8008188:	898a      	ldrh	r2, [r1, #12]
 800818a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800818e:	4605      	mov	r5, r0
 8008190:	0710      	lsls	r0, r2, #28
 8008192:	460c      	mov	r4, r1
 8008194:	d458      	bmi.n	8008248 <__sflush_r+0xc0>
 8008196:	684b      	ldr	r3, [r1, #4]
 8008198:	2b00      	cmp	r3, #0
 800819a:	dc05      	bgt.n	80081a8 <__sflush_r+0x20>
 800819c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800819e:	2b00      	cmp	r3, #0
 80081a0:	dc02      	bgt.n	80081a8 <__sflush_r+0x20>
 80081a2:	2000      	movs	r0, #0
 80081a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80081a8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80081aa:	2e00      	cmp	r6, #0
 80081ac:	d0f9      	beq.n	80081a2 <__sflush_r+0x1a>
 80081ae:	2300      	movs	r3, #0
 80081b0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80081b4:	682f      	ldr	r7, [r5, #0]
 80081b6:	6a21      	ldr	r1, [r4, #32]
 80081b8:	602b      	str	r3, [r5, #0]
 80081ba:	d032      	beq.n	8008222 <__sflush_r+0x9a>
 80081bc:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80081be:	89a3      	ldrh	r3, [r4, #12]
 80081c0:	075a      	lsls	r2, r3, #29
 80081c2:	d505      	bpl.n	80081d0 <__sflush_r+0x48>
 80081c4:	6863      	ldr	r3, [r4, #4]
 80081c6:	1ac0      	subs	r0, r0, r3
 80081c8:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80081ca:	b10b      	cbz	r3, 80081d0 <__sflush_r+0x48>
 80081cc:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80081ce:	1ac0      	subs	r0, r0, r3
 80081d0:	2300      	movs	r3, #0
 80081d2:	4602      	mov	r2, r0
 80081d4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80081d6:	6a21      	ldr	r1, [r4, #32]
 80081d8:	4628      	mov	r0, r5
 80081da:	47b0      	blx	r6
 80081dc:	1c43      	adds	r3, r0, #1
 80081de:	89a3      	ldrh	r3, [r4, #12]
 80081e0:	d106      	bne.n	80081f0 <__sflush_r+0x68>
 80081e2:	6829      	ldr	r1, [r5, #0]
 80081e4:	291d      	cmp	r1, #29
 80081e6:	d848      	bhi.n	800827a <__sflush_r+0xf2>
 80081e8:	4a29      	ldr	r2, [pc, #164]	; (8008290 <__sflush_r+0x108>)
 80081ea:	40ca      	lsrs	r2, r1
 80081ec:	07d6      	lsls	r6, r2, #31
 80081ee:	d544      	bpl.n	800827a <__sflush_r+0xf2>
 80081f0:	2200      	movs	r2, #0
 80081f2:	6062      	str	r2, [r4, #4]
 80081f4:	04d9      	lsls	r1, r3, #19
 80081f6:	6922      	ldr	r2, [r4, #16]
 80081f8:	6022      	str	r2, [r4, #0]
 80081fa:	d504      	bpl.n	8008206 <__sflush_r+0x7e>
 80081fc:	1c42      	adds	r2, r0, #1
 80081fe:	d101      	bne.n	8008204 <__sflush_r+0x7c>
 8008200:	682b      	ldr	r3, [r5, #0]
 8008202:	b903      	cbnz	r3, 8008206 <__sflush_r+0x7e>
 8008204:	6560      	str	r0, [r4, #84]	; 0x54
 8008206:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008208:	602f      	str	r7, [r5, #0]
 800820a:	2900      	cmp	r1, #0
 800820c:	d0c9      	beq.n	80081a2 <__sflush_r+0x1a>
 800820e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008212:	4299      	cmp	r1, r3
 8008214:	d002      	beq.n	800821c <__sflush_r+0x94>
 8008216:	4628      	mov	r0, r5
 8008218:	f000 fc26 	bl	8008a68 <_free_r>
 800821c:	2000      	movs	r0, #0
 800821e:	6360      	str	r0, [r4, #52]	; 0x34
 8008220:	e7c0      	b.n	80081a4 <__sflush_r+0x1c>
 8008222:	2301      	movs	r3, #1
 8008224:	4628      	mov	r0, r5
 8008226:	47b0      	blx	r6
 8008228:	1c41      	adds	r1, r0, #1
 800822a:	d1c8      	bne.n	80081be <__sflush_r+0x36>
 800822c:	682b      	ldr	r3, [r5, #0]
 800822e:	2b00      	cmp	r3, #0
 8008230:	d0c5      	beq.n	80081be <__sflush_r+0x36>
 8008232:	2b1d      	cmp	r3, #29
 8008234:	d001      	beq.n	800823a <__sflush_r+0xb2>
 8008236:	2b16      	cmp	r3, #22
 8008238:	d101      	bne.n	800823e <__sflush_r+0xb6>
 800823a:	602f      	str	r7, [r5, #0]
 800823c:	e7b1      	b.n	80081a2 <__sflush_r+0x1a>
 800823e:	89a3      	ldrh	r3, [r4, #12]
 8008240:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008244:	81a3      	strh	r3, [r4, #12]
 8008246:	e7ad      	b.n	80081a4 <__sflush_r+0x1c>
 8008248:	690f      	ldr	r7, [r1, #16]
 800824a:	2f00      	cmp	r7, #0
 800824c:	d0a9      	beq.n	80081a2 <__sflush_r+0x1a>
 800824e:	0793      	lsls	r3, r2, #30
 8008250:	680e      	ldr	r6, [r1, #0]
 8008252:	bf08      	it	eq
 8008254:	694b      	ldreq	r3, [r1, #20]
 8008256:	600f      	str	r7, [r1, #0]
 8008258:	bf18      	it	ne
 800825a:	2300      	movne	r3, #0
 800825c:	eba6 0807 	sub.w	r8, r6, r7
 8008260:	608b      	str	r3, [r1, #8]
 8008262:	f1b8 0f00 	cmp.w	r8, #0
 8008266:	dd9c      	ble.n	80081a2 <__sflush_r+0x1a>
 8008268:	4643      	mov	r3, r8
 800826a:	463a      	mov	r2, r7
 800826c:	6a21      	ldr	r1, [r4, #32]
 800826e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8008270:	4628      	mov	r0, r5
 8008272:	47b0      	blx	r6
 8008274:	2800      	cmp	r0, #0
 8008276:	dc06      	bgt.n	8008286 <__sflush_r+0xfe>
 8008278:	89a3      	ldrh	r3, [r4, #12]
 800827a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800827e:	81a3      	strh	r3, [r4, #12]
 8008280:	f04f 30ff 	mov.w	r0, #4294967295
 8008284:	e78e      	b.n	80081a4 <__sflush_r+0x1c>
 8008286:	4407      	add	r7, r0
 8008288:	eba8 0800 	sub.w	r8, r8, r0
 800828c:	e7e9      	b.n	8008262 <__sflush_r+0xda>
 800828e:	bf00      	nop
 8008290:	20400001 	.word	0x20400001

08008294 <_fflush_r>:
 8008294:	b538      	push	{r3, r4, r5, lr}
 8008296:	690b      	ldr	r3, [r1, #16]
 8008298:	4605      	mov	r5, r0
 800829a:	460c      	mov	r4, r1
 800829c:	b1db      	cbz	r3, 80082d6 <_fflush_r+0x42>
 800829e:	b118      	cbz	r0, 80082a8 <_fflush_r+0x14>
 80082a0:	6983      	ldr	r3, [r0, #24]
 80082a2:	b90b      	cbnz	r3, 80082a8 <_fflush_r+0x14>
 80082a4:	f7fe f9ca 	bl	800663c <__sinit>
 80082a8:	4b0c      	ldr	r3, [pc, #48]	; (80082dc <_fflush_r+0x48>)
 80082aa:	429c      	cmp	r4, r3
 80082ac:	d109      	bne.n	80082c2 <_fflush_r+0x2e>
 80082ae:	686c      	ldr	r4, [r5, #4]
 80082b0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80082b4:	b17b      	cbz	r3, 80082d6 <_fflush_r+0x42>
 80082b6:	4621      	mov	r1, r4
 80082b8:	4628      	mov	r0, r5
 80082ba:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80082be:	f7ff bf63 	b.w	8008188 <__sflush_r>
 80082c2:	4b07      	ldr	r3, [pc, #28]	; (80082e0 <_fflush_r+0x4c>)
 80082c4:	429c      	cmp	r4, r3
 80082c6:	d101      	bne.n	80082cc <_fflush_r+0x38>
 80082c8:	68ac      	ldr	r4, [r5, #8]
 80082ca:	e7f1      	b.n	80082b0 <_fflush_r+0x1c>
 80082cc:	4b05      	ldr	r3, [pc, #20]	; (80082e4 <_fflush_r+0x50>)
 80082ce:	429c      	cmp	r4, r3
 80082d0:	bf08      	it	eq
 80082d2:	68ec      	ldreq	r4, [r5, #12]
 80082d4:	e7ec      	b.n	80082b0 <_fflush_r+0x1c>
 80082d6:	2000      	movs	r0, #0
 80082d8:	bd38      	pop	{r3, r4, r5, pc}
 80082da:	bf00      	nop
 80082dc:	08009c84 	.word	0x08009c84
 80082e0:	08009ca4 	.word	0x08009ca4
 80082e4:	08009c64 	.word	0x08009c64

080082e8 <fflush>:
 80082e8:	4601      	mov	r1, r0
 80082ea:	b920      	cbnz	r0, 80082f6 <fflush+0xe>
 80082ec:	4b04      	ldr	r3, [pc, #16]	; (8008300 <fflush+0x18>)
 80082ee:	4905      	ldr	r1, [pc, #20]	; (8008304 <fflush+0x1c>)
 80082f0:	6818      	ldr	r0, [r3, #0]
 80082f2:	f7fe ba2b 	b.w	800674c <_fwalk_reent>
 80082f6:	4b04      	ldr	r3, [pc, #16]	; (8008308 <fflush+0x20>)
 80082f8:	6818      	ldr	r0, [r3, #0]
 80082fa:	f7ff bfcb 	b.w	8008294 <_fflush_r>
 80082fe:	bf00      	nop
 8008300:	08009cc4 	.word	0x08009cc4
 8008304:	08008295 	.word	0x08008295
 8008308:	20000014 	.word	0x20000014

0800830c <_getc_r>:
 800830c:	b538      	push	{r3, r4, r5, lr}
 800830e:	460c      	mov	r4, r1
 8008310:	4605      	mov	r5, r0
 8008312:	b118      	cbz	r0, 800831c <_getc_r+0x10>
 8008314:	6983      	ldr	r3, [r0, #24]
 8008316:	b90b      	cbnz	r3, 800831c <_getc_r+0x10>
 8008318:	f7fe f990 	bl	800663c <__sinit>
 800831c:	4b0e      	ldr	r3, [pc, #56]	; (8008358 <_getc_r+0x4c>)
 800831e:	429c      	cmp	r4, r3
 8008320:	d10b      	bne.n	800833a <_getc_r+0x2e>
 8008322:	686c      	ldr	r4, [r5, #4]
 8008324:	6863      	ldr	r3, [r4, #4]
 8008326:	3b01      	subs	r3, #1
 8008328:	2b00      	cmp	r3, #0
 800832a:	6063      	str	r3, [r4, #4]
 800832c:	da0f      	bge.n	800834e <_getc_r+0x42>
 800832e:	4621      	mov	r1, r4
 8008330:	4628      	mov	r0, r5
 8008332:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008336:	f000 bd6d 	b.w	8008e14 <__srget_r>
 800833a:	4b08      	ldr	r3, [pc, #32]	; (800835c <_getc_r+0x50>)
 800833c:	429c      	cmp	r4, r3
 800833e:	d101      	bne.n	8008344 <_getc_r+0x38>
 8008340:	68ac      	ldr	r4, [r5, #8]
 8008342:	e7ef      	b.n	8008324 <_getc_r+0x18>
 8008344:	4b06      	ldr	r3, [pc, #24]	; (8008360 <_getc_r+0x54>)
 8008346:	429c      	cmp	r4, r3
 8008348:	bf08      	it	eq
 800834a:	68ec      	ldreq	r4, [r5, #12]
 800834c:	e7ea      	b.n	8008324 <_getc_r+0x18>
 800834e:	6823      	ldr	r3, [r4, #0]
 8008350:	1c5a      	adds	r2, r3, #1
 8008352:	6022      	str	r2, [r4, #0]
 8008354:	7818      	ldrb	r0, [r3, #0]
 8008356:	bd38      	pop	{r3, r4, r5, pc}
 8008358:	08009c84 	.word	0x08009c84
 800835c:	08009ca4 	.word	0x08009ca4
 8008360:	08009c64 	.word	0x08009c64

08008364 <_localeconv_r>:
 8008364:	4b04      	ldr	r3, [pc, #16]	; (8008378 <_localeconv_r+0x14>)
 8008366:	681b      	ldr	r3, [r3, #0]
 8008368:	6a18      	ldr	r0, [r3, #32]
 800836a:	4b04      	ldr	r3, [pc, #16]	; (800837c <_localeconv_r+0x18>)
 800836c:	2800      	cmp	r0, #0
 800836e:	bf08      	it	eq
 8008370:	4618      	moveq	r0, r3
 8008372:	30f0      	adds	r0, #240	; 0xf0
 8008374:	4770      	bx	lr
 8008376:	bf00      	nop
 8008378:	20000014 	.word	0x20000014
 800837c:	20000078 	.word	0x20000078

08008380 <_lseek_r>:
 8008380:	b538      	push	{r3, r4, r5, lr}
 8008382:	4c07      	ldr	r4, [pc, #28]	; (80083a0 <_lseek_r+0x20>)
 8008384:	4605      	mov	r5, r0
 8008386:	4608      	mov	r0, r1
 8008388:	4611      	mov	r1, r2
 800838a:	2200      	movs	r2, #0
 800838c:	6022      	str	r2, [r4, #0]
 800838e:	461a      	mov	r2, r3
 8008390:	f7fa fbfd 	bl	8002b8e <_lseek>
 8008394:	1c43      	adds	r3, r0, #1
 8008396:	d102      	bne.n	800839e <_lseek_r+0x1e>
 8008398:	6823      	ldr	r3, [r4, #0]
 800839a:	b103      	cbz	r3, 800839e <_lseek_r+0x1e>
 800839c:	602b      	str	r3, [r5, #0]
 800839e:	bd38      	pop	{r3, r4, r5, pc}
 80083a0:	200009d8 	.word	0x200009d8

080083a4 <__swhatbuf_r>:
 80083a4:	b570      	push	{r4, r5, r6, lr}
 80083a6:	460e      	mov	r6, r1
 80083a8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80083ac:	2900      	cmp	r1, #0
 80083ae:	b096      	sub	sp, #88	; 0x58
 80083b0:	4614      	mov	r4, r2
 80083b2:	461d      	mov	r5, r3
 80083b4:	da07      	bge.n	80083c6 <__swhatbuf_r+0x22>
 80083b6:	2300      	movs	r3, #0
 80083b8:	602b      	str	r3, [r5, #0]
 80083ba:	89b3      	ldrh	r3, [r6, #12]
 80083bc:	061a      	lsls	r2, r3, #24
 80083be:	d410      	bmi.n	80083e2 <__swhatbuf_r+0x3e>
 80083c0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80083c4:	e00e      	b.n	80083e4 <__swhatbuf_r+0x40>
 80083c6:	466a      	mov	r2, sp
 80083c8:	f000 fd50 	bl	8008e6c <_fstat_r>
 80083cc:	2800      	cmp	r0, #0
 80083ce:	dbf2      	blt.n	80083b6 <__swhatbuf_r+0x12>
 80083d0:	9a01      	ldr	r2, [sp, #4]
 80083d2:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80083d6:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80083da:	425a      	negs	r2, r3
 80083dc:	415a      	adcs	r2, r3
 80083de:	602a      	str	r2, [r5, #0]
 80083e0:	e7ee      	b.n	80083c0 <__swhatbuf_r+0x1c>
 80083e2:	2340      	movs	r3, #64	; 0x40
 80083e4:	2000      	movs	r0, #0
 80083e6:	6023      	str	r3, [r4, #0]
 80083e8:	b016      	add	sp, #88	; 0x58
 80083ea:	bd70      	pop	{r4, r5, r6, pc}

080083ec <__smakebuf_r>:
 80083ec:	898b      	ldrh	r3, [r1, #12]
 80083ee:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80083f0:	079d      	lsls	r5, r3, #30
 80083f2:	4606      	mov	r6, r0
 80083f4:	460c      	mov	r4, r1
 80083f6:	d507      	bpl.n	8008408 <__smakebuf_r+0x1c>
 80083f8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80083fc:	6023      	str	r3, [r4, #0]
 80083fe:	6123      	str	r3, [r4, #16]
 8008400:	2301      	movs	r3, #1
 8008402:	6163      	str	r3, [r4, #20]
 8008404:	b002      	add	sp, #8
 8008406:	bd70      	pop	{r4, r5, r6, pc}
 8008408:	ab01      	add	r3, sp, #4
 800840a:	466a      	mov	r2, sp
 800840c:	f7ff ffca 	bl	80083a4 <__swhatbuf_r>
 8008410:	9900      	ldr	r1, [sp, #0]
 8008412:	4605      	mov	r5, r0
 8008414:	4630      	mov	r0, r6
 8008416:	f7fe f9f5 	bl	8006804 <_malloc_r>
 800841a:	b948      	cbnz	r0, 8008430 <__smakebuf_r+0x44>
 800841c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008420:	059a      	lsls	r2, r3, #22
 8008422:	d4ef      	bmi.n	8008404 <__smakebuf_r+0x18>
 8008424:	f023 0303 	bic.w	r3, r3, #3
 8008428:	f043 0302 	orr.w	r3, r3, #2
 800842c:	81a3      	strh	r3, [r4, #12]
 800842e:	e7e3      	b.n	80083f8 <__smakebuf_r+0xc>
 8008430:	4b0d      	ldr	r3, [pc, #52]	; (8008468 <__smakebuf_r+0x7c>)
 8008432:	62b3      	str	r3, [r6, #40]	; 0x28
 8008434:	89a3      	ldrh	r3, [r4, #12]
 8008436:	6020      	str	r0, [r4, #0]
 8008438:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800843c:	81a3      	strh	r3, [r4, #12]
 800843e:	9b00      	ldr	r3, [sp, #0]
 8008440:	6163      	str	r3, [r4, #20]
 8008442:	9b01      	ldr	r3, [sp, #4]
 8008444:	6120      	str	r0, [r4, #16]
 8008446:	b15b      	cbz	r3, 8008460 <__smakebuf_r+0x74>
 8008448:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800844c:	4630      	mov	r0, r6
 800844e:	f000 fd1f 	bl	8008e90 <_isatty_r>
 8008452:	b128      	cbz	r0, 8008460 <__smakebuf_r+0x74>
 8008454:	89a3      	ldrh	r3, [r4, #12]
 8008456:	f023 0303 	bic.w	r3, r3, #3
 800845a:	f043 0301 	orr.w	r3, r3, #1
 800845e:	81a3      	strh	r3, [r4, #12]
 8008460:	89a3      	ldrh	r3, [r4, #12]
 8008462:	431d      	orrs	r5, r3
 8008464:	81a5      	strh	r5, [r4, #12]
 8008466:	e7cd      	b.n	8008404 <__smakebuf_r+0x18>
 8008468:	08006605 	.word	0x08006605

0800846c <malloc>:
 800846c:	4b02      	ldr	r3, [pc, #8]	; (8008478 <malloc+0xc>)
 800846e:	4601      	mov	r1, r0
 8008470:	6818      	ldr	r0, [r3, #0]
 8008472:	f7fe b9c7 	b.w	8006804 <_malloc_r>
 8008476:	bf00      	nop
 8008478:	20000014 	.word	0x20000014

0800847c <memcpy>:
 800847c:	b510      	push	{r4, lr}
 800847e:	1e43      	subs	r3, r0, #1
 8008480:	440a      	add	r2, r1
 8008482:	4291      	cmp	r1, r2
 8008484:	d100      	bne.n	8008488 <memcpy+0xc>
 8008486:	bd10      	pop	{r4, pc}
 8008488:	f811 4b01 	ldrb.w	r4, [r1], #1
 800848c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008490:	e7f7      	b.n	8008482 <memcpy+0x6>

08008492 <__malloc_lock>:
 8008492:	4770      	bx	lr

08008494 <__malloc_unlock>:
 8008494:	4770      	bx	lr

08008496 <_Balloc>:
 8008496:	b570      	push	{r4, r5, r6, lr}
 8008498:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800849a:	4604      	mov	r4, r0
 800849c:	460e      	mov	r6, r1
 800849e:	b93d      	cbnz	r5, 80084b0 <_Balloc+0x1a>
 80084a0:	2010      	movs	r0, #16
 80084a2:	f7ff ffe3 	bl	800846c <malloc>
 80084a6:	6260      	str	r0, [r4, #36]	; 0x24
 80084a8:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80084ac:	6005      	str	r5, [r0, #0]
 80084ae:	60c5      	str	r5, [r0, #12]
 80084b0:	6a65      	ldr	r5, [r4, #36]	; 0x24
 80084b2:	68eb      	ldr	r3, [r5, #12]
 80084b4:	b183      	cbz	r3, 80084d8 <_Balloc+0x42>
 80084b6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80084b8:	68db      	ldr	r3, [r3, #12]
 80084ba:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 80084be:	b9b8      	cbnz	r0, 80084f0 <_Balloc+0x5a>
 80084c0:	2101      	movs	r1, #1
 80084c2:	fa01 f506 	lsl.w	r5, r1, r6
 80084c6:	1d6a      	adds	r2, r5, #5
 80084c8:	0092      	lsls	r2, r2, #2
 80084ca:	4620      	mov	r0, r4
 80084cc:	f000 fabe 	bl	8008a4c <_calloc_r>
 80084d0:	b160      	cbz	r0, 80084ec <_Balloc+0x56>
 80084d2:	e9c0 6501 	strd	r6, r5, [r0, #4]
 80084d6:	e00e      	b.n	80084f6 <_Balloc+0x60>
 80084d8:	2221      	movs	r2, #33	; 0x21
 80084da:	2104      	movs	r1, #4
 80084dc:	4620      	mov	r0, r4
 80084de:	f000 fab5 	bl	8008a4c <_calloc_r>
 80084e2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80084e4:	60e8      	str	r0, [r5, #12]
 80084e6:	68db      	ldr	r3, [r3, #12]
 80084e8:	2b00      	cmp	r3, #0
 80084ea:	d1e4      	bne.n	80084b6 <_Balloc+0x20>
 80084ec:	2000      	movs	r0, #0
 80084ee:	bd70      	pop	{r4, r5, r6, pc}
 80084f0:	6802      	ldr	r2, [r0, #0]
 80084f2:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 80084f6:	2300      	movs	r3, #0
 80084f8:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80084fc:	e7f7      	b.n	80084ee <_Balloc+0x58>

080084fe <_Bfree>:
 80084fe:	b570      	push	{r4, r5, r6, lr}
 8008500:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8008502:	4606      	mov	r6, r0
 8008504:	460d      	mov	r5, r1
 8008506:	b93c      	cbnz	r4, 8008518 <_Bfree+0x1a>
 8008508:	2010      	movs	r0, #16
 800850a:	f7ff ffaf 	bl	800846c <malloc>
 800850e:	6270      	str	r0, [r6, #36]	; 0x24
 8008510:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8008514:	6004      	str	r4, [r0, #0]
 8008516:	60c4      	str	r4, [r0, #12]
 8008518:	b13d      	cbz	r5, 800852a <_Bfree+0x2c>
 800851a:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800851c:	686a      	ldr	r2, [r5, #4]
 800851e:	68db      	ldr	r3, [r3, #12]
 8008520:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8008524:	6029      	str	r1, [r5, #0]
 8008526:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 800852a:	bd70      	pop	{r4, r5, r6, pc}

0800852c <__multadd>:
 800852c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008530:	690d      	ldr	r5, [r1, #16]
 8008532:	461f      	mov	r7, r3
 8008534:	4606      	mov	r6, r0
 8008536:	460c      	mov	r4, r1
 8008538:	f101 0c14 	add.w	ip, r1, #20
 800853c:	2300      	movs	r3, #0
 800853e:	f8dc 0000 	ldr.w	r0, [ip]
 8008542:	b281      	uxth	r1, r0
 8008544:	fb02 7101 	mla	r1, r2, r1, r7
 8008548:	0c0f      	lsrs	r7, r1, #16
 800854a:	0c00      	lsrs	r0, r0, #16
 800854c:	fb02 7000 	mla	r0, r2, r0, r7
 8008550:	b289      	uxth	r1, r1
 8008552:	3301      	adds	r3, #1
 8008554:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 8008558:	429d      	cmp	r5, r3
 800855a:	ea4f 4710 	mov.w	r7, r0, lsr #16
 800855e:	f84c 1b04 	str.w	r1, [ip], #4
 8008562:	dcec      	bgt.n	800853e <__multadd+0x12>
 8008564:	b1d7      	cbz	r7, 800859c <__multadd+0x70>
 8008566:	68a3      	ldr	r3, [r4, #8]
 8008568:	42ab      	cmp	r3, r5
 800856a:	dc12      	bgt.n	8008592 <__multadd+0x66>
 800856c:	6861      	ldr	r1, [r4, #4]
 800856e:	4630      	mov	r0, r6
 8008570:	3101      	adds	r1, #1
 8008572:	f7ff ff90 	bl	8008496 <_Balloc>
 8008576:	6922      	ldr	r2, [r4, #16]
 8008578:	3202      	adds	r2, #2
 800857a:	f104 010c 	add.w	r1, r4, #12
 800857e:	4680      	mov	r8, r0
 8008580:	0092      	lsls	r2, r2, #2
 8008582:	300c      	adds	r0, #12
 8008584:	f7ff ff7a 	bl	800847c <memcpy>
 8008588:	4621      	mov	r1, r4
 800858a:	4630      	mov	r0, r6
 800858c:	f7ff ffb7 	bl	80084fe <_Bfree>
 8008590:	4644      	mov	r4, r8
 8008592:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8008596:	3501      	adds	r5, #1
 8008598:	615f      	str	r7, [r3, #20]
 800859a:	6125      	str	r5, [r4, #16]
 800859c:	4620      	mov	r0, r4
 800859e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080085a2 <__hi0bits>:
 80085a2:	0c02      	lsrs	r2, r0, #16
 80085a4:	0412      	lsls	r2, r2, #16
 80085a6:	4603      	mov	r3, r0
 80085a8:	b9b2      	cbnz	r2, 80085d8 <__hi0bits+0x36>
 80085aa:	0403      	lsls	r3, r0, #16
 80085ac:	2010      	movs	r0, #16
 80085ae:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 80085b2:	bf04      	itt	eq
 80085b4:	021b      	lsleq	r3, r3, #8
 80085b6:	3008      	addeq	r0, #8
 80085b8:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 80085bc:	bf04      	itt	eq
 80085be:	011b      	lsleq	r3, r3, #4
 80085c0:	3004      	addeq	r0, #4
 80085c2:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 80085c6:	bf04      	itt	eq
 80085c8:	009b      	lsleq	r3, r3, #2
 80085ca:	3002      	addeq	r0, #2
 80085cc:	2b00      	cmp	r3, #0
 80085ce:	db06      	blt.n	80085de <__hi0bits+0x3c>
 80085d0:	005b      	lsls	r3, r3, #1
 80085d2:	d503      	bpl.n	80085dc <__hi0bits+0x3a>
 80085d4:	3001      	adds	r0, #1
 80085d6:	4770      	bx	lr
 80085d8:	2000      	movs	r0, #0
 80085da:	e7e8      	b.n	80085ae <__hi0bits+0xc>
 80085dc:	2020      	movs	r0, #32
 80085de:	4770      	bx	lr

080085e0 <__lo0bits>:
 80085e0:	6803      	ldr	r3, [r0, #0]
 80085e2:	f013 0207 	ands.w	r2, r3, #7
 80085e6:	4601      	mov	r1, r0
 80085e8:	d00b      	beq.n	8008602 <__lo0bits+0x22>
 80085ea:	07da      	lsls	r2, r3, #31
 80085ec:	d423      	bmi.n	8008636 <__lo0bits+0x56>
 80085ee:	0798      	lsls	r0, r3, #30
 80085f0:	bf49      	itett	mi
 80085f2:	085b      	lsrmi	r3, r3, #1
 80085f4:	089b      	lsrpl	r3, r3, #2
 80085f6:	2001      	movmi	r0, #1
 80085f8:	600b      	strmi	r3, [r1, #0]
 80085fa:	bf5c      	itt	pl
 80085fc:	600b      	strpl	r3, [r1, #0]
 80085fe:	2002      	movpl	r0, #2
 8008600:	4770      	bx	lr
 8008602:	b298      	uxth	r0, r3
 8008604:	b9a8      	cbnz	r0, 8008632 <__lo0bits+0x52>
 8008606:	0c1b      	lsrs	r3, r3, #16
 8008608:	2010      	movs	r0, #16
 800860a:	f013 0fff 	tst.w	r3, #255	; 0xff
 800860e:	bf04      	itt	eq
 8008610:	0a1b      	lsreq	r3, r3, #8
 8008612:	3008      	addeq	r0, #8
 8008614:	071a      	lsls	r2, r3, #28
 8008616:	bf04      	itt	eq
 8008618:	091b      	lsreq	r3, r3, #4
 800861a:	3004      	addeq	r0, #4
 800861c:	079a      	lsls	r2, r3, #30
 800861e:	bf04      	itt	eq
 8008620:	089b      	lsreq	r3, r3, #2
 8008622:	3002      	addeq	r0, #2
 8008624:	07da      	lsls	r2, r3, #31
 8008626:	d402      	bmi.n	800862e <__lo0bits+0x4e>
 8008628:	085b      	lsrs	r3, r3, #1
 800862a:	d006      	beq.n	800863a <__lo0bits+0x5a>
 800862c:	3001      	adds	r0, #1
 800862e:	600b      	str	r3, [r1, #0]
 8008630:	4770      	bx	lr
 8008632:	4610      	mov	r0, r2
 8008634:	e7e9      	b.n	800860a <__lo0bits+0x2a>
 8008636:	2000      	movs	r0, #0
 8008638:	4770      	bx	lr
 800863a:	2020      	movs	r0, #32
 800863c:	4770      	bx	lr

0800863e <__i2b>:
 800863e:	b510      	push	{r4, lr}
 8008640:	460c      	mov	r4, r1
 8008642:	2101      	movs	r1, #1
 8008644:	f7ff ff27 	bl	8008496 <_Balloc>
 8008648:	2201      	movs	r2, #1
 800864a:	6144      	str	r4, [r0, #20]
 800864c:	6102      	str	r2, [r0, #16]
 800864e:	bd10      	pop	{r4, pc}

08008650 <__multiply>:
 8008650:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008654:	4614      	mov	r4, r2
 8008656:	690a      	ldr	r2, [r1, #16]
 8008658:	6923      	ldr	r3, [r4, #16]
 800865a:	429a      	cmp	r2, r3
 800865c:	bfb8      	it	lt
 800865e:	460b      	movlt	r3, r1
 8008660:	4688      	mov	r8, r1
 8008662:	bfbc      	itt	lt
 8008664:	46a0      	movlt	r8, r4
 8008666:	461c      	movlt	r4, r3
 8008668:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800866c:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8008670:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8008674:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8008678:	eb07 0609 	add.w	r6, r7, r9
 800867c:	42b3      	cmp	r3, r6
 800867e:	bfb8      	it	lt
 8008680:	3101      	addlt	r1, #1
 8008682:	f7ff ff08 	bl	8008496 <_Balloc>
 8008686:	f100 0514 	add.w	r5, r0, #20
 800868a:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 800868e:	462b      	mov	r3, r5
 8008690:	2200      	movs	r2, #0
 8008692:	4573      	cmp	r3, lr
 8008694:	d316      	bcc.n	80086c4 <__multiply+0x74>
 8008696:	f104 0214 	add.w	r2, r4, #20
 800869a:	f108 0114 	add.w	r1, r8, #20
 800869e:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 80086a2:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 80086a6:	9300      	str	r3, [sp, #0]
 80086a8:	9b00      	ldr	r3, [sp, #0]
 80086aa:	9201      	str	r2, [sp, #4]
 80086ac:	4293      	cmp	r3, r2
 80086ae:	d80c      	bhi.n	80086ca <__multiply+0x7a>
 80086b0:	2e00      	cmp	r6, #0
 80086b2:	dd03      	ble.n	80086bc <__multiply+0x6c>
 80086b4:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 80086b8:	2b00      	cmp	r3, #0
 80086ba:	d05d      	beq.n	8008778 <__multiply+0x128>
 80086bc:	6106      	str	r6, [r0, #16]
 80086be:	b003      	add	sp, #12
 80086c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80086c4:	f843 2b04 	str.w	r2, [r3], #4
 80086c8:	e7e3      	b.n	8008692 <__multiply+0x42>
 80086ca:	f8b2 b000 	ldrh.w	fp, [r2]
 80086ce:	f1bb 0f00 	cmp.w	fp, #0
 80086d2:	d023      	beq.n	800871c <__multiply+0xcc>
 80086d4:	4689      	mov	r9, r1
 80086d6:	46ac      	mov	ip, r5
 80086d8:	f04f 0800 	mov.w	r8, #0
 80086dc:	f859 4b04 	ldr.w	r4, [r9], #4
 80086e0:	f8dc a000 	ldr.w	sl, [ip]
 80086e4:	b2a3      	uxth	r3, r4
 80086e6:	fa1f fa8a 	uxth.w	sl, sl
 80086ea:	fb0b a303 	mla	r3, fp, r3, sl
 80086ee:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 80086f2:	f8dc 4000 	ldr.w	r4, [ip]
 80086f6:	4443      	add	r3, r8
 80086f8:	ea4f 4814 	mov.w	r8, r4, lsr #16
 80086fc:	fb0b 840a 	mla	r4, fp, sl, r8
 8008700:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 8008704:	46e2      	mov	sl, ip
 8008706:	b29b      	uxth	r3, r3
 8008708:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800870c:	454f      	cmp	r7, r9
 800870e:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8008712:	f84a 3b04 	str.w	r3, [sl], #4
 8008716:	d82b      	bhi.n	8008770 <__multiply+0x120>
 8008718:	f8cc 8004 	str.w	r8, [ip, #4]
 800871c:	9b01      	ldr	r3, [sp, #4]
 800871e:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 8008722:	3204      	adds	r2, #4
 8008724:	f1ba 0f00 	cmp.w	sl, #0
 8008728:	d020      	beq.n	800876c <__multiply+0x11c>
 800872a:	682b      	ldr	r3, [r5, #0]
 800872c:	4689      	mov	r9, r1
 800872e:	46a8      	mov	r8, r5
 8008730:	f04f 0b00 	mov.w	fp, #0
 8008734:	f8b9 c000 	ldrh.w	ip, [r9]
 8008738:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 800873c:	fb0a 440c 	mla	r4, sl, ip, r4
 8008740:	445c      	add	r4, fp
 8008742:	46c4      	mov	ip, r8
 8008744:	b29b      	uxth	r3, r3
 8008746:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800874a:	f84c 3b04 	str.w	r3, [ip], #4
 800874e:	f859 3b04 	ldr.w	r3, [r9], #4
 8008752:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 8008756:	0c1b      	lsrs	r3, r3, #16
 8008758:	fb0a b303 	mla	r3, sl, r3, fp
 800875c:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 8008760:	454f      	cmp	r7, r9
 8008762:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 8008766:	d805      	bhi.n	8008774 <__multiply+0x124>
 8008768:	f8c8 3004 	str.w	r3, [r8, #4]
 800876c:	3504      	adds	r5, #4
 800876e:	e79b      	b.n	80086a8 <__multiply+0x58>
 8008770:	46d4      	mov	ip, sl
 8008772:	e7b3      	b.n	80086dc <__multiply+0x8c>
 8008774:	46e0      	mov	r8, ip
 8008776:	e7dd      	b.n	8008734 <__multiply+0xe4>
 8008778:	3e01      	subs	r6, #1
 800877a:	e799      	b.n	80086b0 <__multiply+0x60>

0800877c <__pow5mult>:
 800877c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008780:	4615      	mov	r5, r2
 8008782:	f012 0203 	ands.w	r2, r2, #3
 8008786:	4606      	mov	r6, r0
 8008788:	460f      	mov	r7, r1
 800878a:	d007      	beq.n	800879c <__pow5mult+0x20>
 800878c:	3a01      	subs	r2, #1
 800878e:	4c21      	ldr	r4, [pc, #132]	; (8008814 <__pow5mult+0x98>)
 8008790:	2300      	movs	r3, #0
 8008792:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8008796:	f7ff fec9 	bl	800852c <__multadd>
 800879a:	4607      	mov	r7, r0
 800879c:	10ad      	asrs	r5, r5, #2
 800879e:	d035      	beq.n	800880c <__pow5mult+0x90>
 80087a0:	6a74      	ldr	r4, [r6, #36]	; 0x24
 80087a2:	b93c      	cbnz	r4, 80087b4 <__pow5mult+0x38>
 80087a4:	2010      	movs	r0, #16
 80087a6:	f7ff fe61 	bl	800846c <malloc>
 80087aa:	6270      	str	r0, [r6, #36]	; 0x24
 80087ac:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80087b0:	6004      	str	r4, [r0, #0]
 80087b2:	60c4      	str	r4, [r0, #12]
 80087b4:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 80087b8:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80087bc:	b94c      	cbnz	r4, 80087d2 <__pow5mult+0x56>
 80087be:	f240 2171 	movw	r1, #625	; 0x271
 80087c2:	4630      	mov	r0, r6
 80087c4:	f7ff ff3b 	bl	800863e <__i2b>
 80087c8:	2300      	movs	r3, #0
 80087ca:	f8c8 0008 	str.w	r0, [r8, #8]
 80087ce:	4604      	mov	r4, r0
 80087d0:	6003      	str	r3, [r0, #0]
 80087d2:	f04f 0800 	mov.w	r8, #0
 80087d6:	07eb      	lsls	r3, r5, #31
 80087d8:	d50a      	bpl.n	80087f0 <__pow5mult+0x74>
 80087da:	4639      	mov	r1, r7
 80087dc:	4622      	mov	r2, r4
 80087de:	4630      	mov	r0, r6
 80087e0:	f7ff ff36 	bl	8008650 <__multiply>
 80087e4:	4639      	mov	r1, r7
 80087e6:	4681      	mov	r9, r0
 80087e8:	4630      	mov	r0, r6
 80087ea:	f7ff fe88 	bl	80084fe <_Bfree>
 80087ee:	464f      	mov	r7, r9
 80087f0:	106d      	asrs	r5, r5, #1
 80087f2:	d00b      	beq.n	800880c <__pow5mult+0x90>
 80087f4:	6820      	ldr	r0, [r4, #0]
 80087f6:	b938      	cbnz	r0, 8008808 <__pow5mult+0x8c>
 80087f8:	4622      	mov	r2, r4
 80087fa:	4621      	mov	r1, r4
 80087fc:	4630      	mov	r0, r6
 80087fe:	f7ff ff27 	bl	8008650 <__multiply>
 8008802:	6020      	str	r0, [r4, #0]
 8008804:	f8c0 8000 	str.w	r8, [r0]
 8008808:	4604      	mov	r4, r0
 800880a:	e7e4      	b.n	80087d6 <__pow5mult+0x5a>
 800880c:	4638      	mov	r0, r7
 800880e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008812:	bf00      	nop
 8008814:	08009e00 	.word	0x08009e00

08008818 <__lshift>:
 8008818:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800881c:	460c      	mov	r4, r1
 800881e:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8008822:	6923      	ldr	r3, [r4, #16]
 8008824:	6849      	ldr	r1, [r1, #4]
 8008826:	eb0a 0903 	add.w	r9, sl, r3
 800882a:	68a3      	ldr	r3, [r4, #8]
 800882c:	4607      	mov	r7, r0
 800882e:	4616      	mov	r6, r2
 8008830:	f109 0501 	add.w	r5, r9, #1
 8008834:	42ab      	cmp	r3, r5
 8008836:	db32      	blt.n	800889e <__lshift+0x86>
 8008838:	4638      	mov	r0, r7
 800883a:	f7ff fe2c 	bl	8008496 <_Balloc>
 800883e:	2300      	movs	r3, #0
 8008840:	4680      	mov	r8, r0
 8008842:	f100 0114 	add.w	r1, r0, #20
 8008846:	461a      	mov	r2, r3
 8008848:	4553      	cmp	r3, sl
 800884a:	db2b      	blt.n	80088a4 <__lshift+0x8c>
 800884c:	6920      	ldr	r0, [r4, #16]
 800884e:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8008852:	f104 0314 	add.w	r3, r4, #20
 8008856:	f016 021f 	ands.w	r2, r6, #31
 800885a:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800885e:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8008862:	d025      	beq.n	80088b0 <__lshift+0x98>
 8008864:	f1c2 0e20 	rsb	lr, r2, #32
 8008868:	2000      	movs	r0, #0
 800886a:	681e      	ldr	r6, [r3, #0]
 800886c:	468a      	mov	sl, r1
 800886e:	4096      	lsls	r6, r2
 8008870:	4330      	orrs	r0, r6
 8008872:	f84a 0b04 	str.w	r0, [sl], #4
 8008876:	f853 0b04 	ldr.w	r0, [r3], #4
 800887a:	459c      	cmp	ip, r3
 800887c:	fa20 f00e 	lsr.w	r0, r0, lr
 8008880:	d814      	bhi.n	80088ac <__lshift+0x94>
 8008882:	6048      	str	r0, [r1, #4]
 8008884:	b108      	cbz	r0, 800888a <__lshift+0x72>
 8008886:	f109 0502 	add.w	r5, r9, #2
 800888a:	3d01      	subs	r5, #1
 800888c:	4638      	mov	r0, r7
 800888e:	f8c8 5010 	str.w	r5, [r8, #16]
 8008892:	4621      	mov	r1, r4
 8008894:	f7ff fe33 	bl	80084fe <_Bfree>
 8008898:	4640      	mov	r0, r8
 800889a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800889e:	3101      	adds	r1, #1
 80088a0:	005b      	lsls	r3, r3, #1
 80088a2:	e7c7      	b.n	8008834 <__lshift+0x1c>
 80088a4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 80088a8:	3301      	adds	r3, #1
 80088aa:	e7cd      	b.n	8008848 <__lshift+0x30>
 80088ac:	4651      	mov	r1, sl
 80088ae:	e7dc      	b.n	800886a <__lshift+0x52>
 80088b0:	3904      	subs	r1, #4
 80088b2:	f853 2b04 	ldr.w	r2, [r3], #4
 80088b6:	f841 2f04 	str.w	r2, [r1, #4]!
 80088ba:	459c      	cmp	ip, r3
 80088bc:	d8f9      	bhi.n	80088b2 <__lshift+0x9a>
 80088be:	e7e4      	b.n	800888a <__lshift+0x72>

080088c0 <__mcmp>:
 80088c0:	6903      	ldr	r3, [r0, #16]
 80088c2:	690a      	ldr	r2, [r1, #16]
 80088c4:	1a9b      	subs	r3, r3, r2
 80088c6:	b530      	push	{r4, r5, lr}
 80088c8:	d10c      	bne.n	80088e4 <__mcmp+0x24>
 80088ca:	0092      	lsls	r2, r2, #2
 80088cc:	3014      	adds	r0, #20
 80088ce:	3114      	adds	r1, #20
 80088d0:	1884      	adds	r4, r0, r2
 80088d2:	4411      	add	r1, r2
 80088d4:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 80088d8:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 80088dc:	4295      	cmp	r5, r2
 80088de:	d003      	beq.n	80088e8 <__mcmp+0x28>
 80088e0:	d305      	bcc.n	80088ee <__mcmp+0x2e>
 80088e2:	2301      	movs	r3, #1
 80088e4:	4618      	mov	r0, r3
 80088e6:	bd30      	pop	{r4, r5, pc}
 80088e8:	42a0      	cmp	r0, r4
 80088ea:	d3f3      	bcc.n	80088d4 <__mcmp+0x14>
 80088ec:	e7fa      	b.n	80088e4 <__mcmp+0x24>
 80088ee:	f04f 33ff 	mov.w	r3, #4294967295
 80088f2:	e7f7      	b.n	80088e4 <__mcmp+0x24>

080088f4 <__mdiff>:
 80088f4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80088f8:	460d      	mov	r5, r1
 80088fa:	4607      	mov	r7, r0
 80088fc:	4611      	mov	r1, r2
 80088fe:	4628      	mov	r0, r5
 8008900:	4614      	mov	r4, r2
 8008902:	f7ff ffdd 	bl	80088c0 <__mcmp>
 8008906:	1e06      	subs	r6, r0, #0
 8008908:	d108      	bne.n	800891c <__mdiff+0x28>
 800890a:	4631      	mov	r1, r6
 800890c:	4638      	mov	r0, r7
 800890e:	f7ff fdc2 	bl	8008496 <_Balloc>
 8008912:	2301      	movs	r3, #1
 8008914:	e9c0 3604 	strd	r3, r6, [r0, #16]
 8008918:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800891c:	bfa4      	itt	ge
 800891e:	4623      	movge	r3, r4
 8008920:	462c      	movge	r4, r5
 8008922:	4638      	mov	r0, r7
 8008924:	6861      	ldr	r1, [r4, #4]
 8008926:	bfa6      	itte	ge
 8008928:	461d      	movge	r5, r3
 800892a:	2600      	movge	r6, #0
 800892c:	2601      	movlt	r6, #1
 800892e:	f7ff fdb2 	bl	8008496 <_Balloc>
 8008932:	692b      	ldr	r3, [r5, #16]
 8008934:	60c6      	str	r6, [r0, #12]
 8008936:	6926      	ldr	r6, [r4, #16]
 8008938:	f105 0914 	add.w	r9, r5, #20
 800893c:	f104 0214 	add.w	r2, r4, #20
 8008940:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 8008944:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 8008948:	f100 0514 	add.w	r5, r0, #20
 800894c:	f04f 0e00 	mov.w	lr, #0
 8008950:	f852 ab04 	ldr.w	sl, [r2], #4
 8008954:	f859 4b04 	ldr.w	r4, [r9], #4
 8008958:	fa1e f18a 	uxtah	r1, lr, sl
 800895c:	b2a3      	uxth	r3, r4
 800895e:	1ac9      	subs	r1, r1, r3
 8008960:	0c23      	lsrs	r3, r4, #16
 8008962:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 8008966:	eb03 4321 	add.w	r3, r3, r1, asr #16
 800896a:	b289      	uxth	r1, r1
 800896c:	ea4f 4e23 	mov.w	lr, r3, asr #16
 8008970:	45c8      	cmp	r8, r9
 8008972:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8008976:	4694      	mov	ip, r2
 8008978:	f845 3b04 	str.w	r3, [r5], #4
 800897c:	d8e8      	bhi.n	8008950 <__mdiff+0x5c>
 800897e:	45bc      	cmp	ip, r7
 8008980:	d304      	bcc.n	800898c <__mdiff+0x98>
 8008982:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 8008986:	b183      	cbz	r3, 80089aa <__mdiff+0xb6>
 8008988:	6106      	str	r6, [r0, #16]
 800898a:	e7c5      	b.n	8008918 <__mdiff+0x24>
 800898c:	f85c 1b04 	ldr.w	r1, [ip], #4
 8008990:	fa1e f381 	uxtah	r3, lr, r1
 8008994:	141a      	asrs	r2, r3, #16
 8008996:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800899a:	b29b      	uxth	r3, r3
 800899c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80089a0:	ea4f 4e22 	mov.w	lr, r2, asr #16
 80089a4:	f845 3b04 	str.w	r3, [r5], #4
 80089a8:	e7e9      	b.n	800897e <__mdiff+0x8a>
 80089aa:	3e01      	subs	r6, #1
 80089ac:	e7e9      	b.n	8008982 <__mdiff+0x8e>

080089ae <__d2b>:
 80089ae:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80089b2:	460e      	mov	r6, r1
 80089b4:	2101      	movs	r1, #1
 80089b6:	ec59 8b10 	vmov	r8, r9, d0
 80089ba:	4615      	mov	r5, r2
 80089bc:	f7ff fd6b 	bl	8008496 <_Balloc>
 80089c0:	f3c9 540a 	ubfx	r4, r9, #20, #11
 80089c4:	4607      	mov	r7, r0
 80089c6:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80089ca:	bb34      	cbnz	r4, 8008a1a <__d2b+0x6c>
 80089cc:	9301      	str	r3, [sp, #4]
 80089ce:	f1b8 0300 	subs.w	r3, r8, #0
 80089d2:	d027      	beq.n	8008a24 <__d2b+0x76>
 80089d4:	a802      	add	r0, sp, #8
 80089d6:	f840 3d08 	str.w	r3, [r0, #-8]!
 80089da:	f7ff fe01 	bl	80085e0 <__lo0bits>
 80089de:	9900      	ldr	r1, [sp, #0]
 80089e0:	b1f0      	cbz	r0, 8008a20 <__d2b+0x72>
 80089e2:	9a01      	ldr	r2, [sp, #4]
 80089e4:	f1c0 0320 	rsb	r3, r0, #32
 80089e8:	fa02 f303 	lsl.w	r3, r2, r3
 80089ec:	430b      	orrs	r3, r1
 80089ee:	40c2      	lsrs	r2, r0
 80089f0:	617b      	str	r3, [r7, #20]
 80089f2:	9201      	str	r2, [sp, #4]
 80089f4:	9b01      	ldr	r3, [sp, #4]
 80089f6:	61bb      	str	r3, [r7, #24]
 80089f8:	2b00      	cmp	r3, #0
 80089fa:	bf14      	ite	ne
 80089fc:	2102      	movne	r1, #2
 80089fe:	2101      	moveq	r1, #1
 8008a00:	6139      	str	r1, [r7, #16]
 8008a02:	b1c4      	cbz	r4, 8008a36 <__d2b+0x88>
 8008a04:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 8008a08:	4404      	add	r4, r0
 8008a0a:	6034      	str	r4, [r6, #0]
 8008a0c:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8008a10:	6028      	str	r0, [r5, #0]
 8008a12:	4638      	mov	r0, r7
 8008a14:	b003      	add	sp, #12
 8008a16:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008a1a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8008a1e:	e7d5      	b.n	80089cc <__d2b+0x1e>
 8008a20:	6179      	str	r1, [r7, #20]
 8008a22:	e7e7      	b.n	80089f4 <__d2b+0x46>
 8008a24:	a801      	add	r0, sp, #4
 8008a26:	f7ff fddb 	bl	80085e0 <__lo0bits>
 8008a2a:	9b01      	ldr	r3, [sp, #4]
 8008a2c:	617b      	str	r3, [r7, #20]
 8008a2e:	2101      	movs	r1, #1
 8008a30:	6139      	str	r1, [r7, #16]
 8008a32:	3020      	adds	r0, #32
 8008a34:	e7e5      	b.n	8008a02 <__d2b+0x54>
 8008a36:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 8008a3a:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8008a3e:	6030      	str	r0, [r6, #0]
 8008a40:	6918      	ldr	r0, [r3, #16]
 8008a42:	f7ff fdae 	bl	80085a2 <__hi0bits>
 8008a46:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 8008a4a:	e7e1      	b.n	8008a10 <__d2b+0x62>

08008a4c <_calloc_r>:
 8008a4c:	b538      	push	{r3, r4, r5, lr}
 8008a4e:	fb02 f401 	mul.w	r4, r2, r1
 8008a52:	4621      	mov	r1, r4
 8008a54:	f7fd fed6 	bl	8006804 <_malloc_r>
 8008a58:	4605      	mov	r5, r0
 8008a5a:	b118      	cbz	r0, 8008a64 <_calloc_r+0x18>
 8008a5c:	4622      	mov	r2, r4
 8008a5e:	2100      	movs	r1, #0
 8008a60:	f7fd fec8 	bl	80067f4 <memset>
 8008a64:	4628      	mov	r0, r5
 8008a66:	bd38      	pop	{r3, r4, r5, pc}

08008a68 <_free_r>:
 8008a68:	b538      	push	{r3, r4, r5, lr}
 8008a6a:	4605      	mov	r5, r0
 8008a6c:	2900      	cmp	r1, #0
 8008a6e:	d045      	beq.n	8008afc <_free_r+0x94>
 8008a70:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008a74:	1f0c      	subs	r4, r1, #4
 8008a76:	2b00      	cmp	r3, #0
 8008a78:	bfb8      	it	lt
 8008a7a:	18e4      	addlt	r4, r4, r3
 8008a7c:	f7ff fd09 	bl	8008492 <__malloc_lock>
 8008a80:	4a1f      	ldr	r2, [pc, #124]	; (8008b00 <_free_r+0x98>)
 8008a82:	6813      	ldr	r3, [r2, #0]
 8008a84:	4610      	mov	r0, r2
 8008a86:	b933      	cbnz	r3, 8008a96 <_free_r+0x2e>
 8008a88:	6063      	str	r3, [r4, #4]
 8008a8a:	6014      	str	r4, [r2, #0]
 8008a8c:	4628      	mov	r0, r5
 8008a8e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008a92:	f7ff bcff 	b.w	8008494 <__malloc_unlock>
 8008a96:	42a3      	cmp	r3, r4
 8008a98:	d90c      	bls.n	8008ab4 <_free_r+0x4c>
 8008a9a:	6821      	ldr	r1, [r4, #0]
 8008a9c:	1862      	adds	r2, r4, r1
 8008a9e:	4293      	cmp	r3, r2
 8008aa0:	bf04      	itt	eq
 8008aa2:	681a      	ldreq	r2, [r3, #0]
 8008aa4:	685b      	ldreq	r3, [r3, #4]
 8008aa6:	6063      	str	r3, [r4, #4]
 8008aa8:	bf04      	itt	eq
 8008aaa:	1852      	addeq	r2, r2, r1
 8008aac:	6022      	streq	r2, [r4, #0]
 8008aae:	6004      	str	r4, [r0, #0]
 8008ab0:	e7ec      	b.n	8008a8c <_free_r+0x24>
 8008ab2:	4613      	mov	r3, r2
 8008ab4:	685a      	ldr	r2, [r3, #4]
 8008ab6:	b10a      	cbz	r2, 8008abc <_free_r+0x54>
 8008ab8:	42a2      	cmp	r2, r4
 8008aba:	d9fa      	bls.n	8008ab2 <_free_r+0x4a>
 8008abc:	6819      	ldr	r1, [r3, #0]
 8008abe:	1858      	adds	r0, r3, r1
 8008ac0:	42a0      	cmp	r0, r4
 8008ac2:	d10b      	bne.n	8008adc <_free_r+0x74>
 8008ac4:	6820      	ldr	r0, [r4, #0]
 8008ac6:	4401      	add	r1, r0
 8008ac8:	1858      	adds	r0, r3, r1
 8008aca:	4282      	cmp	r2, r0
 8008acc:	6019      	str	r1, [r3, #0]
 8008ace:	d1dd      	bne.n	8008a8c <_free_r+0x24>
 8008ad0:	6810      	ldr	r0, [r2, #0]
 8008ad2:	6852      	ldr	r2, [r2, #4]
 8008ad4:	605a      	str	r2, [r3, #4]
 8008ad6:	4401      	add	r1, r0
 8008ad8:	6019      	str	r1, [r3, #0]
 8008ada:	e7d7      	b.n	8008a8c <_free_r+0x24>
 8008adc:	d902      	bls.n	8008ae4 <_free_r+0x7c>
 8008ade:	230c      	movs	r3, #12
 8008ae0:	602b      	str	r3, [r5, #0]
 8008ae2:	e7d3      	b.n	8008a8c <_free_r+0x24>
 8008ae4:	6820      	ldr	r0, [r4, #0]
 8008ae6:	1821      	adds	r1, r4, r0
 8008ae8:	428a      	cmp	r2, r1
 8008aea:	bf04      	itt	eq
 8008aec:	6811      	ldreq	r1, [r2, #0]
 8008aee:	6852      	ldreq	r2, [r2, #4]
 8008af0:	6062      	str	r2, [r4, #4]
 8008af2:	bf04      	itt	eq
 8008af4:	1809      	addeq	r1, r1, r0
 8008af6:	6021      	streq	r1, [r4, #0]
 8008af8:	605c      	str	r4, [r3, #4]
 8008afa:	e7c7      	b.n	8008a8c <_free_r+0x24>
 8008afc:	bd38      	pop	{r3, r4, r5, pc}
 8008afe:	bf00      	nop
 8008b00:	2000060c 	.word	0x2000060c

08008b04 <__sfputc_r>:
 8008b04:	6893      	ldr	r3, [r2, #8]
 8008b06:	3b01      	subs	r3, #1
 8008b08:	2b00      	cmp	r3, #0
 8008b0a:	b410      	push	{r4}
 8008b0c:	6093      	str	r3, [r2, #8]
 8008b0e:	da08      	bge.n	8008b22 <__sfputc_r+0x1e>
 8008b10:	6994      	ldr	r4, [r2, #24]
 8008b12:	42a3      	cmp	r3, r4
 8008b14:	db01      	blt.n	8008b1a <__sfputc_r+0x16>
 8008b16:	290a      	cmp	r1, #10
 8008b18:	d103      	bne.n	8008b22 <__sfputc_r+0x1e>
 8008b1a:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008b1e:	f7fe bc0b 	b.w	8007338 <__swbuf_r>
 8008b22:	6813      	ldr	r3, [r2, #0]
 8008b24:	1c58      	adds	r0, r3, #1
 8008b26:	6010      	str	r0, [r2, #0]
 8008b28:	7019      	strb	r1, [r3, #0]
 8008b2a:	4608      	mov	r0, r1
 8008b2c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008b30:	4770      	bx	lr

08008b32 <__sfputs_r>:
 8008b32:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008b34:	4606      	mov	r6, r0
 8008b36:	460f      	mov	r7, r1
 8008b38:	4614      	mov	r4, r2
 8008b3a:	18d5      	adds	r5, r2, r3
 8008b3c:	42ac      	cmp	r4, r5
 8008b3e:	d101      	bne.n	8008b44 <__sfputs_r+0x12>
 8008b40:	2000      	movs	r0, #0
 8008b42:	e007      	b.n	8008b54 <__sfputs_r+0x22>
 8008b44:	463a      	mov	r2, r7
 8008b46:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008b4a:	4630      	mov	r0, r6
 8008b4c:	f7ff ffda 	bl	8008b04 <__sfputc_r>
 8008b50:	1c43      	adds	r3, r0, #1
 8008b52:	d1f3      	bne.n	8008b3c <__sfputs_r+0xa>
 8008b54:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08008b58 <_vfiprintf_r>:
 8008b58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008b5c:	460c      	mov	r4, r1
 8008b5e:	b09d      	sub	sp, #116	; 0x74
 8008b60:	4617      	mov	r7, r2
 8008b62:	461d      	mov	r5, r3
 8008b64:	4606      	mov	r6, r0
 8008b66:	b118      	cbz	r0, 8008b70 <_vfiprintf_r+0x18>
 8008b68:	6983      	ldr	r3, [r0, #24]
 8008b6a:	b90b      	cbnz	r3, 8008b70 <_vfiprintf_r+0x18>
 8008b6c:	f7fd fd66 	bl	800663c <__sinit>
 8008b70:	4b7c      	ldr	r3, [pc, #496]	; (8008d64 <_vfiprintf_r+0x20c>)
 8008b72:	429c      	cmp	r4, r3
 8008b74:	d158      	bne.n	8008c28 <_vfiprintf_r+0xd0>
 8008b76:	6874      	ldr	r4, [r6, #4]
 8008b78:	89a3      	ldrh	r3, [r4, #12]
 8008b7a:	0718      	lsls	r0, r3, #28
 8008b7c:	d55e      	bpl.n	8008c3c <_vfiprintf_r+0xe4>
 8008b7e:	6923      	ldr	r3, [r4, #16]
 8008b80:	2b00      	cmp	r3, #0
 8008b82:	d05b      	beq.n	8008c3c <_vfiprintf_r+0xe4>
 8008b84:	2300      	movs	r3, #0
 8008b86:	9309      	str	r3, [sp, #36]	; 0x24
 8008b88:	2320      	movs	r3, #32
 8008b8a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008b8e:	2330      	movs	r3, #48	; 0x30
 8008b90:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008b94:	9503      	str	r5, [sp, #12]
 8008b96:	f04f 0b01 	mov.w	fp, #1
 8008b9a:	46b8      	mov	r8, r7
 8008b9c:	4645      	mov	r5, r8
 8008b9e:	f815 3b01 	ldrb.w	r3, [r5], #1
 8008ba2:	b10b      	cbz	r3, 8008ba8 <_vfiprintf_r+0x50>
 8008ba4:	2b25      	cmp	r3, #37	; 0x25
 8008ba6:	d154      	bne.n	8008c52 <_vfiprintf_r+0xfa>
 8008ba8:	ebb8 0a07 	subs.w	sl, r8, r7
 8008bac:	d00b      	beq.n	8008bc6 <_vfiprintf_r+0x6e>
 8008bae:	4653      	mov	r3, sl
 8008bb0:	463a      	mov	r2, r7
 8008bb2:	4621      	mov	r1, r4
 8008bb4:	4630      	mov	r0, r6
 8008bb6:	f7ff ffbc 	bl	8008b32 <__sfputs_r>
 8008bba:	3001      	adds	r0, #1
 8008bbc:	f000 80c2 	beq.w	8008d44 <_vfiprintf_r+0x1ec>
 8008bc0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008bc2:	4453      	add	r3, sl
 8008bc4:	9309      	str	r3, [sp, #36]	; 0x24
 8008bc6:	f898 3000 	ldrb.w	r3, [r8]
 8008bca:	2b00      	cmp	r3, #0
 8008bcc:	f000 80ba 	beq.w	8008d44 <_vfiprintf_r+0x1ec>
 8008bd0:	2300      	movs	r3, #0
 8008bd2:	f04f 32ff 	mov.w	r2, #4294967295
 8008bd6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008bda:	9304      	str	r3, [sp, #16]
 8008bdc:	9307      	str	r3, [sp, #28]
 8008bde:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008be2:	931a      	str	r3, [sp, #104]	; 0x68
 8008be4:	46a8      	mov	r8, r5
 8008be6:	2205      	movs	r2, #5
 8008be8:	f818 1b01 	ldrb.w	r1, [r8], #1
 8008bec:	485e      	ldr	r0, [pc, #376]	; (8008d68 <_vfiprintf_r+0x210>)
 8008bee:	f7f7 faf7 	bl	80001e0 <memchr>
 8008bf2:	9b04      	ldr	r3, [sp, #16]
 8008bf4:	bb78      	cbnz	r0, 8008c56 <_vfiprintf_r+0xfe>
 8008bf6:	06d9      	lsls	r1, r3, #27
 8008bf8:	bf44      	itt	mi
 8008bfa:	2220      	movmi	r2, #32
 8008bfc:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8008c00:	071a      	lsls	r2, r3, #28
 8008c02:	bf44      	itt	mi
 8008c04:	222b      	movmi	r2, #43	; 0x2b
 8008c06:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8008c0a:	782a      	ldrb	r2, [r5, #0]
 8008c0c:	2a2a      	cmp	r2, #42	; 0x2a
 8008c0e:	d02a      	beq.n	8008c66 <_vfiprintf_r+0x10e>
 8008c10:	9a07      	ldr	r2, [sp, #28]
 8008c12:	46a8      	mov	r8, r5
 8008c14:	2000      	movs	r0, #0
 8008c16:	250a      	movs	r5, #10
 8008c18:	4641      	mov	r1, r8
 8008c1a:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008c1e:	3b30      	subs	r3, #48	; 0x30
 8008c20:	2b09      	cmp	r3, #9
 8008c22:	d969      	bls.n	8008cf8 <_vfiprintf_r+0x1a0>
 8008c24:	b360      	cbz	r0, 8008c80 <_vfiprintf_r+0x128>
 8008c26:	e024      	b.n	8008c72 <_vfiprintf_r+0x11a>
 8008c28:	4b50      	ldr	r3, [pc, #320]	; (8008d6c <_vfiprintf_r+0x214>)
 8008c2a:	429c      	cmp	r4, r3
 8008c2c:	d101      	bne.n	8008c32 <_vfiprintf_r+0xda>
 8008c2e:	68b4      	ldr	r4, [r6, #8]
 8008c30:	e7a2      	b.n	8008b78 <_vfiprintf_r+0x20>
 8008c32:	4b4f      	ldr	r3, [pc, #316]	; (8008d70 <_vfiprintf_r+0x218>)
 8008c34:	429c      	cmp	r4, r3
 8008c36:	bf08      	it	eq
 8008c38:	68f4      	ldreq	r4, [r6, #12]
 8008c3a:	e79d      	b.n	8008b78 <_vfiprintf_r+0x20>
 8008c3c:	4621      	mov	r1, r4
 8008c3e:	4630      	mov	r0, r6
 8008c40:	f7fe fbde 	bl	8007400 <__swsetup_r>
 8008c44:	2800      	cmp	r0, #0
 8008c46:	d09d      	beq.n	8008b84 <_vfiprintf_r+0x2c>
 8008c48:	f04f 30ff 	mov.w	r0, #4294967295
 8008c4c:	b01d      	add	sp, #116	; 0x74
 8008c4e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008c52:	46a8      	mov	r8, r5
 8008c54:	e7a2      	b.n	8008b9c <_vfiprintf_r+0x44>
 8008c56:	4a44      	ldr	r2, [pc, #272]	; (8008d68 <_vfiprintf_r+0x210>)
 8008c58:	1a80      	subs	r0, r0, r2
 8008c5a:	fa0b f000 	lsl.w	r0, fp, r0
 8008c5e:	4318      	orrs	r0, r3
 8008c60:	9004      	str	r0, [sp, #16]
 8008c62:	4645      	mov	r5, r8
 8008c64:	e7be      	b.n	8008be4 <_vfiprintf_r+0x8c>
 8008c66:	9a03      	ldr	r2, [sp, #12]
 8008c68:	1d11      	adds	r1, r2, #4
 8008c6a:	6812      	ldr	r2, [r2, #0]
 8008c6c:	9103      	str	r1, [sp, #12]
 8008c6e:	2a00      	cmp	r2, #0
 8008c70:	db01      	blt.n	8008c76 <_vfiprintf_r+0x11e>
 8008c72:	9207      	str	r2, [sp, #28]
 8008c74:	e004      	b.n	8008c80 <_vfiprintf_r+0x128>
 8008c76:	4252      	negs	r2, r2
 8008c78:	f043 0302 	orr.w	r3, r3, #2
 8008c7c:	9207      	str	r2, [sp, #28]
 8008c7e:	9304      	str	r3, [sp, #16]
 8008c80:	f898 3000 	ldrb.w	r3, [r8]
 8008c84:	2b2e      	cmp	r3, #46	; 0x2e
 8008c86:	d10e      	bne.n	8008ca6 <_vfiprintf_r+0x14e>
 8008c88:	f898 3001 	ldrb.w	r3, [r8, #1]
 8008c8c:	2b2a      	cmp	r3, #42	; 0x2a
 8008c8e:	d138      	bne.n	8008d02 <_vfiprintf_r+0x1aa>
 8008c90:	9b03      	ldr	r3, [sp, #12]
 8008c92:	1d1a      	adds	r2, r3, #4
 8008c94:	681b      	ldr	r3, [r3, #0]
 8008c96:	9203      	str	r2, [sp, #12]
 8008c98:	2b00      	cmp	r3, #0
 8008c9a:	bfb8      	it	lt
 8008c9c:	f04f 33ff 	movlt.w	r3, #4294967295
 8008ca0:	f108 0802 	add.w	r8, r8, #2
 8008ca4:	9305      	str	r3, [sp, #20]
 8008ca6:	4d33      	ldr	r5, [pc, #204]	; (8008d74 <_vfiprintf_r+0x21c>)
 8008ca8:	f898 1000 	ldrb.w	r1, [r8]
 8008cac:	2203      	movs	r2, #3
 8008cae:	4628      	mov	r0, r5
 8008cb0:	f7f7 fa96 	bl	80001e0 <memchr>
 8008cb4:	b140      	cbz	r0, 8008cc8 <_vfiprintf_r+0x170>
 8008cb6:	2340      	movs	r3, #64	; 0x40
 8008cb8:	1b40      	subs	r0, r0, r5
 8008cba:	fa03 f000 	lsl.w	r0, r3, r0
 8008cbe:	9b04      	ldr	r3, [sp, #16]
 8008cc0:	4303      	orrs	r3, r0
 8008cc2:	f108 0801 	add.w	r8, r8, #1
 8008cc6:	9304      	str	r3, [sp, #16]
 8008cc8:	f898 1000 	ldrb.w	r1, [r8]
 8008ccc:	482a      	ldr	r0, [pc, #168]	; (8008d78 <_vfiprintf_r+0x220>)
 8008cce:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008cd2:	2206      	movs	r2, #6
 8008cd4:	f108 0701 	add.w	r7, r8, #1
 8008cd8:	f7f7 fa82 	bl	80001e0 <memchr>
 8008cdc:	2800      	cmp	r0, #0
 8008cde:	d037      	beq.n	8008d50 <_vfiprintf_r+0x1f8>
 8008ce0:	4b26      	ldr	r3, [pc, #152]	; (8008d7c <_vfiprintf_r+0x224>)
 8008ce2:	bb1b      	cbnz	r3, 8008d2c <_vfiprintf_r+0x1d4>
 8008ce4:	9b03      	ldr	r3, [sp, #12]
 8008ce6:	3307      	adds	r3, #7
 8008ce8:	f023 0307 	bic.w	r3, r3, #7
 8008cec:	3308      	adds	r3, #8
 8008cee:	9303      	str	r3, [sp, #12]
 8008cf0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008cf2:	444b      	add	r3, r9
 8008cf4:	9309      	str	r3, [sp, #36]	; 0x24
 8008cf6:	e750      	b.n	8008b9a <_vfiprintf_r+0x42>
 8008cf8:	fb05 3202 	mla	r2, r5, r2, r3
 8008cfc:	2001      	movs	r0, #1
 8008cfe:	4688      	mov	r8, r1
 8008d00:	e78a      	b.n	8008c18 <_vfiprintf_r+0xc0>
 8008d02:	2300      	movs	r3, #0
 8008d04:	f108 0801 	add.w	r8, r8, #1
 8008d08:	9305      	str	r3, [sp, #20]
 8008d0a:	4619      	mov	r1, r3
 8008d0c:	250a      	movs	r5, #10
 8008d0e:	4640      	mov	r0, r8
 8008d10:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008d14:	3a30      	subs	r2, #48	; 0x30
 8008d16:	2a09      	cmp	r2, #9
 8008d18:	d903      	bls.n	8008d22 <_vfiprintf_r+0x1ca>
 8008d1a:	2b00      	cmp	r3, #0
 8008d1c:	d0c3      	beq.n	8008ca6 <_vfiprintf_r+0x14e>
 8008d1e:	9105      	str	r1, [sp, #20]
 8008d20:	e7c1      	b.n	8008ca6 <_vfiprintf_r+0x14e>
 8008d22:	fb05 2101 	mla	r1, r5, r1, r2
 8008d26:	2301      	movs	r3, #1
 8008d28:	4680      	mov	r8, r0
 8008d2a:	e7f0      	b.n	8008d0e <_vfiprintf_r+0x1b6>
 8008d2c:	ab03      	add	r3, sp, #12
 8008d2e:	9300      	str	r3, [sp, #0]
 8008d30:	4622      	mov	r2, r4
 8008d32:	4b13      	ldr	r3, [pc, #76]	; (8008d80 <_vfiprintf_r+0x228>)
 8008d34:	a904      	add	r1, sp, #16
 8008d36:	4630      	mov	r0, r6
 8008d38:	f7fd fe52 	bl	80069e0 <_printf_float>
 8008d3c:	f1b0 3fff 	cmp.w	r0, #4294967295
 8008d40:	4681      	mov	r9, r0
 8008d42:	d1d5      	bne.n	8008cf0 <_vfiprintf_r+0x198>
 8008d44:	89a3      	ldrh	r3, [r4, #12]
 8008d46:	065b      	lsls	r3, r3, #25
 8008d48:	f53f af7e 	bmi.w	8008c48 <_vfiprintf_r+0xf0>
 8008d4c:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008d4e:	e77d      	b.n	8008c4c <_vfiprintf_r+0xf4>
 8008d50:	ab03      	add	r3, sp, #12
 8008d52:	9300      	str	r3, [sp, #0]
 8008d54:	4622      	mov	r2, r4
 8008d56:	4b0a      	ldr	r3, [pc, #40]	; (8008d80 <_vfiprintf_r+0x228>)
 8008d58:	a904      	add	r1, sp, #16
 8008d5a:	4630      	mov	r0, r6
 8008d5c:	f7fe f8f6 	bl	8006f4c <_printf_i>
 8008d60:	e7ec      	b.n	8008d3c <_vfiprintf_r+0x1e4>
 8008d62:	bf00      	nop
 8008d64:	08009c84 	.word	0x08009c84
 8008d68:	08009e0c 	.word	0x08009e0c
 8008d6c:	08009ca4 	.word	0x08009ca4
 8008d70:	08009c64 	.word	0x08009c64
 8008d74:	08009e12 	.word	0x08009e12
 8008d78:	08009e16 	.word	0x08009e16
 8008d7c:	080069e1 	.word	0x080069e1
 8008d80:	08008b33 	.word	0x08008b33

08008d84 <_putc_r>:
 8008d84:	b570      	push	{r4, r5, r6, lr}
 8008d86:	460d      	mov	r5, r1
 8008d88:	4614      	mov	r4, r2
 8008d8a:	4606      	mov	r6, r0
 8008d8c:	b118      	cbz	r0, 8008d96 <_putc_r+0x12>
 8008d8e:	6983      	ldr	r3, [r0, #24]
 8008d90:	b90b      	cbnz	r3, 8008d96 <_putc_r+0x12>
 8008d92:	f7fd fc53 	bl	800663c <__sinit>
 8008d96:	4b13      	ldr	r3, [pc, #76]	; (8008de4 <_putc_r+0x60>)
 8008d98:	429c      	cmp	r4, r3
 8008d9a:	d112      	bne.n	8008dc2 <_putc_r+0x3e>
 8008d9c:	6874      	ldr	r4, [r6, #4]
 8008d9e:	68a3      	ldr	r3, [r4, #8]
 8008da0:	3b01      	subs	r3, #1
 8008da2:	2b00      	cmp	r3, #0
 8008da4:	60a3      	str	r3, [r4, #8]
 8008da6:	da16      	bge.n	8008dd6 <_putc_r+0x52>
 8008da8:	69a2      	ldr	r2, [r4, #24]
 8008daa:	4293      	cmp	r3, r2
 8008dac:	db02      	blt.n	8008db4 <_putc_r+0x30>
 8008dae:	b2eb      	uxtb	r3, r5
 8008db0:	2b0a      	cmp	r3, #10
 8008db2:	d110      	bne.n	8008dd6 <_putc_r+0x52>
 8008db4:	4622      	mov	r2, r4
 8008db6:	4629      	mov	r1, r5
 8008db8:	4630      	mov	r0, r6
 8008dba:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8008dbe:	f7fe babb 	b.w	8007338 <__swbuf_r>
 8008dc2:	4b09      	ldr	r3, [pc, #36]	; (8008de8 <_putc_r+0x64>)
 8008dc4:	429c      	cmp	r4, r3
 8008dc6:	d101      	bne.n	8008dcc <_putc_r+0x48>
 8008dc8:	68b4      	ldr	r4, [r6, #8]
 8008dca:	e7e8      	b.n	8008d9e <_putc_r+0x1a>
 8008dcc:	4b07      	ldr	r3, [pc, #28]	; (8008dec <_putc_r+0x68>)
 8008dce:	429c      	cmp	r4, r3
 8008dd0:	bf08      	it	eq
 8008dd2:	68f4      	ldreq	r4, [r6, #12]
 8008dd4:	e7e3      	b.n	8008d9e <_putc_r+0x1a>
 8008dd6:	6823      	ldr	r3, [r4, #0]
 8008dd8:	1c5a      	adds	r2, r3, #1
 8008dda:	6022      	str	r2, [r4, #0]
 8008ddc:	701d      	strb	r5, [r3, #0]
 8008dde:	b2e8      	uxtb	r0, r5
 8008de0:	bd70      	pop	{r4, r5, r6, pc}
 8008de2:	bf00      	nop
 8008de4:	08009c84 	.word	0x08009c84
 8008de8:	08009ca4 	.word	0x08009ca4
 8008dec:	08009c64 	.word	0x08009c64

08008df0 <_read_r>:
 8008df0:	b538      	push	{r3, r4, r5, lr}
 8008df2:	4c07      	ldr	r4, [pc, #28]	; (8008e10 <_read_r+0x20>)
 8008df4:	4605      	mov	r5, r0
 8008df6:	4608      	mov	r0, r1
 8008df8:	4611      	mov	r1, r2
 8008dfa:	2200      	movs	r2, #0
 8008dfc:	6022      	str	r2, [r4, #0]
 8008dfe:	461a      	mov	r2, r3
 8008e00:	f7f9 f9fc 	bl	80021fc <_read>
 8008e04:	1c43      	adds	r3, r0, #1
 8008e06:	d102      	bne.n	8008e0e <_read_r+0x1e>
 8008e08:	6823      	ldr	r3, [r4, #0]
 8008e0a:	b103      	cbz	r3, 8008e0e <_read_r+0x1e>
 8008e0c:	602b      	str	r3, [r5, #0]
 8008e0e:	bd38      	pop	{r3, r4, r5, pc}
 8008e10:	200009d8 	.word	0x200009d8

08008e14 <__srget_r>:
 8008e14:	b538      	push	{r3, r4, r5, lr}
 8008e16:	460c      	mov	r4, r1
 8008e18:	4605      	mov	r5, r0
 8008e1a:	b118      	cbz	r0, 8008e24 <__srget_r+0x10>
 8008e1c:	6983      	ldr	r3, [r0, #24]
 8008e1e:	b90b      	cbnz	r3, 8008e24 <__srget_r+0x10>
 8008e20:	f7fd fc0c 	bl	800663c <__sinit>
 8008e24:	4b0e      	ldr	r3, [pc, #56]	; (8008e60 <__srget_r+0x4c>)
 8008e26:	429c      	cmp	r4, r3
 8008e28:	d10d      	bne.n	8008e46 <__srget_r+0x32>
 8008e2a:	686c      	ldr	r4, [r5, #4]
 8008e2c:	4621      	mov	r1, r4
 8008e2e:	4628      	mov	r0, r5
 8008e30:	f000 f85a 	bl	8008ee8 <__srefill_r>
 8008e34:	b988      	cbnz	r0, 8008e5a <__srget_r+0x46>
 8008e36:	6863      	ldr	r3, [r4, #4]
 8008e38:	3b01      	subs	r3, #1
 8008e3a:	6063      	str	r3, [r4, #4]
 8008e3c:	6823      	ldr	r3, [r4, #0]
 8008e3e:	1c5a      	adds	r2, r3, #1
 8008e40:	6022      	str	r2, [r4, #0]
 8008e42:	7818      	ldrb	r0, [r3, #0]
 8008e44:	bd38      	pop	{r3, r4, r5, pc}
 8008e46:	4b07      	ldr	r3, [pc, #28]	; (8008e64 <__srget_r+0x50>)
 8008e48:	429c      	cmp	r4, r3
 8008e4a:	d101      	bne.n	8008e50 <__srget_r+0x3c>
 8008e4c:	68ac      	ldr	r4, [r5, #8]
 8008e4e:	e7ed      	b.n	8008e2c <__srget_r+0x18>
 8008e50:	4b05      	ldr	r3, [pc, #20]	; (8008e68 <__srget_r+0x54>)
 8008e52:	429c      	cmp	r4, r3
 8008e54:	bf08      	it	eq
 8008e56:	68ec      	ldreq	r4, [r5, #12]
 8008e58:	e7e8      	b.n	8008e2c <__srget_r+0x18>
 8008e5a:	f04f 30ff 	mov.w	r0, #4294967295
 8008e5e:	e7f1      	b.n	8008e44 <__srget_r+0x30>
 8008e60:	08009c84 	.word	0x08009c84
 8008e64:	08009ca4 	.word	0x08009ca4
 8008e68:	08009c64 	.word	0x08009c64

08008e6c <_fstat_r>:
 8008e6c:	b538      	push	{r3, r4, r5, lr}
 8008e6e:	4c07      	ldr	r4, [pc, #28]	; (8008e8c <_fstat_r+0x20>)
 8008e70:	2300      	movs	r3, #0
 8008e72:	4605      	mov	r5, r0
 8008e74:	4608      	mov	r0, r1
 8008e76:	4611      	mov	r1, r2
 8008e78:	6023      	str	r3, [r4, #0]
 8008e7a:	f7f9 fe6d 	bl	8002b58 <_fstat>
 8008e7e:	1c43      	adds	r3, r0, #1
 8008e80:	d102      	bne.n	8008e88 <_fstat_r+0x1c>
 8008e82:	6823      	ldr	r3, [r4, #0]
 8008e84:	b103      	cbz	r3, 8008e88 <_fstat_r+0x1c>
 8008e86:	602b      	str	r3, [r5, #0]
 8008e88:	bd38      	pop	{r3, r4, r5, pc}
 8008e8a:	bf00      	nop
 8008e8c:	200009d8 	.word	0x200009d8

08008e90 <_isatty_r>:
 8008e90:	b538      	push	{r3, r4, r5, lr}
 8008e92:	4c06      	ldr	r4, [pc, #24]	; (8008eac <_isatty_r+0x1c>)
 8008e94:	2300      	movs	r3, #0
 8008e96:	4605      	mov	r5, r0
 8008e98:	4608      	mov	r0, r1
 8008e9a:	6023      	str	r3, [r4, #0]
 8008e9c:	f7f9 fe6c 	bl	8002b78 <_isatty>
 8008ea0:	1c43      	adds	r3, r0, #1
 8008ea2:	d102      	bne.n	8008eaa <_isatty_r+0x1a>
 8008ea4:	6823      	ldr	r3, [r4, #0]
 8008ea6:	b103      	cbz	r3, 8008eaa <_isatty_r+0x1a>
 8008ea8:	602b      	str	r3, [r5, #0]
 8008eaa:	bd38      	pop	{r3, r4, r5, pc}
 8008eac:	200009d8 	.word	0x200009d8

08008eb0 <__ascii_mbtowc>:
 8008eb0:	b082      	sub	sp, #8
 8008eb2:	b901      	cbnz	r1, 8008eb6 <__ascii_mbtowc+0x6>
 8008eb4:	a901      	add	r1, sp, #4
 8008eb6:	b142      	cbz	r2, 8008eca <__ascii_mbtowc+0x1a>
 8008eb8:	b14b      	cbz	r3, 8008ece <__ascii_mbtowc+0x1e>
 8008eba:	7813      	ldrb	r3, [r2, #0]
 8008ebc:	600b      	str	r3, [r1, #0]
 8008ebe:	7812      	ldrb	r2, [r2, #0]
 8008ec0:	1c10      	adds	r0, r2, #0
 8008ec2:	bf18      	it	ne
 8008ec4:	2001      	movne	r0, #1
 8008ec6:	b002      	add	sp, #8
 8008ec8:	4770      	bx	lr
 8008eca:	4610      	mov	r0, r2
 8008ecc:	e7fb      	b.n	8008ec6 <__ascii_mbtowc+0x16>
 8008ece:	f06f 0001 	mvn.w	r0, #1
 8008ed2:	e7f8      	b.n	8008ec6 <__ascii_mbtowc+0x16>

08008ed4 <lflush>:
 8008ed4:	8983      	ldrh	r3, [r0, #12]
 8008ed6:	f003 0309 	and.w	r3, r3, #9
 8008eda:	2b09      	cmp	r3, #9
 8008edc:	d101      	bne.n	8008ee2 <lflush+0xe>
 8008ede:	f7ff ba03 	b.w	80082e8 <fflush>
 8008ee2:	2000      	movs	r0, #0
 8008ee4:	4770      	bx	lr
	...

08008ee8 <__srefill_r>:
 8008ee8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008eea:	460c      	mov	r4, r1
 8008eec:	4605      	mov	r5, r0
 8008eee:	b118      	cbz	r0, 8008ef8 <__srefill_r+0x10>
 8008ef0:	6983      	ldr	r3, [r0, #24]
 8008ef2:	b90b      	cbnz	r3, 8008ef8 <__srefill_r+0x10>
 8008ef4:	f7fd fba2 	bl	800663c <__sinit>
 8008ef8:	4b3c      	ldr	r3, [pc, #240]	; (8008fec <__srefill_r+0x104>)
 8008efa:	429c      	cmp	r4, r3
 8008efc:	d10a      	bne.n	8008f14 <__srefill_r+0x2c>
 8008efe:	686c      	ldr	r4, [r5, #4]
 8008f00:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008f04:	2300      	movs	r3, #0
 8008f06:	6063      	str	r3, [r4, #4]
 8008f08:	b293      	uxth	r3, r2
 8008f0a:	069e      	lsls	r6, r3, #26
 8008f0c:	d50c      	bpl.n	8008f28 <__srefill_r+0x40>
 8008f0e:	f04f 30ff 	mov.w	r0, #4294967295
 8008f12:	e067      	b.n	8008fe4 <__srefill_r+0xfc>
 8008f14:	4b36      	ldr	r3, [pc, #216]	; (8008ff0 <__srefill_r+0x108>)
 8008f16:	429c      	cmp	r4, r3
 8008f18:	d101      	bne.n	8008f1e <__srefill_r+0x36>
 8008f1a:	68ac      	ldr	r4, [r5, #8]
 8008f1c:	e7f0      	b.n	8008f00 <__srefill_r+0x18>
 8008f1e:	4b35      	ldr	r3, [pc, #212]	; (8008ff4 <__srefill_r+0x10c>)
 8008f20:	429c      	cmp	r4, r3
 8008f22:	bf08      	it	eq
 8008f24:	68ec      	ldreq	r4, [r5, #12]
 8008f26:	e7eb      	b.n	8008f00 <__srefill_r+0x18>
 8008f28:	0758      	lsls	r0, r3, #29
 8008f2a:	d449      	bmi.n	8008fc0 <__srefill_r+0xd8>
 8008f2c:	06d9      	lsls	r1, r3, #27
 8008f2e:	d405      	bmi.n	8008f3c <__srefill_r+0x54>
 8008f30:	2309      	movs	r3, #9
 8008f32:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008f36:	602b      	str	r3, [r5, #0]
 8008f38:	81a2      	strh	r2, [r4, #12]
 8008f3a:	e7e8      	b.n	8008f0e <__srefill_r+0x26>
 8008f3c:	071a      	lsls	r2, r3, #28
 8008f3e:	d50b      	bpl.n	8008f58 <__srefill_r+0x70>
 8008f40:	4621      	mov	r1, r4
 8008f42:	4628      	mov	r0, r5
 8008f44:	f7ff f9a6 	bl	8008294 <_fflush_r>
 8008f48:	2800      	cmp	r0, #0
 8008f4a:	d1e0      	bne.n	8008f0e <__srefill_r+0x26>
 8008f4c:	89a3      	ldrh	r3, [r4, #12]
 8008f4e:	60a0      	str	r0, [r4, #8]
 8008f50:	f023 0308 	bic.w	r3, r3, #8
 8008f54:	81a3      	strh	r3, [r4, #12]
 8008f56:	61a0      	str	r0, [r4, #24]
 8008f58:	89a3      	ldrh	r3, [r4, #12]
 8008f5a:	f043 0304 	orr.w	r3, r3, #4
 8008f5e:	81a3      	strh	r3, [r4, #12]
 8008f60:	6923      	ldr	r3, [r4, #16]
 8008f62:	b91b      	cbnz	r3, 8008f6c <__srefill_r+0x84>
 8008f64:	4621      	mov	r1, r4
 8008f66:	4628      	mov	r0, r5
 8008f68:	f7ff fa40 	bl	80083ec <__smakebuf_r>
 8008f6c:	f9b4 700c 	ldrsh.w	r7, [r4, #12]
 8008f70:	b2be      	uxth	r6, r7
 8008f72:	07b3      	lsls	r3, r6, #30
 8008f74:	d00f      	beq.n	8008f96 <__srefill_r+0xae>
 8008f76:	2301      	movs	r3, #1
 8008f78:	81a3      	strh	r3, [r4, #12]
 8008f7a:	4b1f      	ldr	r3, [pc, #124]	; (8008ff8 <__srefill_r+0x110>)
 8008f7c:	491f      	ldr	r1, [pc, #124]	; (8008ffc <__srefill_r+0x114>)
 8008f7e:	6818      	ldr	r0, [r3, #0]
 8008f80:	f006 0609 	and.w	r6, r6, #9
 8008f84:	f7fd fbc6 	bl	8006714 <_fwalk>
 8008f88:	2e09      	cmp	r6, #9
 8008f8a:	81a7      	strh	r7, [r4, #12]
 8008f8c:	d103      	bne.n	8008f96 <__srefill_r+0xae>
 8008f8e:	4621      	mov	r1, r4
 8008f90:	4628      	mov	r0, r5
 8008f92:	f7ff f8f9 	bl	8008188 <__sflush_r>
 8008f96:	6922      	ldr	r2, [r4, #16]
 8008f98:	6022      	str	r2, [r4, #0]
 8008f9a:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8008f9c:	6963      	ldr	r3, [r4, #20]
 8008f9e:	6a21      	ldr	r1, [r4, #32]
 8008fa0:	4628      	mov	r0, r5
 8008fa2:	47b0      	blx	r6
 8008fa4:	2800      	cmp	r0, #0
 8008fa6:	6060      	str	r0, [r4, #4]
 8008fa8:	dc1d      	bgt.n	8008fe6 <__srefill_r+0xfe>
 8008faa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008fae:	bf17      	itett	ne
 8008fb0:	2200      	movne	r2, #0
 8008fb2:	f043 0320 	orreq.w	r3, r3, #32
 8008fb6:	f043 0340 	orrne.w	r3, r3, #64	; 0x40
 8008fba:	6062      	strne	r2, [r4, #4]
 8008fbc:	81a3      	strh	r3, [r4, #12]
 8008fbe:	e7a6      	b.n	8008f0e <__srefill_r+0x26>
 8008fc0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008fc2:	2900      	cmp	r1, #0
 8008fc4:	d0cc      	beq.n	8008f60 <__srefill_r+0x78>
 8008fc6:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008fca:	4299      	cmp	r1, r3
 8008fcc:	d002      	beq.n	8008fd4 <__srefill_r+0xec>
 8008fce:	4628      	mov	r0, r5
 8008fd0:	f7ff fd4a 	bl	8008a68 <_free_r>
 8008fd4:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8008fd6:	6063      	str	r3, [r4, #4]
 8008fd8:	2000      	movs	r0, #0
 8008fda:	6360      	str	r0, [r4, #52]	; 0x34
 8008fdc:	2b00      	cmp	r3, #0
 8008fde:	d0bf      	beq.n	8008f60 <__srefill_r+0x78>
 8008fe0:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8008fe2:	6023      	str	r3, [r4, #0]
 8008fe4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008fe6:	2000      	movs	r0, #0
 8008fe8:	e7fc      	b.n	8008fe4 <__srefill_r+0xfc>
 8008fea:	bf00      	nop
 8008fec:	08009c84 	.word	0x08009c84
 8008ff0:	08009ca4 	.word	0x08009ca4
 8008ff4:	08009c64 	.word	0x08009c64
 8008ff8:	08009cc4 	.word	0x08009cc4
 8008ffc:	08008ed5 	.word	0x08008ed5

08009000 <__ascii_wctomb>:
 8009000:	b149      	cbz	r1, 8009016 <__ascii_wctomb+0x16>
 8009002:	2aff      	cmp	r2, #255	; 0xff
 8009004:	bf85      	ittet	hi
 8009006:	238a      	movhi	r3, #138	; 0x8a
 8009008:	6003      	strhi	r3, [r0, #0]
 800900a:	700a      	strbls	r2, [r1, #0]
 800900c:	f04f 30ff 	movhi.w	r0, #4294967295
 8009010:	bf98      	it	ls
 8009012:	2001      	movls	r0, #1
 8009014:	4770      	bx	lr
 8009016:	4608      	mov	r0, r1
 8009018:	4770      	bx	lr
	...

0800901c <_init>:
 800901c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800901e:	bf00      	nop
 8009020:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009022:	bc08      	pop	{r3}
 8009024:	469e      	mov	lr, r3
 8009026:	4770      	bx	lr

08009028 <_fini>:
 8009028:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800902a:	bf00      	nop
 800902c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800902e:	bc08      	pop	{r3}
 8009030:	469e      	mov	lr, r3
 8009032:	4770      	bx	lr
