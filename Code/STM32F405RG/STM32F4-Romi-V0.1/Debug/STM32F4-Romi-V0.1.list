
STM32F4-Romi-V0.1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000bc14  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001358  0800bda8  0800bda8  0001bda8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800d100  0800d100  000202d4  2**0
                  CONTENTS
  4 .ARM          00000008  0800d100  0800d100  0001d100  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800d108  0800d108  000202d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800d108  0800d108  0001d108  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800d10c  0800d10c  0001d10c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000002d4  20000000  0800d110  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000090c  200002d4  0800d3e4  000202d4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000be0  0800d3e4  00020be0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000202d4  2**0
                  CONTENTS, READONLY
 12 .debug_info   00022c5c  00000000  00000000  00020304  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000048c6  00000000  00000000  00042f60  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001790  00000000  00000000  00047828  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001570  00000000  00000000  00048fb8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0002547d  00000000  00000000  0004a528  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00017d9c  00000000  00000000  0006f9a5  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000ca42b  00000000  00000000  00087741  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00151b6c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000720c  00000000  00000000  00151be8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200002d4 	.word	0x200002d4
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800bd8c 	.word	0x0800bd8c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200002d8 	.word	0x200002d8
 80001cc:	0800bd8c 	.word	0x0800bd8c

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003be:	f1a4 0401 	sub.w	r4, r4, #1
 80003c2:	d1e9      	bne.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2f>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bb0:	bf24      	itt	cs
 8000bb2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bb6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bba:	d90d      	bls.n	8000bd8 <__aeabi_d2f+0x30>
 8000bbc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bc0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bc4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bc8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bcc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bd0:	bf08      	it	eq
 8000bd2:	f020 0001 	biceq.w	r0, r0, #1
 8000bd6:	4770      	bx	lr
 8000bd8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bdc:	d121      	bne.n	8000c22 <__aeabi_d2f+0x7a>
 8000bde:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000be2:	bfbc      	itt	lt
 8000be4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000be8:	4770      	bxlt	lr
 8000bea:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000bee:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000bf2:	f1c2 0218 	rsb	r2, r2, #24
 8000bf6:	f1c2 0c20 	rsb	ip, r2, #32
 8000bfa:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bfe:	fa20 f002 	lsr.w	r0, r0, r2
 8000c02:	bf18      	it	ne
 8000c04:	f040 0001 	orrne.w	r0, r0, #1
 8000c08:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c0c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c10:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c14:	ea40 000c 	orr.w	r0, r0, ip
 8000c18:	fa23 f302 	lsr.w	r3, r3, r2
 8000c1c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c20:	e7cc      	b.n	8000bbc <__aeabi_d2f+0x14>
 8000c22:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c26:	d107      	bne.n	8000c38 <__aeabi_d2f+0x90>
 8000c28:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c2c:	bf1e      	ittt	ne
 8000c2e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c32:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c36:	4770      	bxne	lr
 8000c38:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c3c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c40:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c44:	4770      	bx	lr
 8000c46:	bf00      	nop

08000c48 <__aeabi_uldivmod>:
 8000c48:	b953      	cbnz	r3, 8000c60 <__aeabi_uldivmod+0x18>
 8000c4a:	b94a      	cbnz	r2, 8000c60 <__aeabi_uldivmod+0x18>
 8000c4c:	2900      	cmp	r1, #0
 8000c4e:	bf08      	it	eq
 8000c50:	2800      	cmpeq	r0, #0
 8000c52:	bf1c      	itt	ne
 8000c54:	f04f 31ff 	movne.w	r1, #4294967295
 8000c58:	f04f 30ff 	movne.w	r0, #4294967295
 8000c5c:	f000 b972 	b.w	8000f44 <__aeabi_idiv0>
 8000c60:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c64:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c68:	f000 f806 	bl	8000c78 <__udivmoddi4>
 8000c6c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c70:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c74:	b004      	add	sp, #16
 8000c76:	4770      	bx	lr

08000c78 <__udivmoddi4>:
 8000c78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c7c:	9e08      	ldr	r6, [sp, #32]
 8000c7e:	4604      	mov	r4, r0
 8000c80:	4688      	mov	r8, r1
 8000c82:	2b00      	cmp	r3, #0
 8000c84:	d14b      	bne.n	8000d1e <__udivmoddi4+0xa6>
 8000c86:	428a      	cmp	r2, r1
 8000c88:	4615      	mov	r5, r2
 8000c8a:	d967      	bls.n	8000d5c <__udivmoddi4+0xe4>
 8000c8c:	fab2 f282 	clz	r2, r2
 8000c90:	b14a      	cbz	r2, 8000ca6 <__udivmoddi4+0x2e>
 8000c92:	f1c2 0720 	rsb	r7, r2, #32
 8000c96:	fa01 f302 	lsl.w	r3, r1, r2
 8000c9a:	fa20 f707 	lsr.w	r7, r0, r7
 8000c9e:	4095      	lsls	r5, r2
 8000ca0:	ea47 0803 	orr.w	r8, r7, r3
 8000ca4:	4094      	lsls	r4, r2
 8000ca6:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000caa:	0c23      	lsrs	r3, r4, #16
 8000cac:	fbb8 f7fe 	udiv	r7, r8, lr
 8000cb0:	fa1f fc85 	uxth.w	ip, r5
 8000cb4:	fb0e 8817 	mls	r8, lr, r7, r8
 8000cb8:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000cbc:	fb07 f10c 	mul.w	r1, r7, ip
 8000cc0:	4299      	cmp	r1, r3
 8000cc2:	d909      	bls.n	8000cd8 <__udivmoddi4+0x60>
 8000cc4:	18eb      	adds	r3, r5, r3
 8000cc6:	f107 30ff 	add.w	r0, r7, #4294967295
 8000cca:	f080 811b 	bcs.w	8000f04 <__udivmoddi4+0x28c>
 8000cce:	4299      	cmp	r1, r3
 8000cd0:	f240 8118 	bls.w	8000f04 <__udivmoddi4+0x28c>
 8000cd4:	3f02      	subs	r7, #2
 8000cd6:	442b      	add	r3, r5
 8000cd8:	1a5b      	subs	r3, r3, r1
 8000cda:	b2a4      	uxth	r4, r4
 8000cdc:	fbb3 f0fe 	udiv	r0, r3, lr
 8000ce0:	fb0e 3310 	mls	r3, lr, r0, r3
 8000ce4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000ce8:	fb00 fc0c 	mul.w	ip, r0, ip
 8000cec:	45a4      	cmp	ip, r4
 8000cee:	d909      	bls.n	8000d04 <__udivmoddi4+0x8c>
 8000cf0:	192c      	adds	r4, r5, r4
 8000cf2:	f100 33ff 	add.w	r3, r0, #4294967295
 8000cf6:	f080 8107 	bcs.w	8000f08 <__udivmoddi4+0x290>
 8000cfa:	45a4      	cmp	ip, r4
 8000cfc:	f240 8104 	bls.w	8000f08 <__udivmoddi4+0x290>
 8000d00:	3802      	subs	r0, #2
 8000d02:	442c      	add	r4, r5
 8000d04:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000d08:	eba4 040c 	sub.w	r4, r4, ip
 8000d0c:	2700      	movs	r7, #0
 8000d0e:	b11e      	cbz	r6, 8000d18 <__udivmoddi4+0xa0>
 8000d10:	40d4      	lsrs	r4, r2
 8000d12:	2300      	movs	r3, #0
 8000d14:	e9c6 4300 	strd	r4, r3, [r6]
 8000d18:	4639      	mov	r1, r7
 8000d1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d1e:	428b      	cmp	r3, r1
 8000d20:	d909      	bls.n	8000d36 <__udivmoddi4+0xbe>
 8000d22:	2e00      	cmp	r6, #0
 8000d24:	f000 80eb 	beq.w	8000efe <__udivmoddi4+0x286>
 8000d28:	2700      	movs	r7, #0
 8000d2a:	e9c6 0100 	strd	r0, r1, [r6]
 8000d2e:	4638      	mov	r0, r7
 8000d30:	4639      	mov	r1, r7
 8000d32:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d36:	fab3 f783 	clz	r7, r3
 8000d3a:	2f00      	cmp	r7, #0
 8000d3c:	d147      	bne.n	8000dce <__udivmoddi4+0x156>
 8000d3e:	428b      	cmp	r3, r1
 8000d40:	d302      	bcc.n	8000d48 <__udivmoddi4+0xd0>
 8000d42:	4282      	cmp	r2, r0
 8000d44:	f200 80fa 	bhi.w	8000f3c <__udivmoddi4+0x2c4>
 8000d48:	1a84      	subs	r4, r0, r2
 8000d4a:	eb61 0303 	sbc.w	r3, r1, r3
 8000d4e:	2001      	movs	r0, #1
 8000d50:	4698      	mov	r8, r3
 8000d52:	2e00      	cmp	r6, #0
 8000d54:	d0e0      	beq.n	8000d18 <__udivmoddi4+0xa0>
 8000d56:	e9c6 4800 	strd	r4, r8, [r6]
 8000d5a:	e7dd      	b.n	8000d18 <__udivmoddi4+0xa0>
 8000d5c:	b902      	cbnz	r2, 8000d60 <__udivmoddi4+0xe8>
 8000d5e:	deff      	udf	#255	; 0xff
 8000d60:	fab2 f282 	clz	r2, r2
 8000d64:	2a00      	cmp	r2, #0
 8000d66:	f040 808f 	bne.w	8000e88 <__udivmoddi4+0x210>
 8000d6a:	1b49      	subs	r1, r1, r5
 8000d6c:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000d70:	fa1f f885 	uxth.w	r8, r5
 8000d74:	2701      	movs	r7, #1
 8000d76:	fbb1 fcfe 	udiv	ip, r1, lr
 8000d7a:	0c23      	lsrs	r3, r4, #16
 8000d7c:	fb0e 111c 	mls	r1, lr, ip, r1
 8000d80:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d84:	fb08 f10c 	mul.w	r1, r8, ip
 8000d88:	4299      	cmp	r1, r3
 8000d8a:	d907      	bls.n	8000d9c <__udivmoddi4+0x124>
 8000d8c:	18eb      	adds	r3, r5, r3
 8000d8e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000d92:	d202      	bcs.n	8000d9a <__udivmoddi4+0x122>
 8000d94:	4299      	cmp	r1, r3
 8000d96:	f200 80cd 	bhi.w	8000f34 <__udivmoddi4+0x2bc>
 8000d9a:	4684      	mov	ip, r0
 8000d9c:	1a59      	subs	r1, r3, r1
 8000d9e:	b2a3      	uxth	r3, r4
 8000da0:	fbb1 f0fe 	udiv	r0, r1, lr
 8000da4:	fb0e 1410 	mls	r4, lr, r0, r1
 8000da8:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000dac:	fb08 f800 	mul.w	r8, r8, r0
 8000db0:	45a0      	cmp	r8, r4
 8000db2:	d907      	bls.n	8000dc4 <__udivmoddi4+0x14c>
 8000db4:	192c      	adds	r4, r5, r4
 8000db6:	f100 33ff 	add.w	r3, r0, #4294967295
 8000dba:	d202      	bcs.n	8000dc2 <__udivmoddi4+0x14a>
 8000dbc:	45a0      	cmp	r8, r4
 8000dbe:	f200 80b6 	bhi.w	8000f2e <__udivmoddi4+0x2b6>
 8000dc2:	4618      	mov	r0, r3
 8000dc4:	eba4 0408 	sub.w	r4, r4, r8
 8000dc8:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000dcc:	e79f      	b.n	8000d0e <__udivmoddi4+0x96>
 8000dce:	f1c7 0c20 	rsb	ip, r7, #32
 8000dd2:	40bb      	lsls	r3, r7
 8000dd4:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000dd8:	ea4e 0e03 	orr.w	lr, lr, r3
 8000ddc:	fa01 f407 	lsl.w	r4, r1, r7
 8000de0:	fa20 f50c 	lsr.w	r5, r0, ip
 8000de4:	fa21 f30c 	lsr.w	r3, r1, ip
 8000de8:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000dec:	4325      	orrs	r5, r4
 8000dee:	fbb3 f9f8 	udiv	r9, r3, r8
 8000df2:	0c2c      	lsrs	r4, r5, #16
 8000df4:	fb08 3319 	mls	r3, r8, r9, r3
 8000df8:	fa1f fa8e 	uxth.w	sl, lr
 8000dfc:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000e00:	fb09 f40a 	mul.w	r4, r9, sl
 8000e04:	429c      	cmp	r4, r3
 8000e06:	fa02 f207 	lsl.w	r2, r2, r7
 8000e0a:	fa00 f107 	lsl.w	r1, r0, r7
 8000e0e:	d90b      	bls.n	8000e28 <__udivmoddi4+0x1b0>
 8000e10:	eb1e 0303 	adds.w	r3, lr, r3
 8000e14:	f109 30ff 	add.w	r0, r9, #4294967295
 8000e18:	f080 8087 	bcs.w	8000f2a <__udivmoddi4+0x2b2>
 8000e1c:	429c      	cmp	r4, r3
 8000e1e:	f240 8084 	bls.w	8000f2a <__udivmoddi4+0x2b2>
 8000e22:	f1a9 0902 	sub.w	r9, r9, #2
 8000e26:	4473      	add	r3, lr
 8000e28:	1b1b      	subs	r3, r3, r4
 8000e2a:	b2ad      	uxth	r5, r5
 8000e2c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e30:	fb08 3310 	mls	r3, r8, r0, r3
 8000e34:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000e38:	fb00 fa0a 	mul.w	sl, r0, sl
 8000e3c:	45a2      	cmp	sl, r4
 8000e3e:	d908      	bls.n	8000e52 <__udivmoddi4+0x1da>
 8000e40:	eb1e 0404 	adds.w	r4, lr, r4
 8000e44:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e48:	d26b      	bcs.n	8000f22 <__udivmoddi4+0x2aa>
 8000e4a:	45a2      	cmp	sl, r4
 8000e4c:	d969      	bls.n	8000f22 <__udivmoddi4+0x2aa>
 8000e4e:	3802      	subs	r0, #2
 8000e50:	4474      	add	r4, lr
 8000e52:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000e56:	fba0 8902 	umull	r8, r9, r0, r2
 8000e5a:	eba4 040a 	sub.w	r4, r4, sl
 8000e5e:	454c      	cmp	r4, r9
 8000e60:	46c2      	mov	sl, r8
 8000e62:	464b      	mov	r3, r9
 8000e64:	d354      	bcc.n	8000f10 <__udivmoddi4+0x298>
 8000e66:	d051      	beq.n	8000f0c <__udivmoddi4+0x294>
 8000e68:	2e00      	cmp	r6, #0
 8000e6a:	d069      	beq.n	8000f40 <__udivmoddi4+0x2c8>
 8000e6c:	ebb1 050a 	subs.w	r5, r1, sl
 8000e70:	eb64 0403 	sbc.w	r4, r4, r3
 8000e74:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000e78:	40fd      	lsrs	r5, r7
 8000e7a:	40fc      	lsrs	r4, r7
 8000e7c:	ea4c 0505 	orr.w	r5, ip, r5
 8000e80:	e9c6 5400 	strd	r5, r4, [r6]
 8000e84:	2700      	movs	r7, #0
 8000e86:	e747      	b.n	8000d18 <__udivmoddi4+0xa0>
 8000e88:	f1c2 0320 	rsb	r3, r2, #32
 8000e8c:	fa20 f703 	lsr.w	r7, r0, r3
 8000e90:	4095      	lsls	r5, r2
 8000e92:	fa01 f002 	lsl.w	r0, r1, r2
 8000e96:	fa21 f303 	lsr.w	r3, r1, r3
 8000e9a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000e9e:	4338      	orrs	r0, r7
 8000ea0:	0c01      	lsrs	r1, r0, #16
 8000ea2:	fbb3 f7fe 	udiv	r7, r3, lr
 8000ea6:	fa1f f885 	uxth.w	r8, r5
 8000eaa:	fb0e 3317 	mls	r3, lr, r7, r3
 8000eae:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000eb2:	fb07 f308 	mul.w	r3, r7, r8
 8000eb6:	428b      	cmp	r3, r1
 8000eb8:	fa04 f402 	lsl.w	r4, r4, r2
 8000ebc:	d907      	bls.n	8000ece <__udivmoddi4+0x256>
 8000ebe:	1869      	adds	r1, r5, r1
 8000ec0:	f107 3cff 	add.w	ip, r7, #4294967295
 8000ec4:	d22f      	bcs.n	8000f26 <__udivmoddi4+0x2ae>
 8000ec6:	428b      	cmp	r3, r1
 8000ec8:	d92d      	bls.n	8000f26 <__udivmoddi4+0x2ae>
 8000eca:	3f02      	subs	r7, #2
 8000ecc:	4429      	add	r1, r5
 8000ece:	1acb      	subs	r3, r1, r3
 8000ed0:	b281      	uxth	r1, r0
 8000ed2:	fbb3 f0fe 	udiv	r0, r3, lr
 8000ed6:	fb0e 3310 	mls	r3, lr, r0, r3
 8000eda:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ede:	fb00 f308 	mul.w	r3, r0, r8
 8000ee2:	428b      	cmp	r3, r1
 8000ee4:	d907      	bls.n	8000ef6 <__udivmoddi4+0x27e>
 8000ee6:	1869      	adds	r1, r5, r1
 8000ee8:	f100 3cff 	add.w	ip, r0, #4294967295
 8000eec:	d217      	bcs.n	8000f1e <__udivmoddi4+0x2a6>
 8000eee:	428b      	cmp	r3, r1
 8000ef0:	d915      	bls.n	8000f1e <__udivmoddi4+0x2a6>
 8000ef2:	3802      	subs	r0, #2
 8000ef4:	4429      	add	r1, r5
 8000ef6:	1ac9      	subs	r1, r1, r3
 8000ef8:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000efc:	e73b      	b.n	8000d76 <__udivmoddi4+0xfe>
 8000efe:	4637      	mov	r7, r6
 8000f00:	4630      	mov	r0, r6
 8000f02:	e709      	b.n	8000d18 <__udivmoddi4+0xa0>
 8000f04:	4607      	mov	r7, r0
 8000f06:	e6e7      	b.n	8000cd8 <__udivmoddi4+0x60>
 8000f08:	4618      	mov	r0, r3
 8000f0a:	e6fb      	b.n	8000d04 <__udivmoddi4+0x8c>
 8000f0c:	4541      	cmp	r1, r8
 8000f0e:	d2ab      	bcs.n	8000e68 <__udivmoddi4+0x1f0>
 8000f10:	ebb8 0a02 	subs.w	sl, r8, r2
 8000f14:	eb69 020e 	sbc.w	r2, r9, lr
 8000f18:	3801      	subs	r0, #1
 8000f1a:	4613      	mov	r3, r2
 8000f1c:	e7a4      	b.n	8000e68 <__udivmoddi4+0x1f0>
 8000f1e:	4660      	mov	r0, ip
 8000f20:	e7e9      	b.n	8000ef6 <__udivmoddi4+0x27e>
 8000f22:	4618      	mov	r0, r3
 8000f24:	e795      	b.n	8000e52 <__udivmoddi4+0x1da>
 8000f26:	4667      	mov	r7, ip
 8000f28:	e7d1      	b.n	8000ece <__udivmoddi4+0x256>
 8000f2a:	4681      	mov	r9, r0
 8000f2c:	e77c      	b.n	8000e28 <__udivmoddi4+0x1b0>
 8000f2e:	3802      	subs	r0, #2
 8000f30:	442c      	add	r4, r5
 8000f32:	e747      	b.n	8000dc4 <__udivmoddi4+0x14c>
 8000f34:	f1ac 0c02 	sub.w	ip, ip, #2
 8000f38:	442b      	add	r3, r5
 8000f3a:	e72f      	b.n	8000d9c <__udivmoddi4+0x124>
 8000f3c:	4638      	mov	r0, r7
 8000f3e:	e708      	b.n	8000d52 <__udivmoddi4+0xda>
 8000f40:	4637      	mov	r7, r6
 8000f42:	e6e9      	b.n	8000d18 <__udivmoddi4+0xa0>

08000f44 <__aeabi_idiv0>:
 8000f44:	4770      	bx	lr
 8000f46:	bf00      	nop

08000f48 <PID_update>:
 */

#include <stdio.h>
#include "PID.h"

float PID_update (float target, float current, PID *pid){
 8000f48:	b480      	push	{r7}
 8000f4a:	b089      	sub	sp, #36	; 0x24
 8000f4c:	af00      	add	r7, sp, #0
 8000f4e:	ed87 0a03 	vstr	s0, [r7, #12]
 8000f52:	edc7 0a02 	vstr	s1, [r7, #8]
 8000f56:	6078      	str	r0, [r7, #4]

	float error = target - current; //compute error here
 8000f58:	ed97 7a03 	vldr	s14, [r7, #12]
 8000f5c:	edd7 7a02 	vldr	s15, [r7, #8]
 8000f60:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000f64:	edc7 7a05 	vstr	s15, [r7, #20]

	PID_STATE * pid_state = &pid->state;
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	3314      	adds	r3, #20
 8000f6c:	613b      	str	r3, [r7, #16]

	// compute integral
	    float I = pid_state->I + error*pid->dt;
 8000f6e:	693b      	ldr	r3, [r7, #16]
 8000f70:	ed93 7a01 	vldr	s14, [r3, #4]
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	edd3 6a02 	vldr	s13, [r3, #8]
 8000f7a:	edd7 7a05 	vldr	s15, [r7, #20]
 8000f7e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000f82:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000f86:	edc7 7a07 	vstr	s15, [r7, #28]

	    // reset integral when stopped
	    if(target==0.0f && current==0.0f) {
 8000f8a:	edd7 7a03 	vldr	s15, [r7, #12]
 8000f8e:	eef5 7a40 	vcmp.f32	s15, #0.0
 8000f92:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000f96:	d109      	bne.n	8000fac <PID_update+0x64>
 8000f98:	edd7 7a02 	vldr	s15, [r7, #8]
 8000f9c:	eef5 7a40 	vcmp.f32	s15, #0.0
 8000fa0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000fa4:	d102      	bne.n	8000fac <PID_update+0x64>
	    	I=0.0f;
 8000fa6:	f04f 0300 	mov.w	r3, #0
 8000faa:	61fb      	str	r3, [r7, #28]
	    }

	    // compute output as Kp * error + Ki * dT * Integral(error)
	    	float duty = pid->kp * error + pid->ki * I;
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	ed93 7a00 	vldr	s14, [r3]
 8000fb2:	edd7 7a05 	vldr	s15, [r7, #20]
 8000fb6:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	edd3 6a01 	vldr	s13, [r3, #4]
 8000fc0:	edd7 7a07 	vldr	s15, [r7, #28]
 8000fc4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000fc8:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000fcc:	edc7 7a06 	vstr	s15, [r7, #24]

	    	if(pid->openLoop) { // if in open loop bypass code and just pass input to output
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	7b1b      	ldrb	r3, [r3, #12]
 8000fd4:	2b00      	cmp	r3, #0
 8000fd6:	d001      	beq.n	8000fdc <PID_update+0x94>
	    			duty= target;
 8000fd8:	68fb      	ldr	r3, [r7, #12]
 8000fda:	61bb      	str	r3, [r7, #24]
	    		}

	    	// clamp output to +-1
	    	if (duty > 1.0f) {
 8000fdc:	edd7 7a06 	vldr	s15, [r7, #24]
 8000fe0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8000fe4:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000fe8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000fec:	dd02      	ble.n	8000ff4 <PID_update+0xac>
	    		duty = 1.0f;
 8000fee:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8000ff2:	61bb      	str	r3, [r7, #24]
	    	}

	    	if (duty < -1.0f) {
 8000ff4:	edd7 7a06 	vldr	s15, [r7, #24]
 8000ff8:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 8000ffc:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001000:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001004:	d501      	bpl.n	800100a <PID_update+0xc2>
	    		duty = -1.0f;
 8001006:	4b0d      	ldr	r3, [pc, #52]	; (800103c <PID_update+0xf4>)
 8001008:	61bb      	str	r3, [r7, #24]

	    		// Short form message for logging and PID tuning in matlab/octave
	    		//printf("%c,%d,%d,%d,%d\n",pid_state->tag[0],(int)(target*1000),(int)(current*1000),(int)(duty*1000),(int)(I*1000));

	    		// update state
	    		pid_state->error = error;
 800100a:	693b      	ldr	r3, [r7, #16]
 800100c:	697a      	ldr	r2, [r7, #20]
 800100e:	601a      	str	r2, [r3, #0]
	    		pid_state->I = I;
 8001010:	693b      	ldr	r3, [r7, #16]
 8001012:	69fa      	ldr	r2, [r7, #28]
 8001014:	605a      	str	r2, [r3, #4]

	    		pid_state->ref=target;
 8001016:	693b      	ldr	r3, [r7, #16]
 8001018:	68fa      	ldr	r2, [r7, #12]
 800101a:	609a      	str	r2, [r3, #8]
	    		pid_state->fb=current;
 800101c:	693b      	ldr	r3, [r7, #16]
 800101e:	68ba      	ldr	r2, [r7, #8]
 8001020:	60da      	str	r2, [r3, #12]
	    		pid_state->u=duty;
 8001022:	693b      	ldr	r3, [r7, #16]
 8001024:	69ba      	ldr	r2, [r7, #24]
 8001026:	611a      	str	r2, [r3, #16]

	    		// return desired output
	    		return duty;
 8001028:	69bb      	ldr	r3, [r7, #24]
 800102a:	ee07 3a90 	vmov	s15, r3

}
 800102e:	eeb0 0a67 	vmov.f32	s0, s15
 8001032:	3724      	adds	r7, #36	; 0x24
 8001034:	46bd      	mov	sp, r7
 8001036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800103a:	4770      	bx	lr
 800103c:	bf800000 	.word	0xbf800000

08001040 <appMain>:
// Hardware Revision bits
uint8_t RevBit[3];


// main application loop
void appMain(void){
 8001040:	b580      	push	{r7, lr}
 8001042:	b08a      	sub	sp, #40	; 0x28
 8001044:	af02      	add	r7, sp, #8


	/* Check Hardware Revision Bits*/
	RevBit[0] =	HAL_GPIO_ReadPin(REV_BIT0_GPIO_Port, REV_BIT0_Pin);
 8001046:	2102      	movs	r1, #2
 8001048:	4898      	ldr	r0, [pc, #608]	; (80012ac <appMain+0x26c>)
 800104a:	f003 fdb3 	bl	8004bb4 <HAL_GPIO_ReadPin>
 800104e:	4603      	mov	r3, r0
 8001050:	461a      	mov	r2, r3
 8001052:	4b97      	ldr	r3, [pc, #604]	; (80012b0 <appMain+0x270>)
 8001054:	701a      	strb	r2, [r3, #0]
	RevBit[1] =	HAL_GPIO_ReadPin(REV_BIT1_GPIO_Port, REV_BIT1_Pin);
 8001056:	2104      	movs	r1, #4
 8001058:	4894      	ldr	r0, [pc, #592]	; (80012ac <appMain+0x26c>)
 800105a:	f003 fdab 	bl	8004bb4 <HAL_GPIO_ReadPin>
 800105e:	4603      	mov	r3, r0
 8001060:	461a      	mov	r2, r3
 8001062:	4b93      	ldr	r3, [pc, #588]	; (80012b0 <appMain+0x270>)
 8001064:	705a      	strb	r2, [r3, #1]
	RevBit[2] =	HAL_GPIO_ReadPin(REV_BIT2_GPIO_Port, REV_BIT2_Pin);
 8001066:	2108      	movs	r1, #8
 8001068:	4890      	ldr	r0, [pc, #576]	; (80012ac <appMain+0x26c>)
 800106a:	f003 fda3 	bl	8004bb4 <HAL_GPIO_ReadPin>
 800106e:	4603      	mov	r3, r0
 8001070:	461a      	mov	r2, r3
 8001072:	4b8f      	ldr	r3, [pc, #572]	; (80012b0 <appMain+0x270>)
 8001074:	709a      	strb	r2, [r3, #2]

	//Start the 1uSec timer for sonar
	//HAL_TIM_Base_Start(&htim9);

	//hal pwm start
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_3);  //Start PWM
 8001076:	2108      	movs	r1, #8
 8001078:	488e      	ldr	r0, [pc, #568]	; (80012b4 <appMain+0x274>)
 800107a:	f005 f8ef 	bl	800625c <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1);  //Start PWM
 800107e:	2100      	movs	r1, #0
 8001080:	488d      	ldr	r0, [pc, #564]	; (80012b8 <appMain+0x278>)
 8001082:	f005 f8eb 	bl	800625c <HAL_TIM_PWM_Start>

	//hal encoder start
	HAL_TIM_Encoder_Start(&htim3, TIM_CHANNEL_ALL);
 8001086:	213c      	movs	r1, #60	; 0x3c
 8001088:	488c      	ldr	r0, [pc, #560]	; (80012bc <appMain+0x27c>)
 800108a:	f005 fac5 	bl	8006618 <HAL_TIM_Encoder_Start>
	HAL_TIM_Encoder_Start(&htim5, TIM_CHANNEL_ALL);
 800108e:	213c      	movs	r1, #60	; 0x3c
 8001090:	488b      	ldr	r0, [pc, #556]	; (80012c0 <appMain+0x280>)
 8001092:	f005 fac1 	bl	8006618 <HAL_TIM_Encoder_Start>

	uint32_t ledTimer=LED_BLINK_RATE;
 8001096:	2332      	movs	r3, #50	; 0x32
 8001098:	61fb      	str	r3, [r7, #28]
	uint32_t PIDTimer = PID_RATE;
 800109a:	2302      	movs	r3, #2
 800109c:	61bb      	str	r3, [r7, #24]

	printf("Power up initiated...\r\n");
 800109e:	4889      	ldr	r0, [pc, #548]	; (80012c4 <appMain+0x284>)
 80010a0:	f008 fa1c 	bl	80094dc <puts>
	printf("All systems nominal..\r\n");
 80010a4:	4888      	ldr	r0, [pc, #544]	; (80012c8 <appMain+0x288>)
 80010a6:	f008 fa19 	bl	80094dc <puts>
	printf("Hardware Revision: %d%d%d\r\n",RevBit[2],RevBit[2],RevBit[2]);
 80010aa:	4b81      	ldr	r3, [pc, #516]	; (80012b0 <appMain+0x270>)
 80010ac:	789b      	ldrb	r3, [r3, #2]
 80010ae:	4619      	mov	r1, r3
 80010b0:	4b7f      	ldr	r3, [pc, #508]	; (80012b0 <appMain+0x270>)
 80010b2:	789b      	ldrb	r3, [r3, #2]
 80010b4:	461a      	mov	r2, r3
 80010b6:	4b7e      	ldr	r3, [pc, #504]	; (80012b0 <appMain+0x270>)
 80010b8:	789b      	ldrb	r3, [r3, #2]
 80010ba:	4884      	ldr	r0, [pc, #528]	; (80012cc <appMain+0x28c>)
 80010bc:	f008 f986 	bl	80093cc <iprintf>

	//Initialize OLED
	SSD1306_Init();
 80010c0:	f001 f894 	bl	80021ec <SSD1306_Init>
	SSD1306_Clear();
 80010c4:	f001 fab7 	bl	8002636 <SSD1306_Clear>
	SSD1306_DrawBitmap(0, 0, ologic, 128, 64, 1);
 80010c8:	2301      	movs	r3, #1
 80010ca:	9301      	str	r3, [sp, #4]
 80010cc:	2340      	movs	r3, #64	; 0x40
 80010ce:	9300      	str	r3, [sp, #0]
 80010d0:	2380      	movs	r3, #128	; 0x80
 80010d2:	4a7f      	ldr	r2, [pc, #508]	; (80012d0 <appMain+0x290>)
 80010d4:	2100      	movs	r1, #0
 80010d6:	2000      	movs	r0, #0
 80010d8:	f001 f820 	bl	800211c <SSD1306_DrawBitmap>
	SSD1306_UpdateScreen();
 80010dc:	f001 f94a 	bl	8002374 <SSD1306_UpdateScreen>
	HAL_Delay(2000);
 80010e0:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80010e4:	f003 f8ae 	bl	8004244 <HAL_Delay>
	SSD1306_Clear();
 80010e8:	f001 faa5 	bl	8002636 <SSD1306_Clear>
	//SSD1306_GotoXY(40, 20);
	//SSD1306_Puts("OWO", &Font_16x26, 1);
	//SSD1306_UpdateScreen();
	//HAL_Delay(2000);
	SSD1306_Clear();
 80010ec:	f001 faa3 	bl	8002636 <SSD1306_Clear>
	SSD1306_GotoXY(30, 0);
 80010f0:	2100      	movs	r1, #0
 80010f2:	201e      	movs	r0, #30
 80010f4:	f001 f9e4 	bl	80024c0 <SSD1306_GotoXY>
	SSD1306_Puts("STM32-ROMI", &Font_7x10, 1);
 80010f8:	2201      	movs	r2, #1
 80010fa:	4976      	ldr	r1, [pc, #472]	; (80012d4 <appMain+0x294>)
 80010fc:	4876      	ldr	r0, [pc, #472]	; (80012d8 <appMain+0x298>)
 80010fe:	f001 fa75 	bl	80025ec <SSD1306_Puts>
	SSD1306_GotoXY(0, 30);
 8001102:	211e      	movs	r1, #30
 8001104:	2000      	movs	r0, #0
 8001106:	f001 f9db 	bl	80024c0 <SSD1306_GotoXY>
	SSD1306_Puts("E", &Font_7x10, 1);
 800110a:	2201      	movs	r2, #1
 800110c:	4971      	ldr	r1, [pc, #452]	; (80012d4 <appMain+0x294>)
 800110e:	4873      	ldr	r0, [pc, #460]	; (80012dc <appMain+0x29c>)
 8001110:	f001 fa6c 	bl	80025ec <SSD1306_Puts>
	SSD1306_GotoXY(0, 40);
 8001114:	2128      	movs	r1, #40	; 0x28
 8001116:	2000      	movs	r0, #0
 8001118:	f001 f9d2 	bl	80024c0 <SSD1306_GotoXY>
	SSD1306_Puts("D", &Font_7x10, 1);
 800111c:	2201      	movs	r2, #1
 800111e:	496d      	ldr	r1, [pc, #436]	; (80012d4 <appMain+0x294>)
 8001120:	486f      	ldr	r0, [pc, #444]	; (80012e0 <appMain+0x2a0>)
 8001122:	f001 fa63 	bl	80025ec <SSD1306_Puts>
	SSD1306_GotoXY(0, 50);
 8001126:	2132      	movs	r1, #50	; 0x32
 8001128:	2000      	movs	r0, #0
 800112a:	f001 f9c9 	bl	80024c0 <SSD1306_GotoXY>
	SSD1306_Puts("S", &Font_7x10, 1);
 800112e:	2201      	movs	r2, #1
 8001130:	4968      	ldr	r1, [pc, #416]	; (80012d4 <appMain+0x294>)
 8001132:	486c      	ldr	r0, [pc, #432]	; (80012e4 <appMain+0x2a4>)
 8001134:	f001 fa5a 	bl	80025ec <SSD1306_Puts>
	SSD1306_UpdateScreen();
 8001138:	f001 f91c 	bl	8002374 <SSD1306_UpdateScreen>


	uint32_t tick = HAL_GetTick();
 800113c:	f003 f876 	bl	800422c <HAL_GetTick>
 8001140:	6178      	str	r0, [r7, #20]

	//Set Sleep bits to 1 for enable
	HAL_GPIO_WritePin(ROMI_SLPL_GPIO_Port, ROMI_SLPL_Pin, SET);
 8001142:	2201      	movs	r2, #1
 8001144:	2140      	movs	r1, #64	; 0x40
 8001146:	4859      	ldr	r0, [pc, #356]	; (80012ac <appMain+0x26c>)
 8001148:	f003 fd4c 	bl	8004be4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(ROMI_SLPR_GPIO_Port, ROMI_SLPR_Pin, SET);
 800114c:	2201      	movs	r2, #1
 800114e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001152:	4865      	ldr	r0, [pc, #404]	; (80012e8 <appMain+0x2a8>)
 8001154:	f003 fd46 	bl	8004be4 <HAL_GPIO_WritePin>

	//Edge Sensors
	enableEdgeSensors(BUMP_BIT_LEFT | BUMP_BIT_RIGHT);
 8001158:	2003      	movs	r0, #3
 800115a:	f000 f9af 	bl	80014bc <enableEdgeSensors>

	//Main program to loop forever
	while(1){
		uint32_t tock = HAL_GetTick();
 800115e:	f003 f865 	bl	800422c <HAL_GetTick>
 8001162:	60f8      	str	r0, [r7, #12]

		bool pid_update=false;     // flag to say if we should update the PID this time through the loop
 8001164:	2300      	movs	r3, #0
 8001166:	74fb      	strb	r3, [r7, #19]
		bool send_telemetry=false; // flag to say if we should send updated telemetry data to host this time through the loop
 8001168:	2300      	movs	r3, #0
 800116a:	72fb      	strb	r3, [r7, #11]


		if(tock-tick>TICK_RATE){ // 10ms timer (this 'if' is true once every 10ms)
 800116c:	68fa      	ldr	r2, [r7, #12]
 800116e:	697b      	ldr	r3, [r7, #20]
 8001170:	1ad3      	subs	r3, r2, r3
 8001172:	2b0a      	cmp	r3, #10
 8001174:	d921      	bls.n	80011ba <appMain+0x17a>

			ledTimer--; // blink LED at LED_BLINK_RATE
 8001176:	69fb      	ldr	r3, [r7, #28]
 8001178:	3b01      	subs	r3, #1
 800117a:	61fb      	str	r3, [r7, #28]
			if(ledTimer==0){
 800117c:	69fb      	ldr	r3, [r7, #28]
 800117e:	2b00      	cmp	r3, #0
 8001180:	d105      	bne.n	800118e <appMain+0x14e>
				ledTimer = LED_BLINK_RATE; //0.5 Sec blink
 8001182:	2332      	movs	r3, #50	; 0x32
 8001184:	61fb      	str	r3, [r7, #28]
				HAL_GPIO_TogglePin(Blinky_GPIO_Port, Blinky_Pin);
 8001186:	2120      	movs	r1, #32
 8001188:	4858      	ldr	r0, [pc, #352]	; (80012ec <appMain+0x2ac>)
 800118a:	f003 fd44 	bl	8004c16 <HAL_GPIO_TogglePin>
			}

			PIDTimer --; // see if we should run the PID update this time through the loop
 800118e:	69bb      	ldr	r3, [r7, #24]
 8001190:	3b01      	subs	r3, #1
 8001192:	61bb      	str	r3, [r7, #24]
			if(PIDTimer==0) {
 8001194:	69bb      	ldr	r3, [r7, #24]
 8001196:	2b00      	cmp	r3, #0
 8001198:	d10b      	bne.n	80011b2 <appMain+0x172>
				PIDTimer=PID_RATE;
 800119a:	2302      	movs	r3, #2
 800119c:	61bb      	str	r3, [r7, #24]
				pid_update=true; // flag to update PID this time
 800119e:	2301      	movs	r3, #1
 80011a0:	74fb      	strb	r3, [r7, #19]
                send_telemetry=true; // also send new telemetry after we update the PID
 80011a2:	2301      	movs	r3, #1
 80011a4:	72fb      	strb	r3, [r7, #11]
				HAL_GPIO_WritePin(ROMI_SLPL_GPIO_Port, ROMI_SLPL_Pin, SET);
				HAL_GPIO_WritePin(ROMI_SLPR_GPIO_Port, ROMI_SLPR_Pin, SET);
				*/

				//Check the sonars
        		checkSonarL(&SONARS[SONAR1]);
 80011a6:	4852      	ldr	r0, [pc, #328]	; (80012f0 <appMain+0x2b0>)
 80011a8:	f000 fe3e 	bl	8001e28 <checkSonarL>
        		checkSonarR(&SONARS[SONAR2]);
 80011ac:	4851      	ldr	r0, [pc, #324]	; (80012f4 <appMain+0x2b4>)
 80011ae:	f000 fec7 	bl	8001f40 <checkSonarR>

			}
			tick = tock;
 80011b2:	68fb      	ldr	r3, [r7, #12]
 80011b4:	617b      	str	r3, [r7, #20]

			//check Edge Sensors
			updateEdgeSensors();  //update the state of the edge sensors
 80011b6:	f000 f9e5 	bl	8001584 <updateEdgeSensors>

		}

		// update the motor controller state (handles driving to distance/turns etc)
		// will also update the PID controller if the flag is set
		MotorEvent event = updateMotors(pid_update,DT); // returns events flags if state changed or edge sensor triggered etc
 80011ba:	7cfb      	ldrb	r3, [r7, #19]
 80011bc:	ed9f 0a4e 	vldr	s0, [pc, #312]	; 80012f8 <appMain+0x2b8>
 80011c0:	4618      	mov	r0, r3
 80011c2:	f000 fba5 	bl	8001910 <updateMotors>
 80011c6:	4603      	mov	r3, r0
 80011c8:	74bb      	strb	r3, [r7, #18]

		if(pid_update) {
 80011ca:	7cfb      	ldrb	r3, [r7, #19]
 80011cc:	2b00      	cmp	r3, #0
 80011ce:	d007      	beq.n	80011e0 <appMain+0x1a0>
					setPIDState(&pid_left.state,&pid_right.state);
 80011d0:	494a      	ldr	r1, [pc, #296]	; (80012fc <appMain+0x2bc>)
 80011d2:	484b      	ldr	r0, [pc, #300]	; (8001300 <appMain+0x2c0>)
 80011d4:	f001 face 	bl	8002774 <setPIDState>
					setEncoderState(&enc_left.state,&enc_right.state);
 80011d8:	494a      	ldr	r1, [pc, #296]	; (8001304 <appMain+0x2c4>)
 80011da:	484b      	ldr	r0, [pc, #300]	; (8001308 <appMain+0x2c8>)
 80011dc:	f001 faae 	bl	800273c <setEncoderState>
		}


		/// use this to adjust the pwm

		int c = getchar();
 80011e0:	f007 fc00 	bl	80089e4 <getchar>
 80011e4:	6078      	str	r0, [r7, #4]
			if(c != EOF){
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80011ec:	d052      	beq.n	8001294 <appMain+0x254>
				putchar(c);
 80011ee:	6878      	ldr	r0, [r7, #4]
 80011f0:	f008 f904 	bl	80093fc <putchar>
				switch (c) {
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	2b61      	cmp	r3, #97	; 0x61
 80011f8:	d01d      	beq.n	8001236 <appMain+0x1f6>
 80011fa:	2b61      	cmp	r3, #97	; 0x61
 80011fc:	dc06      	bgt.n	800120c <appMain+0x1cc>
 80011fe:	2b31      	cmp	r3, #49	; 0x31
 8001200:	d03b      	beq.n	800127a <appMain+0x23a>
 8001202:	2b32      	cmp	r3, #50	; 0x32
 8001204:	d03e      	beq.n	8001284 <appMain+0x244>
 8001206:	2b20      	cmp	r3, #32
 8001208:	d041      	beq.n	800128e <appMain+0x24e>

					case ' ':
						STOP();
						break;
					default:
						break;
 800120a:	e049      	b.n	80012a0 <appMain+0x260>
				switch (c) {
 800120c:	2b73      	cmp	r3, #115	; 0x73
 800120e:	d022      	beq.n	8001256 <appMain+0x216>
 8001210:	2b77      	cmp	r3, #119	; 0x77
 8001212:	d002      	beq.n	800121a <appMain+0x1da>
 8001214:	2b64      	cmp	r3, #100	; 0x64
 8001216:	d007      	beq.n	8001228 <appMain+0x1e8>
						break;
 8001218:	e042      	b.n	80012a0 <appMain+0x260>
						drive(MAX_LIN_VEL/2.0f,0.0f);
 800121a:	eddf 0a3c 	vldr	s1, [pc, #240]	; 800130c <appMain+0x2cc>
 800121e:	eeb4 0a00 	vmov.f32	s0, #64	; 0x3e000000  0.125
 8001222:	f000 fb0b 	bl	800183c <drive>
						break;
 8001226:	e03b      	b.n	80012a0 <appMain+0x260>
						setMotorSpeed(0.5f, 0.8f);
 8001228:	eddf 0a39 	vldr	s1, [pc, #228]	; 8001310 <appMain+0x2d0>
 800122c:	eeb6 0a00 	vmov.f32	s0, #96	; 0x3f000000  0.5
 8001230:	f000 faec 	bl	800180c <setMotorSpeed>
						break;
 8001234:	e034      	b.n	80012a0 <appMain+0x260>
						drive(0.0f,MAX_ANG_VEL/2.0f);
 8001236:	4b37      	ldr	r3, [pc, #220]	; (8001314 <appMain+0x2d4>)
 8001238:	edd3 7a00 	vldr	s15, [r3]
 800123c:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8001240:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8001244:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8001248:	eef0 0a66 	vmov.f32	s1, s13
 800124c:	ed9f 0a2f 	vldr	s0, [pc, #188]	; 800130c <appMain+0x2cc>
 8001250:	f000 faf4 	bl	800183c <drive>
						break;
 8001254:	e024      	b.n	80012a0 <appMain+0x260>
						drive(0.0f,-MAX_ANG_VEL/4.0f);
 8001256:	4b2f      	ldr	r3, [pc, #188]	; (8001314 <appMain+0x2d4>)
 8001258:	edd3 7a00 	vldr	s15, [r3]
 800125c:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8001260:	eef1 7a67 	vneg.f32	s15, s15
 8001264:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 8001268:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800126c:	eef0 0a66 	vmov.f32	s1, s13
 8001270:	ed9f 0a26 	vldr	s0, [pc, #152]	; 800130c <appMain+0x2cc>
 8001274:	f000 fae2 	bl	800183c <drive>
						break;
 8001278:	e012      	b.n	80012a0 <appMain+0x260>
						 event |= CE_M1;
 800127a:	7cbb      	ldrb	r3, [r7, #18]
 800127c:	f043 0320 	orr.w	r3, r3, #32
 8001280:	74bb      	strb	r3, [r7, #18]
						break;
 8001282:	e00d      	b.n	80012a0 <appMain+0x260>
						 event |= CE_M2;
 8001284:	7cbb      	ldrb	r3, [r7, #18]
 8001286:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800128a:	74bb      	strb	r3, [r7, #18]
						break;
 800128c:	e008      	b.n	80012a0 <appMain+0x260>
						STOP();
 800128e:	f000 fb15 	bl	80018bc <STOP>
						break;
 8001292:	e005      	b.n	80012a0 <appMain+0x260>
				}

				}else{
				clearerr(stdin); // Reset the EOF Condition
 8001294:	4b20      	ldr	r3, [pc, #128]	; (8001318 <appMain+0x2d8>)
 8001296:	681b      	ldr	r3, [r3, #0]
 8001298:	685b      	ldr	r3, [r3, #4]
 800129a:	4618      	mov	r0, r3
 800129c:	f007 fa90 	bl	80087c0 <clearerr>
				}

			updateControler(event); // update the main state machine (giving it any events that should be handled)
 80012a0:	7cbb      	ldrb	r3, [r7, #18]
 80012a2:	4618      	mov	r0, r3
 80012a4:	f000 f83a 	bl	800131c <updateControler>
	while(1){
 80012a8:	e759      	b.n	800115e <appMain+0x11e>
 80012aa:	bf00      	nop
 80012ac:	40020800 	.word	0x40020800
 80012b0:	20000798 	.word	0x20000798
 80012b4:	20000a98 	.word	0x20000a98
 80012b8:	20000918 	.word	0x20000918
 80012bc:	20000998 	.word	0x20000998
 80012c0:	20000958 	.word	0x20000958
 80012c4:	0800bdc0 	.word	0x0800bdc0
 80012c8:	0800bdd8 	.word	0x0800bdd8
 80012cc:	0800bdf0 	.word	0x0800bdf0
 80012d0:	0800bec0 	.word	0x0800bec0
 80012d4:	200000f0 	.word	0x200000f0
 80012d8:	0800be0c 	.word	0x0800be0c
 80012dc:	0800be18 	.word	0x0800be18
 80012e0:	0800be1c 	.word	0x0800be1c
 80012e4:	0800be20 	.word	0x0800be20
 80012e8:	40020400 	.word	0x40020400
 80012ec:	40020000 	.word	0x40020000
 80012f0:	20000000 	.word	0x20000000
 80012f4:	20000020 	.word	0x20000020
 80012f8:	3ca3d70a 	.word	0x3ca3d70a
 80012fc:	20000074 	.word	0x20000074
 8001300:	2000009c 	.word	0x2000009c
 8001304:	200000c8 	.word	0x200000c8
 8001308:	200000e8 	.word	0x200000e8
 800130c:	00000000 	.word	0x00000000
 8001310:	3f4ccccd 	.word	0x3f4ccccd
 8001314:	0800ca2c 	.word	0x0800ca2c
 8001318:	20000104 	.word	0x20000104

0800131c <updateControler>:

STATE state = ST_IDLE;



void updateControler(MotorEvent event) {
 800131c:	b580      	push	{r7, lr}
 800131e:	b082      	sub	sp, #8
 8001320:	af00      	add	r7, sp, #0
 8001322:	4603      	mov	r3, r0
 8001324:	71fb      	strb	r3, [r7, #7]


	if(event & ME_STOP) {
 8001326:	79fb      	ldrb	r3, [r7, #7]
 8001328:	f003 0301 	and.w	r3, r3, #1
 800132c:	2b00      	cmp	r3, #0
 800132e:	d002      	beq.n	8001336 <updateControler+0x1a>
		state = ST_IDLE;
 8001330:	4b5c      	ldr	r3, [pc, #368]	; (80014a4 <updateControler+0x188>)
 8001332:	2200      	movs	r2, #0
 8001334:	701a      	strb	r2, [r3, #0]
	}

	switch(state) {
 8001336:	4b5b      	ldr	r3, [pc, #364]	; (80014a4 <updateControler+0x188>)
 8001338:	781b      	ldrb	r3, [r3, #0]
 800133a:	2b07      	cmp	r3, #7
 800133c:	f200 80ac 	bhi.w	8001498 <updateControler+0x17c>
 8001340:	a201      	add	r2, pc, #4	; (adr r2, 8001348 <updateControler+0x2c>)
 8001342:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001346:	bf00      	nop
 8001348:	08001369 	.word	0x08001369
 800134c:	08001395 	.word	0x08001395
 8001350:	080013d7 	.word	0x080013d7
 8001354:	08001409 	.word	0x08001409
 8001358:	0800143f 	.word	0x0800143f
 800135c:	08001499 	.word	0x08001499
 8001360:	08001499 	.word	0x08001499
 8001364:	08001499 	.word	0x08001499

		case ST_IDLE:
			switch(event) {
 8001368:	79fb      	ldrb	r3, [r7, #7]
 800136a:	2b40      	cmp	r3, #64	; 0x40
 800136c:	d00e      	beq.n	800138c <updateControler+0x70>
 800136e:	2b80      	cmp	r3, #128	; 0x80
 8001370:	d00e      	beq.n	8001390 <updateControler+0x74>
 8001372:	2b20      	cmp	r3, #32
 8001374:	d000      	beq.n	8001378 <updateControler+0x5c>

				case CE_M3:
					break;

				default:
					break;
 8001376:	e00c      	b.n	8001392 <updateControler+0x76>
					drive(FWD_SPEED,0.0f);
 8001378:	eddf 0a4b 	vldr	s1, [pc, #300]	; 80014a8 <updateControler+0x18c>
 800137c:	ed9f 0a4b 	vldr	s0, [pc, #300]	; 80014ac <updateControler+0x190>
 8001380:	f000 fa5c 	bl	800183c <drive>
					state= ST_M1_FWD;
 8001384:	4b47      	ldr	r3, [pc, #284]	; (80014a4 <updateControler+0x188>)
 8001386:	2201      	movs	r2, #1
 8001388:	701a      	strb	r2, [r3, #0]
					break;
 800138a:	e002      	b.n	8001392 <updateControler+0x76>
					break;
 800138c:	bf00      	nop
 800138e:	e084      	b.n	800149a <updateControler+0x17e>
					break;
 8001390:	bf00      	nop
			}
			break;
 8001392:	e082      	b.n	800149a <updateControler+0x17e>

		case ST_M1_FWD:
			switch(event) {
 8001394:	79fb      	ldrb	r3, [r7, #7]
 8001396:	2b08      	cmp	r3, #8
 8001398:	d002      	beq.n	80013a0 <updateControler+0x84>
 800139a:	2b10      	cmp	r3, #16
 800139c:	d00d      	beq.n	80013ba <updateControler+0x9e>
					driveTo(BACK_DIST,BACK_SPEED);
					state= ST_M1_BCK_L;
					break;

				default:
					break;
 800139e:	e019      	b.n	80013d4 <updateControler+0xb8>
					disableEdgeSensors(BUMP_BIT_LEFT | BUMP_BIT_RIGHT);
 80013a0:	2003      	movs	r0, #3
 80013a2:	f000 f89d 	bl	80014e0 <disableEdgeSensors>
					driveTo(BACK_DIST,BACK_SPEED);
 80013a6:	eddf 0a41 	vldr	s1, [pc, #260]	; 80014ac <updateControler+0x190>
 80013aa:	ed9f 0a41 	vldr	s0, [pc, #260]	; 80014b0 <updateControler+0x194>
 80013ae:	f000 fc3b 	bl	8001c28 <driveTo>
					state= ST_M1_BCK_R;
 80013b2:	4b3c      	ldr	r3, [pc, #240]	; (80014a4 <updateControler+0x188>)
 80013b4:	2203      	movs	r2, #3
 80013b6:	701a      	strb	r2, [r3, #0]
					break;
 80013b8:	e00c      	b.n	80013d4 <updateControler+0xb8>
					disableEdgeSensors(BUMP_BIT_LEFT | BUMP_BIT_RIGHT);
 80013ba:	2003      	movs	r0, #3
 80013bc:	f000 f890 	bl	80014e0 <disableEdgeSensors>
					driveTo(BACK_DIST,BACK_SPEED);
 80013c0:	eddf 0a3a 	vldr	s1, [pc, #232]	; 80014ac <updateControler+0x190>
 80013c4:	ed9f 0a3a 	vldr	s0, [pc, #232]	; 80014b0 <updateControler+0x194>
 80013c8:	f000 fc2e 	bl	8001c28 <driveTo>
					state= ST_M1_BCK_L;
 80013cc:	4b35      	ldr	r3, [pc, #212]	; (80014a4 <updateControler+0x188>)
 80013ce:	2202      	movs	r2, #2
 80013d0:	701a      	strb	r2, [r3, #0]
					break;
 80013d2:	bf00      	nop
			}
			break;
 80013d4:	e061      	b.n	800149a <updateControler+0x17e>

		case ST_M1_BCK_L:
			switch(event) {
 80013d6:	79fb      	ldrb	r3, [r7, #7]
 80013d8:	2b04      	cmp	r3, #4
 80013da:	d000      	beq.n	80013de <updateControler+0xc2>
					turnTo(TURN_ANG,TURN_SPEED);
					state= ST_M1_TURN;
					break;

				default:
					break;
 80013dc:	e013      	b.n	8001406 <updateControler+0xea>
					enableEdgeSensors(BUMP_BIT_LEFT | BUMP_BIT_RIGHT);
 80013de:	2003      	movs	r0, #3
 80013e0:	f000 f86c 	bl	80014bc <enableEdgeSensors>
					turnTo(TURN_ANG,TURN_SPEED);
 80013e4:	4b33      	ldr	r3, [pc, #204]	; (80014b4 <updateControler+0x198>)
 80013e6:	edd3 7a00 	vldr	s15, [r3]
 80013ea:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 80013ee:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80013f2:	eddf 0a31 	vldr	s1, [pc, #196]	; 80014b8 <updateControler+0x19c>
 80013f6:	eeb0 0a66 	vmov.f32	s0, s13
 80013fa:	f000 fbcd 	bl	8001b98 <turnTo>
					state= ST_M1_TURN;
 80013fe:	4b29      	ldr	r3, [pc, #164]	; (80014a4 <updateControler+0x188>)
 8001400:	2204      	movs	r2, #4
 8001402:	701a      	strb	r2, [r3, #0]
					break;
 8001404:	bf00      	nop
			}
			break;
 8001406:	e048      	b.n	800149a <updateControler+0x17e>

		case ST_M1_BCK_R:
			switch(event) {
 8001408:	79fb      	ldrb	r3, [r7, #7]
 800140a:	2b04      	cmp	r3, #4
 800140c:	d000      	beq.n	8001410 <updateControler+0xf4>
					turnTo(-TURN_ANG,TURN_SPEED);
					state= ST_M1_TURN;
					break;

				default:
					break;
 800140e:	e015      	b.n	800143c <updateControler+0x120>
					enableEdgeSensors(BUMP_BIT_LEFT | BUMP_BIT_RIGHT);
 8001410:	2003      	movs	r0, #3
 8001412:	f000 f853 	bl	80014bc <enableEdgeSensors>
					turnTo(-TURN_ANG,TURN_SPEED);
 8001416:	4b27      	ldr	r3, [pc, #156]	; (80014b4 <updateControler+0x198>)
 8001418:	ed93 7a00 	vldr	s14, [r3]
 800141c:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8001420:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001424:	eef1 7a67 	vneg.f32	s15, s15
 8001428:	eddf 0a23 	vldr	s1, [pc, #140]	; 80014b8 <updateControler+0x19c>
 800142c:	eeb0 0a67 	vmov.f32	s0, s15
 8001430:	f000 fbb2 	bl	8001b98 <turnTo>
					state= ST_M1_TURN;
 8001434:	4b1b      	ldr	r3, [pc, #108]	; (80014a4 <updateControler+0x188>)
 8001436:	2204      	movs	r2, #4
 8001438:	701a      	strb	r2, [r3, #0]
					break;
 800143a:	bf00      	nop
			}
			break;
 800143c:	e02d      	b.n	800149a <updateControler+0x17e>

		case ST_M1_TURN:
			switch(event) {
 800143e:	79fb      	ldrb	r3, [r7, #7]
 8001440:	2b08      	cmp	r3, #8
 8001442:	d00e      	beq.n	8001462 <updateControler+0x146>
 8001444:	2b10      	cmp	r3, #16
 8001446:	d019      	beq.n	800147c <updateControler+0x160>
 8001448:	2b02      	cmp	r3, #2
 800144a:	d000      	beq.n	800144e <updateControler+0x132>
					driveTo(BACK_DIST,BACK_SPEED);
					state= ST_M1_BCK_L;
					break;

				default:
					break;
 800144c:	e023      	b.n	8001496 <updateControler+0x17a>
					drive(FWD_SPEED,0.0f);
 800144e:	eddf 0a16 	vldr	s1, [pc, #88]	; 80014a8 <updateControler+0x18c>
 8001452:	ed9f 0a16 	vldr	s0, [pc, #88]	; 80014ac <updateControler+0x190>
 8001456:	f000 f9f1 	bl	800183c <drive>
					state= ST_M1_FWD;
 800145a:	4b12      	ldr	r3, [pc, #72]	; (80014a4 <updateControler+0x188>)
 800145c:	2201      	movs	r2, #1
 800145e:	701a      	strb	r2, [r3, #0]
					break;
 8001460:	e019      	b.n	8001496 <updateControler+0x17a>
					disableEdgeSensors(BUMP_BIT_LEFT | BUMP_BIT_RIGHT);
 8001462:	2003      	movs	r0, #3
 8001464:	f000 f83c 	bl	80014e0 <disableEdgeSensors>
					driveTo(BACK_DIST,BACK_SPEED);
 8001468:	eddf 0a10 	vldr	s1, [pc, #64]	; 80014ac <updateControler+0x190>
 800146c:	ed9f 0a10 	vldr	s0, [pc, #64]	; 80014b0 <updateControler+0x194>
 8001470:	f000 fbda 	bl	8001c28 <driveTo>
					state= ST_M1_BCK_R;
 8001474:	4b0b      	ldr	r3, [pc, #44]	; (80014a4 <updateControler+0x188>)
 8001476:	2203      	movs	r2, #3
 8001478:	701a      	strb	r2, [r3, #0]
					break;
 800147a:	e00c      	b.n	8001496 <updateControler+0x17a>
					disableEdgeSensors(BUMP_BIT_LEFT | BUMP_BIT_RIGHT);
 800147c:	2003      	movs	r0, #3
 800147e:	f000 f82f 	bl	80014e0 <disableEdgeSensors>
					driveTo(BACK_DIST,BACK_SPEED);
 8001482:	eddf 0a0a 	vldr	s1, [pc, #40]	; 80014ac <updateControler+0x190>
 8001486:	ed9f 0a0a 	vldr	s0, [pc, #40]	; 80014b0 <updateControler+0x194>
 800148a:	f000 fbcd 	bl	8001c28 <driveTo>
					state= ST_M1_BCK_L;
 800148e:	4b05      	ldr	r3, [pc, #20]	; (80014a4 <updateControler+0x188>)
 8001490:	2202      	movs	r2, #2
 8001492:	701a      	strb	r2, [r3, #0]
					break;
 8001494:	bf00      	nop
			}
			break;
 8001496:	e000      	b.n	800149a <updateControler+0x17e>

		case ST_COMPLETE:
			break;

		default:
			break;
 8001498:	bf00      	nop
	}
}
 800149a:	bf00      	nop
 800149c:	3708      	adds	r7, #8
 800149e:	46bd      	mov	sp, r7
 80014a0:	bd80      	pop	{r7, pc}
 80014a2:	bf00      	nop
 80014a4:	200002f0 	.word	0x200002f0
 80014a8:	00000000 	.word	0x00000000
 80014ac:	3ca3d70a 	.word	0x3ca3d70a
 80014b0:	bd23d70a 	.word	0xbd23d70a
 80014b4:	0800ca2c 	.word	0x0800ca2c
 80014b8:	3e4ccccd 	.word	0x3e4ccccd

080014bc <enableEdgeSensors>:
static uint32_t sensor_enabled=0;

static uint32_t debounce(uint32_t sample);
static uint32_t readSensors(void);

void enableEdgeSensors(uint32_t sensor) {
 80014bc:	b480      	push	{r7}
 80014be:	b083      	sub	sp, #12
 80014c0:	af00      	add	r7, sp, #0
 80014c2:	6078      	str	r0, [r7, #4]
	sensor_enabled |= sensor;
 80014c4:	4b05      	ldr	r3, [pc, #20]	; (80014dc <enableEdgeSensors+0x20>)
 80014c6:	681a      	ldr	r2, [r3, #0]
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	4313      	orrs	r3, r2
 80014cc:	4a03      	ldr	r2, [pc, #12]	; (80014dc <enableEdgeSensors+0x20>)
 80014ce:	6013      	str	r3, [r2, #0]
}
 80014d0:	bf00      	nop
 80014d2:	370c      	adds	r7, #12
 80014d4:	46bd      	mov	sp, r7
 80014d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014da:	4770      	bx	lr
 80014dc:	200002fc 	.word	0x200002fc

080014e0 <disableEdgeSensors>:
void disableEdgeSensors(uint32_t sensor) {
 80014e0:	b480      	push	{r7}
 80014e2:	b083      	sub	sp, #12
 80014e4:	af00      	add	r7, sp, #0
 80014e6:	6078      	str	r0, [r7, #4]
	sensor_enabled &= ~sensor;
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	43da      	mvns	r2, r3
 80014ec:	4b05      	ldr	r3, [pc, #20]	; (8001504 <disableEdgeSensors+0x24>)
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	4013      	ands	r3, r2
 80014f2:	4a04      	ldr	r2, [pc, #16]	; (8001504 <disableEdgeSensors+0x24>)
 80014f4:	6013      	str	r3, [r2, #0]
}
 80014f6:	bf00      	nop
 80014f8:	370c      	adds	r7, #12
 80014fa:	46bd      	mov	sp, r7
 80014fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001500:	4770      	bx	lr
 8001502:	bf00      	nop
 8001504:	200002fc 	.word	0x200002fc

08001508 <getEdgeSensorState>:
EDGE_SENSOR_STATE getEdgeSensorState(uint32_t sensor) {
 8001508:	b580      	push	{r7, lr}
 800150a:	b084      	sub	sp, #16
 800150c:	af00      	add	r7, sp, #0
 800150e:	6078      	str	r0, [r7, #4]
	uint32_t hit =  (sensor_state & sensor)?ES_HIT:ES_CLEAR;
 8001510:	4b16      	ldr	r3, [pc, #88]	; (800156c <getEdgeSensorState+0x64>)
 8001512:	681a      	ldr	r2, [r3, #0]
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	4013      	ands	r3, r2
 8001518:	2b00      	cmp	r3, #0
 800151a:	bf14      	ite	ne
 800151c:	2301      	movne	r3, #1
 800151e:	2300      	moveq	r3, #0
 8001520:	b2db      	uxtb	r3, r3
 8001522:	60fb      	str	r3, [r7, #12]
	if(sensor_changed & sensor) {
 8001524:	4b12      	ldr	r3, [pc, #72]	; (8001570 <getEdgeSensorState+0x68>)
 8001526:	681a      	ldr	r2, [r3, #0]
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	4013      	ands	r3, r2
 800152c:	2b00      	cmp	r3, #0
 800152e:	d011      	beq.n	8001554 <getEdgeSensorState+0x4c>
		printf("Edge Sensor %ld: %s\n\r",sensor,((hit==ES_HIT)?"Hit":"Clear"));
 8001530:	68fb      	ldr	r3, [r7, #12]
 8001532:	2b01      	cmp	r3, #1
 8001534:	d101      	bne.n	800153a <getEdgeSensorState+0x32>
 8001536:	4b0f      	ldr	r3, [pc, #60]	; (8001574 <getEdgeSensorState+0x6c>)
 8001538:	e000      	b.n	800153c <getEdgeSensorState+0x34>
 800153a:	4b0f      	ldr	r3, [pc, #60]	; (8001578 <getEdgeSensorState+0x70>)
 800153c:	461a      	mov	r2, r3
 800153e:	6879      	ldr	r1, [r7, #4]
 8001540:	480e      	ldr	r0, [pc, #56]	; (800157c <getEdgeSensorState+0x74>)
 8001542:	f007 ff43 	bl	80093cc <iprintf>
		sensor_changed &= ~sensor;
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	43da      	mvns	r2, r3
 800154a:	4b09      	ldr	r3, [pc, #36]	; (8001570 <getEdgeSensorState+0x68>)
 800154c:	681b      	ldr	r3, [r3, #0]
 800154e:	4013      	ands	r3, r2
 8001550:	4a07      	ldr	r2, [pc, #28]	; (8001570 <getEdgeSensorState+0x68>)
 8001552:	6013      	str	r3, [r2, #0]
	}
	return hit & sensor_enabled;
 8001554:	68fb      	ldr	r3, [r7, #12]
 8001556:	b2da      	uxtb	r2, r3
 8001558:	4b09      	ldr	r3, [pc, #36]	; (8001580 <getEdgeSensorState+0x78>)
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	b2db      	uxtb	r3, r3
 800155e:	4013      	ands	r3, r2
 8001560:	b2db      	uxtb	r3, r3
}
 8001562:	4618      	mov	r0, r3
 8001564:	3710      	adds	r7, #16
 8001566:	46bd      	mov	sp, r7
 8001568:	bd80      	pop	{r7, pc}
 800156a:	bf00      	nop
 800156c:	200002f4 	.word	0x200002f4
 8001570:	200002f8 	.word	0x200002f8
 8001574:	0800be24 	.word	0x0800be24
 8001578:	0800be28 	.word	0x0800be28
 800157c:	0800be30 	.word	0x0800be30
 8001580:	200002fc 	.word	0x200002fc

08001584 <updateEdgeSensors>:
void updateEdgeSensors(void) {
 8001584:	b580      	push	{r7, lr}
 8001586:	b082      	sub	sp, #8
 8001588:	af00      	add	r7, sp, #0
	uint32_t new_state = readSensors();
 800158a:	f000 f813 	bl	80015b4 <readSensors>
 800158e:	6078      	str	r0, [r7, #4]
	//uint32_t state = debounce(state);
	sensor_changed = new_state ^ sensor_state;
 8001590:	4b06      	ldr	r3, [pc, #24]	; (80015ac <updateEdgeSensors+0x28>)
 8001592:	681a      	ldr	r2, [r3, #0]
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	4053      	eors	r3, r2
 8001598:	4a05      	ldr	r2, [pc, #20]	; (80015b0 <updateEdgeSensors+0x2c>)
 800159a:	6013      	str	r3, [r2, #0]
	sensor_state = new_state;
 800159c:	4a03      	ldr	r2, [pc, #12]	; (80015ac <updateEdgeSensors+0x28>)
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	6013      	str	r3, [r2, #0]
}
 80015a2:	bf00      	nop
 80015a4:	3708      	adds	r7, #8
 80015a6:	46bd      	mov	sp, r7
 80015a8:	bd80      	pop	{r7, pc}
 80015aa:	bf00      	nop
 80015ac:	200002f4 	.word	0x200002f4
 80015b0:	200002f8 	.word	0x200002f8

080015b4 <readSensors>:
uint32_t readSensors(void) {
 80015b4:	b580      	push	{r7, lr}
 80015b6:	b082      	sub	sp, #8
 80015b8:	af00      	add	r7, sp, #0

	uint32_t bump1=HAL_GPIO_ReadPin(QTRL_GPIO_Port, QTRL_Pin)==EDGE_SENSOR_ACTIVE?BUMP_BIT_LEFT:0;
 80015ba:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80015be:	480e      	ldr	r0, [pc, #56]	; (80015f8 <readSensors+0x44>)
 80015c0:	f003 faf8 	bl	8004bb4 <HAL_GPIO_ReadPin>
 80015c4:	4603      	mov	r3, r0
 80015c6:	2b01      	cmp	r3, #1
 80015c8:	bf0c      	ite	eq
 80015ca:	2301      	moveq	r3, #1
 80015cc:	2300      	movne	r3, #0
 80015ce:	b2db      	uxtb	r3, r3
 80015d0:	607b      	str	r3, [r7, #4]
	uint32_t bump2=HAL_GPIO_ReadPin(QTRR_GPIO_Port, QTRR_Pin)==EDGE_SENSOR_ACTIVE?BUMP_BIT_RIGHT:0;
 80015d2:	2104      	movs	r1, #4
 80015d4:	4808      	ldr	r0, [pc, #32]	; (80015f8 <readSensors+0x44>)
 80015d6:	f003 faed 	bl	8004bb4 <HAL_GPIO_ReadPin>
 80015da:	4603      	mov	r3, r0
 80015dc:	2b01      	cmp	r3, #1
 80015de:	d101      	bne.n	80015e4 <readSensors+0x30>
 80015e0:	2302      	movs	r3, #2
 80015e2:	e000      	b.n	80015e6 <readSensors+0x32>
 80015e4:	2300      	movs	r3, #0
 80015e6:	603b      	str	r3, [r7, #0]

	return bump1 | bump2;
 80015e8:	687a      	ldr	r2, [r7, #4]
 80015ea:	683b      	ldr	r3, [r7, #0]
 80015ec:	4313      	orrs	r3, r2
}
 80015ee:	4618      	mov	r0, r3
 80015f0:	3708      	adds	r7, #8
 80015f2:	46bd      	mov	sp, r7
 80015f4:	bd80      	pop	{r7, pc}
 80015f6:	bf00      	nop
 80015f8:	40020400 	.word	0x40020400
 80015fc:	00000000 	.word	0x00000000

08001600 <updateEncoder>:

char position[10]; // used to write a int to char
uint8_t oddeven = 0; //used to flip left and right oled screen location
//static bool oddeven = 0;
//Update Encoder
void updateEncoder(ENC_STATUS *enc){
 8001600:	b5b0      	push	{r4, r5, r7, lr}
 8001602:	b086      	sub	sp, #24
 8001604:	af00      	add	r7, sp, #0
 8001606:	6078      	str	r0, [r7, #4]

	int16_t pos16 = (int16_t) __HAL_TIM_GET_COUNTER(enc->htim); //treat timers as a signed 16bit
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	695b      	ldr	r3, [r3, #20]
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001610:	827b      	strh	r3, [r7, #18]
	//int16_t pos16 = enc->dir*(int16_t) __HAL_TIM_GET_COUNTER(enc->htim); //treat timers as a signed 16bit
	int32_t pos32 = (int32_t)pos16; //sign extended to 32bit
 8001612:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8001616:	60fb      	str	r3, [r7, #12]

	int16_t last = enc -> last; //get last raw timer value
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	891b      	ldrh	r3, [r3, #8]
 800161c:	817b      	strh	r3, [r7, #10]
	int32_t diff = pos32-last; // change in position (velocity)
 800161e:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8001622:	68fa      	ldr	r2, [r7, #12]
 8001624:	1ad3      	subs	r3, r2, r3
 8001626:	617b      	str	r3, [r7, #20]

	if (abs(last) > 20000) { // is timer likely to have over/underflowed (sign changes near 0 are ok)
 8001628:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800162c:	2b00      	cmp	r3, #0
 800162e:	bfb8      	it	lt
 8001630:	425b      	neglt	r3, r3
 8001632:	f644 6220 	movw	r2, #20000	; 0x4e20
 8001636:	4293      	cmp	r3, r2
 8001638:	dd18      	ble.n	800166c <updateEncoder+0x6c>
		if(pos16 < 0 && last >= 0) { // overflow forward
 800163a:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800163e:	2b00      	cmp	r3, #0
 8001640:	da08      	bge.n	8001654 <updateEncoder+0x54>
 8001642:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8001646:	2b00      	cmp	r3, #0
 8001648:	db04      	blt.n	8001654 <updateEncoder+0x54>
			diff += (int32_t)0x10000;
 800164a:	697b      	ldr	r3, [r7, #20]
 800164c:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 8001650:	617b      	str	r3, [r7, #20]
 8001652:	e00b      	b.n	800166c <updateEncoder+0x6c>
		}
		else if(pos16 >= 0 && last < 0) { // underflow backwards
 8001654:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8001658:	2b00      	cmp	r3, #0
 800165a:	db07      	blt.n	800166c <updateEncoder+0x6c>
 800165c:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8001660:	2b00      	cmp	r3, #0
 8001662:	da03      	bge.n	800166c <updateEncoder+0x6c>
			diff -= (int32_t)0x10000;
 8001664:	697b      	ldr	r3, [r7, #20]
 8001666:	f5a3 3380 	sub.w	r3, r3, #65536	; 0x10000
 800166a:	617b      	str	r3, [r7, #20]
		}
	}

	//enc->vel = diff*ENCODER_VEL_SCALE;
	enc->vel = (float)diff*ENCODER_VEL_SCALE/2;
 800166c:	697b      	ldr	r3, [r7, #20]
 800166e:	ee07 3a90 	vmov	s15, r3
 8001672:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001676:	ee17 0a90 	vmov	r0, s15
 800167a:	f7fe ff65 	bl	8000548 <__aeabi_f2d>
 800167e:	a31e      	add	r3, pc, #120	; (adr r3, 80016f8 <updateEncoder+0xf8>)
 8001680:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001684:	f7fe ffb8 	bl	80005f8 <__aeabi_dmul>
 8001688:	4603      	mov	r3, r0
 800168a:	460c      	mov	r4, r1
 800168c:	4618      	mov	r0, r3
 800168e:	4621      	mov	r1, r4
 8001690:	f04f 0200 	mov.w	r2, #0
 8001694:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001698:	f7ff f8d8 	bl	800084c <__aeabi_ddiv>
 800169c:	4603      	mov	r3, r0
 800169e:	460c      	mov	r4, r1
 80016a0:	4618      	mov	r0, r3
 80016a2:	4621      	mov	r1, r4
 80016a4:	f7ff fa80 	bl	8000ba8 <__aeabi_d2f>
 80016a8:	4602      	mov	r2, r0
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	605a      	str	r2, [r3, #4]
	enc->pos += diff*ENCODER_DIST_SCALE;
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	4618      	mov	r0, r3
 80016b4:	f7fe ff48 	bl	8000548 <__aeabi_f2d>
 80016b8:	4604      	mov	r4, r0
 80016ba:	460d      	mov	r5, r1
 80016bc:	6978      	ldr	r0, [r7, #20]
 80016be:	f7fe ff31 	bl	8000524 <__aeabi_i2d>
 80016c2:	a30f      	add	r3, pc, #60	; (adr r3, 8001700 <updateEncoder+0x100>)
 80016c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016c8:	f7fe ff96 	bl	80005f8 <__aeabi_dmul>
 80016cc:	4602      	mov	r2, r0
 80016ce:	460b      	mov	r3, r1
 80016d0:	4620      	mov	r0, r4
 80016d2:	4629      	mov	r1, r5
 80016d4:	f7fe fdda 	bl	800028c <__adddf3>
 80016d8:	4603      	mov	r3, r0
 80016da:	460c      	mov	r4, r1
 80016dc:	4618      	mov	r0, r3
 80016de:	4621      	mov	r1, r4
 80016e0:	f7ff fa62 	bl	8000ba8 <__aeabi_d2f>
 80016e4:	4602      	mov	r2, r0
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	601a      	str	r2, [r3, #0]
	enc->last = pos16;
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	8a7a      	ldrh	r2, [r7, #18]
 80016ee:	811a      	strh	r2, [r3, #8]
	}else{
		oddeven = 0;
	}*/


}
 80016f0:	bf00      	nop
 80016f2:	3718      	adds	r7, #24
 80016f4:	46bd      	mov	sp, r7
 80016f6:	bdb0      	pop	{r4, r5, r7, pc}
 80016f8:	382daf40 	.word	0x382daf40
 80016fc:	3fd0c152 	.word	0x3fd0c152
 8001700:	42a7a957 	.word	0x42a7a957
 8001704:	3f2804fd 	.word	0x3f2804fd

08001708 <setMTRSpeed>:

const MOTOR_CONF mot_left = {"Left",TIM_CHANNEL_1, &htim4, ROMI_DIRL_GPIO_Port, ROMI_DIRL_Pin}; //add a status bit?
const MOTOR_CONF mot_right = {"Right",TIM_CHANNEL_3, &htim2, ROMI_DIRR_GPIO_Port, ROMI_DIRR_Pin};

// Set PWM output for a motor for desired power
void setMTRSpeed(float speed, const MOTOR_CONF *motor){
 8001708:	b580      	push	{r7, lr}
 800170a:	b084      	sub	sp, #16
 800170c:	af00      	add	r7, sp, #0
 800170e:	ed87 0a01 	vstr	s0, [r7, #4]
 8001712:	6038      	str	r0, [r7, #0]
	HAL_GPIO_WritePin(ROMI_SLPL_GPIO_Port, ROMI_SLPL_Pin, SET);
 8001714:	2201      	movs	r2, #1
 8001716:	2140      	movs	r1, #64	; 0x40
 8001718:	4838      	ldr	r0, [pc, #224]	; (80017fc <setMTRSpeed+0xf4>)
 800171a:	f003 fa63 	bl	8004be4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(ROMI_SLPR_GPIO_Port, ROMI_SLPR_Pin, SET);
 800171e:	2201      	movs	r2, #1
 8001720:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001724:	4836      	ldr	r0, [pc, #216]	; (8001800 <setMTRSpeed+0xf8>)
 8001726:	f003 fa5d 	bl	8004be4 <HAL_GPIO_WritePin>

	uint32_t direction = speed > 0?0:1; //if assignment, ternary operator
 800172a:	edd7 7a01 	vldr	s15, [r7, #4]
 800172e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001732:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001736:	bfcc      	ite	gt
 8001738:	2301      	movgt	r3, #1
 800173a:	2300      	movle	r3, #0
 800173c:	b2db      	uxtb	r3, r3
 800173e:	f083 0301 	eor.w	r3, r3, #1
 8001742:	b2db      	uxtb	r3, r3
 8001744:	60fb      	str	r3, [r7, #12]
	speed = fabsf(speed); //takes speed and returns absolute value
 8001746:	edd7 7a01 	vldr	s15, [r7, #4]
 800174a:	eef0 7ae7 	vabs.f32	s15, s15
 800174e:	edc7 7a01 	vstr	s15, [r7, #4]
	HAL_GPIO_WritePin(motor->gpio_port, motor->gpio_pin, direction==1 ?SET:RESET);
 8001752:	683b      	ldr	r3, [r7, #0]
 8001754:	68d8      	ldr	r0, [r3, #12]
 8001756:	683b      	ldr	r3, [r7, #0]
 8001758:	691b      	ldr	r3, [r3, #16]
 800175a:	b299      	uxth	r1, r3
 800175c:	68fb      	ldr	r3, [r7, #12]
 800175e:	2b01      	cmp	r3, #1
 8001760:	bf0c      	ite	eq
 8001762:	2301      	moveq	r3, #1
 8001764:	2300      	movne	r3, #0
 8001766:	b2db      	uxtb	r3, r3
 8001768:	461a      	mov	r2, r3
 800176a:	f003 fa3b 	bl	8004be4 <HAL_GPIO_WritePin>

	if(speed > MOTOR_PWM_PERIOD){
 800176e:	edd7 7a01 	vldr	s15, [r7, #4]
 8001772:	ed9f 7a24 	vldr	s14, [pc, #144]	; 8001804 <setMTRSpeed+0xfc>
 8001776:	eef4 7ac7 	vcmpe.f32	s15, s14
 800177a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800177e:	dd01      	ble.n	8001784 <setMTRSpeed+0x7c>
		speed = MOTOR_PWM_PERIOD;
 8001780:	4b21      	ldr	r3, [pc, #132]	; (8001808 <setMTRSpeed+0x100>)
 8001782:	607b      	str	r3, [r7, #4]
	}
	__HAL_TIM_SET_COMPARE(motor->htim,motor->tim_ch,(uint32_t)speed); //sets capture/compare register for the the duty; how fast the
 8001784:	683b      	ldr	r3, [r7, #0]
 8001786:	685b      	ldr	r3, [r3, #4]
 8001788:	2b00      	cmp	r3, #0
 800178a:	d10a      	bne.n	80017a2 <setMTRSpeed+0x9a>
 800178c:	683b      	ldr	r3, [r7, #0]
 800178e:	689b      	ldr	r3, [r3, #8]
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	edd7 7a01 	vldr	s15, [r7, #4]
 8001796:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800179a:	ee17 2a90 	vmov	r2, s15
 800179e:	635a      	str	r2, [r3, #52]	; 0x34
}
 80017a0:	e027      	b.n	80017f2 <setMTRSpeed+0xea>
	__HAL_TIM_SET_COMPARE(motor->htim,motor->tim_ch,(uint32_t)speed); //sets capture/compare register for the the duty; how fast the
 80017a2:	683b      	ldr	r3, [r7, #0]
 80017a4:	685b      	ldr	r3, [r3, #4]
 80017a6:	2b04      	cmp	r3, #4
 80017a8:	d10a      	bne.n	80017c0 <setMTRSpeed+0xb8>
 80017aa:	683b      	ldr	r3, [r7, #0]
 80017ac:	689b      	ldr	r3, [r3, #8]
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	edd7 7a01 	vldr	s15, [r7, #4]
 80017b4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80017b8:	ee17 2a90 	vmov	r2, s15
 80017bc:	639a      	str	r2, [r3, #56]	; 0x38
}
 80017be:	e018      	b.n	80017f2 <setMTRSpeed+0xea>
	__HAL_TIM_SET_COMPARE(motor->htim,motor->tim_ch,(uint32_t)speed); //sets capture/compare register for the the duty; how fast the
 80017c0:	683b      	ldr	r3, [r7, #0]
 80017c2:	685b      	ldr	r3, [r3, #4]
 80017c4:	2b08      	cmp	r3, #8
 80017c6:	d10a      	bne.n	80017de <setMTRSpeed+0xd6>
 80017c8:	683b      	ldr	r3, [r7, #0]
 80017ca:	689b      	ldr	r3, [r3, #8]
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	edd7 7a01 	vldr	s15, [r7, #4]
 80017d2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80017d6:	ee17 2a90 	vmov	r2, s15
 80017da:	63da      	str	r2, [r3, #60]	; 0x3c
}
 80017dc:	e009      	b.n	80017f2 <setMTRSpeed+0xea>
	__HAL_TIM_SET_COMPARE(motor->htim,motor->tim_ch,(uint32_t)speed); //sets capture/compare register for the the duty; how fast the
 80017de:	683b      	ldr	r3, [r7, #0]
 80017e0:	689b      	ldr	r3, [r3, #8]
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	edd7 7a01 	vldr	s15, [r7, #4]
 80017e8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80017ec:	ee17 2a90 	vmov	r2, s15
 80017f0:	641a      	str	r2, [r3, #64]	; 0x40
}
 80017f2:	bf00      	nop
 80017f4:	3710      	adds	r7, #16
 80017f6:	46bd      	mov	sp, r7
 80017f8:	bd80      	pop	{r7, pc}
 80017fa:	bf00      	nop
 80017fc:	40020800 	.word	0x40020800
 8001800:	40020400 	.word	0x40020400
 8001804:	447a0000 	.word	0x447a0000
 8001808:	447a0000 	.word	0x447a0000

0800180c <setMotorSpeed>:

// set target velocity for each wheel (in rad/s)
void setMotorSpeed(float left, float right) {
 800180c:	b480      	push	{r7}
 800180e:	b083      	sub	sp, #12
 8001810:	af00      	add	r7, sp, #0
 8001812:	ed87 0a01 	vstr	s0, [r7, #4]
 8001816:	edc7 0a00 	vstr	s1, [r7]
	speed_l = left;
 800181a:	4a06      	ldr	r2, [pc, #24]	; (8001834 <setMotorSpeed+0x28>)
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	6013      	str	r3, [r2, #0]
	speed_r = right;
 8001820:	4a05      	ldr	r2, [pc, #20]	; (8001838 <setMotorSpeed+0x2c>)
 8001822:	683b      	ldr	r3, [r7, #0]
 8001824:	6013      	str	r3, [r2, #0]
}
 8001826:	bf00      	nop
 8001828:	370c      	adds	r7, #12
 800182a:	46bd      	mov	sp, r7
 800182c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001830:	4770      	bx	lr
 8001832:	bf00      	nop
 8001834:	20000300 	.word	0x20000300
 8001838:	20000304 	.word	0x20000304

0800183c <drive>:
// set target velocities for each wheel based on desired robot dynamics
// lin_vel : desired linear velocity of robot center (m/s)
// ang_vel : desired angular velocity of robot (rad/s)
void drive(float lin_vel, float ang_vel) {
 800183c:	b480      	push	{r7}
 800183e:	b083      	sub	sp, #12
 8001840:	af00      	add	r7, sp, #0
 8001842:	ed87 0a01 	vstr	s0, [r7, #4]
 8001846:	edc7 0a00 	vstr	s1, [r7]
	speed_l =  (lin_vel - ang_vel * WHEEL_BASE/2.0f)/WHEEL_RADIUS;
 800184a:	edd7 7a00 	vldr	s15, [r7]
 800184e:	ed9f 7a17 	vldr	s14, [pc, #92]	; 80018ac <drive+0x70>
 8001852:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001856:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 800185a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800185e:	ed97 7a01 	vldr	s14, [r7, #4]
 8001862:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001866:	eddf 6a12 	vldr	s13, [pc, #72]	; 80018b0 <drive+0x74>
 800186a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800186e:	4b11      	ldr	r3, [pc, #68]	; (80018b4 <drive+0x78>)
 8001870:	edc3 7a00 	vstr	s15, [r3]
	speed_r =  (lin_vel + ang_vel * WHEEL_BASE/2.0f)/WHEEL_RADIUS;
 8001874:	edd7 7a00 	vldr	s15, [r7]
 8001878:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 80018ac <drive+0x70>
 800187c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001880:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8001884:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8001888:	edd7 7a01 	vldr	s15, [r7, #4]
 800188c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001890:	eddf 6a07 	vldr	s13, [pc, #28]	; 80018b0 <drive+0x74>
 8001894:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001898:	4b07      	ldr	r3, [pc, #28]	; (80018b8 <drive+0x7c>)
 800189a:	edc3 7a00 	vstr	s15, [r3]
}
 800189e:	bf00      	nop
 80018a0:	370c      	adds	r7, #12
 80018a2:	46bd      	mov	sp, r7
 80018a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018a8:	4770      	bx	lr
 80018aa:	bf00      	nop
 80018ac:	3db22d0e 	.word	0x3db22d0e
 80018b0:	3d0f5c29 	.word	0x3d0f5c29
 80018b4:	20000300 	.word	0x20000300
 80018b8:	20000304 	.word	0x20000304

080018bc <STOP>:

// stop both motors and cancel any driveTo or turnTo command that is executing
void STOP(void){
 80018bc:	b580      	push	{r7, lr}
 80018be:	af00      	add	r7, sp, #0
	printf("Stop Detected\n\r");
 80018c0:	480c      	ldr	r0, [pc, #48]	; (80018f4 <STOP+0x38>)
 80018c2:	f007 fd83 	bl	80093cc <iprintf>
	speed_l = 0.0;
 80018c6:	4b0c      	ldr	r3, [pc, #48]	; (80018f8 <STOP+0x3c>)
 80018c8:	f04f 0200 	mov.w	r2, #0
 80018cc:	601a      	str	r2, [r3, #0]
	speed_r = 0.0;
 80018ce:	4b0b      	ldr	r3, [pc, #44]	; (80018fc <STOP+0x40>)
 80018d0:	f04f 0200 	mov.w	r2, #0
 80018d4:	601a      	str	r2, [r3, #0]
	setMTRSpeed(0.0f,&mot_right);
 80018d6:	480a      	ldr	r0, [pc, #40]	; (8001900 <STOP+0x44>)
 80018d8:	ed9f 0a0a 	vldr	s0, [pc, #40]	; 8001904 <STOP+0x48>
 80018dc:	f7ff ff14 	bl	8001708 <setMTRSpeed>
	setMTRSpeed(0.0f,&mot_left);
 80018e0:	4809      	ldr	r0, [pc, #36]	; (8001908 <STOP+0x4c>)
 80018e2:	ed9f 0a08 	vldr	s0, [pc, #32]	; 8001904 <STOP+0x48>
 80018e6:	f7ff ff0f 	bl	8001708 <setMTRSpeed>
	//HAL_GPIO_WritePin(ROMI_SLPL_GPIO_Port, ROMI_SLPL_Pin, RESET);
	//HAL_GPIO_WritePin(ROMI_SLPR_GPIO_Port, ROMI_SLPR_Pin, RESET);

	// Cancel driving commands
	driving = false;
 80018ea:	4b08      	ldr	r3, [pc, #32]	; (800190c <STOP+0x50>)
 80018ec:	2200      	movs	r2, #0
 80018ee:	701a      	strb	r2, [r3, #0]
}
 80018f0:	bf00      	nop
 80018f2:	bd80      	pop	{r7, pc}
 80018f4:	0800be58 	.word	0x0800be58
 80018f8:	20000300 	.word	0x20000300
 80018fc:	20000304 	.word	0x20000304
 8001900:	0800ca44 	.word	0x0800ca44
 8001904:	00000000 	.word	0x00000000
 8001908:	0800ca30 	.word	0x0800ca30
 800190c:	20000328 	.word	0x20000328

08001910 <updateMotors>:
// DT is the update period (sec) used for the inverse kinematics to update the internal pose estimate
//
// Returns any events that are triggered like end of driveTo or turnTo command or is a bump sensor is detected
//
// If at any time the motors are driving and an enabled bumb sensor detects a hit both motors are immediately stopped.
MotorEvent updateMotors(bool pid_update, float DT) {
 8001910:	b580      	push	{r7, lr}
 8001912:	b08a      	sub	sp, #40	; 0x28
 8001914:	af00      	add	r7, sp, #0
 8001916:	4603      	mov	r3, r0
 8001918:	ed87 0a00 	vstr	s0, [r7]
 800191c:	71fb      	strb	r3, [r7, #7]

	MotorEvent event = ME_NONE;
 800191e:	2300      	movs	r3, #0
 8001920:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	if(pid_update) {// see if we should update the PID this time through
 8001924:	79fb      	ldrb	r3, [r7, #7]
 8001926:	2b00      	cmp	r3, #0
 8001928:	f000 80e5 	beq.w	8001af6 <updateMotors+0x1e6>
		float duty_l=0.0f; // left wheel output duty cycle  (-1.0 -- 1.0)
 800192c:	f04f 0300 	mov.w	r3, #0
 8001930:	61fb      	str	r3, [r7, #28]
		float duty_r=0.0f; // right wheel output duty cycle (-1.0 -- 1.0)
 8001932:	f04f 0300 	mov.w	r3, #0
 8001936:	61bb      	str	r3, [r7, #24]

		// get latest speed and position estimates from encoders
		updateEncoder(&enc_right);
 8001938:	4883      	ldr	r0, [pc, #524]	; (8001b48 <updateMotors+0x238>)
 800193a:	f7ff fe61 	bl	8001600 <updateEncoder>
		updateEncoder(&enc_left);
 800193e:	4883      	ldr	r0, [pc, #524]	; (8001b4c <updateMotors+0x23c>)
 8001940:	f7ff fe5e 	bl	8001600 <updateEncoder>

		// run PID for speed control
		duty_l = PID_update(speed_l,enc_left.vel,&pid_left);
 8001944:	4b82      	ldr	r3, [pc, #520]	; (8001b50 <updateMotors+0x240>)
 8001946:	edd3 7a00 	vldr	s15, [r3]
 800194a:	4b80      	ldr	r3, [pc, #512]	; (8001b4c <updateMotors+0x23c>)
 800194c:	ed93 7a01 	vldr	s14, [r3, #4]
 8001950:	4880      	ldr	r0, [pc, #512]	; (8001b54 <updateMotors+0x244>)
 8001952:	eef0 0a47 	vmov.f32	s1, s14
 8001956:	eeb0 0a67 	vmov.f32	s0, s15
 800195a:	f7ff faf5 	bl	8000f48 <PID_update>
 800195e:	ed87 0a07 	vstr	s0, [r7, #28]
		duty_r = PID_update(speed_r,enc_right.vel,&pid_right);
 8001962:	4b7d      	ldr	r3, [pc, #500]	; (8001b58 <updateMotors+0x248>)
 8001964:	edd3 7a00 	vldr	s15, [r3]
 8001968:	4b77      	ldr	r3, [pc, #476]	; (8001b48 <updateMotors+0x238>)
 800196a:	ed93 7a01 	vldr	s14, [r3, #4]
 800196e:	487b      	ldr	r0, [pc, #492]	; (8001b5c <updateMotors+0x24c>)
 8001970:	eef0 0a47 	vmov.f32	s1, s14
 8001974:	eeb0 0a67 	vmov.f32	s0, s15
 8001978:	f7ff fae6 	bl	8000f48 <PID_update>
 800197c:	ed87 0a06 	vstr	s0, [r7, #24]


		// set output PWM duty for both motors
		setMTRSpeed(duty_r*MOTOR_PWM_PERIOD,&mot_right);
 8001980:	edd7 7a06 	vldr	s15, [r7, #24]
 8001984:	ed9f 7a76 	vldr	s14, [pc, #472]	; 8001b60 <updateMotors+0x250>
 8001988:	ee67 7a87 	vmul.f32	s15, s15, s14
 800198c:	4875      	ldr	r0, [pc, #468]	; (8001b64 <updateMotors+0x254>)
 800198e:	eeb0 0a67 	vmov.f32	s0, s15
 8001992:	f7ff feb9 	bl	8001708 <setMTRSpeed>
		setMTRSpeed(duty_l*MOTOR_PWM_PERIOD,&mot_left);
 8001996:	edd7 7a07 	vldr	s15, [r7, #28]
 800199a:	ed9f 7a71 	vldr	s14, [pc, #452]	; 8001b60 <updateMotors+0x250>
 800199e:	ee67 7a87 	vmul.f32	s15, s15, s14
 80019a2:	4871      	ldr	r0, [pc, #452]	; (8001b68 <updateMotors+0x258>)
 80019a4:	eeb0 0a67 	vmov.f32	s0, s15
 80019a8:	f7ff feae 	bl	8001708 <setMTRSpeed>

		updatePose(DT); // calculate updated pose
 80019ac:	ed97 0a00 	vldr	s0, [r7]
 80019b0:	f000 f98e 	bl	8001cd0 <updatePose>

		// now test if we have completed a turn to or driveTo command (if one is running)
		float ref_heading = heading; // get current heading
 80019b4:	4b6d      	ldr	r3, [pc, #436]	; (8001b6c <updateMotors+0x25c>)
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	623b      	str	r3, [r7, #32]

		if(driving && (target_heading != 0.0f)) {  // if doing a turnTo command
 80019ba:	4b6d      	ldr	r3, [pc, #436]	; (8001b70 <updateMotors+0x260>)
 80019bc:	781b      	ldrb	r3, [r3, #0]
 80019be:	2b00      	cmp	r3, #0
 80019c0:	d05e      	beq.n	8001a80 <updateMotors+0x170>
 80019c2:	4b6c      	ldr	r3, [pc, #432]	; (8001b74 <updateMotors+0x264>)
 80019c4:	edd3 7a00 	vldr	s15, [r3]
 80019c8:	eef5 7a40 	vcmp.f32	s15, #0.0
 80019cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80019d0:	d056      	beq.n	8001a80 <updateMotors+0x170>

			  // see if we will turn through 0 heading and handle wrap around of angles if needed
			if (((ref_heading < 0.0f) && (start_heading >=0.0f)) || ((ref_heading >= 0.0f) && (start_heading < 0.0f))) {
 80019d2:	edd7 7a08 	vldr	s15, [r7, #32]
 80019d6:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80019da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80019de:	d507      	bpl.n	80019f0 <updateMotors+0xe0>
 80019e0:	4b65      	ldr	r3, [pc, #404]	; (8001b78 <updateMotors+0x268>)
 80019e2:	edd3 7a00 	vldr	s15, [r3]
 80019e6:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80019ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80019ee:	da0e      	bge.n	8001a0e <updateMotors+0xfe>
 80019f0:	edd7 7a08 	vldr	s15, [r7, #32]
 80019f4:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80019f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80019fc:	db2a      	blt.n	8001a54 <updateMotors+0x144>
 80019fe:	4b5e      	ldr	r3, [pc, #376]	; (8001b78 <updateMotors+0x268>)
 8001a00:	edd3 7a00 	vldr	s15, [r3]
 8001a04:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001a08:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001a0c:	d522      	bpl.n	8001a54 <updateMotors+0x144>

				// handle wrapping around target from + to - angles
				if(ref_heading < 0.0f ) {
 8001a0e:	edd7 7a08 	vldr	s15, [r7, #32]
 8001a12:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001a16:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001a1a:	d50c      	bpl.n	8001a36 <updateMotors+0x126>
					if(turn_ccw) {
 8001a1c:	4b57      	ldr	r3, [pc, #348]	; (8001b7c <updateMotors+0x26c>)
 8001a1e:	781b      	ldrb	r3, [r3, #0]
 8001a20:	2b00      	cmp	r3, #0
 8001a22:	d017      	beq.n	8001a54 <updateMotors+0x144>
					   ref_heading += M_2PI_F;
 8001a24:	ed9f 7a56 	vldr	s14, [pc, #344]	; 8001b80 <updateMotors+0x270>
 8001a28:	edd7 7a08 	vldr	s15, [r7, #32]
 8001a2c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001a30:	edc7 7a08 	vstr	s15, [r7, #32]
 8001a34:	e00e      	b.n	8001a54 <updateMotors+0x144>
					}
				}
				else {
					if(!turn_ccw) {
 8001a36:	4b51      	ldr	r3, [pc, #324]	; (8001b7c <updateMotors+0x26c>)
 8001a38:	781b      	ldrb	r3, [r3, #0]
 8001a3a:	f083 0301 	eor.w	r3, r3, #1
 8001a3e:	b2db      	uxtb	r3, r3
 8001a40:	2b00      	cmp	r3, #0
 8001a42:	d007      	beq.n	8001a54 <updateMotors+0x144>
					   ref_heading -= M_2PI_F;
 8001a44:	ed9f 7a4e 	vldr	s14, [pc, #312]	; 8001b80 <updateMotors+0x270>
 8001a48:	edd7 7a08 	vldr	s15, [r7, #32]
 8001a4c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8001a50:	edc7 7a08 	vstr	s15, [r7, #32]
					}
				}
			}

			// now see if we have turned far enough
			if(fabsf(ref_heading-start_heading) >= target_heading) {
 8001a54:	4b48      	ldr	r3, [pc, #288]	; (8001b78 <updateMotors+0x268>)
 8001a56:	edd3 7a00 	vldr	s15, [r3]
 8001a5a:	ed97 7a08 	vldr	s14, [r7, #32]
 8001a5e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001a62:	eeb0 7ae7 	vabs.f32	s14, s15
 8001a66:	4b43      	ldr	r3, [pc, #268]	; (8001b74 <updateMotors+0x264>)
 8001a68:	edd3 7a00 	vldr	s15, [r3]
 8001a6c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001a70:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001a74:	db04      	blt.n	8001a80 <updateMotors+0x170>
				STOP();
 8001a76:	f7ff ff21 	bl	80018bc <STOP>
				event = ME_DONE_TURN;
 8001a7a:	2302      	movs	r3, #2
 8001a7c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			}
		}

		// check if doing a driveTo command and stop if we have gone far enough
		if(driving && (target_dist_2 != 0.0f)) {
 8001a80:	4b3b      	ldr	r3, [pc, #236]	; (8001b70 <updateMotors+0x260>)
 8001a82:	781b      	ldrb	r3, [r3, #0]
 8001a84:	2b00      	cmp	r3, #0
 8001a86:	d036      	beq.n	8001af6 <updateMotors+0x1e6>
 8001a88:	4b3e      	ldr	r3, [pc, #248]	; (8001b84 <updateMotors+0x274>)
 8001a8a:	edd3 7a00 	vldr	s15, [r3]
 8001a8e:	eef5 7a40 	vcmp.f32	s15, #0.0
 8001a92:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001a96:	d02e      	beq.n	8001af6 <updateMotors+0x1e6>

			// calculate squared magnitude of distance we have moved
			float dx=pose_x-start_pose_x;
 8001a98:	4b3b      	ldr	r3, [pc, #236]	; (8001b88 <updateMotors+0x278>)
 8001a9a:	ed93 7a00 	vldr	s14, [r3]
 8001a9e:	4b3b      	ldr	r3, [pc, #236]	; (8001b8c <updateMotors+0x27c>)
 8001aa0:	edd3 7a00 	vldr	s15, [r3]
 8001aa4:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001aa8:	edc7 7a05 	vstr	s15, [r7, #20]
			float dy=pose_y-start_pose_y;
 8001aac:	4b38      	ldr	r3, [pc, #224]	; (8001b90 <updateMotors+0x280>)
 8001aae:	ed93 7a00 	vldr	s14, [r3]
 8001ab2:	4b38      	ldr	r3, [pc, #224]	; (8001b94 <updateMotors+0x284>)
 8001ab4:	edd3 7a00 	vldr	s15, [r3]
 8001ab8:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001abc:	edc7 7a04 	vstr	s15, [r7, #16]

			if (( dx*dx+dy*dy) >= target_dist_2) { // compare to square magnatude of target distance
 8001ac0:	ed97 7a05 	vldr	s14, [r7, #20]
 8001ac4:	edd7 7a05 	vldr	s15, [r7, #20]
 8001ac8:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001acc:	edd7 6a04 	vldr	s13, [r7, #16]
 8001ad0:	edd7 7a04 	vldr	s15, [r7, #16]
 8001ad4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001ad8:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001adc:	4b29      	ldr	r3, [pc, #164]	; (8001b84 <updateMotors+0x274>)
 8001ade:	edd3 7a00 	vldr	s15, [r3]
 8001ae2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001ae6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001aea:	db04      	blt.n	8001af6 <updateMotors+0x1e6>
				STOP(); // got htere so stop
 8001aec:	f7ff fee6 	bl	80018bc <STOP>
				event = ME_DONE_DRIVE; // return done event
 8001af0:	2304      	movs	r3, #4
 8001af2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			//printf("sh=%5.2f, th=%5.2f, h=%5.2f, rh=%5.2f\n",start_heading,target_heading,heading,ref_heading);
		}

	}
	// check if either bumper has a hit (if enabled)
	bool leftClif = getEdgeSensorState(BUMP_BIT_LEFT)==ES_HIT;
 8001af6:	2001      	movs	r0, #1
 8001af8:	f7ff fd06 	bl	8001508 <getEdgeSensorState>
 8001afc:	4603      	mov	r3, r0
 8001afe:	2b01      	cmp	r3, #1
 8001b00:	bf0c      	ite	eq
 8001b02:	2301      	moveq	r3, #1
 8001b04:	2300      	movne	r3, #0
 8001b06:	73fb      	strb	r3, [r7, #15]
	bool rightClif = getEdgeSensorState(BUMP_BIT_RIGHT)==ES_HIT;
 8001b08:	2002      	movs	r0, #2
 8001b0a:	f7ff fcfd 	bl	8001508 <getEdgeSensorState>
 8001b0e:	4603      	mov	r3, r0
 8001b10:	2b01      	cmp	r3, #1
 8001b12:	bf0c      	ite	eq
 8001b14:	2301      	moveq	r3, #1
 8001b16:	2300      	movne	r3, #0
 8001b18:	73bb      	strb	r3, [r7, #14]

	if(leftClif || rightClif) {
 8001b1a:	7bfb      	ldrb	r3, [r7, #15]
 8001b1c:	2b00      	cmp	r3, #0
 8001b1e:	d102      	bne.n	8001b26 <updateMotors+0x216>
 8001b20:	7bbb      	ldrb	r3, [r7, #14]
 8001b22:	2b00      	cmp	r3, #0
 8001b24:	d009      	beq.n	8001b3a <updateMotors+0x22a>
		STOP(); // stop if bumper hit
 8001b26:	f7ff fec9 	bl	80018bc <STOP>
		event = leftClif?ME_BUMP_LEFT:ME_BUMP_RIGHT; // return event that bumper is hit
 8001b2a:	7bfb      	ldrb	r3, [r7, #15]
 8001b2c:	2b00      	cmp	r3, #0
 8001b2e:	d001      	beq.n	8001b34 <updateMotors+0x224>
 8001b30:	2308      	movs	r3, #8
 8001b32:	e000      	b.n	8001b36 <updateMotors+0x226>
 8001b34:	2310      	movs	r3, #16
 8001b36:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}

	return event;
 8001b3a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8001b3e:	4618      	mov	r0, r3
 8001b40:	3728      	adds	r7, #40	; 0x28
 8001b42:	46bd      	mov	sp, r7
 8001b44:	bd80      	pop	{r7, pc}
 8001b46:	bf00      	nop
 8001b48:	200000b0 	.word	0x200000b0
 8001b4c:	200000d0 	.word	0x200000d0
 8001b50:	20000300 	.word	0x20000300
 8001b54:	20000088 	.word	0x20000088
 8001b58:	20000304 	.word	0x20000304
 8001b5c:	20000060 	.word	0x20000060
 8001b60:	447a0000 	.word	0x447a0000
 8001b64:	0800ca44 	.word	0x0800ca44
 8001b68:	0800ca30 	.word	0x0800ca30
 8001b6c:	20000324 	.word	0x20000324
 8001b70:	20000328 	.word	0x20000328
 8001b74:	2000030c 	.word	0x2000030c
 8001b78:	20000318 	.word	0x20000318
 8001b7c:	20000329 	.word	0x20000329
 8001b80:	40c90fdb 	.word	0x40c90fdb
 8001b84:	20000308 	.word	0x20000308
 8001b88:	2000031c 	.word	0x2000031c
 8001b8c:	20000310 	.word	0x20000310
 8001b90:	20000320 	.word	0x20000320
 8001b94:	20000314 	.word	0x20000314

08001b98 <turnTo>:

void turnTo(float angle, float ang_vel) {
 8001b98:	b580      	push	{r7, lr}
 8001b9a:	b082      	sub	sp, #8
 8001b9c:	af00      	add	r7, sp, #0
 8001b9e:	ed87 0a01 	vstr	s0, [r7, #4]
 8001ba2:	edc7 0a00 	vstr	s1, [r7]

	start_heading = heading;
 8001ba6:	4b1a      	ldr	r3, [pc, #104]	; (8001c10 <turnTo+0x78>)
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	4a1a      	ldr	r2, [pc, #104]	; (8001c14 <turnTo+0x7c>)
 8001bac:	6013      	str	r3, [r2, #0]
	target_heading = fabsf(angle);
 8001bae:	edd7 7a01 	vldr	s15, [r7, #4]
 8001bb2:	eef0 7ae7 	vabs.f32	s15, s15
 8001bb6:	4b18      	ldr	r3, [pc, #96]	; (8001c18 <turnTo+0x80>)
 8001bb8:	edc3 7a00 	vstr	s15, [r3]

	target_dist_2=0.0f;
 8001bbc:	4b17      	ldr	r3, [pc, #92]	; (8001c1c <turnTo+0x84>)
 8001bbe:	f04f 0200 	mov.w	r2, #0
 8001bc2:	601a      	str	r2, [r3, #0]
	driving=true;
 8001bc4:	4b16      	ldr	r3, [pc, #88]	; (8001c20 <turnTo+0x88>)
 8001bc6:	2201      	movs	r2, #1
 8001bc8:	701a      	strb	r2, [r3, #0]

	if(angle<0.0f) {
 8001bca:	edd7 7a01 	vldr	s15, [r7, #4]
 8001bce:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001bd2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001bd6:	d50c      	bpl.n	8001bf2 <turnTo+0x5a>
		drive(0.0f,-fabsf(ang_vel));
 8001bd8:	edd7 7a00 	vldr	s15, [r7]
 8001bdc:	eef0 7ae7 	vabs.f32	s15, s15
 8001be0:	eef1 7a67 	vneg.f32	s15, s15
 8001be4:	eef0 0a67 	vmov.f32	s1, s15
 8001be8:	ed9f 0a0e 	vldr	s0, [pc, #56]	; 8001c24 <turnTo+0x8c>
 8001bec:	f7ff fe26 	bl	800183c <drive>
	}
	else {
		drive(0.0f,fabsf(ang_vel));
	}
}
 8001bf0:	e009      	b.n	8001c06 <turnTo+0x6e>
		drive(0.0f,fabsf(ang_vel));
 8001bf2:	edd7 7a00 	vldr	s15, [r7]
 8001bf6:	eef0 7ae7 	vabs.f32	s15, s15
 8001bfa:	eef0 0a67 	vmov.f32	s1, s15
 8001bfe:	ed9f 0a09 	vldr	s0, [pc, #36]	; 8001c24 <turnTo+0x8c>
 8001c02:	f7ff fe1b 	bl	800183c <drive>
}
 8001c06:	bf00      	nop
 8001c08:	3708      	adds	r7, #8
 8001c0a:	46bd      	mov	sp, r7
 8001c0c:	bd80      	pop	{r7, pc}
 8001c0e:	bf00      	nop
 8001c10:	20000324 	.word	0x20000324
 8001c14:	20000318 	.word	0x20000318
 8001c18:	2000030c 	.word	0x2000030c
 8001c1c:	20000308 	.word	0x20000308
 8001c20:	20000328 	.word	0x20000328
 8001c24:	00000000 	.word	0x00000000

08001c28 <driveTo>:


void driveTo(float dist, float lin_vel) {
 8001c28:	b580      	push	{r7, lr}
 8001c2a:	b082      	sub	sp, #8
 8001c2c:	af00      	add	r7, sp, #0
 8001c2e:	ed87 0a01 	vstr	s0, [r7, #4]
 8001c32:	edc7 0a00 	vstr	s1, [r7]

	start_pose_x = pose_x;
 8001c36:	4b1d      	ldr	r3, [pc, #116]	; (8001cac <driveTo+0x84>)
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	4a1d      	ldr	r2, [pc, #116]	; (8001cb0 <driveTo+0x88>)
 8001c3c:	6013      	str	r3, [r2, #0]
	start_pose_y = pose_y;
 8001c3e:	4b1d      	ldr	r3, [pc, #116]	; (8001cb4 <driveTo+0x8c>)
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	4a1d      	ldr	r2, [pc, #116]	; (8001cb8 <driveTo+0x90>)
 8001c44:	6013      	str	r3, [r2, #0]

	target_dist_2 = dist*dist; // use squared distance to save abs and sqrt
 8001c46:	ed97 7a01 	vldr	s14, [r7, #4]
 8001c4a:	edd7 7a01 	vldr	s15, [r7, #4]
 8001c4e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001c52:	4b1a      	ldr	r3, [pc, #104]	; (8001cbc <driveTo+0x94>)
 8001c54:	edc3 7a00 	vstr	s15, [r3]
	target_heading= 0.0f;
 8001c58:	4b19      	ldr	r3, [pc, #100]	; (8001cc0 <driveTo+0x98>)
 8001c5a:	f04f 0200 	mov.w	r2, #0
 8001c5e:	601a      	str	r2, [r3, #0]

	driving=true;
 8001c60:	4b18      	ldr	r3, [pc, #96]	; (8001cc4 <driveTo+0x9c>)
 8001c62:	2201      	movs	r2, #1
 8001c64:	701a      	strb	r2, [r3, #0]

	if(dist < 0.0f) {
 8001c66:	edd7 7a01 	vldr	s15, [r7, #4]
 8001c6a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001c6e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001c72:	d50d      	bpl.n	8001c90 <driveTo+0x68>
	   turn_ccw=true;
 8001c74:	4b14      	ldr	r3, [pc, #80]	; (8001cc8 <driveTo+0xa0>)
 8001c76:	2201      	movs	r2, #1
 8001c78:	701a      	strb	r2, [r3, #0]
	   drive(-lin_vel,0.0f);
 8001c7a:	edd7 7a00 	vldr	s15, [r7]
 8001c7e:	eef1 7a67 	vneg.f32	s15, s15
 8001c82:	eddf 0a12 	vldr	s1, [pc, #72]	; 8001ccc <driveTo+0xa4>
 8001c86:	eeb0 0a67 	vmov.f32	s0, s15
 8001c8a:	f7ff fdd7 	bl	800183c <drive>
	}
	else {
	   turn_ccw=false;
	   drive(lin_vel,0.0f);
	}
}
 8001c8e:	e008      	b.n	8001ca2 <driveTo+0x7a>
	   turn_ccw=false;
 8001c90:	4b0d      	ldr	r3, [pc, #52]	; (8001cc8 <driveTo+0xa0>)
 8001c92:	2200      	movs	r2, #0
 8001c94:	701a      	strb	r2, [r3, #0]
	   drive(lin_vel,0.0f);
 8001c96:	eddf 0a0d 	vldr	s1, [pc, #52]	; 8001ccc <driveTo+0xa4>
 8001c9a:	ed97 0a00 	vldr	s0, [r7]
 8001c9e:	f7ff fdcd 	bl	800183c <drive>
}
 8001ca2:	bf00      	nop
 8001ca4:	3708      	adds	r7, #8
 8001ca6:	46bd      	mov	sp, r7
 8001ca8:	bd80      	pop	{r7, pc}
 8001caa:	bf00      	nop
 8001cac:	2000031c 	.word	0x2000031c
 8001cb0:	20000310 	.word	0x20000310
 8001cb4:	20000320 	.word	0x20000320
 8001cb8:	20000314 	.word	0x20000314
 8001cbc:	20000308 	.word	0x20000308
 8001cc0:	2000030c 	.word	0x2000030c
 8001cc4:	20000328 	.word	0x20000328
 8001cc8:	20000329 	.word	0x20000329
 8001ccc:	00000000 	.word	0x00000000

08001cd0 <updatePose>:

void updatePose(float DT) {
 8001cd0:	b580      	push	{r7, lr}
 8001cd2:	b086      	sub	sp, #24
 8001cd4:	af00      	add	r7, sp, #0
 8001cd6:	ed87 0a01 	vstr	s0, [r7, #4]

	float dl = enc_left.state.vel*DT*WHEEL_RADIUS;
 8001cda:	4b4a      	ldr	r3, [pc, #296]	; (8001e04 <updatePose+0x134>)
 8001cdc:	ed93 7a07 	vldr	s14, [r3, #28]
 8001ce0:	edd7 7a01 	vldr	s15, [r7, #4]
 8001ce4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001ce8:	ed9f 7a47 	vldr	s14, [pc, #284]	; 8001e08 <updatePose+0x138>
 8001cec:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001cf0:	edc7 7a05 	vstr	s15, [r7, #20]
	float dr = enc_right.state.vel*DT*WHEEL_RADIUS;
 8001cf4:	4b45      	ldr	r3, [pc, #276]	; (8001e0c <updatePose+0x13c>)
 8001cf6:	ed93 7a07 	vldr	s14, [r3, #28]
 8001cfa:	edd7 7a01 	vldr	s15, [r7, #4]
 8001cfe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001d02:	ed9f 7a41 	vldr	s14, [pc, #260]	; 8001e08 <updatePose+0x138>
 8001d06:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001d0a:	edc7 7a04 	vstr	s15, [r7, #16]

	float d = (dl+dr)/2.0f;
 8001d0e:	ed97 7a05 	vldr	s14, [r7, #20]
 8001d12:	edd7 7a04 	vldr	s15, [r7, #16]
 8001d16:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001d1a:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8001d1e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001d22:	edc7 7a03 	vstr	s15, [r7, #12]
	float dt = (dr-dl)/WHEEL_BASE;
 8001d26:	ed97 7a04 	vldr	s14, [r7, #16]
 8001d2a:	edd7 7a05 	vldr	s15, [r7, #20]
 8001d2e:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001d32:	eddf 6a37 	vldr	s13, [pc, #220]	; 8001e10 <updatePose+0x140>
 8001d36:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001d3a:	edc7 7a02 	vstr	s15, [r7, #8]

    heading += dt;
 8001d3e:	4b35      	ldr	r3, [pc, #212]	; (8001e14 <updatePose+0x144>)
 8001d40:	ed93 7a00 	vldr	s14, [r3]
 8001d44:	edd7 7a02 	vldr	s15, [r7, #8]
 8001d48:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001d4c:	4b31      	ldr	r3, [pc, #196]	; (8001e14 <updatePose+0x144>)
 8001d4e:	edc3 7a00 	vstr	s15, [r3]


	if(heading > M_PI_F) {
 8001d52:	4b30      	ldr	r3, [pc, #192]	; (8001e14 <updatePose+0x144>)
 8001d54:	edd3 7a00 	vldr	s15, [r3]
 8001d58:	ed9f 7a2f 	vldr	s14, [pc, #188]	; 8001e18 <updatePose+0x148>
 8001d5c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001d60:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001d64:	dd0a      	ble.n	8001d7c <updatePose+0xac>
		heading -= M_2PI_F;
 8001d66:	4b2b      	ldr	r3, [pc, #172]	; (8001e14 <updatePose+0x144>)
 8001d68:	edd3 7a00 	vldr	s15, [r3]
 8001d6c:	ed9f 7a2b 	vldr	s14, [pc, #172]	; 8001e1c <updatePose+0x14c>
 8001d70:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8001d74:	4b27      	ldr	r3, [pc, #156]	; (8001e14 <updatePose+0x144>)
 8001d76:	edc3 7a00 	vstr	s15, [r3]
 8001d7a:	e015      	b.n	8001da8 <updatePose+0xd8>
	}
	else if(heading <= -M_PI_F) {
 8001d7c:	eddf 7a26 	vldr	s15, [pc, #152]	; 8001e18 <updatePose+0x148>
 8001d80:	eeb1 7a67 	vneg.f32	s14, s15
 8001d84:	4b23      	ldr	r3, [pc, #140]	; (8001e14 <updatePose+0x144>)
 8001d86:	edd3 7a00 	vldr	s15, [r3]
 8001d8a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001d8e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001d92:	db09      	blt.n	8001da8 <updatePose+0xd8>
		heading += M_2PI_F;
 8001d94:	4b1f      	ldr	r3, [pc, #124]	; (8001e14 <updatePose+0x144>)
 8001d96:	edd3 7a00 	vldr	s15, [r3]
 8001d9a:	ed9f 7a20 	vldr	s14, [pc, #128]	; 8001e1c <updatePose+0x14c>
 8001d9e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001da2:	4b1c      	ldr	r3, [pc, #112]	; (8001e14 <updatePose+0x144>)
 8001da4:	edc3 7a00 	vstr	s15, [r3]
	}

    pose_x += d * cosf(heading);
 8001da8:	4b1a      	ldr	r3, [pc, #104]	; (8001e14 <updatePose+0x144>)
 8001daa:	edd3 7a00 	vldr	s15, [r3]
 8001dae:	eeb0 0a67 	vmov.f32	s0, s15
 8001db2:	f009 fa5f 	bl	800b274 <cosf>
 8001db6:	eeb0 7a40 	vmov.f32	s14, s0
 8001dba:	edd7 7a03 	vldr	s15, [r7, #12]
 8001dbe:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001dc2:	4b17      	ldr	r3, [pc, #92]	; (8001e20 <updatePose+0x150>)
 8001dc4:	edd3 7a00 	vldr	s15, [r3]
 8001dc8:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001dcc:	4b14      	ldr	r3, [pc, #80]	; (8001e20 <updatePose+0x150>)
 8001dce:	edc3 7a00 	vstr	s15, [r3]
	pose_y += d * sinf(heading);
 8001dd2:	4b10      	ldr	r3, [pc, #64]	; (8001e14 <updatePose+0x144>)
 8001dd4:	edd3 7a00 	vldr	s15, [r3]
 8001dd8:	eeb0 0a67 	vmov.f32	s0, s15
 8001ddc:	f009 fa8a 	bl	800b2f4 <sinf>
 8001de0:	eeb0 7a40 	vmov.f32	s14, s0
 8001de4:	edd7 7a03 	vldr	s15, [r7, #12]
 8001de8:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001dec:	4b0d      	ldr	r3, [pc, #52]	; (8001e24 <updatePose+0x154>)
 8001dee:	edd3 7a00 	vldr	s15, [r3]
 8001df2:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001df6:	4b0b      	ldr	r3, [pc, #44]	; (8001e24 <updatePose+0x154>)
 8001df8:	edc3 7a00 	vstr	s15, [r3]

}
 8001dfc:	bf00      	nop
 8001dfe:	3718      	adds	r7, #24
 8001e00:	46bd      	mov	sp, r7
 8001e02:	bd80      	pop	{r7, pc}
 8001e04:	200000d0 	.word	0x200000d0
 8001e08:	3d0f5c29 	.word	0x3d0f5c29
 8001e0c:	200000b0 	.word	0x200000b0
 8001e10:	3db22d0e 	.word	0x3db22d0e
 8001e14:	20000324 	.word	0x20000324
 8001e18:	40490fdb 	.word	0x40490fdb
 8001e1c:	40c90fdb 	.word	0x40c90fdb
 8001e20:	2000031c 	.word	0x2000031c
 8001e24:	20000320 	.word	0x20000320

08001e28 <checkSonarL>:
const float speedOfSound = 0.0171821; //cm/uSec divided by 2 since its the speed to reach the object and come back


void uSec_Delay(uint32_t uSec);

void checkSonarL(SONAR_STATUS *sonar){
 8001e28:	b590      	push	{r4, r7, lr}
 8001e2a:	b085      	sub	sp, #20
 8001e2c:	af00      	add	r7, sp, #0
 8001e2e:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(sonar->trig_port,sonar->trig_pin,RESET); //Set the Trigger pin low
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	685b      	ldr	r3, [r3, #4]
 8001e34:	4618      	mov	r0, r3
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	689b      	ldr	r3, [r3, #8]
 8001e3a:	b29b      	uxth	r3, r3
 8001e3c:	2200      	movs	r2, #0
 8001e3e:	4619      	mov	r1, r3
 8001e40:	f002 fed0 	bl	8004be4 <HAL_GPIO_WritePin>
	uSec_Delay(3);
 8001e44:	2003      	movs	r0, #3
 8001e46:	f000 f937 	bl	80020b8 <uSec_Delay>
	HAL_GPIO_WritePin(sonar->trig_port,sonar->trig_pin,SET);//keep high for 10uS
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	685b      	ldr	r3, [r3, #4]
 8001e4e:	4618      	mov	r0, r3
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	689b      	ldr	r3, [r3, #8]
 8001e54:	b29b      	uxth	r3, r3
 8001e56:	2201      	movs	r2, #1
 8001e58:	4619      	mov	r1, r3
 8001e5a:	f002 fec3 	bl	8004be4 <HAL_GPIO_WritePin>
	uSec_Delay(10); /* This is a 10uS delay*/
 8001e5e:	200a      	movs	r0, #10
 8001e60:	f000 f92a 	bl	80020b8 <uSec_Delay>
	HAL_GPIO_WritePin(sonar->trig_port,sonar->trig_pin,RESET);//Set to low again to start reading
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	685b      	ldr	r3, [r3, #4]
 8001e68:	4618      	mov	r0, r3
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	689b      	ldr	r3, [r3, #8]
 8001e6e:	b29b      	uxth	r3, r3
 8001e70:	2200      	movs	r2, #0
 8001e72:	4619      	mov	r1, r3
 8001e74:	f002 feb6 	bl	8004be4 <HAL_GPIO_WritePin>

	//2. ECHO signal pulse width
	//Start IC timer

		HAL_TIM_IC_Start_IT(&htim12, TIM_CHANNEL_2);
 8001e78:	2104      	movs	r1, #4
 8001e7a:	4829      	ldr	r0, [pc, #164]	; (8001f20 <checkSonarL+0xf8>)
 8001e7c:	f004 fa62 	bl	8006344 <HAL_TIM_IC_Start_IT>

		//Wait for IC flag
		uint32_t startTick = HAL_GetTick();
 8001e80:	f002 f9d4 	bl	800422c <HAL_GetTick>
 8001e84:	60f8      	str	r0, [r7, #12]
		do{
			if(icFlag) break;
 8001e86:	4b27      	ldr	r3, [pc, #156]	; (8001f24 <checkSonarL+0xfc>)
 8001e88:	781b      	ldrb	r3, [r3, #0]
 8001e8a:	2b00      	cmp	r3, #0
 8001e8c:	d108      	bne.n	8001ea0 <checkSonarL+0x78>
		}while((HAL_GetTick() - startTick) < 500);  // timeout of 500ms
 8001e8e:	f002 f9cd 	bl	800422c <HAL_GetTick>
 8001e92:	4602      	mov	r2, r0
 8001e94:	68fb      	ldr	r3, [r7, #12]
 8001e96:	1ad3      	subs	r3, r2, r3
 8001e98:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8001e9c:	d3f3      	bcc.n	8001e86 <checkSonarL+0x5e>
 8001e9e:	e000      	b.n	8001ea2 <checkSonarL+0x7a>
			if(icFlag) break;
 8001ea0:	bf00      	nop
		icFlag = 0;
 8001ea2:	4b20      	ldr	r3, [pc, #128]	; (8001f24 <checkSonarL+0xfc>)
 8001ea4:	2200      	movs	r2, #0
 8001ea6:	701a      	strb	r2, [r3, #0]
		HAL_TIM_IC_Stop_IT(&htim12, TIM_CHANNEL_2);
 8001ea8:	2104      	movs	r1, #4
 8001eaa:	481d      	ldr	r0, [pc, #116]	; (8001f20 <checkSonarL+0xf8>)
 8001eac:	f004 fab2 	bl	8006414 <HAL_TIM_IC_Stop_IT>

		//Calculate distance in cm
		if(edge2Time > edge1Time){
 8001eb0:	4b1d      	ldr	r3, [pc, #116]	; (8001f28 <checkSonarL+0x100>)
 8001eb2:	681a      	ldr	r2, [r3, #0]
 8001eb4:	4b1d      	ldr	r3, [pc, #116]	; (8001f2c <checkSonarL+0x104>)
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	429a      	cmp	r2, r3
 8001eba:	d914      	bls.n	8001ee6 <checkSonarL+0xbe>
			sonar->distance = ((edge2Time - edge1Time) + 0.0f)*speedOfSound;
 8001ebc:	4b1a      	ldr	r3, [pc, #104]	; (8001f28 <checkSonarL+0x100>)
 8001ebe:	681a      	ldr	r2, [r3, #0]
 8001ec0:	4b1a      	ldr	r3, [pc, #104]	; (8001f2c <checkSonarL+0x104>)
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	1ad3      	subs	r3, r2, r3
 8001ec6:	ee07 3a90 	vmov	s15, r3
 8001eca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001ece:	ed9f 7a18 	vldr	s14, [pc, #96]	; 8001f30 <checkSonarL+0x108>
 8001ed2:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001ed6:	ed9f 7a17 	vldr	s14, [pc, #92]	; 8001f34 <checkSonarL+0x10c>
 8001eda:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	edc3 7a07 	vstr	s15, [r3, #28]
 8001ee4:	e003      	b.n	8001eee <checkSonarL+0xc6>
		}else{
			sonar->distance = 0.0f;
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	f04f 0200 	mov.w	r2, #0
 8001eec:	61da      	str	r2, [r3, #28]
		}


	//Print to UART terminal for debugging
	printf("%s Sonar Distance (cm): %f\n\n\r",sonar->sonar_ch,sonar->distance);
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	681c      	ldr	r4, [r3, #0]
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	69db      	ldr	r3, [r3, #28]
 8001ef6:	4618      	mov	r0, r3
 8001ef8:	f7fe fb26 	bl	8000548 <__aeabi_f2d>
 8001efc:	4602      	mov	r2, r0
 8001efe:	460b      	mov	r3, r1
 8001f00:	4621      	mov	r1, r4
 8001f02:	480d      	ldr	r0, [pc, #52]	; (8001f38 <checkSonarL+0x110>)
 8001f04:	f007 fa62 	bl	80093cc <iprintf>
	printf("Edge Time 1: %ld \t Edge Time 2: %ld\n\n\r",edge1Time,edge2Time);
 8001f08:	4b08      	ldr	r3, [pc, #32]	; (8001f2c <checkSonarL+0x104>)
 8001f0a:	6819      	ldr	r1, [r3, #0]
 8001f0c:	4b06      	ldr	r3, [pc, #24]	; (8001f28 <checkSonarL+0x100>)
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	461a      	mov	r2, r3
 8001f12:	480a      	ldr	r0, [pc, #40]	; (8001f3c <checkSonarL+0x114>)
 8001f14:	f007 fa5a 	bl	80093cc <iprintf>

}
 8001f18:	bf00      	nop
 8001f1a:	3714      	adds	r7, #20
 8001f1c:	46bd      	mov	sp, r7
 8001f1e:	bd90      	pop	{r4, r7, pc}
 8001f20:	20000ad8 	.word	0x20000ad8
 8001f24:	2000032a 	.word	0x2000032a
 8001f28:	20000330 	.word	0x20000330
 8001f2c:	2000032c 	.word	0x2000032c
 8001f30:	00000000 	.word	0x00000000
 8001f34:	3c8cc17a 	.word	0x3c8cc17a
 8001f38:	0800be68 	.word	0x0800be68
 8001f3c:	0800be88 	.word	0x0800be88

08001f40 <checkSonarR>:

void checkSonarR(SONAR_STATUS *sonar){
 8001f40:	b590      	push	{r4, r7, lr}
 8001f42:	b085      	sub	sp, #20
 8001f44:	af00      	add	r7, sp, #0
 8001f46:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(sonar->trig_port,sonar->trig_pin,RESET); //Set the Trigger pin low
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	685b      	ldr	r3, [r3, #4]
 8001f4c:	4618      	mov	r0, r3
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	689b      	ldr	r3, [r3, #8]
 8001f52:	b29b      	uxth	r3, r3
 8001f54:	2200      	movs	r2, #0
 8001f56:	4619      	mov	r1, r3
 8001f58:	f002 fe44 	bl	8004be4 <HAL_GPIO_WritePin>
	uSec_Delay(3);
 8001f5c:	2003      	movs	r0, #3
 8001f5e:	f000 f8ab 	bl	80020b8 <uSec_Delay>
	HAL_GPIO_WritePin(sonar->trig_port,sonar->trig_pin,SET);//keep high for 10uS
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	685b      	ldr	r3, [r3, #4]
 8001f66:	4618      	mov	r0, r3
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	689b      	ldr	r3, [r3, #8]
 8001f6c:	b29b      	uxth	r3, r3
 8001f6e:	2201      	movs	r2, #1
 8001f70:	4619      	mov	r1, r3
 8001f72:	f002 fe37 	bl	8004be4 <HAL_GPIO_WritePin>
	uSec_Delay(10); /* This is a 10uS delay*/
 8001f76:	200a      	movs	r0, #10
 8001f78:	f000 f89e 	bl	80020b8 <uSec_Delay>
	HAL_GPIO_WritePin(sonar->trig_port,sonar->trig_pin,RESET);//Set to low again to start reading
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	685b      	ldr	r3, [r3, #4]
 8001f80:	4618      	mov	r0, r3
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	689b      	ldr	r3, [r3, #8]
 8001f86:	b29b      	uxth	r3, r3
 8001f88:	2200      	movs	r2, #0
 8001f8a:	4619      	mov	r1, r3
 8001f8c:	f002 fe2a 	bl	8004be4 <HAL_GPIO_WritePin>

	//2. ECHO signal pulse width
	//Start IC timer

		HAL_TIM_IC_Start_IT(&htim1, TIM_CHANNEL_2);
 8001f90:	2104      	movs	r1, #4
 8001f92:	4829      	ldr	r0, [pc, #164]	; (8002038 <checkSonarR+0xf8>)
 8001f94:	f004 f9d6 	bl	8006344 <HAL_TIM_IC_Start_IT>

		//Wait for IC flag
		uint32_t startTick = HAL_GetTick();
 8001f98:	f002 f948 	bl	800422c <HAL_GetTick>
 8001f9c:	60f8      	str	r0, [r7, #12]
		do{
			if(icFlag) break;
 8001f9e:	4b27      	ldr	r3, [pc, #156]	; (800203c <checkSonarR+0xfc>)
 8001fa0:	781b      	ldrb	r3, [r3, #0]
 8001fa2:	2b00      	cmp	r3, #0
 8001fa4:	d108      	bne.n	8001fb8 <checkSonarR+0x78>
		}while((HAL_GetTick() - startTick) < 500);  // timeout of 500ms
 8001fa6:	f002 f941 	bl	800422c <HAL_GetTick>
 8001faa:	4602      	mov	r2, r0
 8001fac:	68fb      	ldr	r3, [r7, #12]
 8001fae:	1ad3      	subs	r3, r2, r3
 8001fb0:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8001fb4:	d3f3      	bcc.n	8001f9e <checkSonarR+0x5e>
 8001fb6:	e000      	b.n	8001fba <checkSonarR+0x7a>
			if(icFlag) break;
 8001fb8:	bf00      	nop
		icFlag = 0;
 8001fba:	4b20      	ldr	r3, [pc, #128]	; (800203c <checkSonarR+0xfc>)
 8001fbc:	2200      	movs	r2, #0
 8001fbe:	701a      	strb	r2, [r3, #0]
		HAL_TIM_IC_Stop_IT(&htim1, TIM_CHANNEL_2);
 8001fc0:	2104      	movs	r1, #4
 8001fc2:	481d      	ldr	r0, [pc, #116]	; (8002038 <checkSonarR+0xf8>)
 8001fc4:	f004 fa26 	bl	8006414 <HAL_TIM_IC_Stop_IT>

		//Calculate distance in cm
		if(edge2Time > edge1Time){
 8001fc8:	4b1d      	ldr	r3, [pc, #116]	; (8002040 <checkSonarR+0x100>)
 8001fca:	681a      	ldr	r2, [r3, #0]
 8001fcc:	4b1d      	ldr	r3, [pc, #116]	; (8002044 <checkSonarR+0x104>)
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	429a      	cmp	r2, r3
 8001fd2:	d914      	bls.n	8001ffe <checkSonarR+0xbe>
			sonar->distance = ((edge2Time - edge1Time) + 0.0f)*speedOfSound;
 8001fd4:	4b1a      	ldr	r3, [pc, #104]	; (8002040 <checkSonarR+0x100>)
 8001fd6:	681a      	ldr	r2, [r3, #0]
 8001fd8:	4b1a      	ldr	r3, [pc, #104]	; (8002044 <checkSonarR+0x104>)
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	1ad3      	subs	r3, r2, r3
 8001fde:	ee07 3a90 	vmov	s15, r3
 8001fe2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001fe6:	ed9f 7a18 	vldr	s14, [pc, #96]	; 8002048 <checkSonarR+0x108>
 8001fea:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001fee:	ed9f 7a17 	vldr	s14, [pc, #92]	; 800204c <checkSonarR+0x10c>
 8001ff2:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	edc3 7a07 	vstr	s15, [r3, #28]
 8001ffc:	e003      	b.n	8002006 <checkSonarR+0xc6>
		}else{
			sonar->distance = 0.0f;
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	f04f 0200 	mov.w	r2, #0
 8002004:	61da      	str	r2, [r3, #28]
		/*if(0 < sonar->distance <= 5){
			printf("***** %s Sonar Obstacle ***** \n\n\r",sonar->sonar_ch);
			STOP();
		}*/
	//Print to UART terminal for debugging
	printf("%s Sonar Distance (cm): %f\n\n\r",sonar->sonar_ch,sonar->distance);
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	681c      	ldr	r4, [r3, #0]
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	69db      	ldr	r3, [r3, #28]
 800200e:	4618      	mov	r0, r3
 8002010:	f7fe fa9a 	bl	8000548 <__aeabi_f2d>
 8002014:	4602      	mov	r2, r0
 8002016:	460b      	mov	r3, r1
 8002018:	4621      	mov	r1, r4
 800201a:	480d      	ldr	r0, [pc, #52]	; (8002050 <checkSonarR+0x110>)
 800201c:	f007 f9d6 	bl	80093cc <iprintf>
	printf("Edge Time 1: %ld \t Edge Time 2: %ld\n\n\r",edge1Time,edge2Time);
 8002020:	4b08      	ldr	r3, [pc, #32]	; (8002044 <checkSonarR+0x104>)
 8002022:	6819      	ldr	r1, [r3, #0]
 8002024:	4b06      	ldr	r3, [pc, #24]	; (8002040 <checkSonarR+0x100>)
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	461a      	mov	r2, r3
 800202a:	480a      	ldr	r0, [pc, #40]	; (8002054 <checkSonarR+0x114>)
 800202c:	f007 f9ce 	bl	80093cc <iprintf>

}
 8002030:	bf00      	nop
 8002032:	3714      	adds	r7, #20
 8002034:	46bd      	mov	sp, r7
 8002036:	bd90      	pop	{r4, r7, pc}
 8002038:	20000a58 	.word	0x20000a58
 800203c:	2000032a 	.word	0x2000032a
 8002040:	20000330 	.word	0x20000330
 8002044:	2000032c 	.word	0x2000032c
 8002048:	00000000 	.word	0x00000000
 800204c:	3c8cc17a 	.word	0x3c8cc17a
 8002050:	0800be68 	.word	0x0800be68
 8002054:	0800be88 	.word	0x0800be88

08002058 <HAL_TIM_IC_CaptureCallback>:


void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002058:	b580      	push	{r7, lr}
 800205a:	b082      	sub	sp, #8
 800205c:	af00      	add	r7, sp, #0
 800205e:	6078      	str	r0, [r7, #4]

	//HAL_GPIO_TogglePin(Blinky_GPIO_Port, Blinky_Pin);

		if(captureIdx == 0) //First edge
 8002060:	4b11      	ldr	r3, [pc, #68]	; (80020a8 <HAL_TIM_IC_CaptureCallback+0x50>)
 8002062:	781b      	ldrb	r3, [r3, #0]
 8002064:	2b00      	cmp	r3, #0
 8002066:	d10a      	bne.n	800207e <HAL_TIM_IC_CaptureCallback+0x26>
		{
			edge1Time = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_2); //__HAL_TIM_GetCounter(&htim3);//
 8002068:	2104      	movs	r1, #4
 800206a:	6878      	ldr	r0, [r7, #4]
 800206c:	f004 fe8e 	bl	8006d8c <HAL_TIM_ReadCapturedValue>
 8002070:	4602      	mov	r2, r0
 8002072:	4b0e      	ldr	r3, [pc, #56]	; (80020ac <HAL_TIM_IC_CaptureCallback+0x54>)
 8002074:	601a      	str	r2, [r3, #0]

			captureIdx = 1;
 8002076:	4b0c      	ldr	r3, [pc, #48]	; (80020a8 <HAL_TIM_IC_CaptureCallback+0x50>)
 8002078:	2201      	movs	r2, #1
 800207a:	701a      	strb	r2, [r3, #0]
		{
			edge2Time = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_2);
			captureIdx = 0;
			icFlag = 1;
		}
}
 800207c:	e010      	b.n	80020a0 <HAL_TIM_IC_CaptureCallback+0x48>
		else if(captureIdx == 1) //Second edge
 800207e:	4b0a      	ldr	r3, [pc, #40]	; (80020a8 <HAL_TIM_IC_CaptureCallback+0x50>)
 8002080:	781b      	ldrb	r3, [r3, #0]
 8002082:	2b01      	cmp	r3, #1
 8002084:	d10c      	bne.n	80020a0 <HAL_TIM_IC_CaptureCallback+0x48>
			edge2Time = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_2);
 8002086:	2104      	movs	r1, #4
 8002088:	6878      	ldr	r0, [r7, #4]
 800208a:	f004 fe7f 	bl	8006d8c <HAL_TIM_ReadCapturedValue>
 800208e:	4602      	mov	r2, r0
 8002090:	4b07      	ldr	r3, [pc, #28]	; (80020b0 <HAL_TIM_IC_CaptureCallback+0x58>)
 8002092:	601a      	str	r2, [r3, #0]
			captureIdx = 0;
 8002094:	4b04      	ldr	r3, [pc, #16]	; (80020a8 <HAL_TIM_IC_CaptureCallback+0x50>)
 8002096:	2200      	movs	r2, #0
 8002098:	701a      	strb	r2, [r3, #0]
			icFlag = 1;
 800209a:	4b06      	ldr	r3, [pc, #24]	; (80020b4 <HAL_TIM_IC_CaptureCallback+0x5c>)
 800209c:	2201      	movs	r2, #1
 800209e:	701a      	strb	r2, [r3, #0]
}
 80020a0:	bf00      	nop
 80020a2:	3708      	adds	r7, #8
 80020a4:	46bd      	mov	sp, r7
 80020a6:	bd80      	pop	{r7, pc}
 80020a8:	2000032b 	.word	0x2000032b
 80020ac:	2000032c 	.word	0x2000032c
 80020b0:	20000330 	.word	0x20000330
 80020b4:	2000032a 	.word	0x2000032a

080020b8 <uSec_Delay>:


void uSec_Delay(uint32_t uSec)
{
 80020b8:	b480      	push	{r7}
 80020ba:	b083      	sub	sp, #12
 80020bc:	af00      	add	r7, sp, #0
 80020be:	6078      	str	r0, [r7, #4]
	if(uSec < 2)uSec = 2;
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	2b01      	cmp	r3, #1
 80020c4:	d801      	bhi.n	80020ca <uSec_Delay+0x12>
 80020c6:	2302      	movs	r3, #2
 80020c8:	607b      	str	r3, [r7, #4]
	uSTIM->ARR = uSec - 1; 	//Sets the value in the auto reload register
 80020ca:	4a13      	ldr	r2, [pc, #76]	; (8002118 <uSec_Delay+0x60>)
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	3b01      	subs	r3, #1
 80020d0:	62d3      	str	r3, [r2, #44]	; 0x2c
	uSTIM -> EGR = 1;		//Re-initialize the Timer
 80020d2:	4b11      	ldr	r3, [pc, #68]	; (8002118 <uSec_Delay+0x60>)
 80020d4:	2201      	movs	r2, #1
 80020d6:	615a      	str	r2, [r3, #20]
	uSTIM -> SR &= ~1;  	//Resets the flag
 80020d8:	4b0f      	ldr	r3, [pc, #60]	; (8002118 <uSec_Delay+0x60>)
 80020da:	691b      	ldr	r3, [r3, #16]
 80020dc:	4a0e      	ldr	r2, [pc, #56]	; (8002118 <uSec_Delay+0x60>)
 80020de:	f023 0301 	bic.w	r3, r3, #1
 80020e2:	6113      	str	r3, [r2, #16]
	uSTIM ->CR1 |= 1;		//Enables the counter
 80020e4:	4b0c      	ldr	r3, [pc, #48]	; (8002118 <uSec_Delay+0x60>)
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	4a0b      	ldr	r2, [pc, #44]	; (8002118 <uSec_Delay+0x60>)
 80020ea:	f043 0301 	orr.w	r3, r3, #1
 80020ee:	6013      	str	r3, [r2, #0]
	while((uSTIM -> SR&0x0001) != 1);
 80020f0:	bf00      	nop
 80020f2:	4b09      	ldr	r3, [pc, #36]	; (8002118 <uSec_Delay+0x60>)
 80020f4:	691b      	ldr	r3, [r3, #16]
 80020f6:	f003 0301 	and.w	r3, r3, #1
 80020fa:	2b01      	cmp	r3, #1
 80020fc:	d1f9      	bne.n	80020f2 <uSec_Delay+0x3a>
	uSTIM -> SR &= ~(0x0001);
 80020fe:	4b06      	ldr	r3, [pc, #24]	; (8002118 <uSec_Delay+0x60>)
 8002100:	691b      	ldr	r3, [r3, #16]
 8002102:	4a05      	ldr	r2, [pc, #20]	; (8002118 <uSec_Delay+0x60>)
 8002104:	f023 0301 	bic.w	r3, r3, #1
 8002108:	6113      	str	r3, [r2, #16]

}
 800210a:	bf00      	nop
 800210c:	370c      	adds	r7, #12
 800210e:	46bd      	mov	sp, r7
 8002110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002114:	4770      	bx	lr
 8002116:	bf00      	nop
 8002118:	40001400 	.word	0x40001400

0800211c <SSD1306_DrawBitmap>:

}


void SSD1306_DrawBitmap(int16_t x, int16_t y, const unsigned char* bitmap, int16_t w, int16_t h, uint16_t color)
{
 800211c:	b580      	push	{r7, lr}
 800211e:	b086      	sub	sp, #24
 8002120:	af00      	add	r7, sp, #0
 8002122:	60ba      	str	r2, [r7, #8]
 8002124:	461a      	mov	r2, r3
 8002126:	4603      	mov	r3, r0
 8002128:	81fb      	strh	r3, [r7, #14]
 800212a:	460b      	mov	r3, r1
 800212c:	81bb      	strh	r3, [r7, #12]
 800212e:	4613      	mov	r3, r2
 8002130:	80fb      	strh	r3, [r7, #6]

    int16_t byteWidth = (w + 7) / 8; // Bitmap scanline pad = whole byte
 8002132:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002136:	3307      	adds	r3, #7
 8002138:	2b00      	cmp	r3, #0
 800213a:	da00      	bge.n	800213e <SSD1306_DrawBitmap+0x22>
 800213c:	3307      	adds	r3, #7
 800213e:	10db      	asrs	r3, r3, #3
 8002140:	823b      	strh	r3, [r7, #16]
    uint8_t byte = 0;
 8002142:	2300      	movs	r3, #0
 8002144:	75fb      	strb	r3, [r7, #23]

    for(int16_t j=0; j<h; j++, y++)
 8002146:	2300      	movs	r3, #0
 8002148:	82bb      	strh	r3, [r7, #20]
 800214a:	e044      	b.n	80021d6 <SSD1306_DrawBitmap+0xba>
    {
        for(int16_t i=0; i<w; i++)
 800214c:	2300      	movs	r3, #0
 800214e:	827b      	strh	r3, [r7, #18]
 8002150:	e02f      	b.n	80021b2 <SSD1306_DrawBitmap+0x96>
        {
            if(i & 7)
 8002152:	8a7b      	ldrh	r3, [r7, #18]
 8002154:	f003 0307 	and.w	r3, r3, #7
 8002158:	2b00      	cmp	r3, #0
 800215a:	d003      	beq.n	8002164 <SSD1306_DrawBitmap+0x48>
            {
               byte <<= 1;
 800215c:	7dfb      	ldrb	r3, [r7, #23]
 800215e:	005b      	lsls	r3, r3, #1
 8002160:	75fb      	strb	r3, [r7, #23]
 8002162:	e012      	b.n	800218a <SSD1306_DrawBitmap+0x6e>
            }
            else
            {
               byte = (*(const unsigned char *)(&bitmap[j * byteWidth + i / 8]));
 8002164:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8002168:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 800216c:	fb02 f203 	mul.w	r2, r2, r3
 8002170:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8002174:	2b00      	cmp	r3, #0
 8002176:	da00      	bge.n	800217a <SSD1306_DrawBitmap+0x5e>
 8002178:	3307      	adds	r3, #7
 800217a:	10db      	asrs	r3, r3, #3
 800217c:	b21b      	sxth	r3, r3
 800217e:	4413      	add	r3, r2
 8002180:	461a      	mov	r2, r3
 8002182:	68bb      	ldr	r3, [r7, #8]
 8002184:	4413      	add	r3, r2
 8002186:	781b      	ldrb	r3, [r3, #0]
 8002188:	75fb      	strb	r3, [r7, #23]
            }
            if(byte & 0x80) SSD1306_DrawPixel(x+i, y, color);
 800218a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800218e:	2b00      	cmp	r3, #0
 8002190:	da09      	bge.n	80021a6 <SSD1306_DrawBitmap+0x8a>
 8002192:	89fa      	ldrh	r2, [r7, #14]
 8002194:	8a7b      	ldrh	r3, [r7, #18]
 8002196:	4413      	add	r3, r2
 8002198:	b29b      	uxth	r3, r3
 800219a:	89b9      	ldrh	r1, [r7, #12]
 800219c:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800219e:	b2d2      	uxtb	r2, r2
 80021a0:	4618      	mov	r0, r3
 80021a2:	f000 f92d 	bl	8002400 <SSD1306_DrawPixel>
        for(int16_t i=0; i<w; i++)
 80021a6:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80021aa:	b29b      	uxth	r3, r3
 80021ac:	3301      	adds	r3, #1
 80021ae:	b29b      	uxth	r3, r3
 80021b0:	827b      	strh	r3, [r7, #18]
 80021b2:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 80021b6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80021ba:	429a      	cmp	r2, r3
 80021bc:	dbc9      	blt.n	8002152 <SSD1306_DrawBitmap+0x36>
    for(int16_t j=0; j<h; j++, y++)
 80021be:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80021c2:	b29b      	uxth	r3, r3
 80021c4:	3301      	adds	r3, #1
 80021c6:	b29b      	uxth	r3, r3
 80021c8:	82bb      	strh	r3, [r7, #20]
 80021ca:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80021ce:	b29b      	uxth	r3, r3
 80021d0:	3301      	adds	r3, #1
 80021d2:	b29b      	uxth	r3, r3
 80021d4:	81bb      	strh	r3, [r7, #12]
 80021d6:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 80021da:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 80021de:	429a      	cmp	r2, r3
 80021e0:	dbb4      	blt.n	800214c <SSD1306_DrawBitmap+0x30>
        }
    }
}
 80021e2:	bf00      	nop
 80021e4:	3718      	adds	r7, #24
 80021e6:	46bd      	mov	sp, r7
 80021e8:	bd80      	pop	{r7, pc}
	...

080021ec <SSD1306_Init>:





uint8_t SSD1306_Init(void) {
 80021ec:	b580      	push	{r7, lr}
 80021ee:	b082      	sub	sp, #8
 80021f0:	af00      	add	r7, sp, #0

	/* Init I2C */
	ssd1306_I2C_Init();
 80021f2:	f000 fa29 	bl	8002648 <ssd1306_I2C_Init>
	
	/* Check if LCD connected to I2C */
	if (HAL_I2C_IsDeviceReady(&hi2c1, SSD1306_I2C_ADDR, 1, 20000) != HAL_OK) {
 80021f6:	f644 6320 	movw	r3, #20000	; 0x4e20
 80021fa:	2201      	movs	r2, #1
 80021fc:	2178      	movs	r1, #120	; 0x78
 80021fe:	485b      	ldr	r0, [pc, #364]	; (800236c <SSD1306_Init+0x180>)
 8002200:	f002 ff7e 	bl	8005100 <HAL_I2C_IsDeviceReady>
 8002204:	4603      	mov	r3, r0
 8002206:	2b00      	cmp	r3, #0
 8002208:	d001      	beq.n	800220e <SSD1306_Init+0x22>
		/* Return false */
		return 0;
 800220a:	2300      	movs	r3, #0
 800220c:	e0a9      	b.n	8002362 <SSD1306_Init+0x176>
	}
	
	/* A little delay */
	uint32_t p = 2500;
 800220e:	f640 13c4 	movw	r3, #2500	; 0x9c4
 8002212:	607b      	str	r3, [r7, #4]
	while(p>0)
 8002214:	e002      	b.n	800221c <SSD1306_Init+0x30>
		p--;
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	3b01      	subs	r3, #1
 800221a:	607b      	str	r3, [r7, #4]
	while(p>0)
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	2b00      	cmp	r3, #0
 8002220:	d1f9      	bne.n	8002216 <SSD1306_Init+0x2a>
	
	/* Init LCD */
	SSD1306_WRITECOMMAND(0xAE); //display off
 8002222:	22ae      	movs	r2, #174	; 0xae
 8002224:	2100      	movs	r1, #0
 8002226:	2078      	movs	r0, #120	; 0x78
 8002228:	f000 fa6a 	bl	8002700 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //Set Memory Addressing Mode   
 800222c:	2220      	movs	r2, #32
 800222e:	2100      	movs	r1, #0
 8002230:	2078      	movs	r0, #120	; 0x78
 8002232:	f000 fa65 	bl	8002700 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //00,Horizontal Addressing Mode;01,Vertical Addressing Mode;10,Page Addressing Mode (RESET);11,Invalid
 8002236:	2210      	movs	r2, #16
 8002238:	2100      	movs	r1, #0
 800223a:	2078      	movs	r0, #120	; 0x78
 800223c:	f000 fa60 	bl	8002700 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 8002240:	22b0      	movs	r2, #176	; 0xb0
 8002242:	2100      	movs	r1, #0
 8002244:	2078      	movs	r0, #120	; 0x78
 8002246:	f000 fa5b 	bl	8002700 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xC8); //Set COM Output Scan Direction
 800224a:	22c8      	movs	r2, #200	; 0xc8
 800224c:	2100      	movs	r1, #0
 800224e:	2078      	movs	r0, #120	; 0x78
 8002250:	f000 fa56 	bl	8002700 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //---set low column address
 8002254:	2200      	movs	r2, #0
 8002256:	2100      	movs	r1, #0
 8002258:	2078      	movs	r0, #120	; 0x78
 800225a:	f000 fa51 	bl	8002700 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //---set high column address
 800225e:	2210      	movs	r2, #16
 8002260:	2100      	movs	r1, #0
 8002262:	2078      	movs	r0, #120	; 0x78
 8002264:	f000 fa4c 	bl	8002700 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x40); //--set start line address
 8002268:	2240      	movs	r2, #64	; 0x40
 800226a:	2100      	movs	r1, #0
 800226c:	2078      	movs	r0, #120	; 0x78
 800226e:	f000 fa47 	bl	8002700 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x81); //--set contrast control register
 8002272:	2281      	movs	r2, #129	; 0x81
 8002274:	2100      	movs	r1, #0
 8002276:	2078      	movs	r0, #120	; 0x78
 8002278:	f000 fa42 	bl	8002700 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xFF);
 800227c:	22ff      	movs	r2, #255	; 0xff
 800227e:	2100      	movs	r1, #0
 8002280:	2078      	movs	r0, #120	; 0x78
 8002282:	f000 fa3d 	bl	8002700 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA1); //--set segment re-map 0 to 127
 8002286:	22a1      	movs	r2, #161	; 0xa1
 8002288:	2100      	movs	r1, #0
 800228a:	2078      	movs	r0, #120	; 0x78
 800228c:	f000 fa38 	bl	8002700 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA6); //--set normal display
 8002290:	22a6      	movs	r2, #166	; 0xa6
 8002292:	2100      	movs	r1, #0
 8002294:	2078      	movs	r0, #120	; 0x78
 8002296:	f000 fa33 	bl	8002700 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA8); //--set multiplex ratio(1 to 64)
 800229a:	22a8      	movs	r2, #168	; 0xa8
 800229c:	2100      	movs	r1, #0
 800229e:	2078      	movs	r0, #120	; 0x78
 80022a0:	f000 fa2e 	bl	8002700 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x3F); //
 80022a4:	223f      	movs	r2, #63	; 0x3f
 80022a6:	2100      	movs	r1, #0
 80022a8:	2078      	movs	r0, #120	; 0x78
 80022aa:	f000 fa29 	bl	8002700 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 80022ae:	22a4      	movs	r2, #164	; 0xa4
 80022b0:	2100      	movs	r1, #0
 80022b2:	2078      	movs	r0, #120	; 0x78
 80022b4:	f000 fa24 	bl	8002700 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD3); //-set display offset
 80022b8:	22d3      	movs	r2, #211	; 0xd3
 80022ba:	2100      	movs	r1, #0
 80022bc:	2078      	movs	r0, #120	; 0x78
 80022be:	f000 fa1f 	bl	8002700 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //-not offset
 80022c2:	2200      	movs	r2, #0
 80022c4:	2100      	movs	r1, #0
 80022c6:	2078      	movs	r0, #120	; 0x78
 80022c8:	f000 fa1a 	bl	8002700 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD5); //--set display clock divide ratio/oscillator frequency
 80022cc:	22d5      	movs	r2, #213	; 0xd5
 80022ce:	2100      	movs	r1, #0
 80022d0:	2078      	movs	r0, #120	; 0x78
 80022d2:	f000 fa15 	bl	8002700 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xF0); //--set divide ratio
 80022d6:	22f0      	movs	r2, #240	; 0xf0
 80022d8:	2100      	movs	r1, #0
 80022da:	2078      	movs	r0, #120	; 0x78
 80022dc:	f000 fa10 	bl	8002700 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD9); //--set pre-charge period
 80022e0:	22d9      	movs	r2, #217	; 0xd9
 80022e2:	2100      	movs	r1, #0
 80022e4:	2078      	movs	r0, #120	; 0x78
 80022e6:	f000 fa0b 	bl	8002700 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x22); //
 80022ea:	2222      	movs	r2, #34	; 0x22
 80022ec:	2100      	movs	r1, #0
 80022ee:	2078      	movs	r0, #120	; 0x78
 80022f0:	f000 fa06 	bl	8002700 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDA); //--set com pins hardware configuration
 80022f4:	22da      	movs	r2, #218	; 0xda
 80022f6:	2100      	movs	r1, #0
 80022f8:	2078      	movs	r0, #120	; 0x78
 80022fa:	f000 fa01 	bl	8002700 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x12);
 80022fe:	2212      	movs	r2, #18
 8002300:	2100      	movs	r1, #0
 8002302:	2078      	movs	r0, #120	; 0x78
 8002304:	f000 f9fc 	bl	8002700 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDB); //--set vcomh
 8002308:	22db      	movs	r2, #219	; 0xdb
 800230a:	2100      	movs	r1, #0
 800230c:	2078      	movs	r0, #120	; 0x78
 800230e:	f000 f9f7 	bl	8002700 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //0x20,0.77xVcc
 8002312:	2220      	movs	r2, #32
 8002314:	2100      	movs	r1, #0
 8002316:	2078      	movs	r0, #120	; 0x78
 8002318:	f000 f9f2 	bl	8002700 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x8D); //--set DC-DC enable
 800231c:	228d      	movs	r2, #141	; 0x8d
 800231e:	2100      	movs	r1, #0
 8002320:	2078      	movs	r0, #120	; 0x78
 8002322:	f000 f9ed 	bl	8002700 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x14); //
 8002326:	2214      	movs	r2, #20
 8002328:	2100      	movs	r1, #0
 800232a:	2078      	movs	r0, #120	; 0x78
 800232c:	f000 f9e8 	bl	8002700 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xAF); //--turn on SSD1306 panel
 8002330:	22af      	movs	r2, #175	; 0xaf
 8002332:	2100      	movs	r1, #0
 8002334:	2078      	movs	r0, #120	; 0x78
 8002336:	f000 f9e3 	bl	8002700 <ssd1306_I2C_Write>
	

	SSD1306_WRITECOMMAND(SSD1306_DEACTIVATE_SCROLL);
 800233a:	222e      	movs	r2, #46	; 0x2e
 800233c:	2100      	movs	r1, #0
 800233e:	2078      	movs	r0, #120	; 0x78
 8002340:	f000 f9de 	bl	8002700 <ssd1306_I2C_Write>

	/* Clear screen */
	SSD1306_Fill(SSD1306_COLOR_BLACK);
 8002344:	2000      	movs	r0, #0
 8002346:	f000 f843 	bl	80023d0 <SSD1306_Fill>
	
	/* Update screen */
	SSD1306_UpdateScreen();
 800234a:	f000 f813 	bl	8002374 <SSD1306_UpdateScreen>
	
	/* Set default values */
	SSD1306.CurrentX = 0;
 800234e:	4b08      	ldr	r3, [pc, #32]	; (8002370 <SSD1306_Init+0x184>)
 8002350:	2200      	movs	r2, #0
 8002352:	801a      	strh	r2, [r3, #0]
	SSD1306.CurrentY = 0;
 8002354:	4b06      	ldr	r3, [pc, #24]	; (8002370 <SSD1306_Init+0x184>)
 8002356:	2200      	movs	r2, #0
 8002358:	805a      	strh	r2, [r3, #2]
	
	/* Initialized OK */
	SSD1306.Initialized = 1;
 800235a:	4b05      	ldr	r3, [pc, #20]	; (8002370 <SSD1306_Init+0x184>)
 800235c:	2201      	movs	r2, #1
 800235e:	715a      	strb	r2, [r3, #5]
	
	/* Return OK */
	return 1;
 8002360:	2301      	movs	r3, #1
}
 8002362:	4618      	mov	r0, r3
 8002364:	3708      	adds	r7, #8
 8002366:	46bd      	mov	sp, r7
 8002368:	bd80      	pop	{r7, pc}
 800236a:	bf00      	nop
 800236c:	2000082c 	.word	0x2000082c
 8002370:	20000734 	.word	0x20000734

08002374 <SSD1306_UpdateScreen>:

void SSD1306_UpdateScreen(void) {
 8002374:	b580      	push	{r7, lr}
 8002376:	b082      	sub	sp, #8
 8002378:	af00      	add	r7, sp, #0
	uint8_t m;
	
	for (m = 0; m < 8; m++) {
 800237a:	2300      	movs	r3, #0
 800237c:	71fb      	strb	r3, [r7, #7]
 800237e:	e01d      	b.n	80023bc <SSD1306_UpdateScreen+0x48>
		SSD1306_WRITECOMMAND(0xB0 + m);
 8002380:	79fb      	ldrb	r3, [r7, #7]
 8002382:	3b50      	subs	r3, #80	; 0x50
 8002384:	b2db      	uxtb	r3, r3
 8002386:	461a      	mov	r2, r3
 8002388:	2100      	movs	r1, #0
 800238a:	2078      	movs	r0, #120	; 0x78
 800238c:	f000 f9b8 	bl	8002700 <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x00);
 8002390:	2200      	movs	r2, #0
 8002392:	2100      	movs	r1, #0
 8002394:	2078      	movs	r0, #120	; 0x78
 8002396:	f000 f9b3 	bl	8002700 <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x10);
 800239a:	2210      	movs	r2, #16
 800239c:	2100      	movs	r1, #0
 800239e:	2078      	movs	r0, #120	; 0x78
 80023a0:	f000 f9ae 	bl	8002700 <ssd1306_I2C_Write>
		
		/* Write multi data */
		ssd1306_I2C_WriteMulti(SSD1306_I2C_ADDR, 0x40, &SSD1306_Buffer[SSD1306_WIDTH * m], SSD1306_WIDTH);
 80023a4:	79fb      	ldrb	r3, [r7, #7]
 80023a6:	01db      	lsls	r3, r3, #7
 80023a8:	4a08      	ldr	r2, [pc, #32]	; (80023cc <SSD1306_UpdateScreen+0x58>)
 80023aa:	441a      	add	r2, r3
 80023ac:	2380      	movs	r3, #128	; 0x80
 80023ae:	2140      	movs	r1, #64	; 0x40
 80023b0:	2078      	movs	r0, #120	; 0x78
 80023b2:	f000 f95d 	bl	8002670 <ssd1306_I2C_WriteMulti>
	for (m = 0; m < 8; m++) {
 80023b6:	79fb      	ldrb	r3, [r7, #7]
 80023b8:	3301      	adds	r3, #1
 80023ba:	71fb      	strb	r3, [r7, #7]
 80023bc:	79fb      	ldrb	r3, [r7, #7]
 80023be:	2b07      	cmp	r3, #7
 80023c0:	d9de      	bls.n	8002380 <SSD1306_UpdateScreen+0xc>
	}
}
 80023c2:	bf00      	nop
 80023c4:	3708      	adds	r7, #8
 80023c6:	46bd      	mov	sp, r7
 80023c8:	bd80      	pop	{r7, pc}
 80023ca:	bf00      	nop
 80023cc:	20000334 	.word	0x20000334

080023d0 <SSD1306_Fill>:
	for (i = 0; i < sizeof(SSD1306_Buffer); i++) {
		SSD1306_Buffer[i] = ~SSD1306_Buffer[i];
	}
}

void SSD1306_Fill(SSD1306_COLOR_t color) {
 80023d0:	b580      	push	{r7, lr}
 80023d2:	b082      	sub	sp, #8
 80023d4:	af00      	add	r7, sp, #0
 80023d6:	4603      	mov	r3, r0
 80023d8:	71fb      	strb	r3, [r7, #7]
	/* Set memory */
	memset(SSD1306_Buffer, (color == SSD1306_COLOR_BLACK) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 80023da:	79fb      	ldrb	r3, [r7, #7]
 80023dc:	2b00      	cmp	r3, #0
 80023de:	d101      	bne.n	80023e4 <SSD1306_Fill+0x14>
 80023e0:	2300      	movs	r3, #0
 80023e2:	e000      	b.n	80023e6 <SSD1306_Fill+0x16>
 80023e4:	23ff      	movs	r3, #255	; 0xff
 80023e6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80023ea:	4619      	mov	r1, r3
 80023ec:	4803      	ldr	r0, [pc, #12]	; (80023fc <SSD1306_Fill+0x2c>)
 80023ee:	f006 fb2f 	bl	8008a50 <memset>
}
 80023f2:	bf00      	nop
 80023f4:	3708      	adds	r7, #8
 80023f6:	46bd      	mov	sp, r7
 80023f8:	bd80      	pop	{r7, pc}
 80023fa:	bf00      	nop
 80023fc:	20000334 	.word	0x20000334

08002400 <SSD1306_DrawPixel>:

void SSD1306_DrawPixel(uint16_t x, uint16_t y, SSD1306_COLOR_t color) {
 8002400:	b480      	push	{r7}
 8002402:	b083      	sub	sp, #12
 8002404:	af00      	add	r7, sp, #0
 8002406:	4603      	mov	r3, r0
 8002408:	80fb      	strh	r3, [r7, #6]
 800240a:	460b      	mov	r3, r1
 800240c:	80bb      	strh	r3, [r7, #4]
 800240e:	4613      	mov	r3, r2
 8002410:	70fb      	strb	r3, [r7, #3]
	if (
 8002412:	88fb      	ldrh	r3, [r7, #6]
 8002414:	2b7f      	cmp	r3, #127	; 0x7f
 8002416:	d848      	bhi.n	80024aa <SSD1306_DrawPixel+0xaa>
		x >= SSD1306_WIDTH ||
 8002418:	88bb      	ldrh	r3, [r7, #4]
 800241a:	2b3f      	cmp	r3, #63	; 0x3f
 800241c:	d845      	bhi.n	80024aa <SSD1306_DrawPixel+0xaa>
		/* Error */
		return;
	}
	
	/* Check if pixels are inverted */
	if (SSD1306.Inverted) {
 800241e:	4b26      	ldr	r3, [pc, #152]	; (80024b8 <SSD1306_DrawPixel+0xb8>)
 8002420:	791b      	ldrb	r3, [r3, #4]
 8002422:	2b00      	cmp	r3, #0
 8002424:	d006      	beq.n	8002434 <SSD1306_DrawPixel+0x34>
		color = (SSD1306_COLOR_t)!color;
 8002426:	78fb      	ldrb	r3, [r7, #3]
 8002428:	2b00      	cmp	r3, #0
 800242a:	bf0c      	ite	eq
 800242c:	2301      	moveq	r3, #1
 800242e:	2300      	movne	r3, #0
 8002430:	b2db      	uxtb	r3, r3
 8002432:	70fb      	strb	r3, [r7, #3]
	}
	
	/* Set color */
	if (color == SSD1306_COLOR_WHITE) {
 8002434:	78fb      	ldrb	r3, [r7, #3]
 8002436:	2b01      	cmp	r3, #1
 8002438:	d11a      	bne.n	8002470 <SSD1306_DrawPixel+0x70>
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 800243a:	88fa      	ldrh	r2, [r7, #6]
 800243c:	88bb      	ldrh	r3, [r7, #4]
 800243e:	08db      	lsrs	r3, r3, #3
 8002440:	b298      	uxth	r0, r3
 8002442:	4603      	mov	r3, r0
 8002444:	01db      	lsls	r3, r3, #7
 8002446:	4413      	add	r3, r2
 8002448:	4a1c      	ldr	r2, [pc, #112]	; (80024bc <SSD1306_DrawPixel+0xbc>)
 800244a:	5cd3      	ldrb	r3, [r2, r3]
 800244c:	b25a      	sxtb	r2, r3
 800244e:	88bb      	ldrh	r3, [r7, #4]
 8002450:	f003 0307 	and.w	r3, r3, #7
 8002454:	2101      	movs	r1, #1
 8002456:	fa01 f303 	lsl.w	r3, r1, r3
 800245a:	b25b      	sxtb	r3, r3
 800245c:	4313      	orrs	r3, r2
 800245e:	b259      	sxtb	r1, r3
 8002460:	88fa      	ldrh	r2, [r7, #6]
 8002462:	4603      	mov	r3, r0
 8002464:	01db      	lsls	r3, r3, #7
 8002466:	4413      	add	r3, r2
 8002468:	b2c9      	uxtb	r1, r1
 800246a:	4a14      	ldr	r2, [pc, #80]	; (80024bc <SSD1306_DrawPixel+0xbc>)
 800246c:	54d1      	strb	r1, [r2, r3]
 800246e:	e01d      	b.n	80024ac <SSD1306_DrawPixel+0xac>
	} else {
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8002470:	88fa      	ldrh	r2, [r7, #6]
 8002472:	88bb      	ldrh	r3, [r7, #4]
 8002474:	08db      	lsrs	r3, r3, #3
 8002476:	b298      	uxth	r0, r3
 8002478:	4603      	mov	r3, r0
 800247a:	01db      	lsls	r3, r3, #7
 800247c:	4413      	add	r3, r2
 800247e:	4a0f      	ldr	r2, [pc, #60]	; (80024bc <SSD1306_DrawPixel+0xbc>)
 8002480:	5cd3      	ldrb	r3, [r2, r3]
 8002482:	b25a      	sxtb	r2, r3
 8002484:	88bb      	ldrh	r3, [r7, #4]
 8002486:	f003 0307 	and.w	r3, r3, #7
 800248a:	2101      	movs	r1, #1
 800248c:	fa01 f303 	lsl.w	r3, r1, r3
 8002490:	b25b      	sxtb	r3, r3
 8002492:	43db      	mvns	r3, r3
 8002494:	b25b      	sxtb	r3, r3
 8002496:	4013      	ands	r3, r2
 8002498:	b259      	sxtb	r1, r3
 800249a:	88fa      	ldrh	r2, [r7, #6]
 800249c:	4603      	mov	r3, r0
 800249e:	01db      	lsls	r3, r3, #7
 80024a0:	4413      	add	r3, r2
 80024a2:	b2c9      	uxtb	r1, r1
 80024a4:	4a05      	ldr	r2, [pc, #20]	; (80024bc <SSD1306_DrawPixel+0xbc>)
 80024a6:	54d1      	strb	r1, [r2, r3]
 80024a8:	e000      	b.n	80024ac <SSD1306_DrawPixel+0xac>
		return;
 80024aa:	bf00      	nop
	}
}
 80024ac:	370c      	adds	r7, #12
 80024ae:	46bd      	mov	sp, r7
 80024b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024b4:	4770      	bx	lr
 80024b6:	bf00      	nop
 80024b8:	20000734 	.word	0x20000734
 80024bc:	20000334 	.word	0x20000334

080024c0 <SSD1306_GotoXY>:

void SSD1306_GotoXY(uint16_t x, uint16_t y) {
 80024c0:	b480      	push	{r7}
 80024c2:	b083      	sub	sp, #12
 80024c4:	af00      	add	r7, sp, #0
 80024c6:	4603      	mov	r3, r0
 80024c8:	460a      	mov	r2, r1
 80024ca:	80fb      	strh	r3, [r7, #6]
 80024cc:	4613      	mov	r3, r2
 80024ce:	80bb      	strh	r3, [r7, #4]
	/* Set write pointers */
	SSD1306.CurrentX = x;
 80024d0:	4a05      	ldr	r2, [pc, #20]	; (80024e8 <SSD1306_GotoXY+0x28>)
 80024d2:	88fb      	ldrh	r3, [r7, #6]
 80024d4:	8013      	strh	r3, [r2, #0]
	SSD1306.CurrentY = y;
 80024d6:	4a04      	ldr	r2, [pc, #16]	; (80024e8 <SSD1306_GotoXY+0x28>)
 80024d8:	88bb      	ldrh	r3, [r7, #4]
 80024da:	8053      	strh	r3, [r2, #2]
}
 80024dc:	bf00      	nop
 80024de:	370c      	adds	r7, #12
 80024e0:	46bd      	mov	sp, r7
 80024e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024e6:	4770      	bx	lr
 80024e8:	20000734 	.word	0x20000734

080024ec <SSD1306_Putc>:

char SSD1306_Putc(char ch, FontDef_t* Font, SSD1306_COLOR_t color) {
 80024ec:	b580      	push	{r7, lr}
 80024ee:	b086      	sub	sp, #24
 80024f0:	af00      	add	r7, sp, #0
 80024f2:	4603      	mov	r3, r0
 80024f4:	6039      	str	r1, [r7, #0]
 80024f6:	71fb      	strb	r3, [r7, #7]
 80024f8:	4613      	mov	r3, r2
 80024fa:	71bb      	strb	r3, [r7, #6]
	uint32_t i, b, j;
	
	/* Check available space in LCD */
	if (
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 80024fc:	4b3a      	ldr	r3, [pc, #232]	; (80025e8 <SSD1306_Putc+0xfc>)
 80024fe:	881b      	ldrh	r3, [r3, #0]
 8002500:	461a      	mov	r2, r3
 8002502:	683b      	ldr	r3, [r7, #0]
 8002504:	781b      	ldrb	r3, [r3, #0]
 8002506:	4413      	add	r3, r2
	if (
 8002508:	2b7f      	cmp	r3, #127	; 0x7f
 800250a:	dc07      	bgt.n	800251c <SSD1306_Putc+0x30>
		SSD1306_HEIGHT <= (SSD1306.CurrentY + Font->FontHeight)
 800250c:	4b36      	ldr	r3, [pc, #216]	; (80025e8 <SSD1306_Putc+0xfc>)
 800250e:	885b      	ldrh	r3, [r3, #2]
 8002510:	461a      	mov	r2, r3
 8002512:	683b      	ldr	r3, [r7, #0]
 8002514:	785b      	ldrb	r3, [r3, #1]
 8002516:	4413      	add	r3, r2
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 8002518:	2b3f      	cmp	r3, #63	; 0x3f
 800251a:	dd01      	ble.n	8002520 <SSD1306_Putc+0x34>
	) {
		/* Error */
		return 0;
 800251c:	2300      	movs	r3, #0
 800251e:	e05e      	b.n	80025de <SSD1306_Putc+0xf2>
	}
	
	/* Go through font */
	for (i = 0; i < Font->FontHeight; i++) {
 8002520:	2300      	movs	r3, #0
 8002522:	617b      	str	r3, [r7, #20]
 8002524:	e04b      	b.n	80025be <SSD1306_Putc+0xd2>
		b = Font->data[(ch - 32) * Font->FontHeight + i];
 8002526:	683b      	ldr	r3, [r7, #0]
 8002528:	685a      	ldr	r2, [r3, #4]
 800252a:	79fb      	ldrb	r3, [r7, #7]
 800252c:	3b20      	subs	r3, #32
 800252e:	6839      	ldr	r1, [r7, #0]
 8002530:	7849      	ldrb	r1, [r1, #1]
 8002532:	fb01 f303 	mul.w	r3, r1, r3
 8002536:	4619      	mov	r1, r3
 8002538:	697b      	ldr	r3, [r7, #20]
 800253a:	440b      	add	r3, r1
 800253c:	005b      	lsls	r3, r3, #1
 800253e:	4413      	add	r3, r2
 8002540:	881b      	ldrh	r3, [r3, #0]
 8002542:	60fb      	str	r3, [r7, #12]
		for (j = 0; j < Font->FontWidth; j++) {
 8002544:	2300      	movs	r3, #0
 8002546:	613b      	str	r3, [r7, #16]
 8002548:	e030      	b.n	80025ac <SSD1306_Putc+0xc0>
			if ((b << j) & 0x8000) {
 800254a:	68fa      	ldr	r2, [r7, #12]
 800254c:	693b      	ldr	r3, [r7, #16]
 800254e:	fa02 f303 	lsl.w	r3, r2, r3
 8002552:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002556:	2b00      	cmp	r3, #0
 8002558:	d010      	beq.n	800257c <SSD1306_Putc+0x90>
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t) color);
 800255a:	4b23      	ldr	r3, [pc, #140]	; (80025e8 <SSD1306_Putc+0xfc>)
 800255c:	881a      	ldrh	r2, [r3, #0]
 800255e:	693b      	ldr	r3, [r7, #16]
 8002560:	b29b      	uxth	r3, r3
 8002562:	4413      	add	r3, r2
 8002564:	b298      	uxth	r0, r3
 8002566:	4b20      	ldr	r3, [pc, #128]	; (80025e8 <SSD1306_Putc+0xfc>)
 8002568:	885a      	ldrh	r2, [r3, #2]
 800256a:	697b      	ldr	r3, [r7, #20]
 800256c:	b29b      	uxth	r3, r3
 800256e:	4413      	add	r3, r2
 8002570:	b29b      	uxth	r3, r3
 8002572:	79ba      	ldrb	r2, [r7, #6]
 8002574:	4619      	mov	r1, r3
 8002576:	f7ff ff43 	bl	8002400 <SSD1306_DrawPixel>
 800257a:	e014      	b.n	80025a6 <SSD1306_Putc+0xba>
			} else {
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t)!color);
 800257c:	4b1a      	ldr	r3, [pc, #104]	; (80025e8 <SSD1306_Putc+0xfc>)
 800257e:	881a      	ldrh	r2, [r3, #0]
 8002580:	693b      	ldr	r3, [r7, #16]
 8002582:	b29b      	uxth	r3, r3
 8002584:	4413      	add	r3, r2
 8002586:	b298      	uxth	r0, r3
 8002588:	4b17      	ldr	r3, [pc, #92]	; (80025e8 <SSD1306_Putc+0xfc>)
 800258a:	885a      	ldrh	r2, [r3, #2]
 800258c:	697b      	ldr	r3, [r7, #20]
 800258e:	b29b      	uxth	r3, r3
 8002590:	4413      	add	r3, r2
 8002592:	b299      	uxth	r1, r3
 8002594:	79bb      	ldrb	r3, [r7, #6]
 8002596:	2b00      	cmp	r3, #0
 8002598:	bf0c      	ite	eq
 800259a:	2301      	moveq	r3, #1
 800259c:	2300      	movne	r3, #0
 800259e:	b2db      	uxtb	r3, r3
 80025a0:	461a      	mov	r2, r3
 80025a2:	f7ff ff2d 	bl	8002400 <SSD1306_DrawPixel>
		for (j = 0; j < Font->FontWidth; j++) {
 80025a6:	693b      	ldr	r3, [r7, #16]
 80025a8:	3301      	adds	r3, #1
 80025aa:	613b      	str	r3, [r7, #16]
 80025ac:	683b      	ldr	r3, [r7, #0]
 80025ae:	781b      	ldrb	r3, [r3, #0]
 80025b0:	461a      	mov	r2, r3
 80025b2:	693b      	ldr	r3, [r7, #16]
 80025b4:	4293      	cmp	r3, r2
 80025b6:	d3c8      	bcc.n	800254a <SSD1306_Putc+0x5e>
	for (i = 0; i < Font->FontHeight; i++) {
 80025b8:	697b      	ldr	r3, [r7, #20]
 80025ba:	3301      	adds	r3, #1
 80025bc:	617b      	str	r3, [r7, #20]
 80025be:	683b      	ldr	r3, [r7, #0]
 80025c0:	785b      	ldrb	r3, [r3, #1]
 80025c2:	461a      	mov	r2, r3
 80025c4:	697b      	ldr	r3, [r7, #20]
 80025c6:	4293      	cmp	r3, r2
 80025c8:	d3ad      	bcc.n	8002526 <SSD1306_Putc+0x3a>
			}
		}
	}
	
	/* Increase pointer */
	SSD1306.CurrentX += Font->FontWidth;
 80025ca:	4b07      	ldr	r3, [pc, #28]	; (80025e8 <SSD1306_Putc+0xfc>)
 80025cc:	881a      	ldrh	r2, [r3, #0]
 80025ce:	683b      	ldr	r3, [r7, #0]
 80025d0:	781b      	ldrb	r3, [r3, #0]
 80025d2:	b29b      	uxth	r3, r3
 80025d4:	4413      	add	r3, r2
 80025d6:	b29a      	uxth	r2, r3
 80025d8:	4b03      	ldr	r3, [pc, #12]	; (80025e8 <SSD1306_Putc+0xfc>)
 80025da:	801a      	strh	r2, [r3, #0]
	
	/* Return character written */
	return ch;
 80025dc:	79fb      	ldrb	r3, [r7, #7]
}
 80025de:	4618      	mov	r0, r3
 80025e0:	3718      	adds	r7, #24
 80025e2:	46bd      	mov	sp, r7
 80025e4:	bd80      	pop	{r7, pc}
 80025e6:	bf00      	nop
 80025e8:	20000734 	.word	0x20000734

080025ec <SSD1306_Puts>:

char SSD1306_Puts(char* str, FontDef_t* Font, SSD1306_COLOR_t color) {
 80025ec:	b580      	push	{r7, lr}
 80025ee:	b084      	sub	sp, #16
 80025f0:	af00      	add	r7, sp, #0
 80025f2:	60f8      	str	r0, [r7, #12]
 80025f4:	60b9      	str	r1, [r7, #8]
 80025f6:	4613      	mov	r3, r2
 80025f8:	71fb      	strb	r3, [r7, #7]
	/* Write characters */
	while (*str) {
 80025fa:	e012      	b.n	8002622 <SSD1306_Puts+0x36>
		/* Write character by character */
		if (SSD1306_Putc(*str, Font, color) != *str) {
 80025fc:	68fb      	ldr	r3, [r7, #12]
 80025fe:	781b      	ldrb	r3, [r3, #0]
 8002600:	79fa      	ldrb	r2, [r7, #7]
 8002602:	68b9      	ldr	r1, [r7, #8]
 8002604:	4618      	mov	r0, r3
 8002606:	f7ff ff71 	bl	80024ec <SSD1306_Putc>
 800260a:	4603      	mov	r3, r0
 800260c:	461a      	mov	r2, r3
 800260e:	68fb      	ldr	r3, [r7, #12]
 8002610:	781b      	ldrb	r3, [r3, #0]
 8002612:	429a      	cmp	r2, r3
 8002614:	d002      	beq.n	800261c <SSD1306_Puts+0x30>
			/* Return error */
			return *str;
 8002616:	68fb      	ldr	r3, [r7, #12]
 8002618:	781b      	ldrb	r3, [r3, #0]
 800261a:	e008      	b.n	800262e <SSD1306_Puts+0x42>
		}
		
		/* Increase string pointer */
		str++;
 800261c:	68fb      	ldr	r3, [r7, #12]
 800261e:	3301      	adds	r3, #1
 8002620:	60fb      	str	r3, [r7, #12]
	while (*str) {
 8002622:	68fb      	ldr	r3, [r7, #12]
 8002624:	781b      	ldrb	r3, [r3, #0]
 8002626:	2b00      	cmp	r3, #0
 8002628:	d1e8      	bne.n	80025fc <SSD1306_Puts+0x10>
	}
	
	/* Everything OK, zero should be returned */
	return *str;
 800262a:	68fb      	ldr	r3, [r7, #12]
 800262c:	781b      	ldrb	r3, [r3, #0]
}
 800262e:	4618      	mov	r0, r3
 8002630:	3710      	adds	r7, #16
 8002632:	46bd      	mov	sp, r7
 8002634:	bd80      	pop	{r7, pc}

08002636 <SSD1306_Clear>:
}
 


void SSD1306_Clear (void)
{
 8002636:	b580      	push	{r7, lr}
 8002638:	af00      	add	r7, sp, #0
	SSD1306_Fill (0);
 800263a:	2000      	movs	r0, #0
 800263c:	f7ff fec8 	bl	80023d0 <SSD1306_Fill>
    SSD1306_UpdateScreen();
 8002640:	f7ff fe98 	bl	8002374 <SSD1306_UpdateScreen>
}
 8002644:	bf00      	nop
 8002646:	bd80      	pop	{r7, pc}

08002648 <ssd1306_I2C_Init>:
//  _| |_ / /_| |____ 
// |_____|____|\_____|
//
/////////////////////////////////////////////////////////////////////////////////////////////////////////

void ssd1306_I2C_Init() {
 8002648:	b480      	push	{r7}
 800264a:	b083      	sub	sp, #12
 800264c:	af00      	add	r7, sp, #0
	//MX_I2C1_Init();
	uint32_t p = 250000;
 800264e:	4b07      	ldr	r3, [pc, #28]	; (800266c <ssd1306_I2C_Init+0x24>)
 8002650:	607b      	str	r3, [r7, #4]
	while(p>0)
 8002652:	e002      	b.n	800265a <ssd1306_I2C_Init+0x12>
		p--;
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	3b01      	subs	r3, #1
 8002658:	607b      	str	r3, [r7, #4]
	while(p>0)
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	2b00      	cmp	r3, #0
 800265e:	d1f9      	bne.n	8002654 <ssd1306_I2C_Init+0xc>
	//HAL_I2C_DeInit(&hi2c1);
	//p = 250000;
	//while(p>0)
	//	p--;
	//MX_I2C1_Init();
}
 8002660:	bf00      	nop
 8002662:	370c      	adds	r7, #12
 8002664:	46bd      	mov	sp, r7
 8002666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800266a:	4770      	bx	lr
 800266c:	0003d090 	.word	0x0003d090

08002670 <ssd1306_I2C_WriteMulti>:

void ssd1306_I2C_WriteMulti(uint8_t address, uint8_t reg, uint8_t* data, uint16_t count) {
 8002670:	b590      	push	{r4, r7, lr}
 8002672:	b0c7      	sub	sp, #284	; 0x11c
 8002674:	af02      	add	r7, sp, #8
 8002676:	4604      	mov	r4, r0
 8002678:	4608      	mov	r0, r1
 800267a:	4639      	mov	r1, r7
 800267c:	600a      	str	r2, [r1, #0]
 800267e:	4619      	mov	r1, r3
 8002680:	1dfb      	adds	r3, r7, #7
 8002682:	4622      	mov	r2, r4
 8002684:	701a      	strb	r2, [r3, #0]
 8002686:	1dbb      	adds	r3, r7, #6
 8002688:	4602      	mov	r2, r0
 800268a:	701a      	strb	r2, [r3, #0]
 800268c:	1d3b      	adds	r3, r7, #4
 800268e:	460a      	mov	r2, r1
 8002690:	801a      	strh	r2, [r3, #0]
uint8_t dt[256];
dt[0] = reg;
 8002692:	f107 030c 	add.w	r3, r7, #12
 8002696:	1dba      	adds	r2, r7, #6
 8002698:	7812      	ldrb	r2, [r2, #0]
 800269a:	701a      	strb	r2, [r3, #0]
uint8_t i;
for(i = 0; i < count; i++)
 800269c:	2300      	movs	r3, #0
 800269e:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
 80026a2:	e010      	b.n	80026c6 <ssd1306_I2C_WriteMulti+0x56>
dt[i+1] = data[i];
 80026a4:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 80026a8:	463a      	mov	r2, r7
 80026aa:	6812      	ldr	r2, [r2, #0]
 80026ac:	441a      	add	r2, r3
 80026ae:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 80026b2:	3301      	adds	r3, #1
 80026b4:	7811      	ldrb	r1, [r2, #0]
 80026b6:	f107 020c 	add.w	r2, r7, #12
 80026ba:	54d1      	strb	r1, [r2, r3]
for(i = 0; i < count; i++)
 80026bc:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 80026c0:	3301      	adds	r3, #1
 80026c2:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
 80026c6:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 80026ca:	b29b      	uxth	r3, r3
 80026cc:	1d3a      	adds	r2, r7, #4
 80026ce:	8812      	ldrh	r2, [r2, #0]
 80026d0:	429a      	cmp	r2, r3
 80026d2:	d8e7      	bhi.n	80026a4 <ssd1306_I2C_WriteMulti+0x34>
HAL_I2C_Master_Transmit(&hi2c1, address, dt, count+1, 10);
 80026d4:	1dfb      	adds	r3, r7, #7
 80026d6:	781b      	ldrb	r3, [r3, #0]
 80026d8:	b299      	uxth	r1, r3
 80026da:	1d3b      	adds	r3, r7, #4
 80026dc:	881b      	ldrh	r3, [r3, #0]
 80026de:	3301      	adds	r3, #1
 80026e0:	b298      	uxth	r0, r3
 80026e2:	f107 020c 	add.w	r2, r7, #12
 80026e6:	230a      	movs	r3, #10
 80026e8:	9300      	str	r3, [sp, #0]
 80026ea:	4603      	mov	r3, r0
 80026ec:	4803      	ldr	r0, [pc, #12]	; (80026fc <ssd1306_I2C_WriteMulti+0x8c>)
 80026ee:	f002 fc09 	bl	8004f04 <HAL_I2C_Master_Transmit>
}
 80026f2:	bf00      	nop
 80026f4:	f507 778a 	add.w	r7, r7, #276	; 0x114
 80026f8:	46bd      	mov	sp, r7
 80026fa:	bd90      	pop	{r4, r7, pc}
 80026fc:	2000082c 	.word	0x2000082c

08002700 <ssd1306_I2C_Write>:


void ssd1306_I2C_Write(uint8_t address, uint8_t reg, uint8_t data) {
 8002700:	b580      	push	{r7, lr}
 8002702:	b086      	sub	sp, #24
 8002704:	af02      	add	r7, sp, #8
 8002706:	4603      	mov	r3, r0
 8002708:	71fb      	strb	r3, [r7, #7]
 800270a:	460b      	mov	r3, r1
 800270c:	71bb      	strb	r3, [r7, #6]
 800270e:	4613      	mov	r3, r2
 8002710:	717b      	strb	r3, [r7, #5]
	uint8_t dt[2];
	dt[0] = reg;
 8002712:	79bb      	ldrb	r3, [r7, #6]
 8002714:	733b      	strb	r3, [r7, #12]
	dt[1] = data;
 8002716:	797b      	ldrb	r3, [r7, #5]
 8002718:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(&hi2c1, address, dt, 2, 10);
 800271a:	79fb      	ldrb	r3, [r7, #7]
 800271c:	b299      	uxth	r1, r3
 800271e:	f107 020c 	add.w	r2, r7, #12
 8002722:	230a      	movs	r3, #10
 8002724:	9300      	str	r3, [sp, #0]
 8002726:	2302      	movs	r3, #2
 8002728:	4803      	ldr	r0, [pc, #12]	; (8002738 <ssd1306_I2C_Write+0x38>)
 800272a:	f002 fbeb 	bl	8004f04 <HAL_I2C_Master_Transmit>
}
 800272e:	bf00      	nop
 8002730:	3710      	adds	r7, #16
 8002732:	46bd      	mov	sp, r7
 8002734:	bd80      	pop	{r7, pc}
 8002736:	bf00      	nop
 8002738:	2000082c 	.word	0x2000082c

0800273c <setEncoderState>:
//	slipEncode((uint8_t*)&telemetry,sizeof(telemetry));
//}


// Update the current telemetry encoder state
void setEncoderState(ENCODER_STATE * enc_left, ENCODER_STATE * enc_right) {
 800273c:	b480      	push	{r7}
 800273e:	b083      	sub	sp, #12
 8002740:	af00      	add	r7, sp, #0
 8002742:	6078      	str	r0, [r7, #4]
 8002744:	6039      	str	r1, [r7, #0]
	telemetry.enc_left = *enc_left;
 8002746:	4b0a      	ldr	r3, [pc, #40]	; (8002770 <setEncoderState+0x34>)
 8002748:	687a      	ldr	r2, [r7, #4]
 800274a:	3328      	adds	r3, #40	; 0x28
 800274c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002750:	e883 0003 	stmia.w	r3, {r0, r1}
	telemetry.enc_right = *enc_right;
 8002754:	4b06      	ldr	r3, [pc, #24]	; (8002770 <setEncoderState+0x34>)
 8002756:	683a      	ldr	r2, [r7, #0]
 8002758:	3330      	adds	r3, #48	; 0x30
 800275a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800275e:	e883 0003 	stmia.w	r3, {r0, r1}
}
 8002762:	bf00      	nop
 8002764:	370c      	adds	r7, #12
 8002766:	46bd      	mov	sp, r7
 8002768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800276c:	4770      	bx	lr
 800276e:	bf00      	nop
 8002770:	2000073c 	.word	0x2000073c

08002774 <setPIDState>:

// Update the current telemetry PID state
void setPIDState(PID_STATE * pid_left, PID_STATE * pid_right) {
 8002774:	b4b0      	push	{r4, r5, r7}
 8002776:	b083      	sub	sp, #12
 8002778:	af00      	add	r7, sp, #0
 800277a:	6078      	str	r0, [r7, #4]
 800277c:	6039      	str	r1, [r7, #0]
	telemetry.pid_left = *pid_left;
 800277e:	4a0b      	ldr	r2, [pc, #44]	; (80027ac <setPIDState+0x38>)
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	4614      	mov	r4, r2
 8002784:	461d      	mov	r5, r3
 8002786:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002788:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800278a:	682b      	ldr	r3, [r5, #0]
 800278c:	6023      	str	r3, [r4, #0]
	telemetry.pid_right = *pid_right;
 800278e:	4b07      	ldr	r3, [pc, #28]	; (80027ac <setPIDState+0x38>)
 8002790:	683a      	ldr	r2, [r7, #0]
 8002792:	f103 0414 	add.w	r4, r3, #20
 8002796:	4615      	mov	r5, r2
 8002798:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800279a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800279c:	682b      	ldr	r3, [r5, #0]
 800279e:	6023      	str	r3, [r4, #0]
}
 80027a0:	bf00      	nop
 80027a2:	370c      	adds	r7, #12
 80027a4:	46bd      	mov	sp, r7
 80027a6:	bcb0      	pop	{r4, r5, r7}
 80027a8:	4770      	bx	lr
 80027aa:	bf00      	nop
 80027ac:	2000073c 	.word	0x2000073c

080027b0 <MX_CAN1_Init>:

CAN_HandleTypeDef hcan1;

/* CAN1 init function */
void MX_CAN1_Init(void)
{
 80027b0:	b580      	push	{r7, lr}
 80027b2:	af00      	add	r7, sp, #0

  hcan1.Instance = CAN1;
 80027b4:	4b16      	ldr	r3, [pc, #88]	; (8002810 <MX_CAN1_Init+0x60>)
 80027b6:	4a17      	ldr	r2, [pc, #92]	; (8002814 <MX_CAN1_Init+0x64>)
 80027b8:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 16;
 80027ba:	4b15      	ldr	r3, [pc, #84]	; (8002810 <MX_CAN1_Init+0x60>)
 80027bc:	2210      	movs	r2, #16
 80027be:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 80027c0:	4b13      	ldr	r3, [pc, #76]	; (8002810 <MX_CAN1_Init+0x60>)
 80027c2:	2200      	movs	r2, #0
 80027c4:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 80027c6:	4b12      	ldr	r3, [pc, #72]	; (8002810 <MX_CAN1_Init+0x60>)
 80027c8:	2200      	movs	r2, #0
 80027ca:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_1TQ;
 80027cc:	4b10      	ldr	r3, [pc, #64]	; (8002810 <MX_CAN1_Init+0x60>)
 80027ce:	2200      	movs	r2, #0
 80027d0:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_1TQ;
 80027d2:	4b0f      	ldr	r3, [pc, #60]	; (8002810 <MX_CAN1_Init+0x60>)
 80027d4:	2200      	movs	r2, #0
 80027d6:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 80027d8:	4b0d      	ldr	r3, [pc, #52]	; (8002810 <MX_CAN1_Init+0x60>)
 80027da:	2200      	movs	r2, #0
 80027dc:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 80027de:	4b0c      	ldr	r3, [pc, #48]	; (8002810 <MX_CAN1_Init+0x60>)
 80027e0:	2200      	movs	r2, #0
 80027e2:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 80027e4:	4b0a      	ldr	r3, [pc, #40]	; (8002810 <MX_CAN1_Init+0x60>)
 80027e6:	2200      	movs	r2, #0
 80027e8:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 80027ea:	4b09      	ldr	r3, [pc, #36]	; (8002810 <MX_CAN1_Init+0x60>)
 80027ec:	2200      	movs	r2, #0
 80027ee:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 80027f0:	4b07      	ldr	r3, [pc, #28]	; (8002810 <MX_CAN1_Init+0x60>)
 80027f2:	2200      	movs	r2, #0
 80027f4:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 80027f6:	4b06      	ldr	r3, [pc, #24]	; (8002810 <MX_CAN1_Init+0x60>)
 80027f8:	2200      	movs	r2, #0
 80027fa:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 80027fc:	4804      	ldr	r0, [pc, #16]	; (8002810 <MX_CAN1_Init+0x60>)
 80027fe:	f001 fd43 	bl	8004288 <HAL_CAN_Init>
 8002802:	4603      	mov	r3, r0
 8002804:	2b00      	cmp	r3, #0
 8002806:	d001      	beq.n	800280c <MX_CAN1_Init+0x5c>
  {
    Error_Handler();
 8002808:	f000 fbd7 	bl	8002fba <Error_Handler>
  }

}
 800280c:	bf00      	nop
 800280e:	bd80      	pop	{r7, pc}
 8002810:	2000079c 	.word	0x2000079c
 8002814:	40006400 	.word	0x40006400

08002818 <HAL_CAN_MspInit>:

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 8002818:	b580      	push	{r7, lr}
 800281a:	b08a      	sub	sp, #40	; 0x28
 800281c:	af00      	add	r7, sp, #0
 800281e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002820:	f107 0314 	add.w	r3, r7, #20
 8002824:	2200      	movs	r2, #0
 8002826:	601a      	str	r2, [r3, #0]
 8002828:	605a      	str	r2, [r3, #4]
 800282a:	609a      	str	r2, [r3, #8]
 800282c:	60da      	str	r2, [r3, #12]
 800282e:	611a      	str	r2, [r3, #16]
  if(canHandle->Instance==CAN1)
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	4a19      	ldr	r2, [pc, #100]	; (800289c <HAL_CAN_MspInit+0x84>)
 8002836:	4293      	cmp	r3, r2
 8002838:	d12c      	bne.n	8002894 <HAL_CAN_MspInit+0x7c>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* CAN1 clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 800283a:	2300      	movs	r3, #0
 800283c:	613b      	str	r3, [r7, #16]
 800283e:	4b18      	ldr	r3, [pc, #96]	; (80028a0 <HAL_CAN_MspInit+0x88>)
 8002840:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002842:	4a17      	ldr	r2, [pc, #92]	; (80028a0 <HAL_CAN_MspInit+0x88>)
 8002844:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002848:	6413      	str	r3, [r2, #64]	; 0x40
 800284a:	4b15      	ldr	r3, [pc, #84]	; (80028a0 <HAL_CAN_MspInit+0x88>)
 800284c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800284e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002852:	613b      	str	r3, [r7, #16]
 8002854:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002856:	2300      	movs	r3, #0
 8002858:	60fb      	str	r3, [r7, #12]
 800285a:	4b11      	ldr	r3, [pc, #68]	; (80028a0 <HAL_CAN_MspInit+0x88>)
 800285c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800285e:	4a10      	ldr	r2, [pc, #64]	; (80028a0 <HAL_CAN_MspInit+0x88>)
 8002860:	f043 0301 	orr.w	r3, r3, #1
 8002864:	6313      	str	r3, [r2, #48]	; 0x30
 8002866:	4b0e      	ldr	r3, [pc, #56]	; (80028a0 <HAL_CAN_MspInit+0x88>)
 8002868:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800286a:	f003 0301 	and.w	r3, r3, #1
 800286e:	60fb      	str	r3, [r7, #12]
 8002870:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PA11     ------> CAN1_RX
    PA12     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8002872:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8002876:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002878:	2302      	movs	r3, #2
 800287a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800287c:	2300      	movs	r3, #0
 800287e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002880:	2303      	movs	r3, #3
 8002882:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8002884:	2309      	movs	r3, #9
 8002886:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002888:	f107 0314 	add.w	r3, r7, #20
 800288c:	4619      	mov	r1, r3
 800288e:	4805      	ldr	r0, [pc, #20]	; (80028a4 <HAL_CAN_MspInit+0x8c>)
 8002890:	f001 fff6 	bl	8004880 <HAL_GPIO_Init>

  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }
}
 8002894:	bf00      	nop
 8002896:	3728      	adds	r7, #40	; 0x28
 8002898:	46bd      	mov	sp, r7
 800289a:	bd80      	pop	{r7, pc}
 800289c:	40006400 	.word	0x40006400
 80028a0:	40023800 	.word	0x40023800
 80028a4:	40020000 	.word	0x40020000

080028a8 <MX_DAC_Init>:

DAC_HandleTypeDef hdac;

/* DAC init function */
void MX_DAC_Init(void)
{
 80028a8:	b580      	push	{r7, lr}
 80028aa:	b082      	sub	sp, #8
 80028ac:	af00      	add	r7, sp, #0
  DAC_ChannelConfTypeDef sConfig = {0};
 80028ae:	463b      	mov	r3, r7
 80028b0:	2200      	movs	r2, #0
 80028b2:	601a      	str	r2, [r3, #0]
 80028b4:	605a      	str	r2, [r3, #4]

  /** DAC Initialization
  */
  hdac.Instance = DAC;
 80028b6:	4b0f      	ldr	r3, [pc, #60]	; (80028f4 <MX_DAC_Init+0x4c>)
 80028b8:	4a0f      	ldr	r2, [pc, #60]	; (80028f8 <MX_DAC_Init+0x50>)
 80028ba:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac) != HAL_OK)
 80028bc:	480d      	ldr	r0, [pc, #52]	; (80028f4 <MX_DAC_Init+0x4c>)
 80028be:	f001 fef0 	bl	80046a2 <HAL_DAC_Init>
 80028c2:	4603      	mov	r3, r0
 80028c4:	2b00      	cmp	r3, #0
 80028c6:	d001      	beq.n	80028cc <MX_DAC_Init+0x24>
  {
    Error_Handler();
 80028c8:	f000 fb77 	bl	8002fba <Error_Handler>
  }
  /** DAC channel OUT1 config
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 80028cc:	2300      	movs	r3, #0
 80028ce:	603b      	str	r3, [r7, #0]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 80028d0:	2300      	movs	r3, #0
 80028d2:	607b      	str	r3, [r7, #4]
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 80028d4:	463b      	mov	r3, r7
 80028d6:	2200      	movs	r2, #0
 80028d8:	4619      	mov	r1, r3
 80028da:	4806      	ldr	r0, [pc, #24]	; (80028f4 <MX_DAC_Init+0x4c>)
 80028dc:	f001 ff57 	bl	800478e <HAL_DAC_ConfigChannel>
 80028e0:	4603      	mov	r3, r0
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	d001      	beq.n	80028ea <MX_DAC_Init+0x42>
  {
    Error_Handler();
 80028e6:	f000 fb68 	bl	8002fba <Error_Handler>
  }

}
 80028ea:	bf00      	nop
 80028ec:	3708      	adds	r7, #8
 80028ee:	46bd      	mov	sp, r7
 80028f0:	bd80      	pop	{r7, pc}
 80028f2:	bf00      	nop
 80028f4:	200007c4 	.word	0x200007c4
 80028f8:	40007400 	.word	0x40007400

080028fc <HAL_DAC_MspInit>:

void HAL_DAC_MspInit(DAC_HandleTypeDef* dacHandle)
{
 80028fc:	b580      	push	{r7, lr}
 80028fe:	b08a      	sub	sp, #40	; 0x28
 8002900:	af00      	add	r7, sp, #0
 8002902:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002904:	f107 0314 	add.w	r3, r7, #20
 8002908:	2200      	movs	r2, #0
 800290a:	601a      	str	r2, [r3, #0]
 800290c:	605a      	str	r2, [r3, #4]
 800290e:	609a      	str	r2, [r3, #8]
 8002910:	60da      	str	r2, [r3, #12]
 8002912:	611a      	str	r2, [r3, #16]
  if(dacHandle->Instance==DAC)
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	4a1b      	ldr	r2, [pc, #108]	; (8002988 <HAL_DAC_MspInit+0x8c>)
 800291a:	4293      	cmp	r3, r2
 800291c:	d12f      	bne.n	800297e <HAL_DAC_MspInit+0x82>
  {
  /* USER CODE BEGIN DAC_MspInit 0 */

  /* USER CODE END DAC_MspInit 0 */
    /* DAC clock enable */
    __HAL_RCC_DAC_CLK_ENABLE();
 800291e:	2300      	movs	r3, #0
 8002920:	613b      	str	r3, [r7, #16]
 8002922:	4b1a      	ldr	r3, [pc, #104]	; (800298c <HAL_DAC_MspInit+0x90>)
 8002924:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002926:	4a19      	ldr	r2, [pc, #100]	; (800298c <HAL_DAC_MspInit+0x90>)
 8002928:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800292c:	6413      	str	r3, [r2, #64]	; 0x40
 800292e:	4b17      	ldr	r3, [pc, #92]	; (800298c <HAL_DAC_MspInit+0x90>)
 8002930:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002932:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002936:	613b      	str	r3, [r7, #16]
 8002938:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800293a:	2300      	movs	r3, #0
 800293c:	60fb      	str	r3, [r7, #12]
 800293e:	4b13      	ldr	r3, [pc, #76]	; (800298c <HAL_DAC_MspInit+0x90>)
 8002940:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002942:	4a12      	ldr	r2, [pc, #72]	; (800298c <HAL_DAC_MspInit+0x90>)
 8002944:	f043 0301 	orr.w	r3, r3, #1
 8002948:	6313      	str	r3, [r2, #48]	; 0x30
 800294a:	4b10      	ldr	r3, [pc, #64]	; (800298c <HAL_DAC_MspInit+0x90>)
 800294c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800294e:	f003 0301 	and.w	r3, r3, #1
 8002952:	60fb      	str	r3, [r7, #12]
 8002954:	68fb      	ldr	r3, [r7, #12]
    /**DAC GPIO Configuration
    PA4     ------> DAC_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8002956:	2310      	movs	r3, #16
 8002958:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800295a:	2303      	movs	r3, #3
 800295c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800295e:	2300      	movs	r3, #0
 8002960:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002962:	f107 0314 	add.w	r3, r7, #20
 8002966:	4619      	mov	r1, r3
 8002968:	4809      	ldr	r0, [pc, #36]	; (8002990 <HAL_DAC_MspInit+0x94>)
 800296a:	f001 ff89 	bl	8004880 <HAL_GPIO_Init>

    /* DAC interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 800296e:	2200      	movs	r2, #0
 8002970:	2100      	movs	r1, #0
 8002972:	2036      	movs	r0, #54	; 0x36
 8002974:	f001 fe5f 	bl	8004636 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8002978:	2036      	movs	r0, #54	; 0x36
 800297a:	f001 fe78 	bl	800466e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DAC_MspInit 1 */

  /* USER CODE END DAC_MspInit 1 */
  }
}
 800297e:	bf00      	nop
 8002980:	3728      	adds	r7, #40	; 0x28
 8002982:	46bd      	mov	sp, r7
 8002984:	bd80      	pop	{r7, pc}
 8002986:	bf00      	nop
 8002988:	40007400 	.word	0x40007400
 800298c:	40023800 	.word	0x40023800
 8002990:	40020000 	.word	0x40020000

08002994 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8002994:	b580      	push	{r7, lr}
 8002996:	b08a      	sub	sp, #40	; 0x28
 8002998:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800299a:	f107 0314 	add.w	r3, r7, #20
 800299e:	2200      	movs	r2, #0
 80029a0:	601a      	str	r2, [r3, #0]
 80029a2:	605a      	str	r2, [r3, #4]
 80029a4:	609a      	str	r2, [r3, #8]
 80029a6:	60da      	str	r2, [r3, #12]
 80029a8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80029aa:	2300      	movs	r3, #0
 80029ac:	613b      	str	r3, [r7, #16]
 80029ae:	4b6e      	ldr	r3, [pc, #440]	; (8002b68 <MX_GPIO_Init+0x1d4>)
 80029b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029b2:	4a6d      	ldr	r2, [pc, #436]	; (8002b68 <MX_GPIO_Init+0x1d4>)
 80029b4:	f043 0304 	orr.w	r3, r3, #4
 80029b8:	6313      	str	r3, [r2, #48]	; 0x30
 80029ba:	4b6b      	ldr	r3, [pc, #428]	; (8002b68 <MX_GPIO_Init+0x1d4>)
 80029bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029be:	f003 0304 	and.w	r3, r3, #4
 80029c2:	613b      	str	r3, [r7, #16]
 80029c4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80029c6:	2300      	movs	r3, #0
 80029c8:	60fb      	str	r3, [r7, #12]
 80029ca:	4b67      	ldr	r3, [pc, #412]	; (8002b68 <MX_GPIO_Init+0x1d4>)
 80029cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029ce:	4a66      	ldr	r2, [pc, #408]	; (8002b68 <MX_GPIO_Init+0x1d4>)
 80029d0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80029d4:	6313      	str	r3, [r2, #48]	; 0x30
 80029d6:	4b64      	ldr	r3, [pc, #400]	; (8002b68 <MX_GPIO_Init+0x1d4>)
 80029d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029da:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80029de:	60fb      	str	r3, [r7, #12]
 80029e0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80029e2:	2300      	movs	r3, #0
 80029e4:	60bb      	str	r3, [r7, #8]
 80029e6:	4b60      	ldr	r3, [pc, #384]	; (8002b68 <MX_GPIO_Init+0x1d4>)
 80029e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029ea:	4a5f      	ldr	r2, [pc, #380]	; (8002b68 <MX_GPIO_Init+0x1d4>)
 80029ec:	f043 0301 	orr.w	r3, r3, #1
 80029f0:	6313      	str	r3, [r2, #48]	; 0x30
 80029f2:	4b5d      	ldr	r3, [pc, #372]	; (8002b68 <MX_GPIO_Init+0x1d4>)
 80029f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029f6:	f003 0301 	and.w	r3, r3, #1
 80029fa:	60bb      	str	r3, [r7, #8]
 80029fc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80029fe:	2300      	movs	r3, #0
 8002a00:	607b      	str	r3, [r7, #4]
 8002a02:	4b59      	ldr	r3, [pc, #356]	; (8002b68 <MX_GPIO_Init+0x1d4>)
 8002a04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a06:	4a58      	ldr	r2, [pc, #352]	; (8002b68 <MX_GPIO_Init+0x1d4>)
 8002a08:	f043 0302 	orr.w	r3, r3, #2
 8002a0c:	6313      	str	r3, [r2, #48]	; 0x30
 8002a0e:	4b56      	ldr	r3, [pc, #344]	; (8002b68 <MX_GPIO_Init+0x1d4>)
 8002a10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a12:	f003 0302 	and.w	r3, r3, #2
 8002a16:	607b      	str	r3, [r7, #4]
 8002a18:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002a1a:	2300      	movs	r3, #0
 8002a1c:	603b      	str	r3, [r7, #0]
 8002a1e:	4b52      	ldr	r3, [pc, #328]	; (8002b68 <MX_GPIO_Init+0x1d4>)
 8002a20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a22:	4a51      	ldr	r2, [pc, #324]	; (8002b68 <MX_GPIO_Init+0x1d4>)
 8002a24:	f043 0308 	orr.w	r3, r3, #8
 8002a28:	6313      	str	r3, [r2, #48]	; 0x30
 8002a2a:	4b4f      	ldr	r3, [pc, #316]	; (8002b68 <MX_GPIO_Init+0x1d4>)
 8002a2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a2e:	f003 0308 	and.w	r3, r3, #8
 8002a32:	603b      	str	r3, [r7, #0]
 8002a34:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, IMU_RST_Pin|REV_BIT0_Pin|RGB_INT1_Pin|RGB_INT2_Pin
 8002a36:	2200      	movs	r2, #0
 8002a38:	f241 1173 	movw	r1, #4467	; 0x1173
 8002a3c:	484b      	ldr	r0, [pc, #300]	; (8002b6c <MX_GPIO_Init+0x1d8>)
 8002a3e:	f002 f8d1 	bl	8004be4 <HAL_GPIO_WritePin>
                          |ROMI_SLPL_Pin|TRIG_CTR_Pin|ROMI_DIRL_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, Blinky_Pin|TRIGR_Pin|SPI_CS_AUX_Pin, GPIO_PIN_RESET);
 8002a42:	2200      	movs	r2, #0
 8002a44:	f248 4120 	movw	r1, #33824	; 0x8420
 8002a48:	4849      	ldr	r0, [pc, #292]	; (8002b70 <MX_GPIO_Init+0x1dc>)
 8002a4a:	f002 f8cb 	bl	8004be4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, TRIGL_Pin|ROMI_DIRR_Pin|ROMI_SLPR_Pin, GPIO_PIN_RESET);
 8002a4e:	2200      	movs	r2, #0
 8002a50:	f246 0101 	movw	r1, #24577	; 0x6001
 8002a54:	4847      	ldr	r0, [pc, #284]	; (8002b74 <MX_GPIO_Init+0x1e0>)
 8002a56:	f002 f8c5 	bl	8004be4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI_CS_FLASH_GPIO_Port, SPI_CS_FLASH_Pin, GPIO_PIN_RESET);
 8002a5a:	2200      	movs	r2, #0
 8002a5c:	2104      	movs	r1, #4
 8002a5e:	4846      	ldr	r0, [pc, #280]	; (8002b78 <MX_GPIO_Init+0x1e4>)
 8002a60:	f002 f8c0 	bl	8004be4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = OLED_BTN_Pin;
 8002a64:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002a68:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8002a6a:	4b44      	ldr	r3, [pc, #272]	; (8002b7c <MX_GPIO_Init+0x1e8>)
 8002a6c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a6e:	2300      	movs	r3, #0
 8002a70:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(OLED_BTN_GPIO_Port, &GPIO_InitStruct);
 8002a72:	f107 0314 	add.w	r3, r7, #20
 8002a76:	4619      	mov	r1, r3
 8002a78:	483c      	ldr	r0, [pc, #240]	; (8002b6c <MX_GPIO_Init+0x1d8>)
 8002a7a:	f001 ff01 	bl	8004880 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin PCPin
                           PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = IMU_RST_Pin|REV_BIT0_Pin|RGB_INT1_Pin|RGB_INT2_Pin
 8002a7e:	f241 1373 	movw	r3, #4467	; 0x1173
 8002a82:	617b      	str	r3, [r7, #20]
                          |ROMI_SLPL_Pin|TRIG_CTR_Pin|ROMI_DIRL_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002a84:	2301      	movs	r3, #1
 8002a86:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a88:	2300      	movs	r3, #0
 8002a8a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a8c:	2300      	movs	r3, #0
 8002a8e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002a90:	f107 0314 	add.w	r3, r7, #20
 8002a94:	4619      	mov	r1, r3
 8002a96:	4835      	ldr	r0, [pc, #212]	; (8002b6c <MX_GPIO_Init+0x1d8>)
 8002a98:	f001 fef2 	bl	8004880 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = REV_BIT1_Pin|REV_BIT2_Pin;
 8002a9c:	230c      	movs	r3, #12
 8002a9e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002aa0:	2300      	movs	r3, #0
 8002aa2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002aa4:	2300      	movs	r3, #0
 8002aa6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002aa8:	f107 0314 	add.w	r3, r7, #20
 8002aac:	4619      	mov	r1, r3
 8002aae:	482f      	ldr	r0, [pc, #188]	; (8002b6c <MX_GPIO_Init+0x1d8>)
 8002ab0:	f001 fee6 	bl	8004880 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = Blinky_Pin|TRIGR_Pin|SPI_CS_AUX_Pin;
 8002ab4:	f248 4320 	movw	r3, #33824	; 0x8420
 8002ab8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002aba:	2301      	movs	r3, #1
 8002abc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002abe:	2300      	movs	r3, #0
 8002ac0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002ac2:	2300      	movs	r3, #0
 8002ac4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002ac6:	f107 0314 	add.w	r3, r7, #20
 8002aca:	4619      	mov	r1, r3
 8002acc:	4828      	ldr	r0, [pc, #160]	; (8002b70 <MX_GPIO_Init+0x1dc>)
 8002ace:	f001 fed7 	bl	8004880 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = TRIGL_Pin|ROMI_DIRR_Pin|ROMI_SLPR_Pin;
 8002ad2:	f246 0301 	movw	r3, #24577	; 0x6001
 8002ad6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002ad8:	2301      	movs	r3, #1
 8002ada:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002adc:	2300      	movs	r3, #0
 8002ade:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002ae0:	2300      	movs	r3, #0
 8002ae2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002ae4:	f107 0314 	add.w	r3, r7, #20
 8002ae8:	4619      	mov	r1, r3
 8002aea:	4822      	ldr	r0, [pc, #136]	; (8002b74 <MX_GPIO_Init+0x1e0>)
 8002aec:	f001 fec8 	bl	8004880 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = QTRR_Pin|QTRL_Pin;
 8002af0:	f241 0304 	movw	r3, #4100	; 0x1004
 8002af4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002af6:	4b22      	ldr	r3, [pc, #136]	; (8002b80 <MX_GPIO_Init+0x1ec>)
 8002af8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002afa:	2300      	movs	r3, #0
 8002afc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002afe:	f107 0314 	add.w	r3, r7, #20
 8002b02:	4619      	mov	r1, r3
 8002b04:	481b      	ldr	r0, [pc, #108]	; (8002b74 <MX_GPIO_Init+0x1e0>)
 8002b06:	f001 febb 	bl	8004880 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ECHO_CTR_Pin;
 8002b0a:	2380      	movs	r3, #128	; 0x80
 8002b0c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002b0e:	4b1c      	ldr	r3, [pc, #112]	; (8002b80 <MX_GPIO_Init+0x1ec>)
 8002b10:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b12:	2300      	movs	r3, #0
 8002b14:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ECHO_CTR_GPIO_Port, &GPIO_InitStruct);
 8002b16:	f107 0314 	add.w	r3, r7, #20
 8002b1a:	4619      	mov	r1, r3
 8002b1c:	4813      	ldr	r0, [pc, #76]	; (8002b6c <MX_GPIO_Init+0x1d8>)
 8002b1e:	f001 feaf 	bl	8004880 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SPI_CS_FLASH_Pin;
 8002b22:	2304      	movs	r3, #4
 8002b24:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002b26:	2301      	movs	r3, #1
 8002b28:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b2a:	2300      	movs	r3, #0
 8002b2c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b2e:	2300      	movs	r3, #0
 8002b30:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SPI_CS_FLASH_GPIO_Port, &GPIO_InitStruct);
 8002b32:	f107 0314 	add.w	r3, r7, #20
 8002b36:	4619      	mov	r1, r3
 8002b38:	480f      	ldr	r0, [pc, #60]	; (8002b78 <MX_GPIO_Init+0x1e4>)
 8002b3a:	f001 fea1 	bl	8004880 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8002b3e:	2200      	movs	r2, #0
 8002b40:	2100      	movs	r1, #0
 8002b42:	2017      	movs	r0, #23
 8002b44:	f001 fd77 	bl	8004636 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8002b48:	2017      	movs	r0, #23
 8002b4a:	f001 fd90 	bl	800466e <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8002b4e:	2200      	movs	r2, #0
 8002b50:	2100      	movs	r1, #0
 8002b52:	2028      	movs	r0, #40	; 0x28
 8002b54:	f001 fd6f 	bl	8004636 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8002b58:	2028      	movs	r0, #40	; 0x28
 8002b5a:	f001 fd88 	bl	800466e <HAL_NVIC_EnableIRQ>

}
 8002b5e:	bf00      	nop
 8002b60:	3728      	adds	r7, #40	; 0x28
 8002b62:	46bd      	mov	sp, r7
 8002b64:	bd80      	pop	{r7, pc}
 8002b66:	bf00      	nop
 8002b68:	40023800 	.word	0x40023800
 8002b6c:	40020800 	.word	0x40020800
 8002b70:	40020000 	.word	0x40020000
 8002b74:	40020400 	.word	0x40020400
 8002b78:	40020c00 	.word	0x40020c00
 8002b7c:	10210000 	.word	0x10210000
 8002b80:	10110000 	.word	0x10110000

08002b84 <MX_I2C1_Init>:
I2C_HandleTypeDef hi2c1;
I2C_HandleTypeDef hi2c3;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8002b84:	b580      	push	{r7, lr}
 8002b86:	af00      	add	r7, sp, #0

  hi2c1.Instance = I2C1;
 8002b88:	4b12      	ldr	r3, [pc, #72]	; (8002bd4 <MX_I2C1_Init+0x50>)
 8002b8a:	4a13      	ldr	r2, [pc, #76]	; (8002bd8 <MX_I2C1_Init+0x54>)
 8002b8c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8002b8e:	4b11      	ldr	r3, [pc, #68]	; (8002bd4 <MX_I2C1_Init+0x50>)
 8002b90:	4a12      	ldr	r2, [pc, #72]	; (8002bdc <MX_I2C1_Init+0x58>)
 8002b92:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8002b94:	4b0f      	ldr	r3, [pc, #60]	; (8002bd4 <MX_I2C1_Init+0x50>)
 8002b96:	2200      	movs	r2, #0
 8002b98:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8002b9a:	4b0e      	ldr	r3, [pc, #56]	; (8002bd4 <MX_I2C1_Init+0x50>)
 8002b9c:	2200      	movs	r2, #0
 8002b9e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002ba0:	4b0c      	ldr	r3, [pc, #48]	; (8002bd4 <MX_I2C1_Init+0x50>)
 8002ba2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002ba6:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002ba8:	4b0a      	ldr	r3, [pc, #40]	; (8002bd4 <MX_I2C1_Init+0x50>)
 8002baa:	2200      	movs	r2, #0
 8002bac:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8002bae:	4b09      	ldr	r3, [pc, #36]	; (8002bd4 <MX_I2C1_Init+0x50>)
 8002bb0:	2200      	movs	r2, #0
 8002bb2:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002bb4:	4b07      	ldr	r3, [pc, #28]	; (8002bd4 <MX_I2C1_Init+0x50>)
 8002bb6:	2200      	movs	r2, #0
 8002bb8:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002bba:	4b06      	ldr	r3, [pc, #24]	; (8002bd4 <MX_I2C1_Init+0x50>)
 8002bbc:	2200      	movs	r2, #0
 8002bbe:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8002bc0:	4804      	ldr	r0, [pc, #16]	; (8002bd4 <MX_I2C1_Init+0x50>)
 8002bc2:	f002 f867 	bl	8004c94 <HAL_I2C_Init>
 8002bc6:	4603      	mov	r3, r0
 8002bc8:	2b00      	cmp	r3, #0
 8002bca:	d001      	beq.n	8002bd0 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8002bcc:	f000 f9f5 	bl	8002fba <Error_Handler>
  }

}
 8002bd0:	bf00      	nop
 8002bd2:	bd80      	pop	{r7, pc}
 8002bd4:	2000082c 	.word	0x2000082c
 8002bd8:	40005400 	.word	0x40005400
 8002bdc:	00061a80 	.word	0x00061a80

08002be0 <MX_I2C3_Init>:
/* I2C3 init function */
void MX_I2C3_Init(void)
{
 8002be0:	b580      	push	{r7, lr}
 8002be2:	af00      	add	r7, sp, #0

  hi2c3.Instance = I2C3;
 8002be4:	4b12      	ldr	r3, [pc, #72]	; (8002c30 <MX_I2C3_Init+0x50>)
 8002be6:	4a13      	ldr	r2, [pc, #76]	; (8002c34 <MX_I2C3_Init+0x54>)
 8002be8:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 100000;
 8002bea:	4b11      	ldr	r3, [pc, #68]	; (8002c30 <MX_I2C3_Init+0x50>)
 8002bec:	4a12      	ldr	r2, [pc, #72]	; (8002c38 <MX_I2C3_Init+0x58>)
 8002bee:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8002bf0:	4b0f      	ldr	r3, [pc, #60]	; (8002c30 <MX_I2C3_Init+0x50>)
 8002bf2:	2200      	movs	r2, #0
 8002bf4:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 8002bf6:	4b0e      	ldr	r3, [pc, #56]	; (8002c30 <MX_I2C3_Init+0x50>)
 8002bf8:	2200      	movs	r2, #0
 8002bfa:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002bfc:	4b0c      	ldr	r3, [pc, #48]	; (8002c30 <MX_I2C3_Init+0x50>)
 8002bfe:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002c02:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002c04:	4b0a      	ldr	r3, [pc, #40]	; (8002c30 <MX_I2C3_Init+0x50>)
 8002c06:	2200      	movs	r2, #0
 8002c08:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 8002c0a:	4b09      	ldr	r3, [pc, #36]	; (8002c30 <MX_I2C3_Init+0x50>)
 8002c0c:	2200      	movs	r2, #0
 8002c0e:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002c10:	4b07      	ldr	r3, [pc, #28]	; (8002c30 <MX_I2C3_Init+0x50>)
 8002c12:	2200      	movs	r2, #0
 8002c14:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002c16:	4b06      	ldr	r3, [pc, #24]	; (8002c30 <MX_I2C3_Init+0x50>)
 8002c18:	2200      	movs	r2, #0
 8002c1a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8002c1c:	4804      	ldr	r0, [pc, #16]	; (8002c30 <MX_I2C3_Init+0x50>)
 8002c1e:	f002 f839 	bl	8004c94 <HAL_I2C_Init>
 8002c22:	4603      	mov	r3, r0
 8002c24:	2b00      	cmp	r3, #0
 8002c26:	d001      	beq.n	8002c2c <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 8002c28:	f000 f9c7 	bl	8002fba <Error_Handler>
  }

}
 8002c2c:	bf00      	nop
 8002c2e:	bd80      	pop	{r7, pc}
 8002c30:	200007d8 	.word	0x200007d8
 8002c34:	40005c00 	.word	0x40005c00
 8002c38:	000186a0 	.word	0x000186a0

08002c3c <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8002c3c:	b580      	push	{r7, lr}
 8002c3e:	b08c      	sub	sp, #48	; 0x30
 8002c40:	af00      	add	r7, sp, #0
 8002c42:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002c44:	f107 031c 	add.w	r3, r7, #28
 8002c48:	2200      	movs	r2, #0
 8002c4a:	601a      	str	r2, [r3, #0]
 8002c4c:	605a      	str	r2, [r3, #4]
 8002c4e:	609a      	str	r2, [r3, #8]
 8002c50:	60da      	str	r2, [r3, #12]
 8002c52:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	4a42      	ldr	r2, [pc, #264]	; (8002d64 <HAL_I2C_MspInit+0x128>)
 8002c5a:	4293      	cmp	r3, r2
 8002c5c:	d12d      	bne.n	8002cba <HAL_I2C_MspInit+0x7e>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002c5e:	2300      	movs	r3, #0
 8002c60:	61bb      	str	r3, [r7, #24]
 8002c62:	4b41      	ldr	r3, [pc, #260]	; (8002d68 <HAL_I2C_MspInit+0x12c>)
 8002c64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c66:	4a40      	ldr	r2, [pc, #256]	; (8002d68 <HAL_I2C_MspInit+0x12c>)
 8002c68:	f043 0302 	orr.w	r3, r3, #2
 8002c6c:	6313      	str	r3, [r2, #48]	; 0x30
 8002c6e:	4b3e      	ldr	r3, [pc, #248]	; (8002d68 <HAL_I2C_MspInit+0x12c>)
 8002c70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c72:	f003 0302 	and.w	r3, r3, #2
 8002c76:	61bb      	str	r3, [r7, #24]
 8002c78:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB7     ------> I2C1_SDA
    PB8     ------> I2C1_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 8002c7a:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8002c7e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002c80:	2312      	movs	r3, #18
 8002c82:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002c84:	2301      	movs	r3, #1
 8002c86:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002c88:	2303      	movs	r3, #3
 8002c8a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002c8c:	2304      	movs	r3, #4
 8002c8e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002c90:	f107 031c 	add.w	r3, r7, #28
 8002c94:	4619      	mov	r1, r3
 8002c96:	4835      	ldr	r0, [pc, #212]	; (8002d6c <HAL_I2C_MspInit+0x130>)
 8002c98:	f001 fdf2 	bl	8004880 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002c9c:	2300      	movs	r3, #0
 8002c9e:	617b      	str	r3, [r7, #20]
 8002ca0:	4b31      	ldr	r3, [pc, #196]	; (8002d68 <HAL_I2C_MspInit+0x12c>)
 8002ca2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ca4:	4a30      	ldr	r2, [pc, #192]	; (8002d68 <HAL_I2C_MspInit+0x12c>)
 8002ca6:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002caa:	6413      	str	r3, [r2, #64]	; 0x40
 8002cac:	4b2e      	ldr	r3, [pc, #184]	; (8002d68 <HAL_I2C_MspInit+0x12c>)
 8002cae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cb0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002cb4:	617b      	str	r3, [r7, #20]
 8002cb6:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_I2C3_CLK_ENABLE();
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }
}
 8002cb8:	e050      	b.n	8002d5c <HAL_I2C_MspInit+0x120>
  else if(i2cHandle->Instance==I2C3)
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	4a2c      	ldr	r2, [pc, #176]	; (8002d70 <HAL_I2C_MspInit+0x134>)
 8002cc0:	4293      	cmp	r3, r2
 8002cc2:	d14b      	bne.n	8002d5c <HAL_I2C_MspInit+0x120>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002cc4:	2300      	movs	r3, #0
 8002cc6:	613b      	str	r3, [r7, #16]
 8002cc8:	4b27      	ldr	r3, [pc, #156]	; (8002d68 <HAL_I2C_MspInit+0x12c>)
 8002cca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ccc:	4a26      	ldr	r2, [pc, #152]	; (8002d68 <HAL_I2C_MspInit+0x12c>)
 8002cce:	f043 0304 	orr.w	r3, r3, #4
 8002cd2:	6313      	str	r3, [r2, #48]	; 0x30
 8002cd4:	4b24      	ldr	r3, [pc, #144]	; (8002d68 <HAL_I2C_MspInit+0x12c>)
 8002cd6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cd8:	f003 0304 	and.w	r3, r3, #4
 8002cdc:	613b      	str	r3, [r7, #16]
 8002cde:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002ce0:	2300      	movs	r3, #0
 8002ce2:	60fb      	str	r3, [r7, #12]
 8002ce4:	4b20      	ldr	r3, [pc, #128]	; (8002d68 <HAL_I2C_MspInit+0x12c>)
 8002ce6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ce8:	4a1f      	ldr	r2, [pc, #124]	; (8002d68 <HAL_I2C_MspInit+0x12c>)
 8002cea:	f043 0301 	orr.w	r3, r3, #1
 8002cee:	6313      	str	r3, [r2, #48]	; 0x30
 8002cf0:	4b1d      	ldr	r3, [pc, #116]	; (8002d68 <HAL_I2C_MspInit+0x12c>)
 8002cf2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cf4:	f003 0301 	and.w	r3, r3, #1
 8002cf8:	60fb      	str	r3, [r7, #12]
 8002cfa:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8002cfc:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002d00:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002d02:	2312      	movs	r3, #18
 8002d04:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002d06:	2301      	movs	r3, #1
 8002d08:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002d0a:	2303      	movs	r3, #3
 8002d0c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8002d0e:	2304      	movs	r3, #4
 8002d10:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002d12:	f107 031c 	add.w	r3, r7, #28
 8002d16:	4619      	mov	r1, r3
 8002d18:	4816      	ldr	r0, [pc, #88]	; (8002d74 <HAL_I2C_MspInit+0x138>)
 8002d1a:	f001 fdb1 	bl	8004880 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8002d1e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002d22:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002d24:	2312      	movs	r3, #18
 8002d26:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002d28:	2301      	movs	r3, #1
 8002d2a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002d2c:	2303      	movs	r3, #3
 8002d2e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8002d30:	2304      	movs	r3, #4
 8002d32:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002d34:	f107 031c 	add.w	r3, r7, #28
 8002d38:	4619      	mov	r1, r3
 8002d3a:	480f      	ldr	r0, [pc, #60]	; (8002d78 <HAL_I2C_MspInit+0x13c>)
 8002d3c:	f001 fda0 	bl	8004880 <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 8002d40:	2300      	movs	r3, #0
 8002d42:	60bb      	str	r3, [r7, #8]
 8002d44:	4b08      	ldr	r3, [pc, #32]	; (8002d68 <HAL_I2C_MspInit+0x12c>)
 8002d46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d48:	4a07      	ldr	r2, [pc, #28]	; (8002d68 <HAL_I2C_MspInit+0x12c>)
 8002d4a:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002d4e:	6413      	str	r3, [r2, #64]	; 0x40
 8002d50:	4b05      	ldr	r3, [pc, #20]	; (8002d68 <HAL_I2C_MspInit+0x12c>)
 8002d52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d54:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002d58:	60bb      	str	r3, [r7, #8]
 8002d5a:	68bb      	ldr	r3, [r7, #8]
}
 8002d5c:	bf00      	nop
 8002d5e:	3730      	adds	r7, #48	; 0x30
 8002d60:	46bd      	mov	sp, r7
 8002d62:	bd80      	pop	{r7, pc}
 8002d64:	40005400 	.word	0x40005400
 8002d68:	40023800 	.word	0x40023800
 8002d6c:	40020400 	.word	0x40020400
 8002d70:	40005c00 	.word	0x40005c00
 8002d74:	40020800 	.word	0x40020800
 8002d78:	40020000 	.word	0x40020000

08002d7c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002d7c:	b580      	push	{r7, lr}
 8002d7e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002d80:	f001 f9ee 	bl	8004160 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002d84:	f000 f82c 	bl	8002de0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002d88:	f7ff fe04 	bl	8002994 <MX_GPIO_Init>
  MX_TIM2_Init();
 8002d8c:	f000 fb66 	bl	800345c <MX_TIM2_Init>
  MX_TIM3_Init();
 8002d90:	f000 fbda 	bl	8003548 <MX_TIM3_Init>
  MX_USART2_UART_Init();
 8002d94:	f001 f8e0 	bl	8003f58 <MX_USART2_UART_Init>
  MX_DAC_Init();
 8002d98:	f7ff fd86 	bl	80028a8 <MX_DAC_Init>
  MX_I2C1_Init();
 8002d9c:	f7ff fef2 	bl	8002b84 <MX_I2C1_Init>
  MX_I2C3_Init();
 8002da0:	f7ff ff1e 	bl	8002be0 <MX_I2C3_Init>
  MX_SPI1_Init();
 8002da4:	f000 f910 	bl	8002fc8 <MX_SPI1_Init>
  MX_TIM4_Init();
 8002da8:	f000 fc22 	bl	80035f0 <MX_TIM4_Init>
  MX_TIM5_Init();
 8002dac:	f000 fc96 	bl	80036dc <MX_TIM5_Init>
  MX_TIM6_Init();
 8002db0:	f000 fce8 	bl	8003784 <MX_TIM6_Init>
  MX_TIM11_Init();
 8002db4:	f000 fdd6 	bl	8003964 <MX_TIM11_Init>
  MX_USART3_UART_Init();
 8002db8:	f001 f8f8 	bl	8003fac <MX_USART3_UART_Init>
  MX_CAN1_Init();
 8002dbc:	f7ff fcf8 	bl	80027b0 <MX_CAN1_Init>
  MX_TIM7_Init();
 8002dc0:	f000 fd16 	bl	80037f0 <MX_TIM7_Init>
  MX_TIM1_Init();
 8002dc4:	f000 fad6 	bl	8003374 <MX_TIM1_Init>
  MX_TIM12_Init();
 8002dc8:	f000 fe1a 	bl	8003a00 <MX_TIM12_Init>
  MX_TIM8_Init();
 8002dcc:	f000 fd46 	bl	800385c <MX_TIM8_Init>
  /* USER CODE BEGIN 2 */
  //Start the timer
  HAL_TIM_Base_Start_IT(&htim6);
 8002dd0:	4802      	ldr	r0, [pc, #8]	; (8002ddc <main+0x60>)
 8002dd2:	f003 f9be 	bl	8006152 <HAL_TIM_Base_Start_IT>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	  appMain(); // will not return from here
 8002dd6:	f7fe f933 	bl	8001040 <appMain>
 8002dda:	e7fc      	b.n	8002dd6 <main+0x5a>
 8002ddc:	20000a18 	.word	0x20000a18

08002de0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002de0:	b580      	push	{r7, lr}
 8002de2:	b094      	sub	sp, #80	; 0x50
 8002de4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002de6:	f107 0320 	add.w	r3, r7, #32
 8002dea:	2230      	movs	r2, #48	; 0x30
 8002dec:	2100      	movs	r1, #0
 8002dee:	4618      	mov	r0, r3
 8002df0:	f005 fe2e 	bl	8008a50 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002df4:	f107 030c 	add.w	r3, r7, #12
 8002df8:	2200      	movs	r2, #0
 8002dfa:	601a      	str	r2, [r3, #0]
 8002dfc:	605a      	str	r2, [r3, #4]
 8002dfe:	609a      	str	r2, [r3, #8]
 8002e00:	60da      	str	r2, [r3, #12]
 8002e02:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002e04:	2300      	movs	r3, #0
 8002e06:	60bb      	str	r3, [r7, #8]
 8002e08:	4b28      	ldr	r3, [pc, #160]	; (8002eac <SystemClock_Config+0xcc>)
 8002e0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e0c:	4a27      	ldr	r2, [pc, #156]	; (8002eac <SystemClock_Config+0xcc>)
 8002e0e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002e12:	6413      	str	r3, [r2, #64]	; 0x40
 8002e14:	4b25      	ldr	r3, [pc, #148]	; (8002eac <SystemClock_Config+0xcc>)
 8002e16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e18:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e1c:	60bb      	str	r3, [r7, #8]
 8002e1e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002e20:	2300      	movs	r3, #0
 8002e22:	607b      	str	r3, [r7, #4]
 8002e24:	4b22      	ldr	r3, [pc, #136]	; (8002eb0 <SystemClock_Config+0xd0>)
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	4a21      	ldr	r2, [pc, #132]	; (8002eb0 <SystemClock_Config+0xd0>)
 8002e2a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002e2e:	6013      	str	r3, [r2, #0]
 8002e30:	4b1f      	ldr	r3, [pc, #124]	; (8002eb0 <SystemClock_Config+0xd0>)
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002e38:	607b      	str	r3, [r7, #4]
 8002e3a:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8002e3c:	2302      	movs	r3, #2
 8002e3e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002e40:	2301      	movs	r3, #1
 8002e42:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002e44:	2310      	movs	r3, #16
 8002e46:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002e48:	2302      	movs	r3, #2
 8002e4a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8002e4c:	2300      	movs	r3, #0
 8002e4e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8002e50:	2308      	movs	r3, #8
 8002e52:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 100;
 8002e54:	2364      	movs	r3, #100	; 0x64
 8002e56:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002e58:	2302      	movs	r3, #2
 8002e5a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8002e5c:	2304      	movs	r3, #4
 8002e5e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002e60:	f107 0320 	add.w	r3, r7, #32
 8002e64:	4618      	mov	r0, r3
 8002e66:	f002 fc83 	bl	8005770 <HAL_RCC_OscConfig>
 8002e6a:	4603      	mov	r3, r0
 8002e6c:	2b00      	cmp	r3, #0
 8002e6e:	d001      	beq.n	8002e74 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8002e70:	f000 f8a3 	bl	8002fba <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002e74:	230f      	movs	r3, #15
 8002e76:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002e78:	2302      	movs	r3, #2
 8002e7a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002e7c:	2300      	movs	r3, #0
 8002e7e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8002e80:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8002e84:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8002e86:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002e8a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8002e8c:	f107 030c 	add.w	r3, r7, #12
 8002e90:	2103      	movs	r1, #3
 8002e92:	4618      	mov	r0, r3
 8002e94:	f002 fedc 	bl	8005c50 <HAL_RCC_ClockConfig>
 8002e98:	4603      	mov	r3, r0
 8002e9a:	2b00      	cmp	r3, #0
 8002e9c:	d001      	beq.n	8002ea2 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8002e9e:	f000 f88c 	bl	8002fba <Error_Handler>
  }
}
 8002ea2:	bf00      	nop
 8002ea4:	3750      	adds	r7, #80	; 0x50
 8002ea6:	46bd      	mov	sp, r7
 8002ea8:	bd80      	pop	{r7, pc}
 8002eaa:	bf00      	nop
 8002eac:	40023800 	.word	0x40023800
 8002eb0:	40007000 	.word	0x40007000

08002eb4 <__io_putchar>:

/* USER CODE BEGIN 4 */

/* This function sets up the serial printf*/
int __io_putchar(int ch) {
 8002eb4:	b580      	push	{r7, lr}
 8002eb6:	b084      	sub	sp, #16
 8002eb8:	af00      	add	r7, sp, #0
 8002eba:	6078      	str	r0, [r7, #4]
    HAL_StatusTypeDef sts = HAL_UART_Transmit(&IO_UART ,(uint8_t*)&ch,1,10);
 8002ebc:	1d39      	adds	r1, r7, #4
 8002ebe:	230a      	movs	r3, #10
 8002ec0:	2201      	movs	r2, #1
 8002ec2:	4808      	ldr	r0, [pc, #32]	; (8002ee4 <__io_putchar+0x30>)
 8002ec4:	f004 fd37 	bl	8007936 <HAL_UART_Transmit>
 8002ec8:	4603      	mov	r3, r0
 8002eca:	73fb      	strb	r3, [r7, #15]
    if(sts == HAL_OK) {
 8002ecc:	7bfb      	ldrb	r3, [r7, #15]
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	d101      	bne.n	8002ed6 <__io_putchar+0x22>
        return ch;
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	e001      	b.n	8002eda <__io_putchar+0x26>
    }
    return EOF;
 8002ed6:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002eda:	4618      	mov	r0, r3
 8002edc:	3710      	adds	r7, #16
 8002ede:	46bd      	mov	sp, r7
 8002ee0:	bd80      	pop	{r7, pc}
 8002ee2:	bf00      	nop
 8002ee4:	20000b98 	.word	0x20000b98

08002ee8 <__io_getchar>:
int __io_getchar(void) {
 8002ee8:	b580      	push	{r7, lr}
 8002eea:	b084      	sub	sp, #16
 8002eec:	af00      	add	r7, sp, #0
    if(__HAL_UART_GET_FLAG(&IO_UART , UART_FLAG_RXNE)) {
 8002eee:	4b1f      	ldr	r3, [pc, #124]	; (8002f6c <__io_getchar+0x84>)
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	f003 0320 	and.w	r3, r3, #32
 8002ef8:	2b20      	cmp	r3, #32
 8002efa:	d130      	bne.n	8002f5e <__io_getchar+0x76>
        uint8_t ch=0;
 8002efc:	2300      	movs	r3, #0
 8002efe:	73bb      	strb	r3, [r7, #14]
        __HAL_UART_CLEAR_FEFLAG(&IO_UART );
 8002f00:	2300      	movs	r3, #0
 8002f02:	60bb      	str	r3, [r7, #8]
 8002f04:	4b19      	ldr	r3, [pc, #100]	; (8002f6c <__io_getchar+0x84>)
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	60bb      	str	r3, [r7, #8]
 8002f0c:	4b17      	ldr	r3, [pc, #92]	; (8002f6c <__io_getchar+0x84>)
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	685b      	ldr	r3, [r3, #4]
 8002f12:	60bb      	str	r3, [r7, #8]
 8002f14:	68bb      	ldr	r3, [r7, #8]
        __HAL_UART_CLEAR_OREFLAG(&IO_UART );
 8002f16:	2300      	movs	r3, #0
 8002f18:	607b      	str	r3, [r7, #4]
 8002f1a:	4b14      	ldr	r3, [pc, #80]	; (8002f6c <__io_getchar+0x84>)
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	607b      	str	r3, [r7, #4]
 8002f22:	4b12      	ldr	r3, [pc, #72]	; (8002f6c <__io_getchar+0x84>)
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	685b      	ldr	r3, [r3, #4]
 8002f28:	607b      	str	r3, [r7, #4]
 8002f2a:	687b      	ldr	r3, [r7, #4]
        __HAL_UART_CLEAR_PEFLAG(&IO_UART );
 8002f2c:	2300      	movs	r3, #0
 8002f2e:	603b      	str	r3, [r7, #0]
 8002f30:	4b0e      	ldr	r3, [pc, #56]	; (8002f6c <__io_getchar+0x84>)
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	603b      	str	r3, [r7, #0]
 8002f38:	4b0c      	ldr	r3, [pc, #48]	; (8002f6c <__io_getchar+0x84>)
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	685b      	ldr	r3, [r3, #4]
 8002f3e:	603b      	str	r3, [r7, #0]
 8002f40:	683b      	ldr	r3, [r7, #0]
        HAL_StatusTypeDef sts = HAL_UART_Receive(&IO_UART ,&ch,1,1);
 8002f42:	f107 010e 	add.w	r1, r7, #14
 8002f46:	2301      	movs	r3, #1
 8002f48:	2201      	movs	r2, #1
 8002f4a:	4808      	ldr	r0, [pc, #32]	; (8002f6c <__io_getchar+0x84>)
 8002f4c:	f004 fd8c 	bl	8007a68 <HAL_UART_Receive>
 8002f50:	4603      	mov	r3, r0
 8002f52:	73fb      	strb	r3, [r7, #15]
        if(sts == HAL_OK) {
 8002f54:	7bfb      	ldrb	r3, [r7, #15]
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	d101      	bne.n	8002f5e <__io_getchar+0x76>
            return (int)ch;
 8002f5a:	7bbb      	ldrb	r3, [r7, #14]
 8002f5c:	e001      	b.n	8002f62 <__io_getchar+0x7a>
        }
    }
    return EOF;
 8002f5e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002f62:	4618      	mov	r0, r3
 8002f64:	3710      	adds	r7, #16
 8002f66:	46bd      	mov	sp, r7
 8002f68:	bd80      	pop	{r7, pc}
 8002f6a:	bf00      	nop
 8002f6c:	20000b98 	.word	0x20000b98

08002f70 <_read>:
int _read(int file, char *ptr, int len){
 8002f70:	b580      	push	{r7, lr}
 8002f72:	b086      	sub	sp, #24
 8002f74:	af00      	add	r7, sp, #0
 8002f76:	60f8      	str	r0, [r7, #12]
 8002f78:	60b9      	str	r1, [r7, #8]
 8002f7a:	607a      	str	r2, [r7, #4]
int DataIdx;
    for (DataIdx = 0; DataIdx < len; DataIdx++) {
 8002f7c:	2300      	movs	r3, #0
 8002f7e:	617b      	str	r3, [r7, #20]
 8002f80:	e012      	b.n	8002fa8 <_read+0x38>
        int ch =  __io_getchar();
 8002f82:	f7ff ffb1 	bl	8002ee8 <__io_getchar>
 8002f86:	6138      	str	r0, [r7, #16]
        if(ch != EOF) {
 8002f88:	693b      	ldr	r3, [r7, #16]
 8002f8a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f8e:	d006      	beq.n	8002f9e <_read+0x2e>
             *ptr++ = ch;
 8002f90:	68bb      	ldr	r3, [r7, #8]
 8002f92:	1c5a      	adds	r2, r3, #1
 8002f94:	60ba      	str	r2, [r7, #8]
 8002f96:	693a      	ldr	r2, [r7, #16]
 8002f98:	b2d2      	uxtb	r2, r2
 8002f9a:	701a      	strb	r2, [r3, #0]
 8002f9c:	e001      	b.n	8002fa2 <_read+0x32>
        }
        else {
            return DataIdx;
 8002f9e:	697b      	ldr	r3, [r7, #20]
 8002fa0:	e007      	b.n	8002fb2 <_read+0x42>
    for (DataIdx = 0; DataIdx < len; DataIdx++) {
 8002fa2:	697b      	ldr	r3, [r7, #20]
 8002fa4:	3301      	adds	r3, #1
 8002fa6:	617b      	str	r3, [r7, #20]
 8002fa8:	697a      	ldr	r2, [r7, #20]
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	429a      	cmp	r2, r3
 8002fae:	dbe8      	blt.n	8002f82 <_read+0x12>
        }
    }
    return len;
 8002fb0:	687b      	ldr	r3, [r7, #4]
}
 8002fb2:	4618      	mov	r0, r3
 8002fb4:	3718      	adds	r7, #24
 8002fb6:	46bd      	mov	sp, r7
 8002fb8:	bd80      	pop	{r7, pc}

08002fba <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002fba:	b480      	push	{r7}
 8002fbc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8002fbe:	bf00      	nop
 8002fc0:	46bd      	mov	sp, r7
 8002fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fc6:	4770      	bx	lr

08002fc8 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8002fc8:	b580      	push	{r7, lr}
 8002fca:	af00      	add	r7, sp, #0

  hspi1.Instance = SPI1;
 8002fcc:	4b17      	ldr	r3, [pc, #92]	; (800302c <MX_SPI1_Init+0x64>)
 8002fce:	4a18      	ldr	r2, [pc, #96]	; (8003030 <MX_SPI1_Init+0x68>)
 8002fd0:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8002fd2:	4b16      	ldr	r3, [pc, #88]	; (800302c <MX_SPI1_Init+0x64>)
 8002fd4:	f44f 7282 	mov.w	r2, #260	; 0x104
 8002fd8:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8002fda:	4b14      	ldr	r3, [pc, #80]	; (800302c <MX_SPI1_Init+0x64>)
 8002fdc:	2200      	movs	r2, #0
 8002fde:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8002fe0:	4b12      	ldr	r3, [pc, #72]	; (800302c <MX_SPI1_Init+0x64>)
 8002fe2:	2200      	movs	r2, #0
 8002fe4:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002fe6:	4b11      	ldr	r3, [pc, #68]	; (800302c <MX_SPI1_Init+0x64>)
 8002fe8:	2200      	movs	r2, #0
 8002fea:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002fec:	4b0f      	ldr	r3, [pc, #60]	; (800302c <MX_SPI1_Init+0x64>)
 8002fee:	2200      	movs	r2, #0
 8002ff0:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8002ff2:	4b0e      	ldr	r3, [pc, #56]	; (800302c <MX_SPI1_Init+0x64>)
 8002ff4:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002ff8:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002ffa:	4b0c      	ldr	r3, [pc, #48]	; (800302c <MX_SPI1_Init+0x64>)
 8002ffc:	2200      	movs	r2, #0
 8002ffe:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8003000:	4b0a      	ldr	r3, [pc, #40]	; (800302c <MX_SPI1_Init+0x64>)
 8003002:	2200      	movs	r2, #0
 8003004:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8003006:	4b09      	ldr	r3, [pc, #36]	; (800302c <MX_SPI1_Init+0x64>)
 8003008:	2200      	movs	r2, #0
 800300a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800300c:	4b07      	ldr	r3, [pc, #28]	; (800302c <MX_SPI1_Init+0x64>)
 800300e:	2200      	movs	r2, #0
 8003010:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8003012:	4b06      	ldr	r3, [pc, #24]	; (800302c <MX_SPI1_Init+0x64>)
 8003014:	220a      	movs	r2, #10
 8003016:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8003018:	4804      	ldr	r0, [pc, #16]	; (800302c <MX_SPI1_Init+0x64>)
 800301a:	f003 f80b 	bl	8006034 <HAL_SPI_Init>
 800301e:	4603      	mov	r3, r0
 8003020:	2b00      	cmp	r3, #0
 8003022:	d001      	beq.n	8003028 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8003024:	f7ff ffc9 	bl	8002fba <Error_Handler>
  }

}
 8003028:	bf00      	nop
 800302a:	bd80      	pop	{r7, pc}
 800302c:	20000880 	.word	0x20000880
 8003030:	40013000 	.word	0x40013000

08003034 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8003034:	b580      	push	{r7, lr}
 8003036:	b08a      	sub	sp, #40	; 0x28
 8003038:	af00      	add	r7, sp, #0
 800303a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800303c:	f107 0314 	add.w	r3, r7, #20
 8003040:	2200      	movs	r2, #0
 8003042:	601a      	str	r2, [r3, #0]
 8003044:	605a      	str	r2, [r3, #4]
 8003046:	609a      	str	r2, [r3, #8]
 8003048:	60da      	str	r2, [r3, #12]
 800304a:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	4a28      	ldr	r2, [pc, #160]	; (80030f4 <HAL_SPI_MspInit+0xc0>)
 8003052:	4293      	cmp	r3, r2
 8003054:	d149      	bne.n	80030ea <HAL_SPI_MspInit+0xb6>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8003056:	2300      	movs	r3, #0
 8003058:	613b      	str	r3, [r7, #16]
 800305a:	4b27      	ldr	r3, [pc, #156]	; (80030f8 <HAL_SPI_MspInit+0xc4>)
 800305c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800305e:	4a26      	ldr	r2, [pc, #152]	; (80030f8 <HAL_SPI_MspInit+0xc4>)
 8003060:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8003064:	6453      	str	r3, [r2, #68]	; 0x44
 8003066:	4b24      	ldr	r3, [pc, #144]	; (80030f8 <HAL_SPI_MspInit+0xc4>)
 8003068:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800306a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800306e:	613b      	str	r3, [r7, #16]
 8003070:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003072:	2300      	movs	r3, #0
 8003074:	60fb      	str	r3, [r7, #12]
 8003076:	4b20      	ldr	r3, [pc, #128]	; (80030f8 <HAL_SPI_MspInit+0xc4>)
 8003078:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800307a:	4a1f      	ldr	r2, [pc, #124]	; (80030f8 <HAL_SPI_MspInit+0xc4>)
 800307c:	f043 0301 	orr.w	r3, r3, #1
 8003080:	6313      	str	r3, [r2, #48]	; 0x30
 8003082:	4b1d      	ldr	r3, [pc, #116]	; (80030f8 <HAL_SPI_MspInit+0xc4>)
 8003084:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003086:	f003 0301 	and.w	r3, r3, #1
 800308a:	60fb      	str	r3, [r7, #12]
 800308c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800308e:	2300      	movs	r3, #0
 8003090:	60bb      	str	r3, [r7, #8]
 8003092:	4b19      	ldr	r3, [pc, #100]	; (80030f8 <HAL_SPI_MspInit+0xc4>)
 8003094:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003096:	4a18      	ldr	r2, [pc, #96]	; (80030f8 <HAL_SPI_MspInit+0xc4>)
 8003098:	f043 0302 	orr.w	r3, r3, #2
 800309c:	6313      	str	r3, [r2, #48]	; 0x30
 800309e:	4b16      	ldr	r3, [pc, #88]	; (80030f8 <HAL_SPI_MspInit+0xc4>)
 80030a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030a2:	f003 0302 	and.w	r3, r3, #2
 80030a6:	60bb      	str	r3, [r7, #8]
 80030a8:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    PB3     ------> SPI1_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80030aa:	23c0      	movs	r3, #192	; 0xc0
 80030ac:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80030ae:	2302      	movs	r3, #2
 80030b0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80030b2:	2300      	movs	r3, #0
 80030b4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80030b6:	2303      	movs	r3, #3
 80030b8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80030ba:	2305      	movs	r3, #5
 80030bc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80030be:	f107 0314 	add.w	r3, r7, #20
 80030c2:	4619      	mov	r1, r3
 80030c4:	480d      	ldr	r0, [pc, #52]	; (80030fc <HAL_SPI_MspInit+0xc8>)
 80030c6:	f001 fbdb 	bl	8004880 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80030ca:	2308      	movs	r3, #8
 80030cc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80030ce:	2302      	movs	r3, #2
 80030d0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80030d2:	2300      	movs	r3, #0
 80030d4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80030d6:	2303      	movs	r3, #3
 80030d8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80030da:	2305      	movs	r3, #5
 80030dc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80030de:	f107 0314 	add.w	r3, r7, #20
 80030e2:	4619      	mov	r1, r3
 80030e4:	4806      	ldr	r0, [pc, #24]	; (8003100 <HAL_SPI_MspInit+0xcc>)
 80030e6:	f001 fbcb 	bl	8004880 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 80030ea:	bf00      	nop
 80030ec:	3728      	adds	r7, #40	; 0x28
 80030ee:	46bd      	mov	sp, r7
 80030f0:	bd80      	pop	{r7, pc}
 80030f2:	bf00      	nop
 80030f4:	40013000 	.word	0x40013000
 80030f8:	40023800 	.word	0x40023800
 80030fc:	40020000 	.word	0x40020000
 8003100:	40020400 	.word	0x40020400

08003104 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003104:	b480      	push	{r7}
 8003106:	b083      	sub	sp, #12
 8003108:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800310a:	2300      	movs	r3, #0
 800310c:	607b      	str	r3, [r7, #4]
 800310e:	4b10      	ldr	r3, [pc, #64]	; (8003150 <HAL_MspInit+0x4c>)
 8003110:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003112:	4a0f      	ldr	r2, [pc, #60]	; (8003150 <HAL_MspInit+0x4c>)
 8003114:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003118:	6453      	str	r3, [r2, #68]	; 0x44
 800311a:	4b0d      	ldr	r3, [pc, #52]	; (8003150 <HAL_MspInit+0x4c>)
 800311c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800311e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003122:	607b      	str	r3, [r7, #4]
 8003124:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003126:	2300      	movs	r3, #0
 8003128:	603b      	str	r3, [r7, #0]
 800312a:	4b09      	ldr	r3, [pc, #36]	; (8003150 <HAL_MspInit+0x4c>)
 800312c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800312e:	4a08      	ldr	r2, [pc, #32]	; (8003150 <HAL_MspInit+0x4c>)
 8003130:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003134:	6413      	str	r3, [r2, #64]	; 0x40
 8003136:	4b06      	ldr	r3, [pc, #24]	; (8003150 <HAL_MspInit+0x4c>)
 8003138:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800313a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800313e:	603b      	str	r3, [r7, #0]
 8003140:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003142:	bf00      	nop
 8003144:	370c      	adds	r7, #12
 8003146:	46bd      	mov	sp, r7
 8003148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800314c:	4770      	bx	lr
 800314e:	bf00      	nop
 8003150:	40023800 	.word	0x40023800

08003154 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003154:	b480      	push	{r7}
 8003156:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8003158:	bf00      	nop
 800315a:	46bd      	mov	sp, r7
 800315c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003160:	4770      	bx	lr

08003162 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003162:	b480      	push	{r7}
 8003164:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003166:	e7fe      	b.n	8003166 <HardFault_Handler+0x4>

08003168 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003168:	b480      	push	{r7}
 800316a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800316c:	e7fe      	b.n	800316c <MemManage_Handler+0x4>

0800316e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800316e:	b480      	push	{r7}
 8003170:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003172:	e7fe      	b.n	8003172 <BusFault_Handler+0x4>

08003174 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003174:	b480      	push	{r7}
 8003176:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003178:	e7fe      	b.n	8003178 <UsageFault_Handler+0x4>

0800317a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800317a:	b480      	push	{r7}
 800317c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800317e:	bf00      	nop
 8003180:	46bd      	mov	sp, r7
 8003182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003186:	4770      	bx	lr

08003188 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003188:	b480      	push	{r7}
 800318a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800318c:	bf00      	nop
 800318e:	46bd      	mov	sp, r7
 8003190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003194:	4770      	bx	lr

08003196 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003196:	b480      	push	{r7}
 8003198:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800319a:	bf00      	nop
 800319c:	46bd      	mov	sp, r7
 800319e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031a2:	4770      	bx	lr

080031a4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80031a4:	b580      	push	{r7, lr}
 80031a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80031a8:	f001 f82c 	bl	8004204 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80031ac:	bf00      	nop
 80031ae:	bd80      	pop	{r7, pc}

080031b0 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 80031b0:	b580      	push	{r7, lr}
 80031b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_7);
 80031b4:	2080      	movs	r0, #128	; 0x80
 80031b6:	f001 fd49 	bl	8004c4c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 80031ba:	bf00      	nop
 80031bc:	bd80      	pop	{r7, pc}
	...

080031c0 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80031c0:	b580      	push	{r7, lr}
 80031c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80031c4:	4802      	ldr	r0, [pc, #8]	; (80031d0 <TIM2_IRQHandler+0x10>)
 80031c6:	f003 fa5e 	bl	8006686 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80031ca:	bf00      	nop
 80031cc:	bd80      	pop	{r7, pc}
 80031ce:	bf00      	nop
 80031d0:	20000a98 	.word	0x20000a98

080031d4 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80031d4:	b580      	push	{r7, lr}
 80031d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80031d8:	4802      	ldr	r0, [pc, #8]	; (80031e4 <USART2_IRQHandler+0x10>)
 80031da:	f004 fceb 	bl	8007bb4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80031de:	bf00      	nop
 80031e0:	bd80      	pop	{r7, pc}
 80031e2:	bf00      	nop
 80031e4:	20000b98 	.word	0x20000b98

080031e8 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80031e8:	b580      	push	{r7, lr}
 80031ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */
	if(__HAL_GPIO_EXTI_GET_FLAG(GPIO_PIN_13)){
 80031ec:	4b0a      	ldr	r3, [pc, #40]	; (8003218 <EXTI15_10_IRQHandler+0x30>)
 80031ee:	695b      	ldr	r3, [r3, #20]
 80031f0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80031f4:	2b00      	cmp	r3, #0
 80031f6:	d004      	beq.n	8003202 <EXTI15_10_IRQHandler+0x1a>
		printf("Screen Pressed\r\n");
 80031f8:	4808      	ldr	r0, [pc, #32]	; (800321c <EXTI15_10_IRQHandler+0x34>)
 80031fa:	f006 f96f 	bl	80094dc <puts>
		EXTI->PR & (GPIO_PIN_13); //Clear the flag
 80031fe:	4b06      	ldr	r3, [pc, #24]	; (8003218 <EXTI15_10_IRQHandler+0x30>)
 8003200:	695b      	ldr	r3, [r3, #20]

	}
  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_12);
 8003202:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8003206:	f001 fd21 	bl	8004c4c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 800320a:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 800320e:	f001 fd1d 	bl	8004c4c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8003212:	bf00      	nop
 8003214:	bd80      	pop	{r7, pc}
 8003216:	bf00      	nop
 8003218:	40013c00 	.word	0x40013c00
 800321c:	0800beb0 	.word	0x0800beb0

08003220 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8003220:	b580      	push	{r7, lr}
 8003222:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_DAC_IRQHandler(&hdac);
 8003224:	4803      	ldr	r0, [pc, #12]	; (8003234 <TIM6_DAC_IRQHandler+0x14>)
 8003226:	f001 fa5e 	bl	80046e6 <HAL_DAC_IRQHandler>
  HAL_TIM_IRQHandler(&htim6);
 800322a:	4803      	ldr	r0, [pc, #12]	; (8003238 <TIM6_DAC_IRQHandler+0x18>)
 800322c:	f003 fa2b 	bl	8006686 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8003230:	bf00      	nop
 8003232:	bd80      	pop	{r7, pc}
 8003234:	200007c4 	.word	0x200007c4
 8003238:	20000a18 	.word	0x20000a18

0800323c <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 800323c:	b580      	push	{r7, lr}
 800323e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8003240:	4802      	ldr	r0, [pc, #8]	; (800324c <TIM7_IRQHandler+0x10>)
 8003242:	f003 fa20 	bl	8006686 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 8003246:	bf00      	nop
 8003248:	bd80      	pop	{r7, pc}
 800324a:	bf00      	nop
 800324c:	20000b18 	.word	0x20000b18

08003250 <_write>:

return len;
}

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8003250:	b580      	push	{r7, lr}
 8003252:	b086      	sub	sp, #24
 8003254:	af00      	add	r7, sp, #0
 8003256:	60f8      	str	r0, [r7, #12]
 8003258:	60b9      	str	r1, [r7, #8]
 800325a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800325c:	2300      	movs	r3, #0
 800325e:	617b      	str	r3, [r7, #20]
 8003260:	e009      	b.n	8003276 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8003262:	68bb      	ldr	r3, [r7, #8]
 8003264:	1c5a      	adds	r2, r3, #1
 8003266:	60ba      	str	r2, [r7, #8]
 8003268:	781b      	ldrb	r3, [r3, #0]
 800326a:	4618      	mov	r0, r3
 800326c:	f7ff fe22 	bl	8002eb4 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003270:	697b      	ldr	r3, [r7, #20]
 8003272:	3301      	adds	r3, #1
 8003274:	617b      	str	r3, [r7, #20]
 8003276:	697a      	ldr	r2, [r7, #20]
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	429a      	cmp	r2, r3
 800327c:	dbf1      	blt.n	8003262 <_write+0x12>
	}
	return len;
 800327e:	687b      	ldr	r3, [r7, #4]
}
 8003280:	4618      	mov	r0, r3
 8003282:	3718      	adds	r7, #24
 8003284:	46bd      	mov	sp, r7
 8003286:	bd80      	pop	{r7, pc}

08003288 <_close>:

int _close(int file)
{
 8003288:	b480      	push	{r7}
 800328a:	b083      	sub	sp, #12
 800328c:	af00      	add	r7, sp, #0
 800328e:	6078      	str	r0, [r7, #4]
	return -1;
 8003290:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003294:	4618      	mov	r0, r3
 8003296:	370c      	adds	r7, #12
 8003298:	46bd      	mov	sp, r7
 800329a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800329e:	4770      	bx	lr

080032a0 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80032a0:	b480      	push	{r7}
 80032a2:	b083      	sub	sp, #12
 80032a4:	af00      	add	r7, sp, #0
 80032a6:	6078      	str	r0, [r7, #4]
 80032a8:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80032aa:	683b      	ldr	r3, [r7, #0]
 80032ac:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80032b0:	605a      	str	r2, [r3, #4]
	return 0;
 80032b2:	2300      	movs	r3, #0
}
 80032b4:	4618      	mov	r0, r3
 80032b6:	370c      	adds	r7, #12
 80032b8:	46bd      	mov	sp, r7
 80032ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032be:	4770      	bx	lr

080032c0 <_isatty>:

int _isatty(int file)
{
 80032c0:	b480      	push	{r7}
 80032c2:	b083      	sub	sp, #12
 80032c4:	af00      	add	r7, sp, #0
 80032c6:	6078      	str	r0, [r7, #4]
	return 1;
 80032c8:	2301      	movs	r3, #1
}
 80032ca:	4618      	mov	r0, r3
 80032cc:	370c      	adds	r7, #12
 80032ce:	46bd      	mov	sp, r7
 80032d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032d4:	4770      	bx	lr

080032d6 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80032d6:	b480      	push	{r7}
 80032d8:	b085      	sub	sp, #20
 80032da:	af00      	add	r7, sp, #0
 80032dc:	60f8      	str	r0, [r7, #12]
 80032de:	60b9      	str	r1, [r7, #8]
 80032e0:	607a      	str	r2, [r7, #4]
	return 0;
 80032e2:	2300      	movs	r3, #0
}
 80032e4:	4618      	mov	r0, r3
 80032e6:	3714      	adds	r7, #20
 80032e8:	46bd      	mov	sp, r7
 80032ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032ee:	4770      	bx	lr

080032f0 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 80032f0:	b580      	push	{r7, lr}
 80032f2:	b084      	sub	sp, #16
 80032f4:	af00      	add	r7, sp, #0
 80032f6:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 80032f8:	4b11      	ldr	r3, [pc, #68]	; (8003340 <_sbrk+0x50>)
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	2b00      	cmp	r3, #0
 80032fe:	d102      	bne.n	8003306 <_sbrk+0x16>
		heap_end = &end;
 8003300:	4b0f      	ldr	r3, [pc, #60]	; (8003340 <_sbrk+0x50>)
 8003302:	4a10      	ldr	r2, [pc, #64]	; (8003344 <_sbrk+0x54>)
 8003304:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8003306:	4b0e      	ldr	r3, [pc, #56]	; (8003340 <_sbrk+0x50>)
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 800330c:	4b0c      	ldr	r3, [pc, #48]	; (8003340 <_sbrk+0x50>)
 800330e:	681a      	ldr	r2, [r3, #0]
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	4413      	add	r3, r2
 8003314:	466a      	mov	r2, sp
 8003316:	4293      	cmp	r3, r2
 8003318:	d907      	bls.n	800332a <_sbrk+0x3a>
	{
		errno = ENOMEM;
 800331a:	f005 fa77 	bl	800880c <__errno>
 800331e:	4602      	mov	r2, r0
 8003320:	230c      	movs	r3, #12
 8003322:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8003324:	f04f 33ff 	mov.w	r3, #4294967295
 8003328:	e006      	b.n	8003338 <_sbrk+0x48>
	}

	heap_end += incr;
 800332a:	4b05      	ldr	r3, [pc, #20]	; (8003340 <_sbrk+0x50>)
 800332c:	681a      	ldr	r2, [r3, #0]
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	4413      	add	r3, r2
 8003332:	4a03      	ldr	r2, [pc, #12]	; (8003340 <_sbrk+0x50>)
 8003334:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8003336:	68fb      	ldr	r3, [r7, #12]
}
 8003338:	4618      	mov	r0, r3
 800333a:	3710      	adds	r7, #16
 800333c:	46bd      	mov	sp, r7
 800333e:	bd80      	pop	{r7, pc}
 8003340:	20000780 	.word	0x20000780
 8003344:	20000be0 	.word	0x20000be0

08003348 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003348:	b480      	push	{r7}
 800334a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800334c:	4b08      	ldr	r3, [pc, #32]	; (8003370 <SystemInit+0x28>)
 800334e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003352:	4a07      	ldr	r2, [pc, #28]	; (8003370 <SystemInit+0x28>)
 8003354:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003358:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800335c:	4b04      	ldr	r3, [pc, #16]	; (8003370 <SystemInit+0x28>)
 800335e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8003362:	609a      	str	r2, [r3, #8]
#endif
}
 8003364:	bf00      	nop
 8003366:	46bd      	mov	sp, r7
 8003368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800336c:	4770      	bx	lr
 800336e:	bf00      	nop
 8003370:	e000ed00 	.word	0xe000ed00

08003374 <MX_TIM1_Init>:
TIM_HandleTypeDef htim11;
TIM_HandleTypeDef htim12;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8003374:	b580      	push	{r7, lr}
 8003376:	b08a      	sub	sp, #40	; 0x28
 8003378:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800337a:	f107 0318 	add.w	r3, r7, #24
 800337e:	2200      	movs	r2, #0
 8003380:	601a      	str	r2, [r3, #0]
 8003382:	605a      	str	r2, [r3, #4]
 8003384:	609a      	str	r2, [r3, #8]
 8003386:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003388:	f107 0310 	add.w	r3, r7, #16
 800338c:	2200      	movs	r2, #0
 800338e:	601a      	str	r2, [r3, #0]
 8003390:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8003392:	463b      	mov	r3, r7
 8003394:	2200      	movs	r2, #0
 8003396:	601a      	str	r2, [r3, #0]
 8003398:	605a      	str	r2, [r3, #4]
 800339a:	609a      	str	r2, [r3, #8]
 800339c:	60da      	str	r2, [r3, #12]

  htim1.Instance = TIM1;
 800339e:	4b2d      	ldr	r3, [pc, #180]	; (8003454 <MX_TIM1_Init+0xe0>)
 80033a0:	4a2d      	ldr	r2, [pc, #180]	; (8003458 <MX_TIM1_Init+0xe4>)
 80033a2:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 50-1;
 80033a4:	4b2b      	ldr	r3, [pc, #172]	; (8003454 <MX_TIM1_Init+0xe0>)
 80033a6:	2231      	movs	r2, #49	; 0x31
 80033a8:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80033aa:	4b2a      	ldr	r3, [pc, #168]	; (8003454 <MX_TIM1_Init+0xe0>)
 80033ac:	2200      	movs	r2, #0
 80033ae:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 80033b0:	4b28      	ldr	r3, [pc, #160]	; (8003454 <MX_TIM1_Init+0xe0>)
 80033b2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80033b6:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80033b8:	4b26      	ldr	r3, [pc, #152]	; (8003454 <MX_TIM1_Init+0xe0>)
 80033ba:	2200      	movs	r2, #0
 80033bc:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80033be:	4b25      	ldr	r3, [pc, #148]	; (8003454 <MX_TIM1_Init+0xe0>)
 80033c0:	2200      	movs	r2, #0
 80033c2:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80033c4:	4b23      	ldr	r3, [pc, #140]	; (8003454 <MX_TIM1_Init+0xe0>)
 80033c6:	2200      	movs	r2, #0
 80033c8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80033ca:	4822      	ldr	r0, [pc, #136]	; (8003454 <MX_TIM1_Init+0xe0>)
 80033cc:	f002 fe96 	bl	80060fc <HAL_TIM_Base_Init>
 80033d0:	4603      	mov	r3, r0
 80033d2:	2b00      	cmp	r3, #0
 80033d4:	d001      	beq.n	80033da <MX_TIM1_Init+0x66>
  {
    Error_Handler();
 80033d6:	f7ff fdf0 	bl	8002fba <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80033da:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80033de:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80033e0:	f107 0318 	add.w	r3, r7, #24
 80033e4:	4619      	mov	r1, r3
 80033e6:	481b      	ldr	r0, [pc, #108]	; (8003454 <MX_TIM1_Init+0xe0>)
 80033e8:	f003 fc18 	bl	8006c1c <HAL_TIM_ConfigClockSource>
 80033ec:	4603      	mov	r3, r0
 80033ee:	2b00      	cmp	r3, #0
 80033f0:	d001      	beq.n	80033f6 <MX_TIM1_Init+0x82>
  {
    Error_Handler();
 80033f2:	f7ff fde2 	bl	8002fba <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim1) != HAL_OK)
 80033f6:	4817      	ldr	r0, [pc, #92]	; (8003454 <MX_TIM1_Init+0xe0>)
 80033f8:	f002 ff6e 	bl	80062d8 <HAL_TIM_IC_Init>
 80033fc:	4603      	mov	r3, r0
 80033fe:	2b00      	cmp	r3, #0
 8003400:	d001      	beq.n	8003406 <MX_TIM1_Init+0x92>
  {
    Error_Handler();
 8003402:	f7ff fdda 	bl	8002fba <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003406:	2300      	movs	r3, #0
 8003408:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800340a:	2300      	movs	r3, #0
 800340c:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800340e:	f107 0310 	add.w	r3, r7, #16
 8003412:	4619      	mov	r1, r3
 8003414:	480f      	ldr	r0, [pc, #60]	; (8003454 <MX_TIM1_Init+0xe0>)
 8003416:	f004 f95f 	bl	80076d8 <HAL_TIMEx_MasterConfigSynchronization>
 800341a:	4603      	mov	r3, r0
 800341c:	2b00      	cmp	r3, #0
 800341e:	d001      	beq.n	8003424 <MX_TIM1_Init+0xb0>
  {
    Error_Handler();
 8003420:	f7ff fdcb 	bl	8002fba <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_BOTHEDGE;
 8003424:	230a      	movs	r3, #10
 8003426:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8003428:	2301      	movs	r3, #1
 800342a:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 800342c:	2300      	movs	r3, #0
 800342e:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 4;
 8003430:	2304      	movs	r3, #4
 8003432:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 8003434:	463b      	mov	r3, r7
 8003436:	2204      	movs	r2, #4
 8003438:	4619      	mov	r1, r3
 800343a:	4806      	ldr	r0, [pc, #24]	; (8003454 <MX_TIM1_Init+0xe0>)
 800343c:	f003 fa8c 	bl	8006958 <HAL_TIM_IC_ConfigChannel>
 8003440:	4603      	mov	r3, r0
 8003442:	2b00      	cmp	r3, #0
 8003444:	d001      	beq.n	800344a <MX_TIM1_Init+0xd6>
  {
    Error_Handler();
 8003446:	f7ff fdb8 	bl	8002fba <Error_Handler>
  }

}
 800344a:	bf00      	nop
 800344c:	3728      	adds	r7, #40	; 0x28
 800344e:	46bd      	mov	sp, r7
 8003450:	bd80      	pop	{r7, pc}
 8003452:	bf00      	nop
 8003454:	20000a58 	.word	0x20000a58
 8003458:	40010000 	.word	0x40010000

0800345c <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 800345c:	b580      	push	{r7, lr}
 800345e:	b08e      	sub	sp, #56	; 0x38
 8003460:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003462:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003466:	2200      	movs	r2, #0
 8003468:	601a      	str	r2, [r3, #0]
 800346a:	605a      	str	r2, [r3, #4]
 800346c:	609a      	str	r2, [r3, #8]
 800346e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003470:	f107 0320 	add.w	r3, r7, #32
 8003474:	2200      	movs	r2, #0
 8003476:	601a      	str	r2, [r3, #0]
 8003478:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800347a:	1d3b      	adds	r3, r7, #4
 800347c:	2200      	movs	r2, #0
 800347e:	601a      	str	r2, [r3, #0]
 8003480:	605a      	str	r2, [r3, #4]
 8003482:	609a      	str	r2, [r3, #8]
 8003484:	60da      	str	r2, [r3, #12]
 8003486:	611a      	str	r2, [r3, #16]
 8003488:	615a      	str	r2, [r3, #20]
 800348a:	619a      	str	r2, [r3, #24]

  htim2.Instance = TIM2;
 800348c:	4b2d      	ldr	r3, [pc, #180]	; (8003544 <MX_TIM2_Init+0xe8>)
 800348e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8003492:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 2-1;
 8003494:	4b2b      	ldr	r3, [pc, #172]	; (8003544 <MX_TIM2_Init+0xe8>)
 8003496:	2201      	movs	r2, #1
 8003498:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800349a:	4b2a      	ldr	r3, [pc, #168]	; (8003544 <MX_TIM2_Init+0xe8>)
 800349c:	2200      	movs	r2, #0
 800349e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = MOTOR_PWM_PERIOD;
 80034a0:	4b28      	ldr	r3, [pc, #160]	; (8003544 <MX_TIM2_Init+0xe8>)
 80034a2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80034a6:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80034a8:	4b26      	ldr	r3, [pc, #152]	; (8003544 <MX_TIM2_Init+0xe8>)
 80034aa:	2200      	movs	r2, #0
 80034ac:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80034ae:	4b25      	ldr	r3, [pc, #148]	; (8003544 <MX_TIM2_Init+0xe8>)
 80034b0:	2200      	movs	r2, #0
 80034b2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80034b4:	4823      	ldr	r0, [pc, #140]	; (8003544 <MX_TIM2_Init+0xe8>)
 80034b6:	f002 fe21 	bl	80060fc <HAL_TIM_Base_Init>
 80034ba:	4603      	mov	r3, r0
 80034bc:	2b00      	cmp	r3, #0
 80034be:	d001      	beq.n	80034c4 <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 80034c0:	f7ff fd7b 	bl	8002fba <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80034c4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80034c8:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80034ca:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80034ce:	4619      	mov	r1, r3
 80034d0:	481c      	ldr	r0, [pc, #112]	; (8003544 <MX_TIM2_Init+0xe8>)
 80034d2:	f003 fba3 	bl	8006c1c <HAL_TIM_ConfigClockSource>
 80034d6:	4603      	mov	r3, r0
 80034d8:	2b00      	cmp	r3, #0
 80034da:	d001      	beq.n	80034e0 <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 80034dc:	f7ff fd6d 	bl	8002fba <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80034e0:	4818      	ldr	r0, [pc, #96]	; (8003544 <MX_TIM2_Init+0xe8>)
 80034e2:	f002 fe85 	bl	80061f0 <HAL_TIM_PWM_Init>
 80034e6:	4603      	mov	r3, r0
 80034e8:	2b00      	cmp	r3, #0
 80034ea:	d001      	beq.n	80034f0 <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 80034ec:	f7ff fd65 	bl	8002fba <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80034f0:	2300      	movs	r3, #0
 80034f2:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80034f4:	2300      	movs	r3, #0
 80034f6:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80034f8:	f107 0320 	add.w	r3, r7, #32
 80034fc:	4619      	mov	r1, r3
 80034fe:	4811      	ldr	r0, [pc, #68]	; (8003544 <MX_TIM2_Init+0xe8>)
 8003500:	f004 f8ea 	bl	80076d8 <HAL_TIMEx_MasterConfigSynchronization>
 8003504:	4603      	mov	r3, r0
 8003506:	2b00      	cmp	r3, #0
 8003508:	d001      	beq.n	800350e <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 800350a:	f7ff fd56 	bl	8002fba <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800350e:	2360      	movs	r3, #96	; 0x60
 8003510:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8003512:	2300      	movs	r3, #0
 8003514:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003516:	2300      	movs	r3, #0
 8003518:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800351a:	2300      	movs	r3, #0
 800351c:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800351e:	1d3b      	adds	r3, r7, #4
 8003520:	2208      	movs	r2, #8
 8003522:	4619      	mov	r1, r3
 8003524:	4807      	ldr	r0, [pc, #28]	; (8003544 <MX_TIM2_Init+0xe8>)
 8003526:	f003 fab3 	bl	8006a90 <HAL_TIM_PWM_ConfigChannel>
 800352a:	4603      	mov	r3, r0
 800352c:	2b00      	cmp	r3, #0
 800352e:	d001      	beq.n	8003534 <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 8003530:	f7ff fd43 	bl	8002fba <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim2);
 8003534:	4803      	ldr	r0, [pc, #12]	; (8003544 <MX_TIM2_Init+0xe8>)
 8003536:	f000 fc63 	bl	8003e00 <HAL_TIM_MspPostInit>

}
 800353a:	bf00      	nop
 800353c:	3738      	adds	r7, #56	; 0x38
 800353e:	46bd      	mov	sp, r7
 8003540:	bd80      	pop	{r7, pc}
 8003542:	bf00      	nop
 8003544:	20000a98 	.word	0x20000a98

08003548 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8003548:	b580      	push	{r7, lr}
 800354a:	b08c      	sub	sp, #48	; 0x30
 800354c:	af00      	add	r7, sp, #0
  TIM_Encoder_InitTypeDef sConfig = {0};
 800354e:	f107 030c 	add.w	r3, r7, #12
 8003552:	2224      	movs	r2, #36	; 0x24
 8003554:	2100      	movs	r1, #0
 8003556:	4618      	mov	r0, r3
 8003558:	f005 fa7a 	bl	8008a50 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800355c:	1d3b      	adds	r3, r7, #4
 800355e:	2200      	movs	r2, #0
 8003560:	601a      	str	r2, [r3, #0]
 8003562:	605a      	str	r2, [r3, #4]

  htim3.Instance = TIM3;
 8003564:	4b20      	ldr	r3, [pc, #128]	; (80035e8 <MX_TIM3_Init+0xa0>)
 8003566:	4a21      	ldr	r2, [pc, #132]	; (80035ec <MX_TIM3_Init+0xa4>)
 8003568:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 800356a:	4b1f      	ldr	r3, [pc, #124]	; (80035e8 <MX_TIM3_Init+0xa0>)
 800356c:	2200      	movs	r2, #0
 800356e:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003570:	4b1d      	ldr	r3, [pc, #116]	; (80035e8 <MX_TIM3_Init+0xa0>)
 8003572:	2200      	movs	r2, #0
 8003574:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 0xFFFF;
 8003576:	4b1c      	ldr	r3, [pc, #112]	; (80035e8 <MX_TIM3_Init+0xa0>)
 8003578:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800357c:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800357e:	4b1a      	ldr	r3, [pc, #104]	; (80035e8 <MX_TIM3_Init+0xa0>)
 8003580:	2200      	movs	r2, #0
 8003582:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003584:	4b18      	ldr	r3, [pc, #96]	; (80035e8 <MX_TIM3_Init+0xa0>)
 8003586:	2200      	movs	r2, #0
 8003588:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 800358a:	2303      	movs	r3, #3
 800358c:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 800358e:	2300      	movs	r3, #0
 8003590:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8003592:	2301      	movs	r3, #1
 8003594:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8003596:	2300      	movs	r3, #0
 8003598:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 800359a:	2300      	movs	r3, #0
 800359c:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 800359e:	2300      	movs	r3, #0
 80035a0:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80035a2:	2301      	movs	r3, #1
 80035a4:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80035a6:	2300      	movs	r3, #0
 80035a8:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 80035aa:	2300      	movs	r3, #0
 80035ac:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 80035ae:	f107 030c 	add.w	r3, r7, #12
 80035b2:	4619      	mov	r1, r3
 80035b4:	480c      	ldr	r0, [pc, #48]	; (80035e8 <MX_TIM3_Init+0xa0>)
 80035b6:	f002 ff9d 	bl	80064f4 <HAL_TIM_Encoder_Init>
 80035ba:	4603      	mov	r3, r0
 80035bc:	2b00      	cmp	r3, #0
 80035be:	d001      	beq.n	80035c4 <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 80035c0:	f7ff fcfb 	bl	8002fba <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80035c4:	2300      	movs	r3, #0
 80035c6:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80035c8:	2300      	movs	r3, #0
 80035ca:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80035cc:	1d3b      	adds	r3, r7, #4
 80035ce:	4619      	mov	r1, r3
 80035d0:	4805      	ldr	r0, [pc, #20]	; (80035e8 <MX_TIM3_Init+0xa0>)
 80035d2:	f004 f881 	bl	80076d8 <HAL_TIMEx_MasterConfigSynchronization>
 80035d6:	4603      	mov	r3, r0
 80035d8:	2b00      	cmp	r3, #0
 80035da:	d001      	beq.n	80035e0 <MX_TIM3_Init+0x98>
  {
    Error_Handler();
 80035dc:	f7ff fced 	bl	8002fba <Error_Handler>
  }

}
 80035e0:	bf00      	nop
 80035e2:	3730      	adds	r7, #48	; 0x30
 80035e4:	46bd      	mov	sp, r7
 80035e6:	bd80      	pop	{r7, pc}
 80035e8:	20000998 	.word	0x20000998
 80035ec:	40000400 	.word	0x40000400

080035f0 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 80035f0:	b580      	push	{r7, lr}
 80035f2:	b08e      	sub	sp, #56	; 0x38
 80035f4:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80035f6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80035fa:	2200      	movs	r2, #0
 80035fc:	601a      	str	r2, [r3, #0]
 80035fe:	605a      	str	r2, [r3, #4]
 8003600:	609a      	str	r2, [r3, #8]
 8003602:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003604:	f107 0320 	add.w	r3, r7, #32
 8003608:	2200      	movs	r2, #0
 800360a:	601a      	str	r2, [r3, #0]
 800360c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800360e:	1d3b      	adds	r3, r7, #4
 8003610:	2200      	movs	r2, #0
 8003612:	601a      	str	r2, [r3, #0]
 8003614:	605a      	str	r2, [r3, #4]
 8003616:	609a      	str	r2, [r3, #8]
 8003618:	60da      	str	r2, [r3, #12]
 800361a:	611a      	str	r2, [r3, #16]
 800361c:	615a      	str	r2, [r3, #20]
 800361e:	619a      	str	r2, [r3, #24]

  htim4.Instance = TIM4;
 8003620:	4b2c      	ldr	r3, [pc, #176]	; (80036d4 <MX_TIM4_Init+0xe4>)
 8003622:	4a2d      	ldr	r2, [pc, #180]	; (80036d8 <MX_TIM4_Init+0xe8>)
 8003624:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 2-1;
 8003626:	4b2b      	ldr	r3, [pc, #172]	; (80036d4 <MX_TIM4_Init+0xe4>)
 8003628:	2201      	movs	r2, #1
 800362a:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800362c:	4b29      	ldr	r3, [pc, #164]	; (80036d4 <MX_TIM4_Init+0xe4>)
 800362e:	2200      	movs	r2, #0
 8003630:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = MOTOR_PWM_PERIOD;
 8003632:	4b28      	ldr	r3, [pc, #160]	; (80036d4 <MX_TIM4_Init+0xe4>)
 8003634:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003638:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800363a:	4b26      	ldr	r3, [pc, #152]	; (80036d4 <MX_TIM4_Init+0xe4>)
 800363c:	2200      	movs	r2, #0
 800363e:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003640:	4b24      	ldr	r3, [pc, #144]	; (80036d4 <MX_TIM4_Init+0xe4>)
 8003642:	2200      	movs	r2, #0
 8003644:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8003646:	4823      	ldr	r0, [pc, #140]	; (80036d4 <MX_TIM4_Init+0xe4>)
 8003648:	f002 fd58 	bl	80060fc <HAL_TIM_Base_Init>
 800364c:	4603      	mov	r3, r0
 800364e:	2b00      	cmp	r3, #0
 8003650:	d001      	beq.n	8003656 <MX_TIM4_Init+0x66>
  {
    Error_Handler();
 8003652:	f7ff fcb2 	bl	8002fba <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003656:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800365a:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 800365c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003660:	4619      	mov	r1, r3
 8003662:	481c      	ldr	r0, [pc, #112]	; (80036d4 <MX_TIM4_Init+0xe4>)
 8003664:	f003 fada 	bl	8006c1c <HAL_TIM_ConfigClockSource>
 8003668:	4603      	mov	r3, r0
 800366a:	2b00      	cmp	r3, #0
 800366c:	d001      	beq.n	8003672 <MX_TIM4_Init+0x82>
  {
    Error_Handler();
 800366e:	f7ff fca4 	bl	8002fba <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8003672:	4818      	ldr	r0, [pc, #96]	; (80036d4 <MX_TIM4_Init+0xe4>)
 8003674:	f002 fdbc 	bl	80061f0 <HAL_TIM_PWM_Init>
 8003678:	4603      	mov	r3, r0
 800367a:	2b00      	cmp	r3, #0
 800367c:	d001      	beq.n	8003682 <MX_TIM4_Init+0x92>
  {
    Error_Handler();
 800367e:	f7ff fc9c 	bl	8002fba <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003682:	2300      	movs	r3, #0
 8003684:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003686:	2300      	movs	r3, #0
 8003688:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800368a:	f107 0320 	add.w	r3, r7, #32
 800368e:	4619      	mov	r1, r3
 8003690:	4810      	ldr	r0, [pc, #64]	; (80036d4 <MX_TIM4_Init+0xe4>)
 8003692:	f004 f821 	bl	80076d8 <HAL_TIMEx_MasterConfigSynchronization>
 8003696:	4603      	mov	r3, r0
 8003698:	2b00      	cmp	r3, #0
 800369a:	d001      	beq.n	80036a0 <MX_TIM4_Init+0xb0>
  {
    Error_Handler();
 800369c:	f7ff fc8d 	bl	8002fba <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80036a0:	2360      	movs	r3, #96	; 0x60
 80036a2:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80036a4:	2300      	movs	r3, #0
 80036a6:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80036a8:	2300      	movs	r3, #0
 80036aa:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80036ac:	2300      	movs	r3, #0
 80036ae:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80036b0:	1d3b      	adds	r3, r7, #4
 80036b2:	2200      	movs	r2, #0
 80036b4:	4619      	mov	r1, r3
 80036b6:	4807      	ldr	r0, [pc, #28]	; (80036d4 <MX_TIM4_Init+0xe4>)
 80036b8:	f003 f9ea 	bl	8006a90 <HAL_TIM_PWM_ConfigChannel>
 80036bc:	4603      	mov	r3, r0
 80036be:	2b00      	cmp	r3, #0
 80036c0:	d001      	beq.n	80036c6 <MX_TIM4_Init+0xd6>
  {
    Error_Handler();
 80036c2:	f7ff fc7a 	bl	8002fba <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim4);
 80036c6:	4803      	ldr	r0, [pc, #12]	; (80036d4 <MX_TIM4_Init+0xe4>)
 80036c8:	f000 fb9a 	bl	8003e00 <HAL_TIM_MspPostInit>

}
 80036cc:	bf00      	nop
 80036ce:	3738      	adds	r7, #56	; 0x38
 80036d0:	46bd      	mov	sp, r7
 80036d2:	bd80      	pop	{r7, pc}
 80036d4:	20000918 	.word	0x20000918
 80036d8:	40000800 	.word	0x40000800

080036dc <MX_TIM5_Init>:
/* TIM5 init function */
void MX_TIM5_Init(void)
{
 80036dc:	b580      	push	{r7, lr}
 80036de:	b08c      	sub	sp, #48	; 0x30
 80036e0:	af00      	add	r7, sp, #0
  TIM_Encoder_InitTypeDef sConfig = {0};
 80036e2:	f107 030c 	add.w	r3, r7, #12
 80036e6:	2224      	movs	r2, #36	; 0x24
 80036e8:	2100      	movs	r1, #0
 80036ea:	4618      	mov	r0, r3
 80036ec:	f005 f9b0 	bl	8008a50 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80036f0:	1d3b      	adds	r3, r7, #4
 80036f2:	2200      	movs	r2, #0
 80036f4:	601a      	str	r2, [r3, #0]
 80036f6:	605a      	str	r2, [r3, #4]

  htim5.Instance = TIM5;
 80036f8:	4b20      	ldr	r3, [pc, #128]	; (800377c <MX_TIM5_Init+0xa0>)
 80036fa:	4a21      	ldr	r2, [pc, #132]	; (8003780 <MX_TIM5_Init+0xa4>)
 80036fc:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 80036fe:	4b1f      	ldr	r3, [pc, #124]	; (800377c <MX_TIM5_Init+0xa0>)
 8003700:	2200      	movs	r2, #0
 8003702:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003704:	4b1d      	ldr	r3, [pc, #116]	; (800377c <MX_TIM5_Init+0xa0>)
 8003706:	2200      	movs	r2, #0
 8003708:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 0xFFFF;
 800370a:	4b1c      	ldr	r3, [pc, #112]	; (800377c <MX_TIM5_Init+0xa0>)
 800370c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003710:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003712:	4b1a      	ldr	r3, [pc, #104]	; (800377c <MX_TIM5_Init+0xa0>)
 8003714:	2200      	movs	r2, #0
 8003716:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003718:	4b18      	ldr	r3, [pc, #96]	; (800377c <MX_TIM5_Init+0xa0>)
 800371a:	2200      	movs	r2, #0
 800371c:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 800371e:	2303      	movs	r3, #3
 8003720:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8003722:	2300      	movs	r3, #0
 8003724:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8003726:	2301      	movs	r3, #1
 8003728:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 800372a:	2300      	movs	r3, #0
 800372c:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 800372e:	2300      	movs	r3, #0
 8003730:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8003732:	2300      	movs	r3, #0
 8003734:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8003736:	2301      	movs	r3, #1
 8003738:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 800373a:	2300      	movs	r3, #0
 800373c:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 800373e:	2300      	movs	r3, #0
 8003740:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim5, &sConfig) != HAL_OK)
 8003742:	f107 030c 	add.w	r3, r7, #12
 8003746:	4619      	mov	r1, r3
 8003748:	480c      	ldr	r0, [pc, #48]	; (800377c <MX_TIM5_Init+0xa0>)
 800374a:	f002 fed3 	bl	80064f4 <HAL_TIM_Encoder_Init>
 800374e:	4603      	mov	r3, r0
 8003750:	2b00      	cmp	r3, #0
 8003752:	d001      	beq.n	8003758 <MX_TIM5_Init+0x7c>
  {
    Error_Handler();
 8003754:	f7ff fc31 	bl	8002fba <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003758:	2300      	movs	r3, #0
 800375a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800375c:	2300      	movs	r3, #0
 800375e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8003760:	1d3b      	adds	r3, r7, #4
 8003762:	4619      	mov	r1, r3
 8003764:	4805      	ldr	r0, [pc, #20]	; (800377c <MX_TIM5_Init+0xa0>)
 8003766:	f003 ffb7 	bl	80076d8 <HAL_TIMEx_MasterConfigSynchronization>
 800376a:	4603      	mov	r3, r0
 800376c:	2b00      	cmp	r3, #0
 800376e:	d001      	beq.n	8003774 <MX_TIM5_Init+0x98>
  {
    Error_Handler();
 8003770:	f7ff fc23 	bl	8002fba <Error_Handler>
  }

}
 8003774:	bf00      	nop
 8003776:	3730      	adds	r7, #48	; 0x30
 8003778:	46bd      	mov	sp, r7
 800377a:	bd80      	pop	{r7, pc}
 800377c:	20000958 	.word	0x20000958
 8003780:	40000c00 	.word	0x40000c00

08003784 <MX_TIM6_Init>:
/* TIM6 init function */
void MX_TIM6_Init(void)
{
 8003784:	b580      	push	{r7, lr}
 8003786:	b082      	sub	sp, #8
 8003788:	af00      	add	r7, sp, #0
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800378a:	463b      	mov	r3, r7
 800378c:	2200      	movs	r2, #0
 800378e:	601a      	str	r2, [r3, #0]
 8003790:	605a      	str	r2, [r3, #4]

  htim6.Instance = TIM6;
 8003792:	4b15      	ldr	r3, [pc, #84]	; (80037e8 <MX_TIM6_Init+0x64>)
 8003794:	4a15      	ldr	r2, [pc, #84]	; (80037ec <MX_TIM6_Init+0x68>)
 8003796:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 800-1;
 8003798:	4b13      	ldr	r3, [pc, #76]	; (80037e8 <MX_TIM6_Init+0x64>)
 800379a:	f240 321f 	movw	r2, #799	; 0x31f
 800379e:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80037a0:	4b11      	ldr	r3, [pc, #68]	; (80037e8 <MX_TIM6_Init+0x64>)
 80037a2:	2200      	movs	r2, #0
 80037a4:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 6241;
 80037a6:	4b10      	ldr	r3, [pc, #64]	; (80037e8 <MX_TIM6_Init+0x64>)
 80037a8:	f641 0261 	movw	r2, #6241	; 0x1861
 80037ac:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80037ae:	4b0e      	ldr	r3, [pc, #56]	; (80037e8 <MX_TIM6_Init+0x64>)
 80037b0:	2200      	movs	r2, #0
 80037b2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 80037b4:	480c      	ldr	r0, [pc, #48]	; (80037e8 <MX_TIM6_Init+0x64>)
 80037b6:	f002 fca1 	bl	80060fc <HAL_TIM_Base_Init>
 80037ba:	4603      	mov	r3, r0
 80037bc:	2b00      	cmp	r3, #0
 80037be:	d001      	beq.n	80037c4 <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 80037c0:	f7ff fbfb 	bl	8002fba <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80037c4:	2300      	movs	r3, #0
 80037c6:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80037c8:	2300      	movs	r3, #0
 80037ca:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 80037cc:	463b      	mov	r3, r7
 80037ce:	4619      	mov	r1, r3
 80037d0:	4805      	ldr	r0, [pc, #20]	; (80037e8 <MX_TIM6_Init+0x64>)
 80037d2:	f003 ff81 	bl	80076d8 <HAL_TIMEx_MasterConfigSynchronization>
 80037d6:	4603      	mov	r3, r0
 80037d8:	2b00      	cmp	r3, #0
 80037da:	d001      	beq.n	80037e0 <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 80037dc:	f7ff fbed 	bl	8002fba <Error_Handler>
  }

}
 80037e0:	bf00      	nop
 80037e2:	3708      	adds	r7, #8
 80037e4:	46bd      	mov	sp, r7
 80037e6:	bd80      	pop	{r7, pc}
 80037e8:	20000a18 	.word	0x20000a18
 80037ec:	40001000 	.word	0x40001000

080037f0 <MX_TIM7_Init>:
/* TIM7 init function */
void MX_TIM7_Init(void)
{
 80037f0:	b580      	push	{r7, lr}
 80037f2:	b082      	sub	sp, #8
 80037f4:	af00      	add	r7, sp, #0
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80037f6:	463b      	mov	r3, r7
 80037f8:	2200      	movs	r2, #0
 80037fa:	601a      	str	r2, [r3, #0]
 80037fc:	605a      	str	r2, [r3, #4]

  htim7.Instance = TIM7;
 80037fe:	4b15      	ldr	r3, [pc, #84]	; (8003854 <MX_TIM7_Init+0x64>)
 8003800:	4a15      	ldr	r2, [pc, #84]	; (8003858 <MX_TIM7_Init+0x68>)
 8003802:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 51-1;
 8003804:	4b13      	ldr	r3, [pc, #76]	; (8003854 <MX_TIM7_Init+0x64>)
 8003806:	2232      	movs	r2, #50	; 0x32
 8003808:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 800380a:	4b12      	ldr	r3, [pc, #72]	; (8003854 <MX_TIM7_Init+0x64>)
 800380c:	2200      	movs	r2, #0
 800380e:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 1000;
 8003810:	4b10      	ldr	r3, [pc, #64]	; (8003854 <MX_TIM7_Init+0x64>)
 8003812:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003816:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003818:	4b0e      	ldr	r3, [pc, #56]	; (8003854 <MX_TIM7_Init+0x64>)
 800381a:	2200      	movs	r2, #0
 800381c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 800381e:	480d      	ldr	r0, [pc, #52]	; (8003854 <MX_TIM7_Init+0x64>)
 8003820:	f002 fc6c 	bl	80060fc <HAL_TIM_Base_Init>
 8003824:	4603      	mov	r3, r0
 8003826:	2b00      	cmp	r3, #0
 8003828:	d001      	beq.n	800382e <MX_TIM7_Init+0x3e>
  {
    Error_Handler();
 800382a:	f7ff fbc6 	bl	8002fba <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800382e:	2300      	movs	r3, #0
 8003830:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003832:	2300      	movs	r3, #0
 8003834:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8003836:	463b      	mov	r3, r7
 8003838:	4619      	mov	r1, r3
 800383a:	4806      	ldr	r0, [pc, #24]	; (8003854 <MX_TIM7_Init+0x64>)
 800383c:	f003 ff4c 	bl	80076d8 <HAL_TIMEx_MasterConfigSynchronization>
 8003840:	4603      	mov	r3, r0
 8003842:	2b00      	cmp	r3, #0
 8003844:	d001      	beq.n	800384a <MX_TIM7_Init+0x5a>
  {
    Error_Handler();
 8003846:	f7ff fbb8 	bl	8002fba <Error_Handler>
  }

}
 800384a:	bf00      	nop
 800384c:	3708      	adds	r7, #8
 800384e:	46bd      	mov	sp, r7
 8003850:	bd80      	pop	{r7, pc}
 8003852:	bf00      	nop
 8003854:	20000b18 	.word	0x20000b18
 8003858:	40001400 	.word	0x40001400

0800385c <MX_TIM8_Init>:
/* TIM8 init function */
void MX_TIM8_Init(void)
{
 800385c:	b580      	push	{r7, lr}
 800385e:	b092      	sub	sp, #72	; 0x48
 8003860:	af00      	add	r7, sp, #0
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003862:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8003866:	2200      	movs	r2, #0
 8003868:	601a      	str	r2, [r3, #0]
 800386a:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800386c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003870:	2200      	movs	r2, #0
 8003872:	601a      	str	r2, [r3, #0]
 8003874:	605a      	str	r2, [r3, #4]
 8003876:	609a      	str	r2, [r3, #8]
 8003878:	60da      	str	r2, [r3, #12]
 800387a:	611a      	str	r2, [r3, #16]
 800387c:	615a      	str	r2, [r3, #20]
 800387e:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8003880:	1d3b      	adds	r3, r7, #4
 8003882:	2220      	movs	r2, #32
 8003884:	2100      	movs	r1, #0
 8003886:	4618      	mov	r0, r3
 8003888:	f005 f8e2 	bl	8008a50 <memset>

  htim8.Instance = TIM8;
 800388c:	4b33      	ldr	r3, [pc, #204]	; (800395c <MX_TIM8_Init+0x100>)
 800388e:	4a34      	ldr	r2, [pc, #208]	; (8003960 <MX_TIM8_Init+0x104>)
 8003890:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 8003892:	4b32      	ldr	r3, [pc, #200]	; (800395c <MX_TIM8_Init+0x100>)
 8003894:	2200      	movs	r2, #0
 8003896:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003898:	4b30      	ldr	r3, [pc, #192]	; (800395c <MX_TIM8_Init+0x100>)
 800389a:	2200      	movs	r2, #0
 800389c:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 800389e:	4b2f      	ldr	r3, [pc, #188]	; (800395c <MX_TIM8_Init+0x100>)
 80038a0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80038a4:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80038a6:	4b2d      	ldr	r3, [pc, #180]	; (800395c <MX_TIM8_Init+0x100>)
 80038a8:	2200      	movs	r2, #0
 80038aa:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 80038ac:	4b2b      	ldr	r3, [pc, #172]	; (800395c <MX_TIM8_Init+0x100>)
 80038ae:	2200      	movs	r2, #0
 80038b0:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80038b2:	4b2a      	ldr	r3, [pc, #168]	; (800395c <MX_TIM8_Init+0x100>)
 80038b4:	2200      	movs	r2, #0
 80038b6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_OC_Init(&htim8) != HAL_OK)
 80038b8:	4828      	ldr	r0, [pc, #160]	; (800395c <MX_TIM8_Init+0x100>)
 80038ba:	f002 fc6e 	bl	800619a <HAL_TIM_OC_Init>
 80038be:	4603      	mov	r3, r0
 80038c0:	2b00      	cmp	r3, #0
 80038c2:	d001      	beq.n	80038c8 <MX_TIM8_Init+0x6c>
  {
    Error_Handler();
 80038c4:	f7ff fb79 	bl	8002fba <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80038c8:	2300      	movs	r3, #0
 80038ca:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80038cc:	2300      	movs	r3, #0
 80038ce:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 80038d0:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80038d4:	4619      	mov	r1, r3
 80038d6:	4821      	ldr	r0, [pc, #132]	; (800395c <MX_TIM8_Init+0x100>)
 80038d8:	f003 fefe 	bl	80076d8 <HAL_TIMEx_MasterConfigSynchronization>
 80038dc:	4603      	mov	r3, r0
 80038de:	2b00      	cmp	r3, #0
 80038e0:	d001      	beq.n	80038e6 <MX_TIM8_Init+0x8a>
  {
    Error_Handler();
 80038e2:	f7ff fb6a 	bl	8002fba <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 80038e6:	2300      	movs	r3, #0
 80038e8:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 80038ea:	2300      	movs	r3, #0
 80038ec:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80038ee:	2300      	movs	r3, #0
 80038f0:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80038f2:	2300      	movs	r3, #0
 80038f4:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80038f6:	2300      	movs	r3, #0
 80038f8:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80038fa:	2300      	movs	r3, #0
 80038fc:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80038fe:	2300      	movs	r3, #0
 8003900:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_OC_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8003902:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003906:	2208      	movs	r2, #8
 8003908:	4619      	mov	r1, r3
 800390a:	4814      	ldr	r0, [pc, #80]	; (800395c <MX_TIM8_Init+0x100>)
 800390c:	f002 ffc4 	bl	8006898 <HAL_TIM_OC_ConfigChannel>
 8003910:	4603      	mov	r3, r0
 8003912:	2b00      	cmp	r3, #0
 8003914:	d001      	beq.n	800391a <MX_TIM8_Init+0xbe>
  {
    Error_Handler();
 8003916:	f7ff fb50 	bl	8002fba <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800391a:	2300      	movs	r3, #0
 800391c:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800391e:	2300      	movs	r3, #0
 8003920:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8003922:	2300      	movs	r3, #0
 8003924:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8003926:	2300      	movs	r3, #0
 8003928:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800392a:	2300      	movs	r3, #0
 800392c:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800392e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003932:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8003934:	2300      	movs	r3, #0
 8003936:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 8003938:	1d3b      	adds	r3, r7, #4
 800393a:	4619      	mov	r1, r3
 800393c:	4807      	ldr	r0, [pc, #28]	; (800395c <MX_TIM8_Init+0x100>)
 800393e:	f003 ff47 	bl	80077d0 <HAL_TIMEx_ConfigBreakDeadTime>
 8003942:	4603      	mov	r3, r0
 8003944:	2b00      	cmp	r3, #0
 8003946:	d001      	beq.n	800394c <MX_TIM8_Init+0xf0>
  {
    Error_Handler();
 8003948:	f7ff fb37 	bl	8002fba <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim8);
 800394c:	4803      	ldr	r0, [pc, #12]	; (800395c <MX_TIM8_Init+0x100>)
 800394e:	f000 fa57 	bl	8003e00 <HAL_TIM_MspPostInit>

}
 8003952:	bf00      	nop
 8003954:	3748      	adds	r7, #72	; 0x48
 8003956:	46bd      	mov	sp, r7
 8003958:	bd80      	pop	{r7, pc}
 800395a:	bf00      	nop
 800395c:	200008d8 	.word	0x200008d8
 8003960:	40010400 	.word	0x40010400

08003964 <MX_TIM11_Init>:
/* TIM11 init function */
void MX_TIM11_Init(void)
{
 8003964:	b580      	push	{r7, lr}
 8003966:	b088      	sub	sp, #32
 8003968:	af00      	add	r7, sp, #0
  TIM_OC_InitTypeDef sConfigOC = {0};
 800396a:	1d3b      	adds	r3, r7, #4
 800396c:	2200      	movs	r2, #0
 800396e:	601a      	str	r2, [r3, #0]
 8003970:	605a      	str	r2, [r3, #4]
 8003972:	609a      	str	r2, [r3, #8]
 8003974:	60da      	str	r2, [r3, #12]
 8003976:	611a      	str	r2, [r3, #16]
 8003978:	615a      	str	r2, [r3, #20]
 800397a:	619a      	str	r2, [r3, #24]

  htim11.Instance = TIM11;
 800397c:	4b1e      	ldr	r3, [pc, #120]	; (80039f8 <MX_TIM11_Init+0x94>)
 800397e:	4a1f      	ldr	r2, [pc, #124]	; (80039fc <MX_TIM11_Init+0x98>)
 8003980:	601a      	str	r2, [r3, #0]
  htim11.Init.Prescaler = 0;
 8003982:	4b1d      	ldr	r3, [pc, #116]	; (80039f8 <MX_TIM11_Init+0x94>)
 8003984:	2200      	movs	r2, #0
 8003986:	605a      	str	r2, [r3, #4]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003988:	4b1b      	ldr	r3, [pc, #108]	; (80039f8 <MX_TIM11_Init+0x94>)
 800398a:	2200      	movs	r2, #0
 800398c:	609a      	str	r2, [r3, #8]
  htim11.Init.Period = 65535;
 800398e:	4b1a      	ldr	r3, [pc, #104]	; (80039f8 <MX_TIM11_Init+0x94>)
 8003990:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003994:	60da      	str	r2, [r3, #12]
  htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003996:	4b18      	ldr	r3, [pc, #96]	; (80039f8 <MX_TIM11_Init+0x94>)
 8003998:	2200      	movs	r2, #0
 800399a:	611a      	str	r2, [r3, #16]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800399c:	4b16      	ldr	r3, [pc, #88]	; (80039f8 <MX_TIM11_Init+0x94>)
 800399e:	2200      	movs	r2, #0
 80039a0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim11) != HAL_OK)
 80039a2:	4815      	ldr	r0, [pc, #84]	; (80039f8 <MX_TIM11_Init+0x94>)
 80039a4:	f002 fbaa 	bl	80060fc <HAL_TIM_Base_Init>
 80039a8:	4603      	mov	r3, r0
 80039aa:	2b00      	cmp	r3, #0
 80039ac:	d001      	beq.n	80039b2 <MX_TIM11_Init+0x4e>
  {
    Error_Handler();
 80039ae:	f7ff fb04 	bl	8002fba <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim11) != HAL_OK)
 80039b2:	4811      	ldr	r0, [pc, #68]	; (80039f8 <MX_TIM11_Init+0x94>)
 80039b4:	f002 fc1c 	bl	80061f0 <HAL_TIM_PWM_Init>
 80039b8:	4603      	mov	r3, r0
 80039ba:	2b00      	cmp	r3, #0
 80039bc:	d001      	beq.n	80039c2 <MX_TIM11_Init+0x5e>
  {
    Error_Handler();
 80039be:	f7ff fafc 	bl	8002fba <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80039c2:	2360      	movs	r3, #96	; 0x60
 80039c4:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80039c6:	2300      	movs	r3, #0
 80039c8:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80039ca:	2300      	movs	r3, #0
 80039cc:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80039ce:	2300      	movs	r3, #0
 80039d0:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim11, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80039d2:	1d3b      	adds	r3, r7, #4
 80039d4:	2200      	movs	r2, #0
 80039d6:	4619      	mov	r1, r3
 80039d8:	4807      	ldr	r0, [pc, #28]	; (80039f8 <MX_TIM11_Init+0x94>)
 80039da:	f003 f859 	bl	8006a90 <HAL_TIM_PWM_ConfigChannel>
 80039de:	4603      	mov	r3, r0
 80039e0:	2b00      	cmp	r3, #0
 80039e2:	d001      	beq.n	80039e8 <MX_TIM11_Init+0x84>
  {
    Error_Handler();
 80039e4:	f7ff fae9 	bl	8002fba <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim11);
 80039e8:	4803      	ldr	r0, [pc, #12]	; (80039f8 <MX_TIM11_Init+0x94>)
 80039ea:	f000 fa09 	bl	8003e00 <HAL_TIM_MspPostInit>

}
 80039ee:	bf00      	nop
 80039f0:	3720      	adds	r7, #32
 80039f2:	46bd      	mov	sp, r7
 80039f4:	bd80      	pop	{r7, pc}
 80039f6:	bf00      	nop
 80039f8:	200009d8 	.word	0x200009d8
 80039fc:	40014800 	.word	0x40014800

08003a00 <MX_TIM12_Init>:
/* TIM12 init function */
void MX_TIM12_Init(void)
{
 8003a00:	b580      	push	{r7, lr}
 8003a02:	b088      	sub	sp, #32
 8003a04:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003a06:	f107 0310 	add.w	r3, r7, #16
 8003a0a:	2200      	movs	r2, #0
 8003a0c:	601a      	str	r2, [r3, #0]
 8003a0e:	605a      	str	r2, [r3, #4]
 8003a10:	609a      	str	r2, [r3, #8]
 8003a12:	60da      	str	r2, [r3, #12]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8003a14:	463b      	mov	r3, r7
 8003a16:	2200      	movs	r2, #0
 8003a18:	601a      	str	r2, [r3, #0]
 8003a1a:	605a      	str	r2, [r3, #4]
 8003a1c:	609a      	str	r2, [r3, #8]
 8003a1e:	60da      	str	r2, [r3, #12]

  htim12.Instance = TIM12;
 8003a20:	4b23      	ldr	r3, [pc, #140]	; (8003ab0 <MX_TIM12_Init+0xb0>)
 8003a22:	4a24      	ldr	r2, [pc, #144]	; (8003ab4 <MX_TIM12_Init+0xb4>)
 8003a24:	601a      	str	r2, [r3, #0]
  htim12.Init.Prescaler = 50-1;
 8003a26:	4b22      	ldr	r3, [pc, #136]	; (8003ab0 <MX_TIM12_Init+0xb0>)
 8003a28:	2231      	movs	r2, #49	; 0x31
 8003a2a:	605a      	str	r2, [r3, #4]
  htim12.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003a2c:	4b20      	ldr	r3, [pc, #128]	; (8003ab0 <MX_TIM12_Init+0xb0>)
 8003a2e:	2200      	movs	r2, #0
 8003a30:	609a      	str	r2, [r3, #8]
  htim12.Init.Period = 65535;
 8003a32:	4b1f      	ldr	r3, [pc, #124]	; (8003ab0 <MX_TIM12_Init+0xb0>)
 8003a34:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003a38:	60da      	str	r2, [r3, #12]
  htim12.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003a3a:	4b1d      	ldr	r3, [pc, #116]	; (8003ab0 <MX_TIM12_Init+0xb0>)
 8003a3c:	2200      	movs	r2, #0
 8003a3e:	611a      	str	r2, [r3, #16]
  htim12.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003a40:	4b1b      	ldr	r3, [pc, #108]	; (8003ab0 <MX_TIM12_Init+0xb0>)
 8003a42:	2200      	movs	r2, #0
 8003a44:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim12) != HAL_OK)
 8003a46:	481a      	ldr	r0, [pc, #104]	; (8003ab0 <MX_TIM12_Init+0xb0>)
 8003a48:	f002 fb58 	bl	80060fc <HAL_TIM_Base_Init>
 8003a4c:	4603      	mov	r3, r0
 8003a4e:	2b00      	cmp	r3, #0
 8003a50:	d001      	beq.n	8003a56 <MX_TIM12_Init+0x56>
  {
    Error_Handler();
 8003a52:	f7ff fab2 	bl	8002fba <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003a56:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003a5a:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim12, &sClockSourceConfig) != HAL_OK)
 8003a5c:	f107 0310 	add.w	r3, r7, #16
 8003a60:	4619      	mov	r1, r3
 8003a62:	4813      	ldr	r0, [pc, #76]	; (8003ab0 <MX_TIM12_Init+0xb0>)
 8003a64:	f003 f8da 	bl	8006c1c <HAL_TIM_ConfigClockSource>
 8003a68:	4603      	mov	r3, r0
 8003a6a:	2b00      	cmp	r3, #0
 8003a6c:	d001      	beq.n	8003a72 <MX_TIM12_Init+0x72>
  {
    Error_Handler();
 8003a6e:	f7ff faa4 	bl	8002fba <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim12) != HAL_OK)
 8003a72:	480f      	ldr	r0, [pc, #60]	; (8003ab0 <MX_TIM12_Init+0xb0>)
 8003a74:	f002 fc30 	bl	80062d8 <HAL_TIM_IC_Init>
 8003a78:	4603      	mov	r3, r0
 8003a7a:	2b00      	cmp	r3, #0
 8003a7c:	d001      	beq.n	8003a82 <MX_TIM12_Init+0x82>
  {
    Error_Handler();
 8003a7e:	f7ff fa9c 	bl	8002fba <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_BOTHEDGE;
 8003a82:	230a      	movs	r3, #10
 8003a84:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8003a86:	2301      	movs	r3, #1
 8003a88:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8003a8a:	2300      	movs	r3, #0
 8003a8c:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 4;
 8003a8e:	2304      	movs	r3, #4
 8003a90:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim12, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 8003a92:	463b      	mov	r3, r7
 8003a94:	2204      	movs	r2, #4
 8003a96:	4619      	mov	r1, r3
 8003a98:	4805      	ldr	r0, [pc, #20]	; (8003ab0 <MX_TIM12_Init+0xb0>)
 8003a9a:	f002 ff5d 	bl	8006958 <HAL_TIM_IC_ConfigChannel>
 8003a9e:	4603      	mov	r3, r0
 8003aa0:	2b00      	cmp	r3, #0
 8003aa2:	d001      	beq.n	8003aa8 <MX_TIM12_Init+0xa8>
  {
    Error_Handler();
 8003aa4:	f7ff fa89 	bl	8002fba <Error_Handler>
  }

}
 8003aa8:	bf00      	nop
 8003aaa:	3720      	adds	r7, #32
 8003aac:	46bd      	mov	sp, r7
 8003aae:	bd80      	pop	{r7, pc}
 8003ab0:	20000ad8 	.word	0x20000ad8
 8003ab4:	40001800 	.word	0x40001800

08003ab8 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8003ab8:	b580      	push	{r7, lr}
 8003aba:	b090      	sub	sp, #64	; 0x40
 8003abc:	af00      	add	r7, sp, #0
 8003abe:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003ac0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003ac4:	2200      	movs	r2, #0
 8003ac6:	601a      	str	r2, [r3, #0]
 8003ac8:	605a      	str	r2, [r3, #4]
 8003aca:	609a      	str	r2, [r3, #8]
 8003acc:	60da      	str	r2, [r3, #12]
 8003ace:	611a      	str	r2, [r3, #16]
  if(tim_baseHandle->Instance==TIM1)
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	4a71      	ldr	r2, [pc, #452]	; (8003c9c <HAL_TIM_Base_MspInit+0x1e4>)
 8003ad6:	4293      	cmp	r3, r2
 8003ad8:	d12d      	bne.n	8003b36 <HAL_TIM_Base_MspInit+0x7e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8003ada:	2300      	movs	r3, #0
 8003adc:	62bb      	str	r3, [r7, #40]	; 0x28
 8003ade:	4b70      	ldr	r3, [pc, #448]	; (8003ca0 <HAL_TIM_Base_MspInit+0x1e8>)
 8003ae0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ae2:	4a6f      	ldr	r2, [pc, #444]	; (8003ca0 <HAL_TIM_Base_MspInit+0x1e8>)
 8003ae4:	f043 0301 	orr.w	r3, r3, #1
 8003ae8:	6453      	str	r3, [r2, #68]	; 0x44
 8003aea:	4b6d      	ldr	r3, [pc, #436]	; (8003ca0 <HAL_TIM_Base_MspInit+0x1e8>)
 8003aec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003aee:	f003 0301 	and.w	r3, r3, #1
 8003af2:	62bb      	str	r3, [r7, #40]	; 0x28
 8003af4:	6abb      	ldr	r3, [r7, #40]	; 0x28

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003af6:	2300      	movs	r3, #0
 8003af8:	627b      	str	r3, [r7, #36]	; 0x24
 8003afa:	4b69      	ldr	r3, [pc, #420]	; (8003ca0 <HAL_TIM_Base_MspInit+0x1e8>)
 8003afc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003afe:	4a68      	ldr	r2, [pc, #416]	; (8003ca0 <HAL_TIM_Base_MspInit+0x1e8>)
 8003b00:	f043 0301 	orr.w	r3, r3, #1
 8003b04:	6313      	str	r3, [r2, #48]	; 0x30
 8003b06:	4b66      	ldr	r3, [pc, #408]	; (8003ca0 <HAL_TIM_Base_MspInit+0x1e8>)
 8003b08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b0a:	f003 0301 	and.w	r3, r3, #1
 8003b0e:	627b      	str	r3, [r7, #36]	; 0x24
 8003b10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    /**TIM1 GPIO Configuration
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = ECHOR_Pin;
 8003b12:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003b16:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003b18:	2302      	movs	r3, #2
 8003b1a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003b1c:	2300      	movs	r3, #0
 8003b1e:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003b20:	2300      	movs	r3, #0
 8003b22:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8003b24:	2301      	movs	r3, #1
 8003b26:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(ECHOR_GPIO_Port, &GPIO_InitStruct);
 8003b28:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003b2c:	4619      	mov	r1, r3
 8003b2e:	485d      	ldr	r0, [pc, #372]	; (8003ca4 <HAL_TIM_Base_MspInit+0x1ec>)
 8003b30:	f000 fea6 	bl	8004880 <HAL_GPIO_Init>

  /* USER CODE BEGIN TIM12_MspInit 1 */

  /* USER CODE END TIM12_MspInit 1 */
  }
}
 8003b34:	e0ad      	b.n	8003c92 <HAL_TIM_Base_MspInit+0x1da>
  else if(tim_baseHandle->Instance==TIM2)
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003b3e:	d116      	bne.n	8003b6e <HAL_TIM_Base_MspInit+0xb6>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8003b40:	2300      	movs	r3, #0
 8003b42:	623b      	str	r3, [r7, #32]
 8003b44:	4b56      	ldr	r3, [pc, #344]	; (8003ca0 <HAL_TIM_Base_MspInit+0x1e8>)
 8003b46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b48:	4a55      	ldr	r2, [pc, #340]	; (8003ca0 <HAL_TIM_Base_MspInit+0x1e8>)
 8003b4a:	f043 0301 	orr.w	r3, r3, #1
 8003b4e:	6413      	str	r3, [r2, #64]	; 0x40
 8003b50:	4b53      	ldr	r3, [pc, #332]	; (8003ca0 <HAL_TIM_Base_MspInit+0x1e8>)
 8003b52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b54:	f003 0301 	and.w	r3, r3, #1
 8003b58:	623b      	str	r3, [r7, #32]
 8003b5a:	6a3b      	ldr	r3, [r7, #32]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8003b5c:	2200      	movs	r2, #0
 8003b5e:	2100      	movs	r1, #0
 8003b60:	201c      	movs	r0, #28
 8003b62:	f000 fd68 	bl	8004636 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8003b66:	201c      	movs	r0, #28
 8003b68:	f000 fd81 	bl	800466e <HAL_NVIC_EnableIRQ>
}
 8003b6c:	e091      	b.n	8003c92 <HAL_TIM_Base_MspInit+0x1da>
  else if(tim_baseHandle->Instance==TIM4)
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	4a4d      	ldr	r2, [pc, #308]	; (8003ca8 <HAL_TIM_Base_MspInit+0x1f0>)
 8003b74:	4293      	cmp	r3, r2
 8003b76:	d10e      	bne.n	8003b96 <HAL_TIM_Base_MspInit+0xde>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8003b78:	2300      	movs	r3, #0
 8003b7a:	61fb      	str	r3, [r7, #28]
 8003b7c:	4b48      	ldr	r3, [pc, #288]	; (8003ca0 <HAL_TIM_Base_MspInit+0x1e8>)
 8003b7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b80:	4a47      	ldr	r2, [pc, #284]	; (8003ca0 <HAL_TIM_Base_MspInit+0x1e8>)
 8003b82:	f043 0304 	orr.w	r3, r3, #4
 8003b86:	6413      	str	r3, [r2, #64]	; 0x40
 8003b88:	4b45      	ldr	r3, [pc, #276]	; (8003ca0 <HAL_TIM_Base_MspInit+0x1e8>)
 8003b8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b8c:	f003 0304 	and.w	r3, r3, #4
 8003b90:	61fb      	str	r3, [r7, #28]
 8003b92:	69fb      	ldr	r3, [r7, #28]
}
 8003b94:	e07d      	b.n	8003c92 <HAL_TIM_Base_MspInit+0x1da>
  else if(tim_baseHandle->Instance==TIM6)
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	4a44      	ldr	r2, [pc, #272]	; (8003cac <HAL_TIM_Base_MspInit+0x1f4>)
 8003b9c:	4293      	cmp	r3, r2
 8003b9e:	d116      	bne.n	8003bce <HAL_TIM_Base_MspInit+0x116>
    __HAL_RCC_TIM6_CLK_ENABLE();
 8003ba0:	2300      	movs	r3, #0
 8003ba2:	61bb      	str	r3, [r7, #24]
 8003ba4:	4b3e      	ldr	r3, [pc, #248]	; (8003ca0 <HAL_TIM_Base_MspInit+0x1e8>)
 8003ba6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ba8:	4a3d      	ldr	r2, [pc, #244]	; (8003ca0 <HAL_TIM_Base_MspInit+0x1e8>)
 8003baa:	f043 0310 	orr.w	r3, r3, #16
 8003bae:	6413      	str	r3, [r2, #64]	; 0x40
 8003bb0:	4b3b      	ldr	r3, [pc, #236]	; (8003ca0 <HAL_TIM_Base_MspInit+0x1e8>)
 8003bb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bb4:	f003 0310 	and.w	r3, r3, #16
 8003bb8:	61bb      	str	r3, [r7, #24]
 8003bba:	69bb      	ldr	r3, [r7, #24]
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8003bbc:	2200      	movs	r2, #0
 8003bbe:	2100      	movs	r1, #0
 8003bc0:	2036      	movs	r0, #54	; 0x36
 8003bc2:	f000 fd38 	bl	8004636 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8003bc6:	2036      	movs	r0, #54	; 0x36
 8003bc8:	f000 fd51 	bl	800466e <HAL_NVIC_EnableIRQ>
}
 8003bcc:	e061      	b.n	8003c92 <HAL_TIM_Base_MspInit+0x1da>
  else if(tim_baseHandle->Instance==TIM7)
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	4a37      	ldr	r2, [pc, #220]	; (8003cb0 <HAL_TIM_Base_MspInit+0x1f8>)
 8003bd4:	4293      	cmp	r3, r2
 8003bd6:	d116      	bne.n	8003c06 <HAL_TIM_Base_MspInit+0x14e>
    __HAL_RCC_TIM7_CLK_ENABLE();
 8003bd8:	2300      	movs	r3, #0
 8003bda:	617b      	str	r3, [r7, #20]
 8003bdc:	4b30      	ldr	r3, [pc, #192]	; (8003ca0 <HAL_TIM_Base_MspInit+0x1e8>)
 8003bde:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003be0:	4a2f      	ldr	r2, [pc, #188]	; (8003ca0 <HAL_TIM_Base_MspInit+0x1e8>)
 8003be2:	f043 0320 	orr.w	r3, r3, #32
 8003be6:	6413      	str	r3, [r2, #64]	; 0x40
 8003be8:	4b2d      	ldr	r3, [pc, #180]	; (8003ca0 <HAL_TIM_Base_MspInit+0x1e8>)
 8003bea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bec:	f003 0320 	and.w	r3, r3, #32
 8003bf0:	617b      	str	r3, [r7, #20]
 8003bf2:	697b      	ldr	r3, [r7, #20]
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 8003bf4:	2200      	movs	r2, #0
 8003bf6:	2100      	movs	r1, #0
 8003bf8:	2037      	movs	r0, #55	; 0x37
 8003bfa:	f000 fd1c 	bl	8004636 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8003bfe:	2037      	movs	r0, #55	; 0x37
 8003c00:	f000 fd35 	bl	800466e <HAL_NVIC_EnableIRQ>
}
 8003c04:	e045      	b.n	8003c92 <HAL_TIM_Base_MspInit+0x1da>
  else if(tim_baseHandle->Instance==TIM11)
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	4a2a      	ldr	r2, [pc, #168]	; (8003cb4 <HAL_TIM_Base_MspInit+0x1fc>)
 8003c0c:	4293      	cmp	r3, r2
 8003c0e:	d10e      	bne.n	8003c2e <HAL_TIM_Base_MspInit+0x176>
    __HAL_RCC_TIM11_CLK_ENABLE();
 8003c10:	2300      	movs	r3, #0
 8003c12:	613b      	str	r3, [r7, #16]
 8003c14:	4b22      	ldr	r3, [pc, #136]	; (8003ca0 <HAL_TIM_Base_MspInit+0x1e8>)
 8003c16:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c18:	4a21      	ldr	r2, [pc, #132]	; (8003ca0 <HAL_TIM_Base_MspInit+0x1e8>)
 8003c1a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003c1e:	6453      	str	r3, [r2, #68]	; 0x44
 8003c20:	4b1f      	ldr	r3, [pc, #124]	; (8003ca0 <HAL_TIM_Base_MspInit+0x1e8>)
 8003c22:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c24:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003c28:	613b      	str	r3, [r7, #16]
 8003c2a:	693b      	ldr	r3, [r7, #16]
}
 8003c2c:	e031      	b.n	8003c92 <HAL_TIM_Base_MspInit+0x1da>
  else if(tim_baseHandle->Instance==TIM12)
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	4a21      	ldr	r2, [pc, #132]	; (8003cb8 <HAL_TIM_Base_MspInit+0x200>)
 8003c34:	4293      	cmp	r3, r2
 8003c36:	d12c      	bne.n	8003c92 <HAL_TIM_Base_MspInit+0x1da>
    __HAL_RCC_TIM12_CLK_ENABLE();
 8003c38:	2300      	movs	r3, #0
 8003c3a:	60fb      	str	r3, [r7, #12]
 8003c3c:	4b18      	ldr	r3, [pc, #96]	; (8003ca0 <HAL_TIM_Base_MspInit+0x1e8>)
 8003c3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c40:	4a17      	ldr	r2, [pc, #92]	; (8003ca0 <HAL_TIM_Base_MspInit+0x1e8>)
 8003c42:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003c46:	6413      	str	r3, [r2, #64]	; 0x40
 8003c48:	4b15      	ldr	r3, [pc, #84]	; (8003ca0 <HAL_TIM_Base_MspInit+0x1e8>)
 8003c4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c4c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c50:	60fb      	str	r3, [r7, #12]
 8003c52:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003c54:	2300      	movs	r3, #0
 8003c56:	60bb      	str	r3, [r7, #8]
 8003c58:	4b11      	ldr	r3, [pc, #68]	; (8003ca0 <HAL_TIM_Base_MspInit+0x1e8>)
 8003c5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c5c:	4a10      	ldr	r2, [pc, #64]	; (8003ca0 <HAL_TIM_Base_MspInit+0x1e8>)
 8003c5e:	f043 0302 	orr.w	r3, r3, #2
 8003c62:	6313      	str	r3, [r2, #48]	; 0x30
 8003c64:	4b0e      	ldr	r3, [pc, #56]	; (8003ca0 <HAL_TIM_Base_MspInit+0x1e8>)
 8003c66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c68:	f003 0302 	and.w	r3, r3, #2
 8003c6c:	60bb      	str	r3, [r7, #8]
 8003c6e:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = ECHOL_Pin;
 8003c70:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003c74:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003c76:	2302      	movs	r3, #2
 8003c78:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003c7a:	2300      	movs	r3, #0
 8003c7c:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003c7e:	2300      	movs	r3, #0
 8003c80:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM12;
 8003c82:	2309      	movs	r3, #9
 8003c84:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(ECHOL_GPIO_Port, &GPIO_InitStruct);
 8003c86:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003c8a:	4619      	mov	r1, r3
 8003c8c:	480b      	ldr	r0, [pc, #44]	; (8003cbc <HAL_TIM_Base_MspInit+0x204>)
 8003c8e:	f000 fdf7 	bl	8004880 <HAL_GPIO_Init>
}
 8003c92:	bf00      	nop
 8003c94:	3740      	adds	r7, #64	; 0x40
 8003c96:	46bd      	mov	sp, r7
 8003c98:	bd80      	pop	{r7, pc}
 8003c9a:	bf00      	nop
 8003c9c:	40010000 	.word	0x40010000
 8003ca0:	40023800 	.word	0x40023800
 8003ca4:	40020000 	.word	0x40020000
 8003ca8:	40000800 	.word	0x40000800
 8003cac:	40001000 	.word	0x40001000
 8003cb0:	40001400 	.word	0x40001400
 8003cb4:	40014800 	.word	0x40014800
 8003cb8:	40001800 	.word	0x40001800
 8003cbc:	40020400 	.word	0x40020400

08003cc0 <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 8003cc0:	b580      	push	{r7, lr}
 8003cc2:	b08c      	sub	sp, #48	; 0x30
 8003cc4:	af00      	add	r7, sp, #0
 8003cc6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003cc8:	f107 031c 	add.w	r3, r7, #28
 8003ccc:	2200      	movs	r2, #0
 8003cce:	601a      	str	r2, [r3, #0]
 8003cd0:	605a      	str	r2, [r3, #4]
 8003cd2:	609a      	str	r2, [r3, #8]
 8003cd4:	60da      	str	r2, [r3, #12]
 8003cd6:	611a      	str	r2, [r3, #16]
  if(tim_encoderHandle->Instance==TIM3)
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	4a32      	ldr	r2, [pc, #200]	; (8003da8 <HAL_TIM_Encoder_MspInit+0xe8>)
 8003cde:	4293      	cmp	r3, r2
 8003ce0:	d12c      	bne.n	8003d3c <HAL_TIM_Encoder_MspInit+0x7c>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8003ce2:	2300      	movs	r3, #0
 8003ce4:	61bb      	str	r3, [r7, #24]
 8003ce6:	4b31      	ldr	r3, [pc, #196]	; (8003dac <HAL_TIM_Encoder_MspInit+0xec>)
 8003ce8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cea:	4a30      	ldr	r2, [pc, #192]	; (8003dac <HAL_TIM_Encoder_MspInit+0xec>)
 8003cec:	f043 0302 	orr.w	r3, r3, #2
 8003cf0:	6413      	str	r3, [r2, #64]	; 0x40
 8003cf2:	4b2e      	ldr	r3, [pc, #184]	; (8003dac <HAL_TIM_Encoder_MspInit+0xec>)
 8003cf4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cf6:	f003 0302 	and.w	r3, r3, #2
 8003cfa:	61bb      	str	r3, [r7, #24]
 8003cfc:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003cfe:	2300      	movs	r3, #0
 8003d00:	617b      	str	r3, [r7, #20]
 8003d02:	4b2a      	ldr	r3, [pc, #168]	; (8003dac <HAL_TIM_Encoder_MspInit+0xec>)
 8003d04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d06:	4a29      	ldr	r2, [pc, #164]	; (8003dac <HAL_TIM_Encoder_MspInit+0xec>)
 8003d08:	f043 0302 	orr.w	r3, r3, #2
 8003d0c:	6313      	str	r3, [r2, #48]	; 0x30
 8003d0e:	4b27      	ldr	r3, [pc, #156]	; (8003dac <HAL_TIM_Encoder_MspInit+0xec>)
 8003d10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d12:	f003 0302 	and.w	r3, r3, #2
 8003d16:	617b      	str	r3, [r7, #20]
 8003d18:	697b      	ldr	r3, [r7, #20]
    /**TIM3 GPIO Configuration
    PB4     ------> TIM3_CH1
    PB5     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = ENCR_CHA_Pin|ENCR_CHB_Pin;
 8003d1a:	2330      	movs	r3, #48	; 0x30
 8003d1c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003d1e:	2302      	movs	r3, #2
 8003d20:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003d22:	2300      	movs	r3, #0
 8003d24:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003d26:	2300      	movs	r3, #0
 8003d28:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8003d2a:	2302      	movs	r3, #2
 8003d2c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003d2e:	f107 031c 	add.w	r3, r7, #28
 8003d32:	4619      	mov	r1, r3
 8003d34:	481e      	ldr	r0, [pc, #120]	; (8003db0 <HAL_TIM_Encoder_MspInit+0xf0>)
 8003d36:	f000 fda3 	bl	8004880 <HAL_GPIO_Init>

  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }
}
 8003d3a:	e030      	b.n	8003d9e <HAL_TIM_Encoder_MspInit+0xde>
  else if(tim_encoderHandle->Instance==TIM5)
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	4a1c      	ldr	r2, [pc, #112]	; (8003db4 <HAL_TIM_Encoder_MspInit+0xf4>)
 8003d42:	4293      	cmp	r3, r2
 8003d44:	d12b      	bne.n	8003d9e <HAL_TIM_Encoder_MspInit+0xde>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8003d46:	2300      	movs	r3, #0
 8003d48:	613b      	str	r3, [r7, #16]
 8003d4a:	4b18      	ldr	r3, [pc, #96]	; (8003dac <HAL_TIM_Encoder_MspInit+0xec>)
 8003d4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d4e:	4a17      	ldr	r2, [pc, #92]	; (8003dac <HAL_TIM_Encoder_MspInit+0xec>)
 8003d50:	f043 0308 	orr.w	r3, r3, #8
 8003d54:	6413      	str	r3, [r2, #64]	; 0x40
 8003d56:	4b15      	ldr	r3, [pc, #84]	; (8003dac <HAL_TIM_Encoder_MspInit+0xec>)
 8003d58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d5a:	f003 0308 	and.w	r3, r3, #8
 8003d5e:	613b      	str	r3, [r7, #16]
 8003d60:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003d62:	2300      	movs	r3, #0
 8003d64:	60fb      	str	r3, [r7, #12]
 8003d66:	4b11      	ldr	r3, [pc, #68]	; (8003dac <HAL_TIM_Encoder_MspInit+0xec>)
 8003d68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d6a:	4a10      	ldr	r2, [pc, #64]	; (8003dac <HAL_TIM_Encoder_MspInit+0xec>)
 8003d6c:	f043 0301 	orr.w	r3, r3, #1
 8003d70:	6313      	str	r3, [r2, #48]	; 0x30
 8003d72:	4b0e      	ldr	r3, [pc, #56]	; (8003dac <HAL_TIM_Encoder_MspInit+0xec>)
 8003d74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d76:	f003 0301 	and.w	r3, r3, #1
 8003d7a:	60fb      	str	r3, [r7, #12]
 8003d7c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = ENCL_CHA_Pin|ENCL_CHB_Pin;
 8003d7e:	2303      	movs	r3, #3
 8003d80:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003d82:	2302      	movs	r3, #2
 8003d84:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003d86:	2300      	movs	r3, #0
 8003d88:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003d8a:	2300      	movs	r3, #0
 8003d8c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8003d8e:	2302      	movs	r3, #2
 8003d90:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003d92:	f107 031c 	add.w	r3, r7, #28
 8003d96:	4619      	mov	r1, r3
 8003d98:	4807      	ldr	r0, [pc, #28]	; (8003db8 <HAL_TIM_Encoder_MspInit+0xf8>)
 8003d9a:	f000 fd71 	bl	8004880 <HAL_GPIO_Init>
}
 8003d9e:	bf00      	nop
 8003da0:	3730      	adds	r7, #48	; 0x30
 8003da2:	46bd      	mov	sp, r7
 8003da4:	bd80      	pop	{r7, pc}
 8003da6:	bf00      	nop
 8003da8:	40000400 	.word	0x40000400
 8003dac:	40023800 	.word	0x40023800
 8003db0:	40020400 	.word	0x40020400
 8003db4:	40000c00 	.word	0x40000c00
 8003db8:	40020000 	.word	0x40020000

08003dbc <HAL_TIM_OC_MspInit>:

void HAL_TIM_OC_MspInit(TIM_HandleTypeDef* tim_ocHandle)
{
 8003dbc:	b480      	push	{r7}
 8003dbe:	b085      	sub	sp, #20
 8003dc0:	af00      	add	r7, sp, #0
 8003dc2:	6078      	str	r0, [r7, #4]

  if(tim_ocHandle->Instance==TIM8)
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	4a0b      	ldr	r2, [pc, #44]	; (8003df8 <HAL_TIM_OC_MspInit+0x3c>)
 8003dca:	4293      	cmp	r3, r2
 8003dcc:	d10d      	bne.n	8003dea <HAL_TIM_OC_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM8_MspInit 0 */

  /* USER CODE END TIM8_MspInit 0 */
    /* TIM8 clock enable */
    __HAL_RCC_TIM8_CLK_ENABLE();
 8003dce:	2300      	movs	r3, #0
 8003dd0:	60fb      	str	r3, [r7, #12]
 8003dd2:	4b0a      	ldr	r3, [pc, #40]	; (8003dfc <HAL_TIM_OC_MspInit+0x40>)
 8003dd4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003dd6:	4a09      	ldr	r2, [pc, #36]	; (8003dfc <HAL_TIM_OC_MspInit+0x40>)
 8003dd8:	f043 0302 	orr.w	r3, r3, #2
 8003ddc:	6453      	str	r3, [r2, #68]	; 0x44
 8003dde:	4b07      	ldr	r3, [pc, #28]	; (8003dfc <HAL_TIM_OC_MspInit+0x40>)
 8003de0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003de2:	f003 0302 	and.w	r3, r3, #2
 8003de6:	60fb      	str	r3, [r7, #12]
 8003de8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }
}
 8003dea:	bf00      	nop
 8003dec:	3714      	adds	r7, #20
 8003dee:	46bd      	mov	sp, r7
 8003df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003df4:	4770      	bx	lr
 8003df6:	bf00      	nop
 8003df8:	40010400 	.word	0x40010400
 8003dfc:	40023800 	.word	0x40023800

08003e00 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8003e00:	b580      	push	{r7, lr}
 8003e02:	b08c      	sub	sp, #48	; 0x30
 8003e04:	af00      	add	r7, sp, #0
 8003e06:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003e08:	f107 031c 	add.w	r3, r7, #28
 8003e0c:	2200      	movs	r2, #0
 8003e0e:	601a      	str	r2, [r3, #0]
 8003e10:	605a      	str	r2, [r3, #4]
 8003e12:	609a      	str	r2, [r3, #8]
 8003e14:	60da      	str	r2, [r3, #12]
 8003e16:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM2)
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003e20:	d11f      	bne.n	8003e62 <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003e22:	2300      	movs	r3, #0
 8003e24:	61bb      	str	r3, [r7, #24]
 8003e26:	4b47      	ldr	r3, [pc, #284]	; (8003f44 <HAL_TIM_MspPostInit+0x144>)
 8003e28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e2a:	4a46      	ldr	r2, [pc, #280]	; (8003f44 <HAL_TIM_MspPostInit+0x144>)
 8003e2c:	f043 0302 	orr.w	r3, r3, #2
 8003e30:	6313      	str	r3, [r2, #48]	; 0x30
 8003e32:	4b44      	ldr	r3, [pc, #272]	; (8003f44 <HAL_TIM_MspPostInit+0x144>)
 8003e34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e36:	f003 0302 	and.w	r3, r3, #2
 8003e3a:	61bb      	str	r3, [r7, #24]
 8003e3c:	69bb      	ldr	r3, [r7, #24]
    /**TIM2 GPIO Configuration
    PB10     ------> TIM2_CH3
    */
    GPIO_InitStruct.Pin = ROMI_PWMR_Pin;
 8003e3e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003e42:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003e44:	2302      	movs	r3, #2
 8003e46:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003e48:	2300      	movs	r3, #0
 8003e4a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003e4c:	2300      	movs	r3, #0
 8003e4e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8003e50:	2301      	movs	r3, #1
 8003e52:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(ROMI_PWMR_GPIO_Port, &GPIO_InitStruct);
 8003e54:	f107 031c 	add.w	r3, r7, #28
 8003e58:	4619      	mov	r1, r3
 8003e5a:	483b      	ldr	r0, [pc, #236]	; (8003f48 <HAL_TIM_MspPostInit+0x148>)
 8003e5c:	f000 fd10 	bl	8004880 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM11_MspPostInit 1 */

  /* USER CODE END TIM11_MspPostInit 1 */
  }

}
 8003e60:	e06b      	b.n	8003f3a <HAL_TIM_MspPostInit+0x13a>
  else if(timHandle->Instance==TIM4)
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	4a39      	ldr	r2, [pc, #228]	; (8003f4c <HAL_TIM_MspPostInit+0x14c>)
 8003e68:	4293      	cmp	r3, r2
 8003e6a:	d11e      	bne.n	8003eaa <HAL_TIM_MspPostInit+0xaa>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003e6c:	2300      	movs	r3, #0
 8003e6e:	617b      	str	r3, [r7, #20]
 8003e70:	4b34      	ldr	r3, [pc, #208]	; (8003f44 <HAL_TIM_MspPostInit+0x144>)
 8003e72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e74:	4a33      	ldr	r2, [pc, #204]	; (8003f44 <HAL_TIM_MspPostInit+0x144>)
 8003e76:	f043 0302 	orr.w	r3, r3, #2
 8003e7a:	6313      	str	r3, [r2, #48]	; 0x30
 8003e7c:	4b31      	ldr	r3, [pc, #196]	; (8003f44 <HAL_TIM_MspPostInit+0x144>)
 8003e7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e80:	f003 0302 	and.w	r3, r3, #2
 8003e84:	617b      	str	r3, [r7, #20]
 8003e86:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = ROMI_PWML_Pin;
 8003e88:	2340      	movs	r3, #64	; 0x40
 8003e8a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003e8c:	2302      	movs	r3, #2
 8003e8e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003e90:	2300      	movs	r3, #0
 8003e92:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003e94:	2300      	movs	r3, #0
 8003e96:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8003e98:	2302      	movs	r3, #2
 8003e9a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(ROMI_PWML_GPIO_Port, &GPIO_InitStruct);
 8003e9c:	f107 031c 	add.w	r3, r7, #28
 8003ea0:	4619      	mov	r1, r3
 8003ea2:	4829      	ldr	r0, [pc, #164]	; (8003f48 <HAL_TIM_MspPostInit+0x148>)
 8003ea4:	f000 fcec 	bl	8004880 <HAL_GPIO_Init>
}
 8003ea8:	e047      	b.n	8003f3a <HAL_TIM_MspPostInit+0x13a>
  else if(timHandle->Instance==TIM8)
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	4a28      	ldr	r2, [pc, #160]	; (8003f50 <HAL_TIM_MspPostInit+0x150>)
 8003eb0:	4293      	cmp	r3, r2
 8003eb2:	d11e      	bne.n	8003ef2 <HAL_TIM_MspPostInit+0xf2>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003eb4:	2300      	movs	r3, #0
 8003eb6:	613b      	str	r3, [r7, #16]
 8003eb8:	4b22      	ldr	r3, [pc, #136]	; (8003f44 <HAL_TIM_MspPostInit+0x144>)
 8003eba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ebc:	4a21      	ldr	r2, [pc, #132]	; (8003f44 <HAL_TIM_MspPostInit+0x144>)
 8003ebe:	f043 0302 	orr.w	r3, r3, #2
 8003ec2:	6313      	str	r3, [r2, #48]	; 0x30
 8003ec4:	4b1f      	ldr	r3, [pc, #124]	; (8003f44 <HAL_TIM_MspPostInit+0x144>)
 8003ec6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ec8:	f003 0302 	and.w	r3, r3, #2
 8003ecc:	613b      	str	r3, [r7, #16]
 8003ece:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = SERVO1_PWM_Pin;
 8003ed0:	2302      	movs	r3, #2
 8003ed2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003ed4:	2302      	movs	r3, #2
 8003ed6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003ed8:	2300      	movs	r3, #0
 8003eda:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003edc:	2300      	movs	r3, #0
 8003ede:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8003ee0:	2303      	movs	r3, #3
 8003ee2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(SERVO1_PWM_GPIO_Port, &GPIO_InitStruct);
 8003ee4:	f107 031c 	add.w	r3, r7, #28
 8003ee8:	4619      	mov	r1, r3
 8003eea:	4817      	ldr	r0, [pc, #92]	; (8003f48 <HAL_TIM_MspPostInit+0x148>)
 8003eec:	f000 fcc8 	bl	8004880 <HAL_GPIO_Init>
}
 8003ef0:	e023      	b.n	8003f3a <HAL_TIM_MspPostInit+0x13a>
  else if(timHandle->Instance==TIM11)
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	4a17      	ldr	r2, [pc, #92]	; (8003f54 <HAL_TIM_MspPostInit+0x154>)
 8003ef8:	4293      	cmp	r3, r2
 8003efa:	d11e      	bne.n	8003f3a <HAL_TIM_MspPostInit+0x13a>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003efc:	2300      	movs	r3, #0
 8003efe:	60fb      	str	r3, [r7, #12]
 8003f00:	4b10      	ldr	r3, [pc, #64]	; (8003f44 <HAL_TIM_MspPostInit+0x144>)
 8003f02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f04:	4a0f      	ldr	r2, [pc, #60]	; (8003f44 <HAL_TIM_MspPostInit+0x144>)
 8003f06:	f043 0302 	orr.w	r3, r3, #2
 8003f0a:	6313      	str	r3, [r2, #48]	; 0x30
 8003f0c:	4b0d      	ldr	r3, [pc, #52]	; (8003f44 <HAL_TIM_MspPostInit+0x144>)
 8003f0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f10:	f003 0302 	and.w	r3, r3, #2
 8003f14:	60fb      	str	r3, [r7, #12]
 8003f16:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = SERVO2_PWM_Pin;
 8003f18:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003f1c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003f1e:	2302      	movs	r3, #2
 8003f20:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003f22:	2300      	movs	r3, #0
 8003f24:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003f26:	2300      	movs	r3, #0
 8003f28:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM11;
 8003f2a:	2303      	movs	r3, #3
 8003f2c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(SERVO2_PWM_GPIO_Port, &GPIO_InitStruct);
 8003f2e:	f107 031c 	add.w	r3, r7, #28
 8003f32:	4619      	mov	r1, r3
 8003f34:	4804      	ldr	r0, [pc, #16]	; (8003f48 <HAL_TIM_MspPostInit+0x148>)
 8003f36:	f000 fca3 	bl	8004880 <HAL_GPIO_Init>
}
 8003f3a:	bf00      	nop
 8003f3c:	3730      	adds	r7, #48	; 0x30
 8003f3e:	46bd      	mov	sp, r7
 8003f40:	bd80      	pop	{r7, pc}
 8003f42:	bf00      	nop
 8003f44:	40023800 	.word	0x40023800
 8003f48:	40020400 	.word	0x40020400
 8003f4c:	40000800 	.word	0x40000800
 8003f50:	40010400 	.word	0x40010400
 8003f54:	40014800 	.word	0x40014800

08003f58 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart3;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8003f58:	b580      	push	{r7, lr}
 8003f5a:	af00      	add	r7, sp, #0

  huart2.Instance = USART2;
 8003f5c:	4b11      	ldr	r3, [pc, #68]	; (8003fa4 <MX_USART2_UART_Init+0x4c>)
 8003f5e:	4a12      	ldr	r2, [pc, #72]	; (8003fa8 <MX_USART2_UART_Init+0x50>)
 8003f60:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8003f62:	4b10      	ldr	r3, [pc, #64]	; (8003fa4 <MX_USART2_UART_Init+0x4c>)
 8003f64:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8003f68:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8003f6a:	4b0e      	ldr	r3, [pc, #56]	; (8003fa4 <MX_USART2_UART_Init+0x4c>)
 8003f6c:	2200      	movs	r2, #0
 8003f6e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8003f70:	4b0c      	ldr	r3, [pc, #48]	; (8003fa4 <MX_USART2_UART_Init+0x4c>)
 8003f72:	2200      	movs	r2, #0
 8003f74:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8003f76:	4b0b      	ldr	r3, [pc, #44]	; (8003fa4 <MX_USART2_UART_Init+0x4c>)
 8003f78:	2200      	movs	r2, #0
 8003f7a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8003f7c:	4b09      	ldr	r3, [pc, #36]	; (8003fa4 <MX_USART2_UART_Init+0x4c>)
 8003f7e:	220c      	movs	r2, #12
 8003f80:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003f82:	4b08      	ldr	r3, [pc, #32]	; (8003fa4 <MX_USART2_UART_Init+0x4c>)
 8003f84:	2200      	movs	r2, #0
 8003f86:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8003f88:	4b06      	ldr	r3, [pc, #24]	; (8003fa4 <MX_USART2_UART_Init+0x4c>)
 8003f8a:	2200      	movs	r2, #0
 8003f8c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8003f8e:	4805      	ldr	r0, [pc, #20]	; (8003fa4 <MX_USART2_UART_Init+0x4c>)
 8003f90:	f003 fc84 	bl	800789c <HAL_UART_Init>
 8003f94:	4603      	mov	r3, r0
 8003f96:	2b00      	cmp	r3, #0
 8003f98:	d001      	beq.n	8003f9e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8003f9a:	f7ff f80e 	bl	8002fba <Error_Handler>
  }

}
 8003f9e:	bf00      	nop
 8003fa0:	bd80      	pop	{r7, pc}
 8003fa2:	bf00      	nop
 8003fa4:	20000b98 	.word	0x20000b98
 8003fa8:	40004400 	.word	0x40004400

08003fac <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8003fac:	b580      	push	{r7, lr}
 8003fae:	af00      	add	r7, sp, #0

  huart3.Instance = USART3;
 8003fb0:	4b11      	ldr	r3, [pc, #68]	; (8003ff8 <MX_USART3_UART_Init+0x4c>)
 8003fb2:	4a12      	ldr	r2, [pc, #72]	; (8003ffc <MX_USART3_UART_Init+0x50>)
 8003fb4:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8003fb6:	4b10      	ldr	r3, [pc, #64]	; (8003ff8 <MX_USART3_UART_Init+0x4c>)
 8003fb8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8003fbc:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8003fbe:	4b0e      	ldr	r3, [pc, #56]	; (8003ff8 <MX_USART3_UART_Init+0x4c>)
 8003fc0:	2200      	movs	r2, #0
 8003fc2:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8003fc4:	4b0c      	ldr	r3, [pc, #48]	; (8003ff8 <MX_USART3_UART_Init+0x4c>)
 8003fc6:	2200      	movs	r2, #0
 8003fc8:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8003fca:	4b0b      	ldr	r3, [pc, #44]	; (8003ff8 <MX_USART3_UART_Init+0x4c>)
 8003fcc:	2200      	movs	r2, #0
 8003fce:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8003fd0:	4b09      	ldr	r3, [pc, #36]	; (8003ff8 <MX_USART3_UART_Init+0x4c>)
 8003fd2:	220c      	movs	r2, #12
 8003fd4:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003fd6:	4b08      	ldr	r3, [pc, #32]	; (8003ff8 <MX_USART3_UART_Init+0x4c>)
 8003fd8:	2200      	movs	r2, #0
 8003fda:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8003fdc:	4b06      	ldr	r3, [pc, #24]	; (8003ff8 <MX_USART3_UART_Init+0x4c>)
 8003fde:	2200      	movs	r2, #0
 8003fe0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8003fe2:	4805      	ldr	r0, [pc, #20]	; (8003ff8 <MX_USART3_UART_Init+0x4c>)
 8003fe4:	f003 fc5a 	bl	800789c <HAL_UART_Init>
 8003fe8:	4603      	mov	r3, r0
 8003fea:	2b00      	cmp	r3, #0
 8003fec:	d001      	beq.n	8003ff2 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8003fee:	f7fe ffe4 	bl	8002fba <Error_Handler>
  }

}
 8003ff2:	bf00      	nop
 8003ff4:	bd80      	pop	{r7, pc}
 8003ff6:	bf00      	nop
 8003ff8:	20000b58 	.word	0x20000b58
 8003ffc:	40004800 	.word	0x40004800

08004000 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8004000:	b580      	push	{r7, lr}
 8004002:	b08c      	sub	sp, #48	; 0x30
 8004004:	af00      	add	r7, sp, #0
 8004006:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004008:	f107 031c 	add.w	r3, r7, #28
 800400c:	2200      	movs	r2, #0
 800400e:	601a      	str	r2, [r3, #0]
 8004010:	605a      	str	r2, [r3, #4]
 8004012:	609a      	str	r2, [r3, #8]
 8004014:	60da      	str	r2, [r3, #12]
 8004016:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	4a36      	ldr	r2, [pc, #216]	; (80040f8 <HAL_UART_MspInit+0xf8>)
 800401e:	4293      	cmp	r3, r2
 8004020:	d134      	bne.n	800408c <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8004022:	2300      	movs	r3, #0
 8004024:	61bb      	str	r3, [r7, #24]
 8004026:	4b35      	ldr	r3, [pc, #212]	; (80040fc <HAL_UART_MspInit+0xfc>)
 8004028:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800402a:	4a34      	ldr	r2, [pc, #208]	; (80040fc <HAL_UART_MspInit+0xfc>)
 800402c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004030:	6413      	str	r3, [r2, #64]	; 0x40
 8004032:	4b32      	ldr	r3, [pc, #200]	; (80040fc <HAL_UART_MspInit+0xfc>)
 8004034:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004036:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800403a:	61bb      	str	r3, [r7, #24]
 800403c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800403e:	2300      	movs	r3, #0
 8004040:	617b      	str	r3, [r7, #20]
 8004042:	4b2e      	ldr	r3, [pc, #184]	; (80040fc <HAL_UART_MspInit+0xfc>)
 8004044:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004046:	4a2d      	ldr	r2, [pc, #180]	; (80040fc <HAL_UART_MspInit+0xfc>)
 8004048:	f043 0301 	orr.w	r3, r3, #1
 800404c:	6313      	str	r3, [r2, #48]	; 0x30
 800404e:	4b2b      	ldr	r3, [pc, #172]	; (80040fc <HAL_UART_MspInit+0xfc>)
 8004050:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004052:	f003 0301 	and.w	r3, r3, #1
 8004056:	617b      	str	r3, [r7, #20]
 8004058:	697b      	ldr	r3, [r7, #20]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800405a:	230c      	movs	r3, #12
 800405c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800405e:	2302      	movs	r3, #2
 8004060:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004062:	2300      	movs	r3, #0
 8004064:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004066:	2303      	movs	r3, #3
 8004068:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800406a:	2307      	movs	r3, #7
 800406c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800406e:	f107 031c 	add.w	r3, r7, #28
 8004072:	4619      	mov	r1, r3
 8004074:	4822      	ldr	r0, [pc, #136]	; (8004100 <HAL_UART_MspInit+0x100>)
 8004076:	f000 fc03 	bl	8004880 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 800407a:	2200      	movs	r2, #0
 800407c:	2100      	movs	r1, #0
 800407e:	2026      	movs	r0, #38	; 0x26
 8004080:	f000 fad9 	bl	8004636 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8004084:	2026      	movs	r0, #38	; 0x26
 8004086:	f000 faf2 	bl	800466e <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 800408a:	e031      	b.n	80040f0 <HAL_UART_MspInit+0xf0>
  else if(uartHandle->Instance==USART3)
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	4a1c      	ldr	r2, [pc, #112]	; (8004104 <HAL_UART_MspInit+0x104>)
 8004092:	4293      	cmp	r3, r2
 8004094:	d12c      	bne.n	80040f0 <HAL_UART_MspInit+0xf0>
    __HAL_RCC_USART3_CLK_ENABLE();
 8004096:	2300      	movs	r3, #0
 8004098:	613b      	str	r3, [r7, #16]
 800409a:	4b18      	ldr	r3, [pc, #96]	; (80040fc <HAL_UART_MspInit+0xfc>)
 800409c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800409e:	4a17      	ldr	r2, [pc, #92]	; (80040fc <HAL_UART_MspInit+0xfc>)
 80040a0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80040a4:	6413      	str	r3, [r2, #64]	; 0x40
 80040a6:	4b15      	ldr	r3, [pc, #84]	; (80040fc <HAL_UART_MspInit+0xfc>)
 80040a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040aa:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80040ae:	613b      	str	r3, [r7, #16]
 80040b0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80040b2:	2300      	movs	r3, #0
 80040b4:	60fb      	str	r3, [r7, #12]
 80040b6:	4b11      	ldr	r3, [pc, #68]	; (80040fc <HAL_UART_MspInit+0xfc>)
 80040b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040ba:	4a10      	ldr	r2, [pc, #64]	; (80040fc <HAL_UART_MspInit+0xfc>)
 80040bc:	f043 0304 	orr.w	r3, r3, #4
 80040c0:	6313      	str	r3, [r2, #48]	; 0x30
 80040c2:	4b0e      	ldr	r3, [pc, #56]	; (80040fc <HAL_UART_MspInit+0xfc>)
 80040c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040c6:	f003 0304 	and.w	r3, r3, #4
 80040ca:	60fb      	str	r3, [r7, #12]
 80040cc:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80040ce:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80040d2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80040d4:	2302      	movs	r3, #2
 80040d6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80040d8:	2300      	movs	r3, #0
 80040da:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80040dc:	2303      	movs	r3, #3
 80040de:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80040e0:	2307      	movs	r3, #7
 80040e2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80040e4:	f107 031c 	add.w	r3, r7, #28
 80040e8:	4619      	mov	r1, r3
 80040ea:	4807      	ldr	r0, [pc, #28]	; (8004108 <HAL_UART_MspInit+0x108>)
 80040ec:	f000 fbc8 	bl	8004880 <HAL_GPIO_Init>
}
 80040f0:	bf00      	nop
 80040f2:	3730      	adds	r7, #48	; 0x30
 80040f4:	46bd      	mov	sp, r7
 80040f6:	bd80      	pop	{r7, pc}
 80040f8:	40004400 	.word	0x40004400
 80040fc:	40023800 	.word	0x40023800
 8004100:	40020000 	.word	0x40020000
 8004104:	40004800 	.word	0x40004800
 8004108:	40020800 	.word	0x40020800

0800410c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 800410c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8004144 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8004110:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8004112:	e003      	b.n	800411c <LoopCopyDataInit>

08004114 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8004114:	4b0c      	ldr	r3, [pc, #48]	; (8004148 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8004116:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8004118:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800411a:	3104      	adds	r1, #4

0800411c <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 800411c:	480b      	ldr	r0, [pc, #44]	; (800414c <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800411e:	4b0c      	ldr	r3, [pc, #48]	; (8004150 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8004120:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8004122:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8004124:	d3f6      	bcc.n	8004114 <CopyDataInit>
  ldr  r2, =_sbss
 8004126:	4a0b      	ldr	r2, [pc, #44]	; (8004154 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8004128:	e002      	b.n	8004130 <LoopFillZerobss>

0800412a <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800412a:	2300      	movs	r3, #0
  str  r3, [r2], #4
 800412c:	f842 3b04 	str.w	r3, [r2], #4

08004130 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8004130:	4b09      	ldr	r3, [pc, #36]	; (8004158 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8004132:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8004134:	d3f9      	bcc.n	800412a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8004136:	f7ff f907 	bl	8003348 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800413a:	f004 fc65 	bl	8008a08 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800413e:	f7fe fe1d 	bl	8002d7c <main>
  bx  lr    
 8004142:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8004144:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8004148:	0800d110 	.word	0x0800d110
  ldr  r0, =_sdata
 800414c:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8004150:	200002d4 	.word	0x200002d4
  ldr  r2, =_sbss
 8004154:	200002d4 	.word	0x200002d4
  ldr  r3, = _ebss
 8004158:	20000be0 	.word	0x20000be0

0800415c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800415c:	e7fe      	b.n	800415c <ADC_IRQHandler>
	...

08004160 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004160:	b580      	push	{r7, lr}
 8004162:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8004164:	4b0e      	ldr	r3, [pc, #56]	; (80041a0 <HAL_Init+0x40>)
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	4a0d      	ldr	r2, [pc, #52]	; (80041a0 <HAL_Init+0x40>)
 800416a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800416e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8004170:	4b0b      	ldr	r3, [pc, #44]	; (80041a0 <HAL_Init+0x40>)
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	4a0a      	ldr	r2, [pc, #40]	; (80041a0 <HAL_Init+0x40>)
 8004176:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800417a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800417c:	4b08      	ldr	r3, [pc, #32]	; (80041a0 <HAL_Init+0x40>)
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	4a07      	ldr	r2, [pc, #28]	; (80041a0 <HAL_Init+0x40>)
 8004182:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004186:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004188:	2003      	movs	r0, #3
 800418a:	f000 fa49 	bl	8004620 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800418e:	2000      	movs	r0, #0
 8004190:	f000 f808 	bl	80041a4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8004194:	f7fe ffb6 	bl	8003104 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8004198:	2300      	movs	r3, #0
}
 800419a:	4618      	mov	r0, r3
 800419c:	bd80      	pop	{r7, pc}
 800419e:	bf00      	nop
 80041a0:	40023c00 	.word	0x40023c00

080041a4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80041a4:	b580      	push	{r7, lr}
 80041a6:	b082      	sub	sp, #8
 80041a8:	af00      	add	r7, sp, #0
 80041aa:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80041ac:	4b12      	ldr	r3, [pc, #72]	; (80041f8 <HAL_InitTick+0x54>)
 80041ae:	681a      	ldr	r2, [r3, #0]
 80041b0:	4b12      	ldr	r3, [pc, #72]	; (80041fc <HAL_InitTick+0x58>)
 80041b2:	781b      	ldrb	r3, [r3, #0]
 80041b4:	4619      	mov	r1, r3
 80041b6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80041ba:	fbb3 f3f1 	udiv	r3, r3, r1
 80041be:	fbb2 f3f3 	udiv	r3, r2, r3
 80041c2:	4618      	mov	r0, r3
 80041c4:	f000 fa61 	bl	800468a <HAL_SYSTICK_Config>
 80041c8:	4603      	mov	r3, r0
 80041ca:	2b00      	cmp	r3, #0
 80041cc:	d001      	beq.n	80041d2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80041ce:	2301      	movs	r3, #1
 80041d0:	e00e      	b.n	80041f0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	2b0f      	cmp	r3, #15
 80041d6:	d80a      	bhi.n	80041ee <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80041d8:	2200      	movs	r2, #0
 80041da:	6879      	ldr	r1, [r7, #4]
 80041dc:	f04f 30ff 	mov.w	r0, #4294967295
 80041e0:	f000 fa29 	bl	8004636 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80041e4:	4a06      	ldr	r2, [pc, #24]	; (8004200 <HAL_InitTick+0x5c>)
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80041ea:	2300      	movs	r3, #0
 80041ec:	e000      	b.n	80041f0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80041ee:	2301      	movs	r3, #1
}
 80041f0:	4618      	mov	r0, r3
 80041f2:	3708      	adds	r7, #8
 80041f4:	46bd      	mov	sp, r7
 80041f6:	bd80      	pop	{r7, pc}
 80041f8:	200000f8 	.word	0x200000f8
 80041fc:	20000100 	.word	0x20000100
 8004200:	200000fc 	.word	0x200000fc

08004204 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004204:	b480      	push	{r7}
 8004206:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8004208:	4b06      	ldr	r3, [pc, #24]	; (8004224 <HAL_IncTick+0x20>)
 800420a:	781b      	ldrb	r3, [r3, #0]
 800420c:	461a      	mov	r2, r3
 800420e:	4b06      	ldr	r3, [pc, #24]	; (8004228 <HAL_IncTick+0x24>)
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	4413      	add	r3, r2
 8004214:	4a04      	ldr	r2, [pc, #16]	; (8004228 <HAL_IncTick+0x24>)
 8004216:	6013      	str	r3, [r2, #0]
}
 8004218:	bf00      	nop
 800421a:	46bd      	mov	sp, r7
 800421c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004220:	4770      	bx	lr
 8004222:	bf00      	nop
 8004224:	20000100 	.word	0x20000100
 8004228:	20000bd8 	.word	0x20000bd8

0800422c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800422c:	b480      	push	{r7}
 800422e:	af00      	add	r7, sp, #0
  return uwTick;
 8004230:	4b03      	ldr	r3, [pc, #12]	; (8004240 <HAL_GetTick+0x14>)
 8004232:	681b      	ldr	r3, [r3, #0]
}
 8004234:	4618      	mov	r0, r3
 8004236:	46bd      	mov	sp, r7
 8004238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800423c:	4770      	bx	lr
 800423e:	bf00      	nop
 8004240:	20000bd8 	.word	0x20000bd8

08004244 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004244:	b580      	push	{r7, lr}
 8004246:	b084      	sub	sp, #16
 8004248:	af00      	add	r7, sp, #0
 800424a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800424c:	f7ff ffee 	bl	800422c <HAL_GetTick>
 8004250:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8004256:	68fb      	ldr	r3, [r7, #12]
 8004258:	f1b3 3fff 	cmp.w	r3, #4294967295
 800425c:	d005      	beq.n	800426a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800425e:	4b09      	ldr	r3, [pc, #36]	; (8004284 <HAL_Delay+0x40>)
 8004260:	781b      	ldrb	r3, [r3, #0]
 8004262:	461a      	mov	r2, r3
 8004264:	68fb      	ldr	r3, [r7, #12]
 8004266:	4413      	add	r3, r2
 8004268:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800426a:	bf00      	nop
 800426c:	f7ff ffde 	bl	800422c <HAL_GetTick>
 8004270:	4602      	mov	r2, r0
 8004272:	68bb      	ldr	r3, [r7, #8]
 8004274:	1ad3      	subs	r3, r2, r3
 8004276:	68fa      	ldr	r2, [r7, #12]
 8004278:	429a      	cmp	r2, r3
 800427a:	d8f7      	bhi.n	800426c <HAL_Delay+0x28>
  {
  }
}
 800427c:	bf00      	nop
 800427e:	3710      	adds	r7, #16
 8004280:	46bd      	mov	sp, r7
 8004282:	bd80      	pop	{r7, pc}
 8004284:	20000100 	.word	0x20000100

08004288 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8004288:	b580      	push	{r7, lr}
 800428a:	b084      	sub	sp, #16
 800428c:	af00      	add	r7, sp, #0
 800428e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	2b00      	cmp	r3, #0
 8004294:	d101      	bne.n	800429a <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8004296:	2301      	movs	r3, #1
 8004298:	e0ed      	b.n	8004476 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	f893 3020 	ldrb.w	r3, [r3, #32]
 80042a0:	b2db      	uxtb	r3, r3
 80042a2:	2b00      	cmp	r3, #0
 80042a4:	d102      	bne.n	80042ac <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 80042a6:	6878      	ldr	r0, [r7, #4]
 80042a8:	f7fe fab6 	bl	8002818 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	681a      	ldr	r2, [r3, #0]
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	f022 0202 	bic.w	r2, r2, #2
 80042ba:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80042bc:	f7ff ffb6 	bl	800422c <HAL_GetTick>
 80042c0:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80042c2:	e012      	b.n	80042ea <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80042c4:	f7ff ffb2 	bl	800422c <HAL_GetTick>
 80042c8:	4602      	mov	r2, r0
 80042ca:	68fb      	ldr	r3, [r7, #12]
 80042cc:	1ad3      	subs	r3, r2, r3
 80042ce:	2b0a      	cmp	r3, #10
 80042d0:	d90b      	bls.n	80042ea <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042d6:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	2205      	movs	r2, #5
 80042e2:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80042e6:	2301      	movs	r3, #1
 80042e8:	e0c5      	b.n	8004476 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	685b      	ldr	r3, [r3, #4]
 80042f0:	f003 0302 	and.w	r3, r3, #2
 80042f4:	2b00      	cmp	r3, #0
 80042f6:	d1e5      	bne.n	80042c4 <HAL_CAN_Init+0x3c>
    }
  }

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	681a      	ldr	r2, [r3, #0]
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	f042 0201 	orr.w	r2, r2, #1
 8004306:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004308:	f7ff ff90 	bl	800422c <HAL_GetTick>
 800430c:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800430e:	e012      	b.n	8004336 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8004310:	f7ff ff8c 	bl	800422c <HAL_GetTick>
 8004314:	4602      	mov	r2, r0
 8004316:	68fb      	ldr	r3, [r7, #12]
 8004318:	1ad3      	subs	r3, r2, r3
 800431a:	2b0a      	cmp	r3, #10
 800431c:	d90b      	bls.n	8004336 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004322:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	2205      	movs	r2, #5
 800432e:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8004332:	2301      	movs	r3, #1
 8004334:	e09f      	b.n	8004476 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	685b      	ldr	r3, [r3, #4]
 800433c:	f003 0301 	and.w	r3, r3, #1
 8004340:	2b00      	cmp	r3, #0
 8004342:	d0e5      	beq.n	8004310 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	7e1b      	ldrb	r3, [r3, #24]
 8004348:	2b01      	cmp	r3, #1
 800434a:	d108      	bne.n	800435e <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	681a      	ldr	r2, [r3, #0]
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800435a:	601a      	str	r2, [r3, #0]
 800435c:	e007      	b.n	800436e <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	681a      	ldr	r2, [r3, #0]
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800436c:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	7e5b      	ldrb	r3, [r3, #25]
 8004372:	2b01      	cmp	r3, #1
 8004374:	d108      	bne.n	8004388 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	681a      	ldr	r2, [r3, #0]
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004384:	601a      	str	r2, [r3, #0]
 8004386:	e007      	b.n	8004398 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	681a      	ldr	r2, [r3, #0]
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004396:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	7e9b      	ldrb	r3, [r3, #26]
 800439c:	2b01      	cmp	r3, #1
 800439e:	d108      	bne.n	80043b2 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	681a      	ldr	r2, [r3, #0]
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	f042 0220 	orr.w	r2, r2, #32
 80043ae:	601a      	str	r2, [r3, #0]
 80043b0:	e007      	b.n	80043c2 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	681a      	ldr	r2, [r3, #0]
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	f022 0220 	bic.w	r2, r2, #32
 80043c0:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	7edb      	ldrb	r3, [r3, #27]
 80043c6:	2b01      	cmp	r3, #1
 80043c8:	d108      	bne.n	80043dc <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	681a      	ldr	r2, [r3, #0]
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	f022 0210 	bic.w	r2, r2, #16
 80043d8:	601a      	str	r2, [r3, #0]
 80043da:	e007      	b.n	80043ec <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	681a      	ldr	r2, [r3, #0]
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	f042 0210 	orr.w	r2, r2, #16
 80043ea:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	7f1b      	ldrb	r3, [r3, #28]
 80043f0:	2b01      	cmp	r3, #1
 80043f2:	d108      	bne.n	8004406 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	681a      	ldr	r2, [r3, #0]
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	f042 0208 	orr.w	r2, r2, #8
 8004402:	601a      	str	r2, [r3, #0]
 8004404:	e007      	b.n	8004416 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	681a      	ldr	r2, [r3, #0]
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	f022 0208 	bic.w	r2, r2, #8
 8004414:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	7f5b      	ldrb	r3, [r3, #29]
 800441a:	2b01      	cmp	r3, #1
 800441c:	d108      	bne.n	8004430 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	681a      	ldr	r2, [r3, #0]
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	f042 0204 	orr.w	r2, r2, #4
 800442c:	601a      	str	r2, [r3, #0]
 800442e:	e007      	b.n	8004440 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	681a      	ldr	r2, [r3, #0]
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	f022 0204 	bic.w	r2, r2, #4
 800443e:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	689a      	ldr	r2, [r3, #8]
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	68db      	ldr	r3, [r3, #12]
 8004448:	431a      	orrs	r2, r3
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	691b      	ldr	r3, [r3, #16]
 800444e:	431a      	orrs	r2, r3
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	695b      	ldr	r3, [r3, #20]
 8004454:	ea42 0103 	orr.w	r1, r2, r3
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	685b      	ldr	r3, [r3, #4]
 800445c:	1e5a      	subs	r2, r3, #1
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	430a      	orrs	r2, r1
 8004464:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	2200      	movs	r2, #0
 800446a:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	2201      	movs	r2, #1
 8004470:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8004474:	2300      	movs	r3, #0
}
 8004476:	4618      	mov	r0, r3
 8004478:	3710      	adds	r7, #16
 800447a:	46bd      	mov	sp, r7
 800447c:	bd80      	pop	{r7, pc}
	...

08004480 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004480:	b480      	push	{r7}
 8004482:	b085      	sub	sp, #20
 8004484:	af00      	add	r7, sp, #0
 8004486:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	f003 0307 	and.w	r3, r3, #7
 800448e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004490:	4b0c      	ldr	r3, [pc, #48]	; (80044c4 <__NVIC_SetPriorityGrouping+0x44>)
 8004492:	68db      	ldr	r3, [r3, #12]
 8004494:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004496:	68ba      	ldr	r2, [r7, #8]
 8004498:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800449c:	4013      	ands	r3, r2
 800449e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80044a0:	68fb      	ldr	r3, [r7, #12]
 80044a2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80044a4:	68bb      	ldr	r3, [r7, #8]
 80044a6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80044a8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80044ac:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80044b0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80044b2:	4a04      	ldr	r2, [pc, #16]	; (80044c4 <__NVIC_SetPriorityGrouping+0x44>)
 80044b4:	68bb      	ldr	r3, [r7, #8]
 80044b6:	60d3      	str	r3, [r2, #12]
}
 80044b8:	bf00      	nop
 80044ba:	3714      	adds	r7, #20
 80044bc:	46bd      	mov	sp, r7
 80044be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044c2:	4770      	bx	lr
 80044c4:	e000ed00 	.word	0xe000ed00

080044c8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80044c8:	b480      	push	{r7}
 80044ca:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80044cc:	4b04      	ldr	r3, [pc, #16]	; (80044e0 <__NVIC_GetPriorityGrouping+0x18>)
 80044ce:	68db      	ldr	r3, [r3, #12]
 80044d0:	0a1b      	lsrs	r3, r3, #8
 80044d2:	f003 0307 	and.w	r3, r3, #7
}
 80044d6:	4618      	mov	r0, r3
 80044d8:	46bd      	mov	sp, r7
 80044da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044de:	4770      	bx	lr
 80044e0:	e000ed00 	.word	0xe000ed00

080044e4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80044e4:	b480      	push	{r7}
 80044e6:	b083      	sub	sp, #12
 80044e8:	af00      	add	r7, sp, #0
 80044ea:	4603      	mov	r3, r0
 80044ec:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80044ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80044f2:	2b00      	cmp	r3, #0
 80044f4:	db0b      	blt.n	800450e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80044f6:	79fb      	ldrb	r3, [r7, #7]
 80044f8:	f003 021f 	and.w	r2, r3, #31
 80044fc:	4907      	ldr	r1, [pc, #28]	; (800451c <__NVIC_EnableIRQ+0x38>)
 80044fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004502:	095b      	lsrs	r3, r3, #5
 8004504:	2001      	movs	r0, #1
 8004506:	fa00 f202 	lsl.w	r2, r0, r2
 800450a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800450e:	bf00      	nop
 8004510:	370c      	adds	r7, #12
 8004512:	46bd      	mov	sp, r7
 8004514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004518:	4770      	bx	lr
 800451a:	bf00      	nop
 800451c:	e000e100 	.word	0xe000e100

08004520 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004520:	b480      	push	{r7}
 8004522:	b083      	sub	sp, #12
 8004524:	af00      	add	r7, sp, #0
 8004526:	4603      	mov	r3, r0
 8004528:	6039      	str	r1, [r7, #0]
 800452a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800452c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004530:	2b00      	cmp	r3, #0
 8004532:	db0a      	blt.n	800454a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004534:	683b      	ldr	r3, [r7, #0]
 8004536:	b2da      	uxtb	r2, r3
 8004538:	490c      	ldr	r1, [pc, #48]	; (800456c <__NVIC_SetPriority+0x4c>)
 800453a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800453e:	0112      	lsls	r2, r2, #4
 8004540:	b2d2      	uxtb	r2, r2
 8004542:	440b      	add	r3, r1
 8004544:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004548:	e00a      	b.n	8004560 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800454a:	683b      	ldr	r3, [r7, #0]
 800454c:	b2da      	uxtb	r2, r3
 800454e:	4908      	ldr	r1, [pc, #32]	; (8004570 <__NVIC_SetPriority+0x50>)
 8004550:	79fb      	ldrb	r3, [r7, #7]
 8004552:	f003 030f 	and.w	r3, r3, #15
 8004556:	3b04      	subs	r3, #4
 8004558:	0112      	lsls	r2, r2, #4
 800455a:	b2d2      	uxtb	r2, r2
 800455c:	440b      	add	r3, r1
 800455e:	761a      	strb	r2, [r3, #24]
}
 8004560:	bf00      	nop
 8004562:	370c      	adds	r7, #12
 8004564:	46bd      	mov	sp, r7
 8004566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800456a:	4770      	bx	lr
 800456c:	e000e100 	.word	0xe000e100
 8004570:	e000ed00 	.word	0xe000ed00

08004574 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004574:	b480      	push	{r7}
 8004576:	b089      	sub	sp, #36	; 0x24
 8004578:	af00      	add	r7, sp, #0
 800457a:	60f8      	str	r0, [r7, #12]
 800457c:	60b9      	str	r1, [r7, #8]
 800457e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004580:	68fb      	ldr	r3, [r7, #12]
 8004582:	f003 0307 	and.w	r3, r3, #7
 8004586:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004588:	69fb      	ldr	r3, [r7, #28]
 800458a:	f1c3 0307 	rsb	r3, r3, #7
 800458e:	2b04      	cmp	r3, #4
 8004590:	bf28      	it	cs
 8004592:	2304      	movcs	r3, #4
 8004594:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004596:	69fb      	ldr	r3, [r7, #28]
 8004598:	3304      	adds	r3, #4
 800459a:	2b06      	cmp	r3, #6
 800459c:	d902      	bls.n	80045a4 <NVIC_EncodePriority+0x30>
 800459e:	69fb      	ldr	r3, [r7, #28]
 80045a0:	3b03      	subs	r3, #3
 80045a2:	e000      	b.n	80045a6 <NVIC_EncodePriority+0x32>
 80045a4:	2300      	movs	r3, #0
 80045a6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80045a8:	f04f 32ff 	mov.w	r2, #4294967295
 80045ac:	69bb      	ldr	r3, [r7, #24]
 80045ae:	fa02 f303 	lsl.w	r3, r2, r3
 80045b2:	43da      	mvns	r2, r3
 80045b4:	68bb      	ldr	r3, [r7, #8]
 80045b6:	401a      	ands	r2, r3
 80045b8:	697b      	ldr	r3, [r7, #20]
 80045ba:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80045bc:	f04f 31ff 	mov.w	r1, #4294967295
 80045c0:	697b      	ldr	r3, [r7, #20]
 80045c2:	fa01 f303 	lsl.w	r3, r1, r3
 80045c6:	43d9      	mvns	r1, r3
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80045cc:	4313      	orrs	r3, r2
         );
}
 80045ce:	4618      	mov	r0, r3
 80045d0:	3724      	adds	r7, #36	; 0x24
 80045d2:	46bd      	mov	sp, r7
 80045d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045d8:	4770      	bx	lr
	...

080045dc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80045dc:	b580      	push	{r7, lr}
 80045de:	b082      	sub	sp, #8
 80045e0:	af00      	add	r7, sp, #0
 80045e2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	3b01      	subs	r3, #1
 80045e8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80045ec:	d301      	bcc.n	80045f2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80045ee:	2301      	movs	r3, #1
 80045f0:	e00f      	b.n	8004612 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80045f2:	4a0a      	ldr	r2, [pc, #40]	; (800461c <SysTick_Config+0x40>)
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	3b01      	subs	r3, #1
 80045f8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80045fa:	210f      	movs	r1, #15
 80045fc:	f04f 30ff 	mov.w	r0, #4294967295
 8004600:	f7ff ff8e 	bl	8004520 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004604:	4b05      	ldr	r3, [pc, #20]	; (800461c <SysTick_Config+0x40>)
 8004606:	2200      	movs	r2, #0
 8004608:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800460a:	4b04      	ldr	r3, [pc, #16]	; (800461c <SysTick_Config+0x40>)
 800460c:	2207      	movs	r2, #7
 800460e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004610:	2300      	movs	r3, #0
}
 8004612:	4618      	mov	r0, r3
 8004614:	3708      	adds	r7, #8
 8004616:	46bd      	mov	sp, r7
 8004618:	bd80      	pop	{r7, pc}
 800461a:	bf00      	nop
 800461c:	e000e010 	.word	0xe000e010

08004620 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004620:	b580      	push	{r7, lr}
 8004622:	b082      	sub	sp, #8
 8004624:	af00      	add	r7, sp, #0
 8004626:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004628:	6878      	ldr	r0, [r7, #4]
 800462a:	f7ff ff29 	bl	8004480 <__NVIC_SetPriorityGrouping>
}
 800462e:	bf00      	nop
 8004630:	3708      	adds	r7, #8
 8004632:	46bd      	mov	sp, r7
 8004634:	bd80      	pop	{r7, pc}

08004636 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8004636:	b580      	push	{r7, lr}
 8004638:	b086      	sub	sp, #24
 800463a:	af00      	add	r7, sp, #0
 800463c:	4603      	mov	r3, r0
 800463e:	60b9      	str	r1, [r7, #8]
 8004640:	607a      	str	r2, [r7, #4]
 8004642:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8004644:	2300      	movs	r3, #0
 8004646:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8004648:	f7ff ff3e 	bl	80044c8 <__NVIC_GetPriorityGrouping>
 800464c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800464e:	687a      	ldr	r2, [r7, #4]
 8004650:	68b9      	ldr	r1, [r7, #8]
 8004652:	6978      	ldr	r0, [r7, #20]
 8004654:	f7ff ff8e 	bl	8004574 <NVIC_EncodePriority>
 8004658:	4602      	mov	r2, r0
 800465a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800465e:	4611      	mov	r1, r2
 8004660:	4618      	mov	r0, r3
 8004662:	f7ff ff5d 	bl	8004520 <__NVIC_SetPriority>
}
 8004666:	bf00      	nop
 8004668:	3718      	adds	r7, #24
 800466a:	46bd      	mov	sp, r7
 800466c:	bd80      	pop	{r7, pc}

0800466e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800466e:	b580      	push	{r7, lr}
 8004670:	b082      	sub	sp, #8
 8004672:	af00      	add	r7, sp, #0
 8004674:	4603      	mov	r3, r0
 8004676:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004678:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800467c:	4618      	mov	r0, r3
 800467e:	f7ff ff31 	bl	80044e4 <__NVIC_EnableIRQ>
}
 8004682:	bf00      	nop
 8004684:	3708      	adds	r7, #8
 8004686:	46bd      	mov	sp, r7
 8004688:	bd80      	pop	{r7, pc}

0800468a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800468a:	b580      	push	{r7, lr}
 800468c:	b082      	sub	sp, #8
 800468e:	af00      	add	r7, sp, #0
 8004690:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004692:	6878      	ldr	r0, [r7, #4]
 8004694:	f7ff ffa2 	bl	80045dc <SysTick_Config>
 8004698:	4603      	mov	r3, r0
}
 800469a:	4618      	mov	r0, r3
 800469c:	3708      	adds	r7, #8
 800469e:	46bd      	mov	sp, r7
 80046a0:	bd80      	pop	{r7, pc}

080046a2 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef* hdac)
{ 
 80046a2:	b580      	push	{r7, lr}
 80046a4:	b082      	sub	sp, #8
 80046a6:	af00      	add	r7, sp, #0
 80046a8:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if(hdac == NULL)
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	2b00      	cmp	r3, #0
 80046ae:	d101      	bne.n	80046b4 <HAL_DAC_Init+0x12>
  {
     return HAL_ERROR;
 80046b0:	2301      	movs	r3, #1
 80046b2:	e014      	b.n	80046de <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));
  
  if(hdac->State == HAL_DAC_STATE_RESET)
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	791b      	ldrb	r3, [r3, #4]
 80046b8:	b2db      	uxtb	r3, r3
 80046ba:	2b00      	cmp	r3, #0
 80046bc:	d105      	bne.n	80046ca <HAL_DAC_Init+0x28>
    {
      hdac->MspInitCallback               = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	2200      	movs	r2, #0
 80046c2:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 80046c4:	6878      	ldr	r0, [r7, #4]
 80046c6:	f7fe f919 	bl	80028fc <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }
  
  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	2202      	movs	r2, #2
 80046ce:	711a      	strb	r2, [r3, #4]
  
  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	2200      	movs	r2, #0
 80046d4:	611a      	str	r2, [r3, #16]
  
  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	2201      	movs	r2, #1
 80046da:	711a      	strb	r2, [r3, #4]
  
  /* Return function status */
  return HAL_OK;
 80046dc:	2300      	movs	r3, #0
}
 80046de:	4618      	mov	r0, r3
 80046e0:	3708      	adds	r7, #8
 80046e2:	46bd      	mov	sp, r7
 80046e4:	bd80      	pop	{r7, pc}

080046e6 <HAL_DAC_IRQHandler>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
void HAL_DAC_IRQHandler(DAC_HandleTypeDef* hdac)
{
 80046e6:	b580      	push	{r7, lr}
 80046e8:	b082      	sub	sp, #8
 80046ea:	af00      	add	r7, sp, #0
 80046ec:	6078      	str	r0, [r7, #4]
  /* Check underrun channel 1 flag */
  if(__HAL_DAC_GET_FLAG(hdac, DAC_FLAG_DMAUDR1))
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80046f4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80046f8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80046fc:	d118      	bne.n	8004730 <HAL_DAC_IRQHandler+0x4a>
  {
    /* Change DAC state to error state */
    hdac->State = HAL_DAC_STATE_ERROR;
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	2204      	movs	r2, #4
 8004702:	711a      	strb	r2, [r3, #4]
    
    /* Set DAC error code to channel1 DMA underrun error */
    hdac->ErrorCode |= HAL_DAC_ERROR_DMAUNDERRUNCH1;
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	691b      	ldr	r3, [r3, #16]
 8004708:	f043 0201 	orr.w	r2, r3, #1
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	611a      	str	r2, [r3, #16]
    
    /* Clear the underrun flag */
    __HAL_DAC_CLEAR_FLAG(hdac,DAC_FLAG_DMAUDR1);
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8004718:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Disable the selected DAC channel1 DMA request */
    hdac->Instance->CR &= ~DAC_CR_DMAEN1;
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	681a      	ldr	r2, [r3, #0]
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8004728:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh1(hdac);
#else
    HAL_DAC_DMAUnderrunCallbackCh1(hdac);
 800472a:	6878      	ldr	r0, [r7, #4]
 800472c:	f000 f825 	bl	800477a <HAL_DAC_DMAUnderrunCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }
  /* Check underrun channel 2 flag */
  if(__HAL_DAC_GET_FLAG(hdac, DAC_FLAG_DMAUDR2))
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004736:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800473a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800473e:	d118      	bne.n	8004772 <HAL_DAC_IRQHandler+0x8c>
  {
    /* Change DAC state to error state */
    hdac->State = HAL_DAC_STATE_ERROR;
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	2204      	movs	r2, #4
 8004744:	711a      	strb	r2, [r3, #4]
    
    /* Set DAC error code to channel2 DMA underrun error */
    hdac->ErrorCode |= HAL_DAC_ERROR_DMAUNDERRUNCH2;
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	691b      	ldr	r3, [r3, #16]
 800474a:	f043 0202 	orr.w	r2, r3, #2
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	611a      	str	r2, [r3, #16]
    
    /* Clear the underrun flag */
    __HAL_DAC_CLEAR_FLAG(hdac,DAC_FLAG_DMAUDR2);
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 800475a:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Disable the selected DAC channel1 DMA request */
    hdac->Instance->CR &= ~DAC_CR_DMAEN2;
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	681a      	ldr	r2, [r3, #0]
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 800476a:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh2(hdac);
#else
    HAL_DACEx_DMAUnderrunCallbackCh2(hdac);
 800476c:	6878      	ldr	r0, [r7, #4]
 800476e:	f000 f85b 	bl	8004828 <HAL_DACEx_DMAUnderrunCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }
}
 8004772:	bf00      	nop
 8004774:	3708      	adds	r7, #8
 8004776:	46bd      	mov	sp, r7
 8004778:	bd80      	pop	{r7, pc}

0800477a <HAL_DAC_DMAUnderrunCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_DMAUnderrunCallbackCh1(DAC_HandleTypeDef *hdac)
{
 800477a:	b480      	push	{r7}
 800477c:	b083      	sub	sp, #12
 800477e:	af00      	add	r7, sp, #0
 8004780:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hdac);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DAC_DMAUnderrunCallbackCh1 could be implemented in the user file
   */
}
 8004782:	bf00      	nop
 8004784:	370c      	adds	r7, #12
 8004786:	46bd      	mov	sp, r7
 8004788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800478c:	4770      	bx	lr

0800478e <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef* hdac, DAC_ChannelConfTypeDef* sConfig, uint32_t Channel)
{
 800478e:	b480      	push	{r7}
 8004790:	b087      	sub	sp, #28
 8004792:	af00      	add	r7, sp, #0
 8004794:	60f8      	str	r0, [r7, #12]
 8004796:	60b9      	str	r1, [r7, #8]
 8004798:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg1 = 0U, tmpreg2 = 0U;
 800479a:	2300      	movs	r3, #0
 800479c:	617b      	str	r3, [r7, #20]
 800479e:	2300      	movs	r3, #0
 80047a0:	613b      	str	r3, [r7, #16]
  assert_param(IS_DAC_TRIGGER(sConfig->DAC_Trigger));
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));
  assert_param(IS_DAC_CHANNEL(Channel));
  
  /* Process locked */
  __HAL_LOCK(hdac);
 80047a2:	68fb      	ldr	r3, [r7, #12]
 80047a4:	795b      	ldrb	r3, [r3, #5]
 80047a6:	2b01      	cmp	r3, #1
 80047a8:	d101      	bne.n	80047ae <HAL_DAC_ConfigChannel+0x20>
 80047aa:	2302      	movs	r3, #2
 80047ac:	e036      	b.n	800481c <HAL_DAC_ConfigChannel+0x8e>
 80047ae:	68fb      	ldr	r3, [r7, #12]
 80047b0:	2201      	movs	r2, #1
 80047b2:	715a      	strb	r2, [r3, #5]
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 80047b4:	68fb      	ldr	r3, [r7, #12]
 80047b6:	2202      	movs	r2, #2
 80047b8:	711a      	strb	r2, [r3, #4]
  
  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 80047ba:	68fb      	ldr	r3, [r7, #12]
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	617b      	str	r3, [r7, #20]
  /* Clear BOFFx, TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << Channel);
 80047c2:	f640 72fe 	movw	r2, #4094	; 0xffe
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	fa02 f303 	lsl.w	r3, r2, r3
 80047cc:	43db      	mvns	r3, r3
 80047ce:	697a      	ldr	r2, [r7, #20]
 80047d0:	4013      	ands	r3, r2
 80047d2:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: buffer output, trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set BOFFx bit according to DAC_OutputBuffer value */   
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 80047d4:	68bb      	ldr	r3, [r7, #8]
 80047d6:	681a      	ldr	r2, [r3, #0]
 80047d8:	68bb      	ldr	r3, [r7, #8]
 80047da:	685b      	ldr	r3, [r3, #4]
 80047dc:	4313      	orrs	r3, r2
 80047de:	613b      	str	r3, [r7, #16]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << Channel;
 80047e0:	693a      	ldr	r2, [r7, #16]
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	fa02 f303 	lsl.w	r3, r2, r3
 80047e8:	697a      	ldr	r2, [r7, #20]
 80047ea:	4313      	orrs	r3, r2
 80047ec:	617b      	str	r3, [r7, #20]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 80047ee:	68fb      	ldr	r3, [r7, #12]
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	697a      	ldr	r2, [r7, #20]
 80047f4:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << Channel);
 80047f6:	68fb      	ldr	r3, [r7, #12]
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	6819      	ldr	r1, [r3, #0]
 80047fc:	22c0      	movs	r2, #192	; 0xc0
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	fa02 f303 	lsl.w	r3, r2, r3
 8004804:	43da      	mvns	r2, r3
 8004806:	68fb      	ldr	r3, [r7, #12]
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	400a      	ands	r2, r1
 800480c:	601a      	str	r2, [r3, #0]
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 800480e:	68fb      	ldr	r3, [r7, #12]
 8004810:	2201      	movs	r2, #1
 8004812:	711a      	strb	r2, [r3, #4]
  
  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8004814:	68fb      	ldr	r3, [r7, #12]
 8004816:	2200      	movs	r2, #0
 8004818:	715a      	strb	r2, [r3, #5]
  
  /* Return function status */
  return HAL_OK;
 800481a:	2300      	movs	r3, #0
}
 800481c:	4618      	mov	r0, r3
 800481e:	371c      	adds	r7, #28
 8004820:	46bd      	mov	sp, r7
 8004822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004826:	4770      	bx	lr

08004828 <HAL_DACEx_DMAUnderrunCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_DMAUnderrunCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8004828:	b480      	push	{r7}
 800482a:	b083      	sub	sp, #12
 800482c:	af00      	add	r7, sp, #0
 800482e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hdac);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DAC_DMAUnderrunCallbackCh2 could be implemented in the user file
   */
}
 8004830:	bf00      	nop
 8004832:	370c      	adds	r7, #12
 8004834:	46bd      	mov	sp, r7
 8004836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800483a:	4770      	bx	lr

0800483c <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800483c:	b480      	push	{r7}
 800483e:	b083      	sub	sp, #12
 8004840:	af00      	add	r7, sp, #0
 8004842:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800484a:	b2db      	uxtb	r3, r3
 800484c:	2b02      	cmp	r3, #2
 800484e:	d004      	beq.n	800485a <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	2280      	movs	r2, #128	; 0x80
 8004854:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8004856:	2301      	movs	r3, #1
 8004858:	e00c      	b.n	8004874 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	2205      	movs	r2, #5
 800485e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	681a      	ldr	r2, [r3, #0]
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	f022 0201 	bic.w	r2, r2, #1
 8004870:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8004872:	2300      	movs	r3, #0
}
 8004874:	4618      	mov	r0, r3
 8004876:	370c      	adds	r7, #12
 8004878:	46bd      	mov	sp, r7
 800487a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800487e:	4770      	bx	lr

08004880 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004880:	b480      	push	{r7}
 8004882:	b089      	sub	sp, #36	; 0x24
 8004884:	af00      	add	r7, sp, #0
 8004886:	6078      	str	r0, [r7, #4]
 8004888:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800488a:	2300      	movs	r3, #0
 800488c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800488e:	2300      	movs	r3, #0
 8004890:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8004892:	2300      	movs	r3, #0
 8004894:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004896:	2300      	movs	r3, #0
 8004898:	61fb      	str	r3, [r7, #28]
 800489a:	e16b      	b.n	8004b74 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800489c:	2201      	movs	r2, #1
 800489e:	69fb      	ldr	r3, [r7, #28]
 80048a0:	fa02 f303 	lsl.w	r3, r2, r3
 80048a4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80048a6:	683b      	ldr	r3, [r7, #0]
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	697a      	ldr	r2, [r7, #20]
 80048ac:	4013      	ands	r3, r2
 80048ae:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80048b0:	693a      	ldr	r2, [r7, #16]
 80048b2:	697b      	ldr	r3, [r7, #20]
 80048b4:	429a      	cmp	r2, r3
 80048b6:	f040 815a 	bne.w	8004b6e <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80048ba:	683b      	ldr	r3, [r7, #0]
 80048bc:	685b      	ldr	r3, [r3, #4]
 80048be:	2b01      	cmp	r3, #1
 80048c0:	d00b      	beq.n	80048da <HAL_GPIO_Init+0x5a>
 80048c2:	683b      	ldr	r3, [r7, #0]
 80048c4:	685b      	ldr	r3, [r3, #4]
 80048c6:	2b02      	cmp	r3, #2
 80048c8:	d007      	beq.n	80048da <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80048ca:	683b      	ldr	r3, [r7, #0]
 80048cc:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80048ce:	2b11      	cmp	r3, #17
 80048d0:	d003      	beq.n	80048da <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80048d2:	683b      	ldr	r3, [r7, #0]
 80048d4:	685b      	ldr	r3, [r3, #4]
 80048d6:	2b12      	cmp	r3, #18
 80048d8:	d130      	bne.n	800493c <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	689b      	ldr	r3, [r3, #8]
 80048de:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80048e0:	69fb      	ldr	r3, [r7, #28]
 80048e2:	005b      	lsls	r3, r3, #1
 80048e4:	2203      	movs	r2, #3
 80048e6:	fa02 f303 	lsl.w	r3, r2, r3
 80048ea:	43db      	mvns	r3, r3
 80048ec:	69ba      	ldr	r2, [r7, #24]
 80048ee:	4013      	ands	r3, r2
 80048f0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80048f2:	683b      	ldr	r3, [r7, #0]
 80048f4:	68da      	ldr	r2, [r3, #12]
 80048f6:	69fb      	ldr	r3, [r7, #28]
 80048f8:	005b      	lsls	r3, r3, #1
 80048fa:	fa02 f303 	lsl.w	r3, r2, r3
 80048fe:	69ba      	ldr	r2, [r7, #24]
 8004900:	4313      	orrs	r3, r2
 8004902:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	69ba      	ldr	r2, [r7, #24]
 8004908:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	685b      	ldr	r3, [r3, #4]
 800490e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004910:	2201      	movs	r2, #1
 8004912:	69fb      	ldr	r3, [r7, #28]
 8004914:	fa02 f303 	lsl.w	r3, r2, r3
 8004918:	43db      	mvns	r3, r3
 800491a:	69ba      	ldr	r2, [r7, #24]
 800491c:	4013      	ands	r3, r2
 800491e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8004920:	683b      	ldr	r3, [r7, #0]
 8004922:	685b      	ldr	r3, [r3, #4]
 8004924:	091b      	lsrs	r3, r3, #4
 8004926:	f003 0201 	and.w	r2, r3, #1
 800492a:	69fb      	ldr	r3, [r7, #28]
 800492c:	fa02 f303 	lsl.w	r3, r2, r3
 8004930:	69ba      	ldr	r2, [r7, #24]
 8004932:	4313      	orrs	r3, r2
 8004934:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	69ba      	ldr	r2, [r7, #24]
 800493a:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	68db      	ldr	r3, [r3, #12]
 8004940:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8004942:	69fb      	ldr	r3, [r7, #28]
 8004944:	005b      	lsls	r3, r3, #1
 8004946:	2203      	movs	r2, #3
 8004948:	fa02 f303 	lsl.w	r3, r2, r3
 800494c:	43db      	mvns	r3, r3
 800494e:	69ba      	ldr	r2, [r7, #24]
 8004950:	4013      	ands	r3, r2
 8004952:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004954:	683b      	ldr	r3, [r7, #0]
 8004956:	689a      	ldr	r2, [r3, #8]
 8004958:	69fb      	ldr	r3, [r7, #28]
 800495a:	005b      	lsls	r3, r3, #1
 800495c:	fa02 f303 	lsl.w	r3, r2, r3
 8004960:	69ba      	ldr	r2, [r7, #24]
 8004962:	4313      	orrs	r3, r2
 8004964:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	69ba      	ldr	r2, [r7, #24]
 800496a:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800496c:	683b      	ldr	r3, [r7, #0]
 800496e:	685b      	ldr	r3, [r3, #4]
 8004970:	2b02      	cmp	r3, #2
 8004972:	d003      	beq.n	800497c <HAL_GPIO_Init+0xfc>
 8004974:	683b      	ldr	r3, [r7, #0]
 8004976:	685b      	ldr	r3, [r3, #4]
 8004978:	2b12      	cmp	r3, #18
 800497a:	d123      	bne.n	80049c4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800497c:	69fb      	ldr	r3, [r7, #28]
 800497e:	08da      	lsrs	r2, r3, #3
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	3208      	adds	r2, #8
 8004984:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004988:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800498a:	69fb      	ldr	r3, [r7, #28]
 800498c:	f003 0307 	and.w	r3, r3, #7
 8004990:	009b      	lsls	r3, r3, #2
 8004992:	220f      	movs	r2, #15
 8004994:	fa02 f303 	lsl.w	r3, r2, r3
 8004998:	43db      	mvns	r3, r3
 800499a:	69ba      	ldr	r2, [r7, #24]
 800499c:	4013      	ands	r3, r2
 800499e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80049a0:	683b      	ldr	r3, [r7, #0]
 80049a2:	691a      	ldr	r2, [r3, #16]
 80049a4:	69fb      	ldr	r3, [r7, #28]
 80049a6:	f003 0307 	and.w	r3, r3, #7
 80049aa:	009b      	lsls	r3, r3, #2
 80049ac:	fa02 f303 	lsl.w	r3, r2, r3
 80049b0:	69ba      	ldr	r2, [r7, #24]
 80049b2:	4313      	orrs	r3, r2
 80049b4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80049b6:	69fb      	ldr	r3, [r7, #28]
 80049b8:	08da      	lsrs	r2, r3, #3
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	3208      	adds	r2, #8
 80049be:	69b9      	ldr	r1, [r7, #24]
 80049c0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80049ca:	69fb      	ldr	r3, [r7, #28]
 80049cc:	005b      	lsls	r3, r3, #1
 80049ce:	2203      	movs	r2, #3
 80049d0:	fa02 f303 	lsl.w	r3, r2, r3
 80049d4:	43db      	mvns	r3, r3
 80049d6:	69ba      	ldr	r2, [r7, #24]
 80049d8:	4013      	ands	r3, r2
 80049da:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80049dc:	683b      	ldr	r3, [r7, #0]
 80049de:	685b      	ldr	r3, [r3, #4]
 80049e0:	f003 0203 	and.w	r2, r3, #3
 80049e4:	69fb      	ldr	r3, [r7, #28]
 80049e6:	005b      	lsls	r3, r3, #1
 80049e8:	fa02 f303 	lsl.w	r3, r2, r3
 80049ec:	69ba      	ldr	r2, [r7, #24]
 80049ee:	4313      	orrs	r3, r2
 80049f0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	69ba      	ldr	r2, [r7, #24]
 80049f6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80049f8:	683b      	ldr	r3, [r7, #0]
 80049fa:	685b      	ldr	r3, [r3, #4]
 80049fc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004a00:	2b00      	cmp	r3, #0
 8004a02:	f000 80b4 	beq.w	8004b6e <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004a06:	2300      	movs	r3, #0
 8004a08:	60fb      	str	r3, [r7, #12]
 8004a0a:	4b5f      	ldr	r3, [pc, #380]	; (8004b88 <HAL_GPIO_Init+0x308>)
 8004a0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004a0e:	4a5e      	ldr	r2, [pc, #376]	; (8004b88 <HAL_GPIO_Init+0x308>)
 8004a10:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004a14:	6453      	str	r3, [r2, #68]	; 0x44
 8004a16:	4b5c      	ldr	r3, [pc, #368]	; (8004b88 <HAL_GPIO_Init+0x308>)
 8004a18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004a1a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004a1e:	60fb      	str	r3, [r7, #12]
 8004a20:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004a22:	4a5a      	ldr	r2, [pc, #360]	; (8004b8c <HAL_GPIO_Init+0x30c>)
 8004a24:	69fb      	ldr	r3, [r7, #28]
 8004a26:	089b      	lsrs	r3, r3, #2
 8004a28:	3302      	adds	r3, #2
 8004a2a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004a2e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8004a30:	69fb      	ldr	r3, [r7, #28]
 8004a32:	f003 0303 	and.w	r3, r3, #3
 8004a36:	009b      	lsls	r3, r3, #2
 8004a38:	220f      	movs	r2, #15
 8004a3a:	fa02 f303 	lsl.w	r3, r2, r3
 8004a3e:	43db      	mvns	r3, r3
 8004a40:	69ba      	ldr	r2, [r7, #24]
 8004a42:	4013      	ands	r3, r2
 8004a44:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	4a51      	ldr	r2, [pc, #324]	; (8004b90 <HAL_GPIO_Init+0x310>)
 8004a4a:	4293      	cmp	r3, r2
 8004a4c:	d02b      	beq.n	8004aa6 <HAL_GPIO_Init+0x226>
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	4a50      	ldr	r2, [pc, #320]	; (8004b94 <HAL_GPIO_Init+0x314>)
 8004a52:	4293      	cmp	r3, r2
 8004a54:	d025      	beq.n	8004aa2 <HAL_GPIO_Init+0x222>
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	4a4f      	ldr	r2, [pc, #316]	; (8004b98 <HAL_GPIO_Init+0x318>)
 8004a5a:	4293      	cmp	r3, r2
 8004a5c:	d01f      	beq.n	8004a9e <HAL_GPIO_Init+0x21e>
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	4a4e      	ldr	r2, [pc, #312]	; (8004b9c <HAL_GPIO_Init+0x31c>)
 8004a62:	4293      	cmp	r3, r2
 8004a64:	d019      	beq.n	8004a9a <HAL_GPIO_Init+0x21a>
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	4a4d      	ldr	r2, [pc, #308]	; (8004ba0 <HAL_GPIO_Init+0x320>)
 8004a6a:	4293      	cmp	r3, r2
 8004a6c:	d013      	beq.n	8004a96 <HAL_GPIO_Init+0x216>
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	4a4c      	ldr	r2, [pc, #304]	; (8004ba4 <HAL_GPIO_Init+0x324>)
 8004a72:	4293      	cmp	r3, r2
 8004a74:	d00d      	beq.n	8004a92 <HAL_GPIO_Init+0x212>
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	4a4b      	ldr	r2, [pc, #300]	; (8004ba8 <HAL_GPIO_Init+0x328>)
 8004a7a:	4293      	cmp	r3, r2
 8004a7c:	d007      	beq.n	8004a8e <HAL_GPIO_Init+0x20e>
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	4a4a      	ldr	r2, [pc, #296]	; (8004bac <HAL_GPIO_Init+0x32c>)
 8004a82:	4293      	cmp	r3, r2
 8004a84:	d101      	bne.n	8004a8a <HAL_GPIO_Init+0x20a>
 8004a86:	2307      	movs	r3, #7
 8004a88:	e00e      	b.n	8004aa8 <HAL_GPIO_Init+0x228>
 8004a8a:	2308      	movs	r3, #8
 8004a8c:	e00c      	b.n	8004aa8 <HAL_GPIO_Init+0x228>
 8004a8e:	2306      	movs	r3, #6
 8004a90:	e00a      	b.n	8004aa8 <HAL_GPIO_Init+0x228>
 8004a92:	2305      	movs	r3, #5
 8004a94:	e008      	b.n	8004aa8 <HAL_GPIO_Init+0x228>
 8004a96:	2304      	movs	r3, #4
 8004a98:	e006      	b.n	8004aa8 <HAL_GPIO_Init+0x228>
 8004a9a:	2303      	movs	r3, #3
 8004a9c:	e004      	b.n	8004aa8 <HAL_GPIO_Init+0x228>
 8004a9e:	2302      	movs	r3, #2
 8004aa0:	e002      	b.n	8004aa8 <HAL_GPIO_Init+0x228>
 8004aa2:	2301      	movs	r3, #1
 8004aa4:	e000      	b.n	8004aa8 <HAL_GPIO_Init+0x228>
 8004aa6:	2300      	movs	r3, #0
 8004aa8:	69fa      	ldr	r2, [r7, #28]
 8004aaa:	f002 0203 	and.w	r2, r2, #3
 8004aae:	0092      	lsls	r2, r2, #2
 8004ab0:	4093      	lsls	r3, r2
 8004ab2:	69ba      	ldr	r2, [r7, #24]
 8004ab4:	4313      	orrs	r3, r2
 8004ab6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004ab8:	4934      	ldr	r1, [pc, #208]	; (8004b8c <HAL_GPIO_Init+0x30c>)
 8004aba:	69fb      	ldr	r3, [r7, #28]
 8004abc:	089b      	lsrs	r3, r3, #2
 8004abe:	3302      	adds	r3, #2
 8004ac0:	69ba      	ldr	r2, [r7, #24]
 8004ac2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004ac6:	4b3a      	ldr	r3, [pc, #232]	; (8004bb0 <HAL_GPIO_Init+0x330>)
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004acc:	693b      	ldr	r3, [r7, #16]
 8004ace:	43db      	mvns	r3, r3
 8004ad0:	69ba      	ldr	r2, [r7, #24]
 8004ad2:	4013      	ands	r3, r2
 8004ad4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8004ad6:	683b      	ldr	r3, [r7, #0]
 8004ad8:	685b      	ldr	r3, [r3, #4]
 8004ada:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004ade:	2b00      	cmp	r3, #0
 8004ae0:	d003      	beq.n	8004aea <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8004ae2:	69ba      	ldr	r2, [r7, #24]
 8004ae4:	693b      	ldr	r3, [r7, #16]
 8004ae6:	4313      	orrs	r3, r2
 8004ae8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8004aea:	4a31      	ldr	r2, [pc, #196]	; (8004bb0 <HAL_GPIO_Init+0x330>)
 8004aec:	69bb      	ldr	r3, [r7, #24]
 8004aee:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8004af0:	4b2f      	ldr	r3, [pc, #188]	; (8004bb0 <HAL_GPIO_Init+0x330>)
 8004af2:	685b      	ldr	r3, [r3, #4]
 8004af4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004af6:	693b      	ldr	r3, [r7, #16]
 8004af8:	43db      	mvns	r3, r3
 8004afa:	69ba      	ldr	r2, [r7, #24]
 8004afc:	4013      	ands	r3, r2
 8004afe:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8004b00:	683b      	ldr	r3, [r7, #0]
 8004b02:	685b      	ldr	r3, [r3, #4]
 8004b04:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004b08:	2b00      	cmp	r3, #0
 8004b0a:	d003      	beq.n	8004b14 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8004b0c:	69ba      	ldr	r2, [r7, #24]
 8004b0e:	693b      	ldr	r3, [r7, #16]
 8004b10:	4313      	orrs	r3, r2
 8004b12:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8004b14:	4a26      	ldr	r2, [pc, #152]	; (8004bb0 <HAL_GPIO_Init+0x330>)
 8004b16:	69bb      	ldr	r3, [r7, #24]
 8004b18:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004b1a:	4b25      	ldr	r3, [pc, #148]	; (8004bb0 <HAL_GPIO_Init+0x330>)
 8004b1c:	689b      	ldr	r3, [r3, #8]
 8004b1e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004b20:	693b      	ldr	r3, [r7, #16]
 8004b22:	43db      	mvns	r3, r3
 8004b24:	69ba      	ldr	r2, [r7, #24]
 8004b26:	4013      	ands	r3, r2
 8004b28:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8004b2a:	683b      	ldr	r3, [r7, #0]
 8004b2c:	685b      	ldr	r3, [r3, #4]
 8004b2e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004b32:	2b00      	cmp	r3, #0
 8004b34:	d003      	beq.n	8004b3e <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8004b36:	69ba      	ldr	r2, [r7, #24]
 8004b38:	693b      	ldr	r3, [r7, #16]
 8004b3a:	4313      	orrs	r3, r2
 8004b3c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8004b3e:	4a1c      	ldr	r2, [pc, #112]	; (8004bb0 <HAL_GPIO_Init+0x330>)
 8004b40:	69bb      	ldr	r3, [r7, #24]
 8004b42:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004b44:	4b1a      	ldr	r3, [pc, #104]	; (8004bb0 <HAL_GPIO_Init+0x330>)
 8004b46:	68db      	ldr	r3, [r3, #12]
 8004b48:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004b4a:	693b      	ldr	r3, [r7, #16]
 8004b4c:	43db      	mvns	r3, r3
 8004b4e:	69ba      	ldr	r2, [r7, #24]
 8004b50:	4013      	ands	r3, r2
 8004b52:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8004b54:	683b      	ldr	r3, [r7, #0]
 8004b56:	685b      	ldr	r3, [r3, #4]
 8004b58:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004b5c:	2b00      	cmp	r3, #0
 8004b5e:	d003      	beq.n	8004b68 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8004b60:	69ba      	ldr	r2, [r7, #24]
 8004b62:	693b      	ldr	r3, [r7, #16]
 8004b64:	4313      	orrs	r3, r2
 8004b66:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004b68:	4a11      	ldr	r2, [pc, #68]	; (8004bb0 <HAL_GPIO_Init+0x330>)
 8004b6a:	69bb      	ldr	r3, [r7, #24]
 8004b6c:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004b6e:	69fb      	ldr	r3, [r7, #28]
 8004b70:	3301      	adds	r3, #1
 8004b72:	61fb      	str	r3, [r7, #28]
 8004b74:	69fb      	ldr	r3, [r7, #28]
 8004b76:	2b0f      	cmp	r3, #15
 8004b78:	f67f ae90 	bls.w	800489c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8004b7c:	bf00      	nop
 8004b7e:	3724      	adds	r7, #36	; 0x24
 8004b80:	46bd      	mov	sp, r7
 8004b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b86:	4770      	bx	lr
 8004b88:	40023800 	.word	0x40023800
 8004b8c:	40013800 	.word	0x40013800
 8004b90:	40020000 	.word	0x40020000
 8004b94:	40020400 	.word	0x40020400
 8004b98:	40020800 	.word	0x40020800
 8004b9c:	40020c00 	.word	0x40020c00
 8004ba0:	40021000 	.word	0x40021000
 8004ba4:	40021400 	.word	0x40021400
 8004ba8:	40021800 	.word	0x40021800
 8004bac:	40021c00 	.word	0x40021c00
 8004bb0:	40013c00 	.word	0x40013c00

08004bb4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8004bb4:	b480      	push	{r7}
 8004bb6:	b085      	sub	sp, #20
 8004bb8:	af00      	add	r7, sp, #0
 8004bba:	6078      	str	r0, [r7, #4]
 8004bbc:	460b      	mov	r3, r1
 8004bbe:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	691a      	ldr	r2, [r3, #16]
 8004bc4:	887b      	ldrh	r3, [r7, #2]
 8004bc6:	4013      	ands	r3, r2
 8004bc8:	2b00      	cmp	r3, #0
 8004bca:	d002      	beq.n	8004bd2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8004bcc:	2301      	movs	r3, #1
 8004bce:	73fb      	strb	r3, [r7, #15]
 8004bd0:	e001      	b.n	8004bd6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8004bd2:	2300      	movs	r3, #0
 8004bd4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8004bd6:	7bfb      	ldrb	r3, [r7, #15]
}
 8004bd8:	4618      	mov	r0, r3
 8004bda:	3714      	adds	r7, #20
 8004bdc:	46bd      	mov	sp, r7
 8004bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004be2:	4770      	bx	lr

08004be4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004be4:	b480      	push	{r7}
 8004be6:	b083      	sub	sp, #12
 8004be8:	af00      	add	r7, sp, #0
 8004bea:	6078      	str	r0, [r7, #4]
 8004bec:	460b      	mov	r3, r1
 8004bee:	807b      	strh	r3, [r7, #2]
 8004bf0:	4613      	mov	r3, r2
 8004bf2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004bf4:	787b      	ldrb	r3, [r7, #1]
 8004bf6:	2b00      	cmp	r3, #0
 8004bf8:	d003      	beq.n	8004c02 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004bfa:	887a      	ldrh	r2, [r7, #2]
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8004c00:	e003      	b.n	8004c0a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8004c02:	887b      	ldrh	r3, [r7, #2]
 8004c04:	041a      	lsls	r2, r3, #16
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	619a      	str	r2, [r3, #24]
}
 8004c0a:	bf00      	nop
 8004c0c:	370c      	adds	r7, #12
 8004c0e:	46bd      	mov	sp, r7
 8004c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c14:	4770      	bx	lr

08004c16 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8004c16:	b480      	push	{r7}
 8004c18:	b083      	sub	sp, #12
 8004c1a:	af00      	add	r7, sp, #0
 8004c1c:	6078      	str	r0, [r7, #4]
 8004c1e:	460b      	mov	r3, r1
 8004c20:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	695a      	ldr	r2, [r3, #20]
 8004c26:	887b      	ldrh	r3, [r7, #2]
 8004c28:	401a      	ands	r2, r3
 8004c2a:	887b      	ldrh	r3, [r7, #2]
 8004c2c:	429a      	cmp	r2, r3
 8004c2e:	d104      	bne.n	8004c3a <HAL_GPIO_TogglePin+0x24>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8004c30:	887b      	ldrh	r3, [r7, #2]
 8004c32:	041a      	lsls	r2, r3, #16
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
  }
}
 8004c38:	e002      	b.n	8004c40 <HAL_GPIO_TogglePin+0x2a>
    GPIOx->BSRR = GPIO_Pin;
 8004c3a:	887a      	ldrh	r2, [r7, #2]
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	619a      	str	r2, [r3, #24]
}
 8004c40:	bf00      	nop
 8004c42:	370c      	adds	r7, #12
 8004c44:	46bd      	mov	sp, r7
 8004c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c4a:	4770      	bx	lr

08004c4c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8004c4c:	b580      	push	{r7, lr}
 8004c4e:	b082      	sub	sp, #8
 8004c50:	af00      	add	r7, sp, #0
 8004c52:	4603      	mov	r3, r0
 8004c54:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8004c56:	4b08      	ldr	r3, [pc, #32]	; (8004c78 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004c58:	695a      	ldr	r2, [r3, #20]
 8004c5a:	88fb      	ldrh	r3, [r7, #6]
 8004c5c:	4013      	ands	r3, r2
 8004c5e:	2b00      	cmp	r3, #0
 8004c60:	d006      	beq.n	8004c70 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8004c62:	4a05      	ldr	r2, [pc, #20]	; (8004c78 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004c64:	88fb      	ldrh	r3, [r7, #6]
 8004c66:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8004c68:	88fb      	ldrh	r3, [r7, #6]
 8004c6a:	4618      	mov	r0, r3
 8004c6c:	f000 f806 	bl	8004c7c <HAL_GPIO_EXTI_Callback>
  }
}
 8004c70:	bf00      	nop
 8004c72:	3708      	adds	r7, #8
 8004c74:	46bd      	mov	sp, r7
 8004c76:	bd80      	pop	{r7, pc}
 8004c78:	40013c00 	.word	0x40013c00

08004c7c <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8004c7c:	b480      	push	{r7}
 8004c7e:	b083      	sub	sp, #12
 8004c80:	af00      	add	r7, sp, #0
 8004c82:	4603      	mov	r3, r0
 8004c84:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8004c86:	bf00      	nop
 8004c88:	370c      	adds	r7, #12
 8004c8a:	46bd      	mov	sp, r7
 8004c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c90:	4770      	bx	lr
	...

08004c94 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004c94:	b580      	push	{r7, lr}
 8004c96:	b084      	sub	sp, #16
 8004c98:	af00      	add	r7, sp, #0
 8004c9a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	2b00      	cmp	r3, #0
 8004ca0:	d101      	bne.n	8004ca6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004ca2:	2301      	movs	r3, #1
 8004ca4:	e11f      	b.n	8004ee6 <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004cac:	b2db      	uxtb	r3, r3
 8004cae:	2b00      	cmp	r3, #0
 8004cb0:	d106      	bne.n	8004cc0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	2200      	movs	r2, #0
 8004cb6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8004cba:	6878      	ldr	r0, [r7, #4]
 8004cbc:	f7fd ffbe 	bl	8002c3c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	2224      	movs	r2, #36	; 0x24
 8004cc4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	681a      	ldr	r2, [r3, #0]
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	f022 0201 	bic.w	r2, r2, #1
 8004cd6:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	681a      	ldr	r2, [r3, #0]
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004ce6:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	681a      	ldr	r2, [r3, #0]
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004cf6:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8004cf8:	f001 f974 	bl	8005fe4 <HAL_RCC_GetPCLK1Freq>
 8004cfc:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	685b      	ldr	r3, [r3, #4]
 8004d02:	4a7b      	ldr	r2, [pc, #492]	; (8004ef0 <HAL_I2C_Init+0x25c>)
 8004d04:	4293      	cmp	r3, r2
 8004d06:	d807      	bhi.n	8004d18 <HAL_I2C_Init+0x84>
 8004d08:	68fb      	ldr	r3, [r7, #12]
 8004d0a:	4a7a      	ldr	r2, [pc, #488]	; (8004ef4 <HAL_I2C_Init+0x260>)
 8004d0c:	4293      	cmp	r3, r2
 8004d0e:	bf94      	ite	ls
 8004d10:	2301      	movls	r3, #1
 8004d12:	2300      	movhi	r3, #0
 8004d14:	b2db      	uxtb	r3, r3
 8004d16:	e006      	b.n	8004d26 <HAL_I2C_Init+0x92>
 8004d18:	68fb      	ldr	r3, [r7, #12]
 8004d1a:	4a77      	ldr	r2, [pc, #476]	; (8004ef8 <HAL_I2C_Init+0x264>)
 8004d1c:	4293      	cmp	r3, r2
 8004d1e:	bf94      	ite	ls
 8004d20:	2301      	movls	r3, #1
 8004d22:	2300      	movhi	r3, #0
 8004d24:	b2db      	uxtb	r3, r3
 8004d26:	2b00      	cmp	r3, #0
 8004d28:	d001      	beq.n	8004d2e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8004d2a:	2301      	movs	r3, #1
 8004d2c:	e0db      	b.n	8004ee6 <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8004d2e:	68fb      	ldr	r3, [r7, #12]
 8004d30:	4a72      	ldr	r2, [pc, #456]	; (8004efc <HAL_I2C_Init+0x268>)
 8004d32:	fba2 2303 	umull	r2, r3, r2, r3
 8004d36:	0c9b      	lsrs	r3, r3, #18
 8004d38:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	685b      	ldr	r3, [r3, #4]
 8004d40:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	68ba      	ldr	r2, [r7, #8]
 8004d4a:	430a      	orrs	r2, r1
 8004d4c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	6a1b      	ldr	r3, [r3, #32]
 8004d54:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	685b      	ldr	r3, [r3, #4]
 8004d5c:	4a64      	ldr	r2, [pc, #400]	; (8004ef0 <HAL_I2C_Init+0x25c>)
 8004d5e:	4293      	cmp	r3, r2
 8004d60:	d802      	bhi.n	8004d68 <HAL_I2C_Init+0xd4>
 8004d62:	68bb      	ldr	r3, [r7, #8]
 8004d64:	3301      	adds	r3, #1
 8004d66:	e009      	b.n	8004d7c <HAL_I2C_Init+0xe8>
 8004d68:	68bb      	ldr	r3, [r7, #8]
 8004d6a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8004d6e:	fb02 f303 	mul.w	r3, r2, r3
 8004d72:	4a63      	ldr	r2, [pc, #396]	; (8004f00 <HAL_I2C_Init+0x26c>)
 8004d74:	fba2 2303 	umull	r2, r3, r2, r3
 8004d78:	099b      	lsrs	r3, r3, #6
 8004d7a:	3301      	adds	r3, #1
 8004d7c:	687a      	ldr	r2, [r7, #4]
 8004d7e:	6812      	ldr	r2, [r2, #0]
 8004d80:	430b      	orrs	r3, r1
 8004d82:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	69db      	ldr	r3, [r3, #28]
 8004d8a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8004d8e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	685b      	ldr	r3, [r3, #4]
 8004d96:	4956      	ldr	r1, [pc, #344]	; (8004ef0 <HAL_I2C_Init+0x25c>)
 8004d98:	428b      	cmp	r3, r1
 8004d9a:	d80d      	bhi.n	8004db8 <HAL_I2C_Init+0x124>
 8004d9c:	68fb      	ldr	r3, [r7, #12]
 8004d9e:	1e59      	subs	r1, r3, #1
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	685b      	ldr	r3, [r3, #4]
 8004da4:	005b      	lsls	r3, r3, #1
 8004da6:	fbb1 f3f3 	udiv	r3, r1, r3
 8004daa:	3301      	adds	r3, #1
 8004dac:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004db0:	2b04      	cmp	r3, #4
 8004db2:	bf38      	it	cc
 8004db4:	2304      	movcc	r3, #4
 8004db6:	e04f      	b.n	8004e58 <HAL_I2C_Init+0x1c4>
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	689b      	ldr	r3, [r3, #8]
 8004dbc:	2b00      	cmp	r3, #0
 8004dbe:	d111      	bne.n	8004de4 <HAL_I2C_Init+0x150>
 8004dc0:	68fb      	ldr	r3, [r7, #12]
 8004dc2:	1e58      	subs	r0, r3, #1
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	6859      	ldr	r1, [r3, #4]
 8004dc8:	460b      	mov	r3, r1
 8004dca:	005b      	lsls	r3, r3, #1
 8004dcc:	440b      	add	r3, r1
 8004dce:	fbb0 f3f3 	udiv	r3, r0, r3
 8004dd2:	3301      	adds	r3, #1
 8004dd4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004dd8:	2b00      	cmp	r3, #0
 8004dda:	bf0c      	ite	eq
 8004ddc:	2301      	moveq	r3, #1
 8004dde:	2300      	movne	r3, #0
 8004de0:	b2db      	uxtb	r3, r3
 8004de2:	e012      	b.n	8004e0a <HAL_I2C_Init+0x176>
 8004de4:	68fb      	ldr	r3, [r7, #12]
 8004de6:	1e58      	subs	r0, r3, #1
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	6859      	ldr	r1, [r3, #4]
 8004dec:	460b      	mov	r3, r1
 8004dee:	009b      	lsls	r3, r3, #2
 8004df0:	440b      	add	r3, r1
 8004df2:	0099      	lsls	r1, r3, #2
 8004df4:	440b      	add	r3, r1
 8004df6:	fbb0 f3f3 	udiv	r3, r0, r3
 8004dfa:	3301      	adds	r3, #1
 8004dfc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004e00:	2b00      	cmp	r3, #0
 8004e02:	bf0c      	ite	eq
 8004e04:	2301      	moveq	r3, #1
 8004e06:	2300      	movne	r3, #0
 8004e08:	b2db      	uxtb	r3, r3
 8004e0a:	2b00      	cmp	r3, #0
 8004e0c:	d001      	beq.n	8004e12 <HAL_I2C_Init+0x17e>
 8004e0e:	2301      	movs	r3, #1
 8004e10:	e022      	b.n	8004e58 <HAL_I2C_Init+0x1c4>
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	689b      	ldr	r3, [r3, #8]
 8004e16:	2b00      	cmp	r3, #0
 8004e18:	d10e      	bne.n	8004e38 <HAL_I2C_Init+0x1a4>
 8004e1a:	68fb      	ldr	r3, [r7, #12]
 8004e1c:	1e58      	subs	r0, r3, #1
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	6859      	ldr	r1, [r3, #4]
 8004e22:	460b      	mov	r3, r1
 8004e24:	005b      	lsls	r3, r3, #1
 8004e26:	440b      	add	r3, r1
 8004e28:	fbb0 f3f3 	udiv	r3, r0, r3
 8004e2c:	3301      	adds	r3, #1
 8004e2e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004e32:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004e36:	e00f      	b.n	8004e58 <HAL_I2C_Init+0x1c4>
 8004e38:	68fb      	ldr	r3, [r7, #12]
 8004e3a:	1e58      	subs	r0, r3, #1
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	6859      	ldr	r1, [r3, #4]
 8004e40:	460b      	mov	r3, r1
 8004e42:	009b      	lsls	r3, r3, #2
 8004e44:	440b      	add	r3, r1
 8004e46:	0099      	lsls	r1, r3, #2
 8004e48:	440b      	add	r3, r1
 8004e4a:	fbb0 f3f3 	udiv	r3, r0, r3
 8004e4e:	3301      	adds	r3, #1
 8004e50:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004e54:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004e58:	6879      	ldr	r1, [r7, #4]
 8004e5a:	6809      	ldr	r1, [r1, #0]
 8004e5c:	4313      	orrs	r3, r2
 8004e5e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	69da      	ldr	r2, [r3, #28]
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	6a1b      	ldr	r3, [r3, #32]
 8004e72:	431a      	orrs	r2, r3
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	430a      	orrs	r2, r1
 8004e7a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	689b      	ldr	r3, [r3, #8]
 8004e82:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8004e86:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8004e8a:	687a      	ldr	r2, [r7, #4]
 8004e8c:	6911      	ldr	r1, [r2, #16]
 8004e8e:	687a      	ldr	r2, [r7, #4]
 8004e90:	68d2      	ldr	r2, [r2, #12]
 8004e92:	4311      	orrs	r1, r2
 8004e94:	687a      	ldr	r2, [r7, #4]
 8004e96:	6812      	ldr	r2, [r2, #0]
 8004e98:	430b      	orrs	r3, r1
 8004e9a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	68db      	ldr	r3, [r3, #12]
 8004ea2:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	695a      	ldr	r2, [r3, #20]
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	699b      	ldr	r3, [r3, #24]
 8004eae:	431a      	orrs	r2, r3
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	430a      	orrs	r2, r1
 8004eb6:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	681a      	ldr	r2, [r3, #0]
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	f042 0201 	orr.w	r2, r2, #1
 8004ec6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	2200      	movs	r2, #0
 8004ecc:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	2220      	movs	r2, #32
 8004ed2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	2200      	movs	r2, #0
 8004eda:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	2200      	movs	r2, #0
 8004ee0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004ee4:	2300      	movs	r3, #0
}
 8004ee6:	4618      	mov	r0, r3
 8004ee8:	3710      	adds	r7, #16
 8004eea:	46bd      	mov	sp, r7
 8004eec:	bd80      	pop	{r7, pc}
 8004eee:	bf00      	nop
 8004ef0:	000186a0 	.word	0x000186a0
 8004ef4:	001e847f 	.word	0x001e847f
 8004ef8:	003d08ff 	.word	0x003d08ff
 8004efc:	431bde83 	.word	0x431bde83
 8004f00:	10624dd3 	.word	0x10624dd3

08004f04 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004f04:	b580      	push	{r7, lr}
 8004f06:	b088      	sub	sp, #32
 8004f08:	af02      	add	r7, sp, #8
 8004f0a:	60f8      	str	r0, [r7, #12]
 8004f0c:	607a      	str	r2, [r7, #4]
 8004f0e:	461a      	mov	r2, r3
 8004f10:	460b      	mov	r3, r1
 8004f12:	817b      	strh	r3, [r7, #10]
 8004f14:	4613      	mov	r3, r2
 8004f16:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004f18:	f7ff f988 	bl	800422c <HAL_GetTick>
 8004f1c:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004f1e:	68fb      	ldr	r3, [r7, #12]
 8004f20:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004f24:	b2db      	uxtb	r3, r3
 8004f26:	2b20      	cmp	r3, #32
 8004f28:	f040 80e0 	bne.w	80050ec <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004f2c:	697b      	ldr	r3, [r7, #20]
 8004f2e:	9300      	str	r3, [sp, #0]
 8004f30:	2319      	movs	r3, #25
 8004f32:	2201      	movs	r2, #1
 8004f34:	4970      	ldr	r1, [pc, #448]	; (80050f8 <HAL_I2C_Master_Transmit+0x1f4>)
 8004f36:	68f8      	ldr	r0, [r7, #12]
 8004f38:	f000 fa92 	bl	8005460 <I2C_WaitOnFlagUntilTimeout>
 8004f3c:	4603      	mov	r3, r0
 8004f3e:	2b00      	cmp	r3, #0
 8004f40:	d001      	beq.n	8004f46 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8004f42:	2302      	movs	r3, #2
 8004f44:	e0d3      	b.n	80050ee <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004f46:	68fb      	ldr	r3, [r7, #12]
 8004f48:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004f4c:	2b01      	cmp	r3, #1
 8004f4e:	d101      	bne.n	8004f54 <HAL_I2C_Master_Transmit+0x50>
 8004f50:	2302      	movs	r3, #2
 8004f52:	e0cc      	b.n	80050ee <HAL_I2C_Master_Transmit+0x1ea>
 8004f54:	68fb      	ldr	r3, [r7, #12]
 8004f56:	2201      	movs	r2, #1
 8004f58:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004f5c:	68fb      	ldr	r3, [r7, #12]
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	f003 0301 	and.w	r3, r3, #1
 8004f66:	2b01      	cmp	r3, #1
 8004f68:	d007      	beq.n	8004f7a <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004f6a:	68fb      	ldr	r3, [r7, #12]
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	681a      	ldr	r2, [r3, #0]
 8004f70:	68fb      	ldr	r3, [r7, #12]
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	f042 0201 	orr.w	r2, r2, #1
 8004f78:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004f7a:	68fb      	ldr	r3, [r7, #12]
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	681a      	ldr	r2, [r3, #0]
 8004f80:	68fb      	ldr	r3, [r7, #12]
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004f88:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8004f8a:	68fb      	ldr	r3, [r7, #12]
 8004f8c:	2221      	movs	r2, #33	; 0x21
 8004f8e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8004f92:	68fb      	ldr	r3, [r7, #12]
 8004f94:	2210      	movs	r2, #16
 8004f96:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8004f9a:	68fb      	ldr	r3, [r7, #12]
 8004f9c:	2200      	movs	r2, #0
 8004f9e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004fa0:	68fb      	ldr	r3, [r7, #12]
 8004fa2:	687a      	ldr	r2, [r7, #4]
 8004fa4:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8004fa6:	68fb      	ldr	r3, [r7, #12]
 8004fa8:	893a      	ldrh	r2, [r7, #8]
 8004faa:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004fac:	68fb      	ldr	r3, [r7, #12]
 8004fae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004fb0:	b29a      	uxth	r2, r3
 8004fb2:	68fb      	ldr	r3, [r7, #12]
 8004fb4:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004fb6:	68fb      	ldr	r3, [r7, #12]
 8004fb8:	4a50      	ldr	r2, [pc, #320]	; (80050fc <HAL_I2C_Master_Transmit+0x1f8>)
 8004fba:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8004fbc:	8979      	ldrh	r1, [r7, #10]
 8004fbe:	697b      	ldr	r3, [r7, #20]
 8004fc0:	6a3a      	ldr	r2, [r7, #32]
 8004fc2:	68f8      	ldr	r0, [r7, #12]
 8004fc4:	f000 f9ca 	bl	800535c <I2C_MasterRequestWrite>
 8004fc8:	4603      	mov	r3, r0
 8004fca:	2b00      	cmp	r3, #0
 8004fcc:	d001      	beq.n	8004fd2 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8004fce:	2301      	movs	r3, #1
 8004fd0:	e08d      	b.n	80050ee <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004fd2:	2300      	movs	r3, #0
 8004fd4:	613b      	str	r3, [r7, #16]
 8004fd6:	68fb      	ldr	r3, [r7, #12]
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	695b      	ldr	r3, [r3, #20]
 8004fdc:	613b      	str	r3, [r7, #16]
 8004fde:	68fb      	ldr	r3, [r7, #12]
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	699b      	ldr	r3, [r3, #24]
 8004fe4:	613b      	str	r3, [r7, #16]
 8004fe6:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8004fe8:	e066      	b.n	80050b8 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004fea:	697a      	ldr	r2, [r7, #20]
 8004fec:	6a39      	ldr	r1, [r7, #32]
 8004fee:	68f8      	ldr	r0, [r7, #12]
 8004ff0:	f000 fb0c 	bl	800560c <I2C_WaitOnTXEFlagUntilTimeout>
 8004ff4:	4603      	mov	r3, r0
 8004ff6:	2b00      	cmp	r3, #0
 8004ff8:	d00d      	beq.n	8005016 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004ffa:	68fb      	ldr	r3, [r7, #12]
 8004ffc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ffe:	2b04      	cmp	r3, #4
 8005000:	d107      	bne.n	8005012 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005002:	68fb      	ldr	r3, [r7, #12]
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	681a      	ldr	r2, [r3, #0]
 8005008:	68fb      	ldr	r3, [r7, #12]
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005010:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8005012:	2301      	movs	r3, #1
 8005014:	e06b      	b.n	80050ee <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005016:	68fb      	ldr	r3, [r7, #12]
 8005018:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800501a:	781a      	ldrb	r2, [r3, #0]
 800501c:	68fb      	ldr	r3, [r7, #12]
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005022:	68fb      	ldr	r3, [r7, #12]
 8005024:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005026:	1c5a      	adds	r2, r3, #1
 8005028:	68fb      	ldr	r3, [r7, #12]
 800502a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 800502c:	68fb      	ldr	r3, [r7, #12]
 800502e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005030:	b29b      	uxth	r3, r3
 8005032:	3b01      	subs	r3, #1
 8005034:	b29a      	uxth	r2, r3
 8005036:	68fb      	ldr	r3, [r7, #12]
 8005038:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800503a:	68fb      	ldr	r3, [r7, #12]
 800503c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800503e:	3b01      	subs	r3, #1
 8005040:	b29a      	uxth	r2, r3
 8005042:	68fb      	ldr	r3, [r7, #12]
 8005044:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8005046:	68fb      	ldr	r3, [r7, #12]
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	695b      	ldr	r3, [r3, #20]
 800504c:	f003 0304 	and.w	r3, r3, #4
 8005050:	2b04      	cmp	r3, #4
 8005052:	d11b      	bne.n	800508c <HAL_I2C_Master_Transmit+0x188>
 8005054:	68fb      	ldr	r3, [r7, #12]
 8005056:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005058:	2b00      	cmp	r3, #0
 800505a:	d017      	beq.n	800508c <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800505c:	68fb      	ldr	r3, [r7, #12]
 800505e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005060:	781a      	ldrb	r2, [r3, #0]
 8005062:	68fb      	ldr	r3, [r7, #12]
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8005068:	68fb      	ldr	r3, [r7, #12]
 800506a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800506c:	1c5a      	adds	r2, r3, #1
 800506e:	68fb      	ldr	r3, [r7, #12]
 8005070:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8005072:	68fb      	ldr	r3, [r7, #12]
 8005074:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005076:	b29b      	uxth	r3, r3
 8005078:	3b01      	subs	r3, #1
 800507a:	b29a      	uxth	r2, r3
 800507c:	68fb      	ldr	r3, [r7, #12]
 800507e:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8005080:	68fb      	ldr	r3, [r7, #12]
 8005082:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005084:	3b01      	subs	r3, #1
 8005086:	b29a      	uxth	r2, r3
 8005088:	68fb      	ldr	r3, [r7, #12]
 800508a:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800508c:	697a      	ldr	r2, [r7, #20]
 800508e:	6a39      	ldr	r1, [r7, #32]
 8005090:	68f8      	ldr	r0, [r7, #12]
 8005092:	f000 fafc 	bl	800568e <I2C_WaitOnBTFFlagUntilTimeout>
 8005096:	4603      	mov	r3, r0
 8005098:	2b00      	cmp	r3, #0
 800509a:	d00d      	beq.n	80050b8 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800509c:	68fb      	ldr	r3, [r7, #12]
 800509e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050a0:	2b04      	cmp	r3, #4
 80050a2:	d107      	bne.n	80050b4 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80050a4:	68fb      	ldr	r3, [r7, #12]
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	681a      	ldr	r2, [r3, #0]
 80050aa:	68fb      	ldr	r3, [r7, #12]
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80050b2:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80050b4:	2301      	movs	r3, #1
 80050b6:	e01a      	b.n	80050ee <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 80050b8:	68fb      	ldr	r3, [r7, #12]
 80050ba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80050bc:	2b00      	cmp	r3, #0
 80050be:	d194      	bne.n	8004fea <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80050c0:	68fb      	ldr	r3, [r7, #12]
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	681a      	ldr	r2, [r3, #0]
 80050c6:	68fb      	ldr	r3, [r7, #12]
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80050ce:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80050d0:	68fb      	ldr	r3, [r7, #12]
 80050d2:	2220      	movs	r2, #32
 80050d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80050d8:	68fb      	ldr	r3, [r7, #12]
 80050da:	2200      	movs	r2, #0
 80050dc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80050e0:	68fb      	ldr	r3, [r7, #12]
 80050e2:	2200      	movs	r2, #0
 80050e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80050e8:	2300      	movs	r3, #0
 80050ea:	e000      	b.n	80050ee <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 80050ec:	2302      	movs	r3, #2
  }
}
 80050ee:	4618      	mov	r0, r3
 80050f0:	3718      	adds	r7, #24
 80050f2:	46bd      	mov	sp, r7
 80050f4:	bd80      	pop	{r7, pc}
 80050f6:	bf00      	nop
 80050f8:	00100002 	.word	0x00100002
 80050fc:	ffff0000 	.word	0xffff0000

08005100 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8005100:	b580      	push	{r7, lr}
 8005102:	b08a      	sub	sp, #40	; 0x28
 8005104:	af02      	add	r7, sp, #8
 8005106:	60f8      	str	r0, [r7, #12]
 8005108:	607a      	str	r2, [r7, #4]
 800510a:	603b      	str	r3, [r7, #0]
 800510c:	460b      	mov	r3, r1
 800510e:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8005110:	f7ff f88c 	bl	800422c <HAL_GetTick>
 8005114:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 1U;
 8005116:	2301      	movs	r3, #1
 8005118:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800511a:	68fb      	ldr	r3, [r7, #12]
 800511c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005120:	b2db      	uxtb	r3, r3
 8005122:	2b20      	cmp	r3, #32
 8005124:	f040 8111 	bne.w	800534a <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005128:	69fb      	ldr	r3, [r7, #28]
 800512a:	9300      	str	r3, [sp, #0]
 800512c:	2319      	movs	r3, #25
 800512e:	2201      	movs	r2, #1
 8005130:	4988      	ldr	r1, [pc, #544]	; (8005354 <HAL_I2C_IsDeviceReady+0x254>)
 8005132:	68f8      	ldr	r0, [r7, #12]
 8005134:	f000 f994 	bl	8005460 <I2C_WaitOnFlagUntilTimeout>
 8005138:	4603      	mov	r3, r0
 800513a:	2b00      	cmp	r3, #0
 800513c:	d001      	beq.n	8005142 <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 800513e:	2302      	movs	r3, #2
 8005140:	e104      	b.n	800534c <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005142:	68fb      	ldr	r3, [r7, #12]
 8005144:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005148:	2b01      	cmp	r3, #1
 800514a:	d101      	bne.n	8005150 <HAL_I2C_IsDeviceReady+0x50>
 800514c:	2302      	movs	r3, #2
 800514e:	e0fd      	b.n	800534c <HAL_I2C_IsDeviceReady+0x24c>
 8005150:	68fb      	ldr	r3, [r7, #12]
 8005152:	2201      	movs	r2, #1
 8005154:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8005158:	68fb      	ldr	r3, [r7, #12]
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	f003 0301 	and.w	r3, r3, #1
 8005162:	2b01      	cmp	r3, #1
 8005164:	d007      	beq.n	8005176 <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8005166:	68fb      	ldr	r3, [r7, #12]
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	681a      	ldr	r2, [r3, #0]
 800516c:	68fb      	ldr	r3, [r7, #12]
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	f042 0201 	orr.w	r2, r2, #1
 8005174:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005176:	68fb      	ldr	r3, [r7, #12]
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	681a      	ldr	r2, [r3, #0]
 800517c:	68fb      	ldr	r3, [r7, #12]
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005184:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8005186:	68fb      	ldr	r3, [r7, #12]
 8005188:	2224      	movs	r2, #36	; 0x24
 800518a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800518e:	68fb      	ldr	r3, [r7, #12]
 8005190:	2200      	movs	r2, #0
 8005192:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005194:	68fb      	ldr	r3, [r7, #12]
 8005196:	4a70      	ldr	r2, [pc, #448]	; (8005358 <HAL_I2C_IsDeviceReady+0x258>)
 8005198:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800519a:	68fb      	ldr	r3, [r7, #12]
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	681a      	ldr	r2, [r3, #0]
 80051a0:	68fb      	ldr	r3, [r7, #12]
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80051a8:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 80051aa:	69fb      	ldr	r3, [r7, #28]
 80051ac:	9300      	str	r3, [sp, #0]
 80051ae:	683b      	ldr	r3, [r7, #0]
 80051b0:	2200      	movs	r2, #0
 80051b2:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80051b6:	68f8      	ldr	r0, [r7, #12]
 80051b8:	f000 f952 	bl	8005460 <I2C_WaitOnFlagUntilTimeout>
 80051bc:	4603      	mov	r3, r0
 80051be:	2b00      	cmp	r3, #0
 80051c0:	d00d      	beq.n	80051de <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80051c2:	68fb      	ldr	r3, [r7, #12]
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80051cc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80051d0:	d103      	bne.n	80051da <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80051d2:	68fb      	ldr	r3, [r7, #12]
 80051d4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80051d8:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 80051da:	2303      	movs	r3, #3
 80051dc:	e0b6      	b.n	800534c <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80051de:	897b      	ldrh	r3, [r7, #10]
 80051e0:	b2db      	uxtb	r3, r3
 80051e2:	461a      	mov	r2, r3
 80051e4:	68fb      	ldr	r3, [r7, #12]
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80051ec:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 80051ee:	f7ff f81d 	bl	800422c <HAL_GetTick>
 80051f2:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 80051f4:	68fb      	ldr	r3, [r7, #12]
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	695b      	ldr	r3, [r3, #20]
 80051fa:	f003 0302 	and.w	r3, r3, #2
 80051fe:	2b02      	cmp	r3, #2
 8005200:	bf0c      	ite	eq
 8005202:	2301      	moveq	r3, #1
 8005204:	2300      	movne	r3, #0
 8005206:	b2db      	uxtb	r3, r3
 8005208:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 800520a:	68fb      	ldr	r3, [r7, #12]
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	695b      	ldr	r3, [r3, #20]
 8005210:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005214:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005218:	bf0c      	ite	eq
 800521a:	2301      	moveq	r3, #1
 800521c:	2300      	movne	r3, #0
 800521e:	b2db      	uxtb	r3, r3
 8005220:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8005222:	e025      	b.n	8005270 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8005224:	f7ff f802 	bl	800422c <HAL_GetTick>
 8005228:	4602      	mov	r2, r0
 800522a:	69fb      	ldr	r3, [r7, #28]
 800522c:	1ad3      	subs	r3, r2, r3
 800522e:	683a      	ldr	r2, [r7, #0]
 8005230:	429a      	cmp	r2, r3
 8005232:	d302      	bcc.n	800523a <HAL_I2C_IsDeviceReady+0x13a>
 8005234:	683b      	ldr	r3, [r7, #0]
 8005236:	2b00      	cmp	r3, #0
 8005238:	d103      	bne.n	8005242 <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 800523a:	68fb      	ldr	r3, [r7, #12]
 800523c:	22a0      	movs	r2, #160	; 0xa0
 800523e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8005242:	68fb      	ldr	r3, [r7, #12]
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	695b      	ldr	r3, [r3, #20]
 8005248:	f003 0302 	and.w	r3, r3, #2
 800524c:	2b02      	cmp	r3, #2
 800524e:	bf0c      	ite	eq
 8005250:	2301      	moveq	r3, #1
 8005252:	2300      	movne	r3, #0
 8005254:	b2db      	uxtb	r3, r3
 8005256:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8005258:	68fb      	ldr	r3, [r7, #12]
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	695b      	ldr	r3, [r3, #20]
 800525e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005262:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005266:	bf0c      	ite	eq
 8005268:	2301      	moveq	r3, #1
 800526a:	2300      	movne	r3, #0
 800526c:	b2db      	uxtb	r3, r3
 800526e:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8005270:	68fb      	ldr	r3, [r7, #12]
 8005272:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005276:	b2db      	uxtb	r3, r3
 8005278:	2ba0      	cmp	r3, #160	; 0xa0
 800527a:	d005      	beq.n	8005288 <HAL_I2C_IsDeviceReady+0x188>
 800527c:	7dfb      	ldrb	r3, [r7, #23]
 800527e:	2b00      	cmp	r3, #0
 8005280:	d102      	bne.n	8005288 <HAL_I2C_IsDeviceReady+0x188>
 8005282:	7dbb      	ldrb	r3, [r7, #22]
 8005284:	2b00      	cmp	r3, #0
 8005286:	d0cd      	beq.n	8005224 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8005288:	68fb      	ldr	r3, [r7, #12]
 800528a:	2220      	movs	r2, #32
 800528c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8005290:	68fb      	ldr	r3, [r7, #12]
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	695b      	ldr	r3, [r3, #20]
 8005296:	f003 0302 	and.w	r3, r3, #2
 800529a:	2b02      	cmp	r3, #2
 800529c:	d129      	bne.n	80052f2 <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800529e:	68fb      	ldr	r3, [r7, #12]
 80052a0:	681b      	ldr	r3, [r3, #0]
 80052a2:	681a      	ldr	r2, [r3, #0]
 80052a4:	68fb      	ldr	r3, [r7, #12]
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80052ac:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80052ae:	2300      	movs	r3, #0
 80052b0:	613b      	str	r3, [r7, #16]
 80052b2:	68fb      	ldr	r3, [r7, #12]
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	695b      	ldr	r3, [r3, #20]
 80052b8:	613b      	str	r3, [r7, #16]
 80052ba:	68fb      	ldr	r3, [r7, #12]
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	699b      	ldr	r3, [r3, #24]
 80052c0:	613b      	str	r3, [r7, #16]
 80052c2:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80052c4:	69fb      	ldr	r3, [r7, #28]
 80052c6:	9300      	str	r3, [sp, #0]
 80052c8:	2319      	movs	r3, #25
 80052ca:	2201      	movs	r2, #1
 80052cc:	4921      	ldr	r1, [pc, #132]	; (8005354 <HAL_I2C_IsDeviceReady+0x254>)
 80052ce:	68f8      	ldr	r0, [r7, #12]
 80052d0:	f000 f8c6 	bl	8005460 <I2C_WaitOnFlagUntilTimeout>
 80052d4:	4603      	mov	r3, r0
 80052d6:	2b00      	cmp	r3, #0
 80052d8:	d001      	beq.n	80052de <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 80052da:	2301      	movs	r3, #1
 80052dc:	e036      	b.n	800534c <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 80052de:	68fb      	ldr	r3, [r7, #12]
 80052e0:	2220      	movs	r2, #32
 80052e2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80052e6:	68fb      	ldr	r3, [r7, #12]
 80052e8:	2200      	movs	r2, #0
 80052ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 80052ee:	2300      	movs	r3, #0
 80052f0:	e02c      	b.n	800534c <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80052f2:	68fb      	ldr	r3, [r7, #12]
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	681a      	ldr	r2, [r3, #0]
 80052f8:	68fb      	ldr	r3, [r7, #12]
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005300:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005302:	68fb      	ldr	r3, [r7, #12]
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800530a:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800530c:	69fb      	ldr	r3, [r7, #28]
 800530e:	9300      	str	r3, [sp, #0]
 8005310:	2319      	movs	r3, #25
 8005312:	2201      	movs	r2, #1
 8005314:	490f      	ldr	r1, [pc, #60]	; (8005354 <HAL_I2C_IsDeviceReady+0x254>)
 8005316:	68f8      	ldr	r0, [r7, #12]
 8005318:	f000 f8a2 	bl	8005460 <I2C_WaitOnFlagUntilTimeout>
 800531c:	4603      	mov	r3, r0
 800531e:	2b00      	cmp	r3, #0
 8005320:	d001      	beq.n	8005326 <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 8005322:	2301      	movs	r3, #1
 8005324:	e012      	b.n	800534c <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 8005326:	69bb      	ldr	r3, [r7, #24]
 8005328:	3301      	adds	r3, #1
 800532a:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 800532c:	69ba      	ldr	r2, [r7, #24]
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	429a      	cmp	r2, r3
 8005332:	f4ff af32 	bcc.w	800519a <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 8005336:	68fb      	ldr	r3, [r7, #12]
 8005338:	2220      	movs	r2, #32
 800533a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800533e:	68fb      	ldr	r3, [r7, #12]
 8005340:	2200      	movs	r2, #0
 8005342:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8005346:	2301      	movs	r3, #1
 8005348:	e000      	b.n	800534c <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 800534a:	2302      	movs	r3, #2
  }
}
 800534c:	4618      	mov	r0, r3
 800534e:	3720      	adds	r7, #32
 8005350:	46bd      	mov	sp, r7
 8005352:	bd80      	pop	{r7, pc}
 8005354:	00100002 	.word	0x00100002
 8005358:	ffff0000 	.word	0xffff0000

0800535c <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 800535c:	b580      	push	{r7, lr}
 800535e:	b088      	sub	sp, #32
 8005360:	af02      	add	r7, sp, #8
 8005362:	60f8      	str	r0, [r7, #12]
 8005364:	607a      	str	r2, [r7, #4]
 8005366:	603b      	str	r3, [r7, #0]
 8005368:	460b      	mov	r3, r1
 800536a:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800536c:	68fb      	ldr	r3, [r7, #12]
 800536e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005370:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8005372:	697b      	ldr	r3, [r7, #20]
 8005374:	2b08      	cmp	r3, #8
 8005376:	d006      	beq.n	8005386 <I2C_MasterRequestWrite+0x2a>
 8005378:	697b      	ldr	r3, [r7, #20]
 800537a:	2b01      	cmp	r3, #1
 800537c:	d003      	beq.n	8005386 <I2C_MasterRequestWrite+0x2a>
 800537e:	697b      	ldr	r3, [r7, #20]
 8005380:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8005384:	d108      	bne.n	8005398 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005386:	68fb      	ldr	r3, [r7, #12]
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	681a      	ldr	r2, [r3, #0]
 800538c:	68fb      	ldr	r3, [r7, #12]
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005394:	601a      	str	r2, [r3, #0]
 8005396:	e00b      	b.n	80053b0 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8005398:	68fb      	ldr	r3, [r7, #12]
 800539a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800539c:	2b12      	cmp	r3, #18
 800539e:	d107      	bne.n	80053b0 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80053a0:	68fb      	ldr	r3, [r7, #12]
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	681a      	ldr	r2, [r3, #0]
 80053a6:	68fb      	ldr	r3, [r7, #12]
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80053ae:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80053b0:	683b      	ldr	r3, [r7, #0]
 80053b2:	9300      	str	r3, [sp, #0]
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	2200      	movs	r2, #0
 80053b8:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80053bc:	68f8      	ldr	r0, [r7, #12]
 80053be:	f000 f84f 	bl	8005460 <I2C_WaitOnFlagUntilTimeout>
 80053c2:	4603      	mov	r3, r0
 80053c4:	2b00      	cmp	r3, #0
 80053c6:	d00d      	beq.n	80053e4 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80053c8:	68fb      	ldr	r3, [r7, #12]
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80053d2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80053d6:	d103      	bne.n	80053e0 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80053d8:	68fb      	ldr	r3, [r7, #12]
 80053da:	f44f 7200 	mov.w	r2, #512	; 0x200
 80053de:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80053e0:	2303      	movs	r3, #3
 80053e2:	e035      	b.n	8005450 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80053e4:	68fb      	ldr	r3, [r7, #12]
 80053e6:	691b      	ldr	r3, [r3, #16]
 80053e8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80053ec:	d108      	bne.n	8005400 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80053ee:	897b      	ldrh	r3, [r7, #10]
 80053f0:	b2db      	uxtb	r3, r3
 80053f2:	461a      	mov	r2, r3
 80053f4:	68fb      	ldr	r3, [r7, #12]
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80053fc:	611a      	str	r2, [r3, #16]
 80053fe:	e01b      	b.n	8005438 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8005400:	897b      	ldrh	r3, [r7, #10]
 8005402:	11db      	asrs	r3, r3, #7
 8005404:	b2db      	uxtb	r3, r3
 8005406:	f003 0306 	and.w	r3, r3, #6
 800540a:	b2db      	uxtb	r3, r3
 800540c:	f063 030f 	orn	r3, r3, #15
 8005410:	b2da      	uxtb	r2, r3
 8005412:	68fb      	ldr	r3, [r7, #12]
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8005418:	683b      	ldr	r3, [r7, #0]
 800541a:	687a      	ldr	r2, [r7, #4]
 800541c:	490e      	ldr	r1, [pc, #56]	; (8005458 <I2C_MasterRequestWrite+0xfc>)
 800541e:	68f8      	ldr	r0, [r7, #12]
 8005420:	f000 f875 	bl	800550e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005424:	4603      	mov	r3, r0
 8005426:	2b00      	cmp	r3, #0
 8005428:	d001      	beq.n	800542e <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 800542a:	2301      	movs	r3, #1
 800542c:	e010      	b.n	8005450 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800542e:	897b      	ldrh	r3, [r7, #10]
 8005430:	b2da      	uxtb	r2, r3
 8005432:	68fb      	ldr	r3, [r7, #12]
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005438:	683b      	ldr	r3, [r7, #0]
 800543a:	687a      	ldr	r2, [r7, #4]
 800543c:	4907      	ldr	r1, [pc, #28]	; (800545c <I2C_MasterRequestWrite+0x100>)
 800543e:	68f8      	ldr	r0, [r7, #12]
 8005440:	f000 f865 	bl	800550e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005444:	4603      	mov	r3, r0
 8005446:	2b00      	cmp	r3, #0
 8005448:	d001      	beq.n	800544e <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 800544a:	2301      	movs	r3, #1
 800544c:	e000      	b.n	8005450 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 800544e:	2300      	movs	r3, #0
}
 8005450:	4618      	mov	r0, r3
 8005452:	3718      	adds	r7, #24
 8005454:	46bd      	mov	sp, r7
 8005456:	bd80      	pop	{r7, pc}
 8005458:	00010008 	.word	0x00010008
 800545c:	00010002 	.word	0x00010002

08005460 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8005460:	b580      	push	{r7, lr}
 8005462:	b084      	sub	sp, #16
 8005464:	af00      	add	r7, sp, #0
 8005466:	60f8      	str	r0, [r7, #12]
 8005468:	60b9      	str	r1, [r7, #8]
 800546a:	603b      	str	r3, [r7, #0]
 800546c:	4613      	mov	r3, r2
 800546e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005470:	e025      	b.n	80054be <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005472:	683b      	ldr	r3, [r7, #0]
 8005474:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005478:	d021      	beq.n	80054be <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800547a:	f7fe fed7 	bl	800422c <HAL_GetTick>
 800547e:	4602      	mov	r2, r0
 8005480:	69bb      	ldr	r3, [r7, #24]
 8005482:	1ad3      	subs	r3, r2, r3
 8005484:	683a      	ldr	r2, [r7, #0]
 8005486:	429a      	cmp	r2, r3
 8005488:	d302      	bcc.n	8005490 <I2C_WaitOnFlagUntilTimeout+0x30>
 800548a:	683b      	ldr	r3, [r7, #0]
 800548c:	2b00      	cmp	r3, #0
 800548e:	d116      	bne.n	80054be <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8005490:	68fb      	ldr	r3, [r7, #12]
 8005492:	2200      	movs	r2, #0
 8005494:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8005496:	68fb      	ldr	r3, [r7, #12]
 8005498:	2220      	movs	r2, #32
 800549a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800549e:	68fb      	ldr	r3, [r7, #12]
 80054a0:	2200      	movs	r2, #0
 80054a2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80054a6:	68fb      	ldr	r3, [r7, #12]
 80054a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054aa:	f043 0220 	orr.w	r2, r3, #32
 80054ae:	68fb      	ldr	r3, [r7, #12]
 80054b0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80054b2:	68fb      	ldr	r3, [r7, #12]
 80054b4:	2200      	movs	r2, #0
 80054b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80054ba:	2301      	movs	r3, #1
 80054bc:	e023      	b.n	8005506 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80054be:	68bb      	ldr	r3, [r7, #8]
 80054c0:	0c1b      	lsrs	r3, r3, #16
 80054c2:	b2db      	uxtb	r3, r3
 80054c4:	2b01      	cmp	r3, #1
 80054c6:	d10d      	bne.n	80054e4 <I2C_WaitOnFlagUntilTimeout+0x84>
 80054c8:	68fb      	ldr	r3, [r7, #12]
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	695b      	ldr	r3, [r3, #20]
 80054ce:	43da      	mvns	r2, r3
 80054d0:	68bb      	ldr	r3, [r7, #8]
 80054d2:	4013      	ands	r3, r2
 80054d4:	b29b      	uxth	r3, r3
 80054d6:	2b00      	cmp	r3, #0
 80054d8:	bf0c      	ite	eq
 80054da:	2301      	moveq	r3, #1
 80054dc:	2300      	movne	r3, #0
 80054de:	b2db      	uxtb	r3, r3
 80054e0:	461a      	mov	r2, r3
 80054e2:	e00c      	b.n	80054fe <I2C_WaitOnFlagUntilTimeout+0x9e>
 80054e4:	68fb      	ldr	r3, [r7, #12]
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	699b      	ldr	r3, [r3, #24]
 80054ea:	43da      	mvns	r2, r3
 80054ec:	68bb      	ldr	r3, [r7, #8]
 80054ee:	4013      	ands	r3, r2
 80054f0:	b29b      	uxth	r3, r3
 80054f2:	2b00      	cmp	r3, #0
 80054f4:	bf0c      	ite	eq
 80054f6:	2301      	moveq	r3, #1
 80054f8:	2300      	movne	r3, #0
 80054fa:	b2db      	uxtb	r3, r3
 80054fc:	461a      	mov	r2, r3
 80054fe:	79fb      	ldrb	r3, [r7, #7]
 8005500:	429a      	cmp	r2, r3
 8005502:	d0b6      	beq.n	8005472 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005504:	2300      	movs	r3, #0
}
 8005506:	4618      	mov	r0, r3
 8005508:	3710      	adds	r7, #16
 800550a:	46bd      	mov	sp, r7
 800550c:	bd80      	pop	{r7, pc}

0800550e <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800550e:	b580      	push	{r7, lr}
 8005510:	b084      	sub	sp, #16
 8005512:	af00      	add	r7, sp, #0
 8005514:	60f8      	str	r0, [r7, #12]
 8005516:	60b9      	str	r1, [r7, #8]
 8005518:	607a      	str	r2, [r7, #4]
 800551a:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800551c:	e051      	b.n	80055c2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800551e:	68fb      	ldr	r3, [r7, #12]
 8005520:	681b      	ldr	r3, [r3, #0]
 8005522:	695b      	ldr	r3, [r3, #20]
 8005524:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005528:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800552c:	d123      	bne.n	8005576 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800552e:	68fb      	ldr	r3, [r7, #12]
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	681a      	ldr	r2, [r3, #0]
 8005534:	68fb      	ldr	r3, [r7, #12]
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800553c:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800553e:	68fb      	ldr	r3, [r7, #12]
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005546:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8005548:	68fb      	ldr	r3, [r7, #12]
 800554a:	2200      	movs	r2, #0
 800554c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800554e:	68fb      	ldr	r3, [r7, #12]
 8005550:	2220      	movs	r2, #32
 8005552:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005556:	68fb      	ldr	r3, [r7, #12]
 8005558:	2200      	movs	r2, #0
 800555a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800555e:	68fb      	ldr	r3, [r7, #12]
 8005560:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005562:	f043 0204 	orr.w	r2, r3, #4
 8005566:	68fb      	ldr	r3, [r7, #12]
 8005568:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800556a:	68fb      	ldr	r3, [r7, #12]
 800556c:	2200      	movs	r2, #0
 800556e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8005572:	2301      	movs	r3, #1
 8005574:	e046      	b.n	8005604 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	f1b3 3fff 	cmp.w	r3, #4294967295
 800557c:	d021      	beq.n	80055c2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800557e:	f7fe fe55 	bl	800422c <HAL_GetTick>
 8005582:	4602      	mov	r2, r0
 8005584:	683b      	ldr	r3, [r7, #0]
 8005586:	1ad3      	subs	r3, r2, r3
 8005588:	687a      	ldr	r2, [r7, #4]
 800558a:	429a      	cmp	r2, r3
 800558c:	d302      	bcc.n	8005594 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	2b00      	cmp	r3, #0
 8005592:	d116      	bne.n	80055c2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005594:	68fb      	ldr	r3, [r7, #12]
 8005596:	2200      	movs	r2, #0
 8005598:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800559a:	68fb      	ldr	r3, [r7, #12]
 800559c:	2220      	movs	r2, #32
 800559e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80055a2:	68fb      	ldr	r3, [r7, #12]
 80055a4:	2200      	movs	r2, #0
 80055a6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80055aa:	68fb      	ldr	r3, [r7, #12]
 80055ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055ae:	f043 0220 	orr.w	r2, r3, #32
 80055b2:	68fb      	ldr	r3, [r7, #12]
 80055b4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80055b6:	68fb      	ldr	r3, [r7, #12]
 80055b8:	2200      	movs	r2, #0
 80055ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80055be:	2301      	movs	r3, #1
 80055c0:	e020      	b.n	8005604 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80055c2:	68bb      	ldr	r3, [r7, #8]
 80055c4:	0c1b      	lsrs	r3, r3, #16
 80055c6:	b2db      	uxtb	r3, r3
 80055c8:	2b01      	cmp	r3, #1
 80055ca:	d10c      	bne.n	80055e6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 80055cc:	68fb      	ldr	r3, [r7, #12]
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	695b      	ldr	r3, [r3, #20]
 80055d2:	43da      	mvns	r2, r3
 80055d4:	68bb      	ldr	r3, [r7, #8]
 80055d6:	4013      	ands	r3, r2
 80055d8:	b29b      	uxth	r3, r3
 80055da:	2b00      	cmp	r3, #0
 80055dc:	bf14      	ite	ne
 80055de:	2301      	movne	r3, #1
 80055e0:	2300      	moveq	r3, #0
 80055e2:	b2db      	uxtb	r3, r3
 80055e4:	e00b      	b.n	80055fe <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 80055e6:	68fb      	ldr	r3, [r7, #12]
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	699b      	ldr	r3, [r3, #24]
 80055ec:	43da      	mvns	r2, r3
 80055ee:	68bb      	ldr	r3, [r7, #8]
 80055f0:	4013      	ands	r3, r2
 80055f2:	b29b      	uxth	r3, r3
 80055f4:	2b00      	cmp	r3, #0
 80055f6:	bf14      	ite	ne
 80055f8:	2301      	movne	r3, #1
 80055fa:	2300      	moveq	r3, #0
 80055fc:	b2db      	uxtb	r3, r3
 80055fe:	2b00      	cmp	r3, #0
 8005600:	d18d      	bne.n	800551e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8005602:	2300      	movs	r3, #0
}
 8005604:	4618      	mov	r0, r3
 8005606:	3710      	adds	r7, #16
 8005608:	46bd      	mov	sp, r7
 800560a:	bd80      	pop	{r7, pc}

0800560c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800560c:	b580      	push	{r7, lr}
 800560e:	b084      	sub	sp, #16
 8005610:	af00      	add	r7, sp, #0
 8005612:	60f8      	str	r0, [r7, #12]
 8005614:	60b9      	str	r1, [r7, #8]
 8005616:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005618:	e02d      	b.n	8005676 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800561a:	68f8      	ldr	r0, [r7, #12]
 800561c:	f000 f878 	bl	8005710 <I2C_IsAcknowledgeFailed>
 8005620:	4603      	mov	r3, r0
 8005622:	2b00      	cmp	r3, #0
 8005624:	d001      	beq.n	800562a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8005626:	2301      	movs	r3, #1
 8005628:	e02d      	b.n	8005686 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800562a:	68bb      	ldr	r3, [r7, #8]
 800562c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005630:	d021      	beq.n	8005676 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005632:	f7fe fdfb 	bl	800422c <HAL_GetTick>
 8005636:	4602      	mov	r2, r0
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	1ad3      	subs	r3, r2, r3
 800563c:	68ba      	ldr	r2, [r7, #8]
 800563e:	429a      	cmp	r2, r3
 8005640:	d302      	bcc.n	8005648 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8005642:	68bb      	ldr	r3, [r7, #8]
 8005644:	2b00      	cmp	r3, #0
 8005646:	d116      	bne.n	8005676 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005648:	68fb      	ldr	r3, [r7, #12]
 800564a:	2200      	movs	r2, #0
 800564c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800564e:	68fb      	ldr	r3, [r7, #12]
 8005650:	2220      	movs	r2, #32
 8005652:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005656:	68fb      	ldr	r3, [r7, #12]
 8005658:	2200      	movs	r2, #0
 800565a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800565e:	68fb      	ldr	r3, [r7, #12]
 8005660:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005662:	f043 0220 	orr.w	r2, r3, #32
 8005666:	68fb      	ldr	r3, [r7, #12]
 8005668:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800566a:	68fb      	ldr	r3, [r7, #12]
 800566c:	2200      	movs	r2, #0
 800566e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005672:	2301      	movs	r3, #1
 8005674:	e007      	b.n	8005686 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005676:	68fb      	ldr	r3, [r7, #12]
 8005678:	681b      	ldr	r3, [r3, #0]
 800567a:	695b      	ldr	r3, [r3, #20]
 800567c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005680:	2b80      	cmp	r3, #128	; 0x80
 8005682:	d1ca      	bne.n	800561a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005684:	2300      	movs	r3, #0
}
 8005686:	4618      	mov	r0, r3
 8005688:	3710      	adds	r7, #16
 800568a:	46bd      	mov	sp, r7
 800568c:	bd80      	pop	{r7, pc}

0800568e <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800568e:	b580      	push	{r7, lr}
 8005690:	b084      	sub	sp, #16
 8005692:	af00      	add	r7, sp, #0
 8005694:	60f8      	str	r0, [r7, #12]
 8005696:	60b9      	str	r1, [r7, #8]
 8005698:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800569a:	e02d      	b.n	80056f8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800569c:	68f8      	ldr	r0, [r7, #12]
 800569e:	f000 f837 	bl	8005710 <I2C_IsAcknowledgeFailed>
 80056a2:	4603      	mov	r3, r0
 80056a4:	2b00      	cmp	r3, #0
 80056a6:	d001      	beq.n	80056ac <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80056a8:	2301      	movs	r3, #1
 80056aa:	e02d      	b.n	8005708 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80056ac:	68bb      	ldr	r3, [r7, #8]
 80056ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 80056b2:	d021      	beq.n	80056f8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80056b4:	f7fe fdba 	bl	800422c <HAL_GetTick>
 80056b8:	4602      	mov	r2, r0
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	1ad3      	subs	r3, r2, r3
 80056be:	68ba      	ldr	r2, [r7, #8]
 80056c0:	429a      	cmp	r2, r3
 80056c2:	d302      	bcc.n	80056ca <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80056c4:	68bb      	ldr	r3, [r7, #8]
 80056c6:	2b00      	cmp	r3, #0
 80056c8:	d116      	bne.n	80056f8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80056ca:	68fb      	ldr	r3, [r7, #12]
 80056cc:	2200      	movs	r2, #0
 80056ce:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80056d0:	68fb      	ldr	r3, [r7, #12]
 80056d2:	2220      	movs	r2, #32
 80056d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80056d8:	68fb      	ldr	r3, [r7, #12]
 80056da:	2200      	movs	r2, #0
 80056dc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80056e0:	68fb      	ldr	r3, [r7, #12]
 80056e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056e4:	f043 0220 	orr.w	r2, r3, #32
 80056e8:	68fb      	ldr	r3, [r7, #12]
 80056ea:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80056ec:	68fb      	ldr	r3, [r7, #12]
 80056ee:	2200      	movs	r2, #0
 80056f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80056f4:	2301      	movs	r3, #1
 80056f6:	e007      	b.n	8005708 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80056f8:	68fb      	ldr	r3, [r7, #12]
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	695b      	ldr	r3, [r3, #20]
 80056fe:	f003 0304 	and.w	r3, r3, #4
 8005702:	2b04      	cmp	r3, #4
 8005704:	d1ca      	bne.n	800569c <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005706:	2300      	movs	r3, #0
}
 8005708:	4618      	mov	r0, r3
 800570a:	3710      	adds	r7, #16
 800570c:	46bd      	mov	sp, r7
 800570e:	bd80      	pop	{r7, pc}

08005710 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8005710:	b480      	push	{r7}
 8005712:	b083      	sub	sp, #12
 8005714:	af00      	add	r7, sp, #0
 8005716:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	695b      	ldr	r3, [r3, #20]
 800571e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005722:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005726:	d11b      	bne.n	8005760 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005730:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	2200      	movs	r2, #0
 8005736:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	2220      	movs	r2, #32
 800573c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	2200      	movs	r2, #0
 8005744:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800574c:	f043 0204 	orr.w	r2, r3, #4
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	2200      	movs	r2, #0
 8005758:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800575c:	2301      	movs	r3, #1
 800575e:	e000      	b.n	8005762 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8005760:	2300      	movs	r3, #0
}
 8005762:	4618      	mov	r0, r3
 8005764:	370c      	adds	r7, #12
 8005766:	46bd      	mov	sp, r7
 8005768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800576c:	4770      	bx	lr
	...

08005770 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005770:	b580      	push	{r7, lr}
 8005772:	b086      	sub	sp, #24
 8005774:	af00      	add	r7, sp, #0
 8005776:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	2b00      	cmp	r3, #0
 800577c:	d101      	bne.n	8005782 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800577e:	2301      	movs	r3, #1
 8005780:	e25b      	b.n	8005c3a <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	681b      	ldr	r3, [r3, #0]
 8005786:	f003 0301 	and.w	r3, r3, #1
 800578a:	2b00      	cmp	r3, #0
 800578c:	d075      	beq.n	800587a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800578e:	4ba3      	ldr	r3, [pc, #652]	; (8005a1c <HAL_RCC_OscConfig+0x2ac>)
 8005790:	689b      	ldr	r3, [r3, #8]
 8005792:	f003 030c 	and.w	r3, r3, #12
 8005796:	2b04      	cmp	r3, #4
 8005798:	d00c      	beq.n	80057b4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800579a:	4ba0      	ldr	r3, [pc, #640]	; (8005a1c <HAL_RCC_OscConfig+0x2ac>)
 800579c:	689b      	ldr	r3, [r3, #8]
 800579e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80057a2:	2b08      	cmp	r3, #8
 80057a4:	d112      	bne.n	80057cc <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80057a6:	4b9d      	ldr	r3, [pc, #628]	; (8005a1c <HAL_RCC_OscConfig+0x2ac>)
 80057a8:	685b      	ldr	r3, [r3, #4]
 80057aa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80057ae:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80057b2:	d10b      	bne.n	80057cc <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80057b4:	4b99      	ldr	r3, [pc, #612]	; (8005a1c <HAL_RCC_OscConfig+0x2ac>)
 80057b6:	681b      	ldr	r3, [r3, #0]
 80057b8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80057bc:	2b00      	cmp	r3, #0
 80057be:	d05b      	beq.n	8005878 <HAL_RCC_OscConfig+0x108>
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	685b      	ldr	r3, [r3, #4]
 80057c4:	2b00      	cmp	r3, #0
 80057c6:	d157      	bne.n	8005878 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80057c8:	2301      	movs	r3, #1
 80057ca:	e236      	b.n	8005c3a <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	685b      	ldr	r3, [r3, #4]
 80057d0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80057d4:	d106      	bne.n	80057e4 <HAL_RCC_OscConfig+0x74>
 80057d6:	4b91      	ldr	r3, [pc, #580]	; (8005a1c <HAL_RCC_OscConfig+0x2ac>)
 80057d8:	681b      	ldr	r3, [r3, #0]
 80057da:	4a90      	ldr	r2, [pc, #576]	; (8005a1c <HAL_RCC_OscConfig+0x2ac>)
 80057dc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80057e0:	6013      	str	r3, [r2, #0]
 80057e2:	e01d      	b.n	8005820 <HAL_RCC_OscConfig+0xb0>
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	685b      	ldr	r3, [r3, #4]
 80057e8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80057ec:	d10c      	bne.n	8005808 <HAL_RCC_OscConfig+0x98>
 80057ee:	4b8b      	ldr	r3, [pc, #556]	; (8005a1c <HAL_RCC_OscConfig+0x2ac>)
 80057f0:	681b      	ldr	r3, [r3, #0]
 80057f2:	4a8a      	ldr	r2, [pc, #552]	; (8005a1c <HAL_RCC_OscConfig+0x2ac>)
 80057f4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80057f8:	6013      	str	r3, [r2, #0]
 80057fa:	4b88      	ldr	r3, [pc, #544]	; (8005a1c <HAL_RCC_OscConfig+0x2ac>)
 80057fc:	681b      	ldr	r3, [r3, #0]
 80057fe:	4a87      	ldr	r2, [pc, #540]	; (8005a1c <HAL_RCC_OscConfig+0x2ac>)
 8005800:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005804:	6013      	str	r3, [r2, #0]
 8005806:	e00b      	b.n	8005820 <HAL_RCC_OscConfig+0xb0>
 8005808:	4b84      	ldr	r3, [pc, #528]	; (8005a1c <HAL_RCC_OscConfig+0x2ac>)
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	4a83      	ldr	r2, [pc, #524]	; (8005a1c <HAL_RCC_OscConfig+0x2ac>)
 800580e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005812:	6013      	str	r3, [r2, #0]
 8005814:	4b81      	ldr	r3, [pc, #516]	; (8005a1c <HAL_RCC_OscConfig+0x2ac>)
 8005816:	681b      	ldr	r3, [r3, #0]
 8005818:	4a80      	ldr	r2, [pc, #512]	; (8005a1c <HAL_RCC_OscConfig+0x2ac>)
 800581a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800581e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	685b      	ldr	r3, [r3, #4]
 8005824:	2b00      	cmp	r3, #0
 8005826:	d013      	beq.n	8005850 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005828:	f7fe fd00 	bl	800422c <HAL_GetTick>
 800582c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800582e:	e008      	b.n	8005842 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005830:	f7fe fcfc 	bl	800422c <HAL_GetTick>
 8005834:	4602      	mov	r2, r0
 8005836:	693b      	ldr	r3, [r7, #16]
 8005838:	1ad3      	subs	r3, r2, r3
 800583a:	2b64      	cmp	r3, #100	; 0x64
 800583c:	d901      	bls.n	8005842 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800583e:	2303      	movs	r3, #3
 8005840:	e1fb      	b.n	8005c3a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005842:	4b76      	ldr	r3, [pc, #472]	; (8005a1c <HAL_RCC_OscConfig+0x2ac>)
 8005844:	681b      	ldr	r3, [r3, #0]
 8005846:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800584a:	2b00      	cmp	r3, #0
 800584c:	d0f0      	beq.n	8005830 <HAL_RCC_OscConfig+0xc0>
 800584e:	e014      	b.n	800587a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005850:	f7fe fcec 	bl	800422c <HAL_GetTick>
 8005854:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005856:	e008      	b.n	800586a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005858:	f7fe fce8 	bl	800422c <HAL_GetTick>
 800585c:	4602      	mov	r2, r0
 800585e:	693b      	ldr	r3, [r7, #16]
 8005860:	1ad3      	subs	r3, r2, r3
 8005862:	2b64      	cmp	r3, #100	; 0x64
 8005864:	d901      	bls.n	800586a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8005866:	2303      	movs	r3, #3
 8005868:	e1e7      	b.n	8005c3a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800586a:	4b6c      	ldr	r3, [pc, #432]	; (8005a1c <HAL_RCC_OscConfig+0x2ac>)
 800586c:	681b      	ldr	r3, [r3, #0]
 800586e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005872:	2b00      	cmp	r3, #0
 8005874:	d1f0      	bne.n	8005858 <HAL_RCC_OscConfig+0xe8>
 8005876:	e000      	b.n	800587a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005878:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	681b      	ldr	r3, [r3, #0]
 800587e:	f003 0302 	and.w	r3, r3, #2
 8005882:	2b00      	cmp	r3, #0
 8005884:	d063      	beq.n	800594e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005886:	4b65      	ldr	r3, [pc, #404]	; (8005a1c <HAL_RCC_OscConfig+0x2ac>)
 8005888:	689b      	ldr	r3, [r3, #8]
 800588a:	f003 030c 	and.w	r3, r3, #12
 800588e:	2b00      	cmp	r3, #0
 8005890:	d00b      	beq.n	80058aa <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005892:	4b62      	ldr	r3, [pc, #392]	; (8005a1c <HAL_RCC_OscConfig+0x2ac>)
 8005894:	689b      	ldr	r3, [r3, #8]
 8005896:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800589a:	2b08      	cmp	r3, #8
 800589c:	d11c      	bne.n	80058d8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800589e:	4b5f      	ldr	r3, [pc, #380]	; (8005a1c <HAL_RCC_OscConfig+0x2ac>)
 80058a0:	685b      	ldr	r3, [r3, #4]
 80058a2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80058a6:	2b00      	cmp	r3, #0
 80058a8:	d116      	bne.n	80058d8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80058aa:	4b5c      	ldr	r3, [pc, #368]	; (8005a1c <HAL_RCC_OscConfig+0x2ac>)
 80058ac:	681b      	ldr	r3, [r3, #0]
 80058ae:	f003 0302 	and.w	r3, r3, #2
 80058b2:	2b00      	cmp	r3, #0
 80058b4:	d005      	beq.n	80058c2 <HAL_RCC_OscConfig+0x152>
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	68db      	ldr	r3, [r3, #12]
 80058ba:	2b01      	cmp	r3, #1
 80058bc:	d001      	beq.n	80058c2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80058be:	2301      	movs	r3, #1
 80058c0:	e1bb      	b.n	8005c3a <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80058c2:	4b56      	ldr	r3, [pc, #344]	; (8005a1c <HAL_RCC_OscConfig+0x2ac>)
 80058c4:	681b      	ldr	r3, [r3, #0]
 80058c6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	691b      	ldr	r3, [r3, #16]
 80058ce:	00db      	lsls	r3, r3, #3
 80058d0:	4952      	ldr	r1, [pc, #328]	; (8005a1c <HAL_RCC_OscConfig+0x2ac>)
 80058d2:	4313      	orrs	r3, r2
 80058d4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80058d6:	e03a      	b.n	800594e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	68db      	ldr	r3, [r3, #12]
 80058dc:	2b00      	cmp	r3, #0
 80058de:	d020      	beq.n	8005922 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80058e0:	4b4f      	ldr	r3, [pc, #316]	; (8005a20 <HAL_RCC_OscConfig+0x2b0>)
 80058e2:	2201      	movs	r2, #1
 80058e4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80058e6:	f7fe fca1 	bl	800422c <HAL_GetTick>
 80058ea:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80058ec:	e008      	b.n	8005900 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80058ee:	f7fe fc9d 	bl	800422c <HAL_GetTick>
 80058f2:	4602      	mov	r2, r0
 80058f4:	693b      	ldr	r3, [r7, #16]
 80058f6:	1ad3      	subs	r3, r2, r3
 80058f8:	2b02      	cmp	r3, #2
 80058fa:	d901      	bls.n	8005900 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80058fc:	2303      	movs	r3, #3
 80058fe:	e19c      	b.n	8005c3a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005900:	4b46      	ldr	r3, [pc, #280]	; (8005a1c <HAL_RCC_OscConfig+0x2ac>)
 8005902:	681b      	ldr	r3, [r3, #0]
 8005904:	f003 0302 	and.w	r3, r3, #2
 8005908:	2b00      	cmp	r3, #0
 800590a:	d0f0      	beq.n	80058ee <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800590c:	4b43      	ldr	r3, [pc, #268]	; (8005a1c <HAL_RCC_OscConfig+0x2ac>)
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	691b      	ldr	r3, [r3, #16]
 8005918:	00db      	lsls	r3, r3, #3
 800591a:	4940      	ldr	r1, [pc, #256]	; (8005a1c <HAL_RCC_OscConfig+0x2ac>)
 800591c:	4313      	orrs	r3, r2
 800591e:	600b      	str	r3, [r1, #0]
 8005920:	e015      	b.n	800594e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005922:	4b3f      	ldr	r3, [pc, #252]	; (8005a20 <HAL_RCC_OscConfig+0x2b0>)
 8005924:	2200      	movs	r2, #0
 8005926:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005928:	f7fe fc80 	bl	800422c <HAL_GetTick>
 800592c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800592e:	e008      	b.n	8005942 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005930:	f7fe fc7c 	bl	800422c <HAL_GetTick>
 8005934:	4602      	mov	r2, r0
 8005936:	693b      	ldr	r3, [r7, #16]
 8005938:	1ad3      	subs	r3, r2, r3
 800593a:	2b02      	cmp	r3, #2
 800593c:	d901      	bls.n	8005942 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800593e:	2303      	movs	r3, #3
 8005940:	e17b      	b.n	8005c3a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005942:	4b36      	ldr	r3, [pc, #216]	; (8005a1c <HAL_RCC_OscConfig+0x2ac>)
 8005944:	681b      	ldr	r3, [r3, #0]
 8005946:	f003 0302 	and.w	r3, r3, #2
 800594a:	2b00      	cmp	r3, #0
 800594c:	d1f0      	bne.n	8005930 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	681b      	ldr	r3, [r3, #0]
 8005952:	f003 0308 	and.w	r3, r3, #8
 8005956:	2b00      	cmp	r3, #0
 8005958:	d030      	beq.n	80059bc <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	695b      	ldr	r3, [r3, #20]
 800595e:	2b00      	cmp	r3, #0
 8005960:	d016      	beq.n	8005990 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005962:	4b30      	ldr	r3, [pc, #192]	; (8005a24 <HAL_RCC_OscConfig+0x2b4>)
 8005964:	2201      	movs	r2, #1
 8005966:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005968:	f7fe fc60 	bl	800422c <HAL_GetTick>
 800596c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800596e:	e008      	b.n	8005982 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005970:	f7fe fc5c 	bl	800422c <HAL_GetTick>
 8005974:	4602      	mov	r2, r0
 8005976:	693b      	ldr	r3, [r7, #16]
 8005978:	1ad3      	subs	r3, r2, r3
 800597a:	2b02      	cmp	r3, #2
 800597c:	d901      	bls.n	8005982 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800597e:	2303      	movs	r3, #3
 8005980:	e15b      	b.n	8005c3a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005982:	4b26      	ldr	r3, [pc, #152]	; (8005a1c <HAL_RCC_OscConfig+0x2ac>)
 8005984:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005986:	f003 0302 	and.w	r3, r3, #2
 800598a:	2b00      	cmp	r3, #0
 800598c:	d0f0      	beq.n	8005970 <HAL_RCC_OscConfig+0x200>
 800598e:	e015      	b.n	80059bc <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005990:	4b24      	ldr	r3, [pc, #144]	; (8005a24 <HAL_RCC_OscConfig+0x2b4>)
 8005992:	2200      	movs	r2, #0
 8005994:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005996:	f7fe fc49 	bl	800422c <HAL_GetTick>
 800599a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800599c:	e008      	b.n	80059b0 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800599e:	f7fe fc45 	bl	800422c <HAL_GetTick>
 80059a2:	4602      	mov	r2, r0
 80059a4:	693b      	ldr	r3, [r7, #16]
 80059a6:	1ad3      	subs	r3, r2, r3
 80059a8:	2b02      	cmp	r3, #2
 80059aa:	d901      	bls.n	80059b0 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80059ac:	2303      	movs	r3, #3
 80059ae:	e144      	b.n	8005c3a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80059b0:	4b1a      	ldr	r3, [pc, #104]	; (8005a1c <HAL_RCC_OscConfig+0x2ac>)
 80059b2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80059b4:	f003 0302 	and.w	r3, r3, #2
 80059b8:	2b00      	cmp	r3, #0
 80059ba:	d1f0      	bne.n	800599e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	681b      	ldr	r3, [r3, #0]
 80059c0:	f003 0304 	and.w	r3, r3, #4
 80059c4:	2b00      	cmp	r3, #0
 80059c6:	f000 80a0 	beq.w	8005b0a <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80059ca:	2300      	movs	r3, #0
 80059cc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80059ce:	4b13      	ldr	r3, [pc, #76]	; (8005a1c <HAL_RCC_OscConfig+0x2ac>)
 80059d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059d2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80059d6:	2b00      	cmp	r3, #0
 80059d8:	d10f      	bne.n	80059fa <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80059da:	2300      	movs	r3, #0
 80059dc:	60bb      	str	r3, [r7, #8]
 80059de:	4b0f      	ldr	r3, [pc, #60]	; (8005a1c <HAL_RCC_OscConfig+0x2ac>)
 80059e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059e2:	4a0e      	ldr	r2, [pc, #56]	; (8005a1c <HAL_RCC_OscConfig+0x2ac>)
 80059e4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80059e8:	6413      	str	r3, [r2, #64]	; 0x40
 80059ea:	4b0c      	ldr	r3, [pc, #48]	; (8005a1c <HAL_RCC_OscConfig+0x2ac>)
 80059ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059ee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80059f2:	60bb      	str	r3, [r7, #8]
 80059f4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80059f6:	2301      	movs	r3, #1
 80059f8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80059fa:	4b0b      	ldr	r3, [pc, #44]	; (8005a28 <HAL_RCC_OscConfig+0x2b8>)
 80059fc:	681b      	ldr	r3, [r3, #0]
 80059fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005a02:	2b00      	cmp	r3, #0
 8005a04:	d121      	bne.n	8005a4a <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005a06:	4b08      	ldr	r3, [pc, #32]	; (8005a28 <HAL_RCC_OscConfig+0x2b8>)
 8005a08:	681b      	ldr	r3, [r3, #0]
 8005a0a:	4a07      	ldr	r2, [pc, #28]	; (8005a28 <HAL_RCC_OscConfig+0x2b8>)
 8005a0c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005a10:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005a12:	f7fe fc0b 	bl	800422c <HAL_GetTick>
 8005a16:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005a18:	e011      	b.n	8005a3e <HAL_RCC_OscConfig+0x2ce>
 8005a1a:	bf00      	nop
 8005a1c:	40023800 	.word	0x40023800
 8005a20:	42470000 	.word	0x42470000
 8005a24:	42470e80 	.word	0x42470e80
 8005a28:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005a2c:	f7fe fbfe 	bl	800422c <HAL_GetTick>
 8005a30:	4602      	mov	r2, r0
 8005a32:	693b      	ldr	r3, [r7, #16]
 8005a34:	1ad3      	subs	r3, r2, r3
 8005a36:	2b02      	cmp	r3, #2
 8005a38:	d901      	bls.n	8005a3e <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8005a3a:	2303      	movs	r3, #3
 8005a3c:	e0fd      	b.n	8005c3a <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005a3e:	4b81      	ldr	r3, [pc, #516]	; (8005c44 <HAL_RCC_OscConfig+0x4d4>)
 8005a40:	681b      	ldr	r3, [r3, #0]
 8005a42:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005a46:	2b00      	cmp	r3, #0
 8005a48:	d0f0      	beq.n	8005a2c <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	689b      	ldr	r3, [r3, #8]
 8005a4e:	2b01      	cmp	r3, #1
 8005a50:	d106      	bne.n	8005a60 <HAL_RCC_OscConfig+0x2f0>
 8005a52:	4b7d      	ldr	r3, [pc, #500]	; (8005c48 <HAL_RCC_OscConfig+0x4d8>)
 8005a54:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005a56:	4a7c      	ldr	r2, [pc, #496]	; (8005c48 <HAL_RCC_OscConfig+0x4d8>)
 8005a58:	f043 0301 	orr.w	r3, r3, #1
 8005a5c:	6713      	str	r3, [r2, #112]	; 0x70
 8005a5e:	e01c      	b.n	8005a9a <HAL_RCC_OscConfig+0x32a>
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	689b      	ldr	r3, [r3, #8]
 8005a64:	2b05      	cmp	r3, #5
 8005a66:	d10c      	bne.n	8005a82 <HAL_RCC_OscConfig+0x312>
 8005a68:	4b77      	ldr	r3, [pc, #476]	; (8005c48 <HAL_RCC_OscConfig+0x4d8>)
 8005a6a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005a6c:	4a76      	ldr	r2, [pc, #472]	; (8005c48 <HAL_RCC_OscConfig+0x4d8>)
 8005a6e:	f043 0304 	orr.w	r3, r3, #4
 8005a72:	6713      	str	r3, [r2, #112]	; 0x70
 8005a74:	4b74      	ldr	r3, [pc, #464]	; (8005c48 <HAL_RCC_OscConfig+0x4d8>)
 8005a76:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005a78:	4a73      	ldr	r2, [pc, #460]	; (8005c48 <HAL_RCC_OscConfig+0x4d8>)
 8005a7a:	f043 0301 	orr.w	r3, r3, #1
 8005a7e:	6713      	str	r3, [r2, #112]	; 0x70
 8005a80:	e00b      	b.n	8005a9a <HAL_RCC_OscConfig+0x32a>
 8005a82:	4b71      	ldr	r3, [pc, #452]	; (8005c48 <HAL_RCC_OscConfig+0x4d8>)
 8005a84:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005a86:	4a70      	ldr	r2, [pc, #448]	; (8005c48 <HAL_RCC_OscConfig+0x4d8>)
 8005a88:	f023 0301 	bic.w	r3, r3, #1
 8005a8c:	6713      	str	r3, [r2, #112]	; 0x70
 8005a8e:	4b6e      	ldr	r3, [pc, #440]	; (8005c48 <HAL_RCC_OscConfig+0x4d8>)
 8005a90:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005a92:	4a6d      	ldr	r2, [pc, #436]	; (8005c48 <HAL_RCC_OscConfig+0x4d8>)
 8005a94:	f023 0304 	bic.w	r3, r3, #4
 8005a98:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	689b      	ldr	r3, [r3, #8]
 8005a9e:	2b00      	cmp	r3, #0
 8005aa0:	d015      	beq.n	8005ace <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005aa2:	f7fe fbc3 	bl	800422c <HAL_GetTick>
 8005aa6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005aa8:	e00a      	b.n	8005ac0 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005aaa:	f7fe fbbf 	bl	800422c <HAL_GetTick>
 8005aae:	4602      	mov	r2, r0
 8005ab0:	693b      	ldr	r3, [r7, #16]
 8005ab2:	1ad3      	subs	r3, r2, r3
 8005ab4:	f241 3288 	movw	r2, #5000	; 0x1388
 8005ab8:	4293      	cmp	r3, r2
 8005aba:	d901      	bls.n	8005ac0 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8005abc:	2303      	movs	r3, #3
 8005abe:	e0bc      	b.n	8005c3a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005ac0:	4b61      	ldr	r3, [pc, #388]	; (8005c48 <HAL_RCC_OscConfig+0x4d8>)
 8005ac2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005ac4:	f003 0302 	and.w	r3, r3, #2
 8005ac8:	2b00      	cmp	r3, #0
 8005aca:	d0ee      	beq.n	8005aaa <HAL_RCC_OscConfig+0x33a>
 8005acc:	e014      	b.n	8005af8 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005ace:	f7fe fbad 	bl	800422c <HAL_GetTick>
 8005ad2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005ad4:	e00a      	b.n	8005aec <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005ad6:	f7fe fba9 	bl	800422c <HAL_GetTick>
 8005ada:	4602      	mov	r2, r0
 8005adc:	693b      	ldr	r3, [r7, #16]
 8005ade:	1ad3      	subs	r3, r2, r3
 8005ae0:	f241 3288 	movw	r2, #5000	; 0x1388
 8005ae4:	4293      	cmp	r3, r2
 8005ae6:	d901      	bls.n	8005aec <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8005ae8:	2303      	movs	r3, #3
 8005aea:	e0a6      	b.n	8005c3a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005aec:	4b56      	ldr	r3, [pc, #344]	; (8005c48 <HAL_RCC_OscConfig+0x4d8>)
 8005aee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005af0:	f003 0302 	and.w	r3, r3, #2
 8005af4:	2b00      	cmp	r3, #0
 8005af6:	d1ee      	bne.n	8005ad6 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005af8:	7dfb      	ldrb	r3, [r7, #23]
 8005afa:	2b01      	cmp	r3, #1
 8005afc:	d105      	bne.n	8005b0a <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005afe:	4b52      	ldr	r3, [pc, #328]	; (8005c48 <HAL_RCC_OscConfig+0x4d8>)
 8005b00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b02:	4a51      	ldr	r2, [pc, #324]	; (8005c48 <HAL_RCC_OscConfig+0x4d8>)
 8005b04:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005b08:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	699b      	ldr	r3, [r3, #24]
 8005b0e:	2b00      	cmp	r3, #0
 8005b10:	f000 8092 	beq.w	8005c38 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005b14:	4b4c      	ldr	r3, [pc, #304]	; (8005c48 <HAL_RCC_OscConfig+0x4d8>)
 8005b16:	689b      	ldr	r3, [r3, #8]
 8005b18:	f003 030c 	and.w	r3, r3, #12
 8005b1c:	2b08      	cmp	r3, #8
 8005b1e:	d05c      	beq.n	8005bda <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	699b      	ldr	r3, [r3, #24]
 8005b24:	2b02      	cmp	r3, #2
 8005b26:	d141      	bne.n	8005bac <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005b28:	4b48      	ldr	r3, [pc, #288]	; (8005c4c <HAL_RCC_OscConfig+0x4dc>)
 8005b2a:	2200      	movs	r2, #0
 8005b2c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005b2e:	f7fe fb7d 	bl	800422c <HAL_GetTick>
 8005b32:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005b34:	e008      	b.n	8005b48 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005b36:	f7fe fb79 	bl	800422c <HAL_GetTick>
 8005b3a:	4602      	mov	r2, r0
 8005b3c:	693b      	ldr	r3, [r7, #16]
 8005b3e:	1ad3      	subs	r3, r2, r3
 8005b40:	2b02      	cmp	r3, #2
 8005b42:	d901      	bls.n	8005b48 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8005b44:	2303      	movs	r3, #3
 8005b46:	e078      	b.n	8005c3a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005b48:	4b3f      	ldr	r3, [pc, #252]	; (8005c48 <HAL_RCC_OscConfig+0x4d8>)
 8005b4a:	681b      	ldr	r3, [r3, #0]
 8005b4c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005b50:	2b00      	cmp	r3, #0
 8005b52:	d1f0      	bne.n	8005b36 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	69da      	ldr	r2, [r3, #28]
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	6a1b      	ldr	r3, [r3, #32]
 8005b5c:	431a      	orrs	r2, r3
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b62:	019b      	lsls	r3, r3, #6
 8005b64:	431a      	orrs	r2, r3
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b6a:	085b      	lsrs	r3, r3, #1
 8005b6c:	3b01      	subs	r3, #1
 8005b6e:	041b      	lsls	r3, r3, #16
 8005b70:	431a      	orrs	r2, r3
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b76:	061b      	lsls	r3, r3, #24
 8005b78:	4933      	ldr	r1, [pc, #204]	; (8005c48 <HAL_RCC_OscConfig+0x4d8>)
 8005b7a:	4313      	orrs	r3, r2
 8005b7c:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005b7e:	4b33      	ldr	r3, [pc, #204]	; (8005c4c <HAL_RCC_OscConfig+0x4dc>)
 8005b80:	2201      	movs	r2, #1
 8005b82:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005b84:	f7fe fb52 	bl	800422c <HAL_GetTick>
 8005b88:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005b8a:	e008      	b.n	8005b9e <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005b8c:	f7fe fb4e 	bl	800422c <HAL_GetTick>
 8005b90:	4602      	mov	r2, r0
 8005b92:	693b      	ldr	r3, [r7, #16]
 8005b94:	1ad3      	subs	r3, r2, r3
 8005b96:	2b02      	cmp	r3, #2
 8005b98:	d901      	bls.n	8005b9e <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8005b9a:	2303      	movs	r3, #3
 8005b9c:	e04d      	b.n	8005c3a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005b9e:	4b2a      	ldr	r3, [pc, #168]	; (8005c48 <HAL_RCC_OscConfig+0x4d8>)
 8005ba0:	681b      	ldr	r3, [r3, #0]
 8005ba2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005ba6:	2b00      	cmp	r3, #0
 8005ba8:	d0f0      	beq.n	8005b8c <HAL_RCC_OscConfig+0x41c>
 8005baa:	e045      	b.n	8005c38 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005bac:	4b27      	ldr	r3, [pc, #156]	; (8005c4c <HAL_RCC_OscConfig+0x4dc>)
 8005bae:	2200      	movs	r2, #0
 8005bb0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005bb2:	f7fe fb3b 	bl	800422c <HAL_GetTick>
 8005bb6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005bb8:	e008      	b.n	8005bcc <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005bba:	f7fe fb37 	bl	800422c <HAL_GetTick>
 8005bbe:	4602      	mov	r2, r0
 8005bc0:	693b      	ldr	r3, [r7, #16]
 8005bc2:	1ad3      	subs	r3, r2, r3
 8005bc4:	2b02      	cmp	r3, #2
 8005bc6:	d901      	bls.n	8005bcc <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8005bc8:	2303      	movs	r3, #3
 8005bca:	e036      	b.n	8005c3a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005bcc:	4b1e      	ldr	r3, [pc, #120]	; (8005c48 <HAL_RCC_OscConfig+0x4d8>)
 8005bce:	681b      	ldr	r3, [r3, #0]
 8005bd0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005bd4:	2b00      	cmp	r3, #0
 8005bd6:	d1f0      	bne.n	8005bba <HAL_RCC_OscConfig+0x44a>
 8005bd8:	e02e      	b.n	8005c38 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	699b      	ldr	r3, [r3, #24]
 8005bde:	2b01      	cmp	r3, #1
 8005be0:	d101      	bne.n	8005be6 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8005be2:	2301      	movs	r3, #1
 8005be4:	e029      	b.n	8005c3a <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8005be6:	4b18      	ldr	r3, [pc, #96]	; (8005c48 <HAL_RCC_OscConfig+0x4d8>)
 8005be8:	685b      	ldr	r3, [r3, #4]
 8005bea:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005bec:	68fb      	ldr	r3, [r7, #12]
 8005bee:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	69db      	ldr	r3, [r3, #28]
 8005bf6:	429a      	cmp	r2, r3
 8005bf8:	d11c      	bne.n	8005c34 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8005bfa:	68fb      	ldr	r3, [r7, #12]
 8005bfc:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005c04:	429a      	cmp	r2, r3
 8005c06:	d115      	bne.n	8005c34 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8005c08:	68fa      	ldr	r2, [r7, #12]
 8005c0a:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8005c0e:	4013      	ands	r3, r2
 8005c10:	687a      	ldr	r2, [r7, #4]
 8005c12:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8005c14:	4293      	cmp	r3, r2
 8005c16:	d10d      	bne.n	8005c34 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8005c18:	68fb      	ldr	r3, [r7, #12]
 8005c1a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8005c22:	429a      	cmp	r2, r3
 8005c24:	d106      	bne.n	8005c34 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8005c26:	68fb      	ldr	r3, [r7, #12]
 8005c28:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8005c30:	429a      	cmp	r2, r3
 8005c32:	d001      	beq.n	8005c38 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8005c34:	2301      	movs	r3, #1
 8005c36:	e000      	b.n	8005c3a <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8005c38:	2300      	movs	r3, #0
}
 8005c3a:	4618      	mov	r0, r3
 8005c3c:	3718      	adds	r7, #24
 8005c3e:	46bd      	mov	sp, r7
 8005c40:	bd80      	pop	{r7, pc}
 8005c42:	bf00      	nop
 8005c44:	40007000 	.word	0x40007000
 8005c48:	40023800 	.word	0x40023800
 8005c4c:	42470060 	.word	0x42470060

08005c50 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005c50:	b580      	push	{r7, lr}
 8005c52:	b084      	sub	sp, #16
 8005c54:	af00      	add	r7, sp, #0
 8005c56:	6078      	str	r0, [r7, #4]
 8005c58:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	2b00      	cmp	r3, #0
 8005c5e:	d101      	bne.n	8005c64 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005c60:	2301      	movs	r3, #1
 8005c62:	e0cc      	b.n	8005dfe <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005c64:	4b68      	ldr	r3, [pc, #416]	; (8005e08 <HAL_RCC_ClockConfig+0x1b8>)
 8005c66:	681b      	ldr	r3, [r3, #0]
 8005c68:	f003 030f 	and.w	r3, r3, #15
 8005c6c:	683a      	ldr	r2, [r7, #0]
 8005c6e:	429a      	cmp	r2, r3
 8005c70:	d90c      	bls.n	8005c8c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005c72:	4b65      	ldr	r3, [pc, #404]	; (8005e08 <HAL_RCC_ClockConfig+0x1b8>)
 8005c74:	683a      	ldr	r2, [r7, #0]
 8005c76:	b2d2      	uxtb	r2, r2
 8005c78:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005c7a:	4b63      	ldr	r3, [pc, #396]	; (8005e08 <HAL_RCC_ClockConfig+0x1b8>)
 8005c7c:	681b      	ldr	r3, [r3, #0]
 8005c7e:	f003 030f 	and.w	r3, r3, #15
 8005c82:	683a      	ldr	r2, [r7, #0]
 8005c84:	429a      	cmp	r2, r3
 8005c86:	d001      	beq.n	8005c8c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8005c88:	2301      	movs	r3, #1
 8005c8a:	e0b8      	b.n	8005dfe <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	681b      	ldr	r3, [r3, #0]
 8005c90:	f003 0302 	and.w	r3, r3, #2
 8005c94:	2b00      	cmp	r3, #0
 8005c96:	d020      	beq.n	8005cda <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	681b      	ldr	r3, [r3, #0]
 8005c9c:	f003 0304 	and.w	r3, r3, #4
 8005ca0:	2b00      	cmp	r3, #0
 8005ca2:	d005      	beq.n	8005cb0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005ca4:	4b59      	ldr	r3, [pc, #356]	; (8005e0c <HAL_RCC_ClockConfig+0x1bc>)
 8005ca6:	689b      	ldr	r3, [r3, #8]
 8005ca8:	4a58      	ldr	r2, [pc, #352]	; (8005e0c <HAL_RCC_ClockConfig+0x1bc>)
 8005caa:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8005cae:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	681b      	ldr	r3, [r3, #0]
 8005cb4:	f003 0308 	and.w	r3, r3, #8
 8005cb8:	2b00      	cmp	r3, #0
 8005cba:	d005      	beq.n	8005cc8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005cbc:	4b53      	ldr	r3, [pc, #332]	; (8005e0c <HAL_RCC_ClockConfig+0x1bc>)
 8005cbe:	689b      	ldr	r3, [r3, #8]
 8005cc0:	4a52      	ldr	r2, [pc, #328]	; (8005e0c <HAL_RCC_ClockConfig+0x1bc>)
 8005cc2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8005cc6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005cc8:	4b50      	ldr	r3, [pc, #320]	; (8005e0c <HAL_RCC_ClockConfig+0x1bc>)
 8005cca:	689b      	ldr	r3, [r3, #8]
 8005ccc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	689b      	ldr	r3, [r3, #8]
 8005cd4:	494d      	ldr	r1, [pc, #308]	; (8005e0c <HAL_RCC_ClockConfig+0x1bc>)
 8005cd6:	4313      	orrs	r3, r2
 8005cd8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	681b      	ldr	r3, [r3, #0]
 8005cde:	f003 0301 	and.w	r3, r3, #1
 8005ce2:	2b00      	cmp	r3, #0
 8005ce4:	d044      	beq.n	8005d70 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	685b      	ldr	r3, [r3, #4]
 8005cea:	2b01      	cmp	r3, #1
 8005cec:	d107      	bne.n	8005cfe <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005cee:	4b47      	ldr	r3, [pc, #284]	; (8005e0c <HAL_RCC_ClockConfig+0x1bc>)
 8005cf0:	681b      	ldr	r3, [r3, #0]
 8005cf2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005cf6:	2b00      	cmp	r3, #0
 8005cf8:	d119      	bne.n	8005d2e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005cfa:	2301      	movs	r3, #1
 8005cfc:	e07f      	b.n	8005dfe <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	685b      	ldr	r3, [r3, #4]
 8005d02:	2b02      	cmp	r3, #2
 8005d04:	d003      	beq.n	8005d0e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005d0a:	2b03      	cmp	r3, #3
 8005d0c:	d107      	bne.n	8005d1e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005d0e:	4b3f      	ldr	r3, [pc, #252]	; (8005e0c <HAL_RCC_ClockConfig+0x1bc>)
 8005d10:	681b      	ldr	r3, [r3, #0]
 8005d12:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005d16:	2b00      	cmp	r3, #0
 8005d18:	d109      	bne.n	8005d2e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005d1a:	2301      	movs	r3, #1
 8005d1c:	e06f      	b.n	8005dfe <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005d1e:	4b3b      	ldr	r3, [pc, #236]	; (8005e0c <HAL_RCC_ClockConfig+0x1bc>)
 8005d20:	681b      	ldr	r3, [r3, #0]
 8005d22:	f003 0302 	and.w	r3, r3, #2
 8005d26:	2b00      	cmp	r3, #0
 8005d28:	d101      	bne.n	8005d2e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005d2a:	2301      	movs	r3, #1
 8005d2c:	e067      	b.n	8005dfe <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005d2e:	4b37      	ldr	r3, [pc, #220]	; (8005e0c <HAL_RCC_ClockConfig+0x1bc>)
 8005d30:	689b      	ldr	r3, [r3, #8]
 8005d32:	f023 0203 	bic.w	r2, r3, #3
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	685b      	ldr	r3, [r3, #4]
 8005d3a:	4934      	ldr	r1, [pc, #208]	; (8005e0c <HAL_RCC_ClockConfig+0x1bc>)
 8005d3c:	4313      	orrs	r3, r2
 8005d3e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005d40:	f7fe fa74 	bl	800422c <HAL_GetTick>
 8005d44:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005d46:	e00a      	b.n	8005d5e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005d48:	f7fe fa70 	bl	800422c <HAL_GetTick>
 8005d4c:	4602      	mov	r2, r0
 8005d4e:	68fb      	ldr	r3, [r7, #12]
 8005d50:	1ad3      	subs	r3, r2, r3
 8005d52:	f241 3288 	movw	r2, #5000	; 0x1388
 8005d56:	4293      	cmp	r3, r2
 8005d58:	d901      	bls.n	8005d5e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005d5a:	2303      	movs	r3, #3
 8005d5c:	e04f      	b.n	8005dfe <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005d5e:	4b2b      	ldr	r3, [pc, #172]	; (8005e0c <HAL_RCC_ClockConfig+0x1bc>)
 8005d60:	689b      	ldr	r3, [r3, #8]
 8005d62:	f003 020c 	and.w	r2, r3, #12
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	685b      	ldr	r3, [r3, #4]
 8005d6a:	009b      	lsls	r3, r3, #2
 8005d6c:	429a      	cmp	r2, r3
 8005d6e:	d1eb      	bne.n	8005d48 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005d70:	4b25      	ldr	r3, [pc, #148]	; (8005e08 <HAL_RCC_ClockConfig+0x1b8>)
 8005d72:	681b      	ldr	r3, [r3, #0]
 8005d74:	f003 030f 	and.w	r3, r3, #15
 8005d78:	683a      	ldr	r2, [r7, #0]
 8005d7a:	429a      	cmp	r2, r3
 8005d7c:	d20c      	bcs.n	8005d98 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005d7e:	4b22      	ldr	r3, [pc, #136]	; (8005e08 <HAL_RCC_ClockConfig+0x1b8>)
 8005d80:	683a      	ldr	r2, [r7, #0]
 8005d82:	b2d2      	uxtb	r2, r2
 8005d84:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005d86:	4b20      	ldr	r3, [pc, #128]	; (8005e08 <HAL_RCC_ClockConfig+0x1b8>)
 8005d88:	681b      	ldr	r3, [r3, #0]
 8005d8a:	f003 030f 	and.w	r3, r3, #15
 8005d8e:	683a      	ldr	r2, [r7, #0]
 8005d90:	429a      	cmp	r2, r3
 8005d92:	d001      	beq.n	8005d98 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8005d94:	2301      	movs	r3, #1
 8005d96:	e032      	b.n	8005dfe <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	681b      	ldr	r3, [r3, #0]
 8005d9c:	f003 0304 	and.w	r3, r3, #4
 8005da0:	2b00      	cmp	r3, #0
 8005da2:	d008      	beq.n	8005db6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005da4:	4b19      	ldr	r3, [pc, #100]	; (8005e0c <HAL_RCC_ClockConfig+0x1bc>)
 8005da6:	689b      	ldr	r3, [r3, #8]
 8005da8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	68db      	ldr	r3, [r3, #12]
 8005db0:	4916      	ldr	r1, [pc, #88]	; (8005e0c <HAL_RCC_ClockConfig+0x1bc>)
 8005db2:	4313      	orrs	r3, r2
 8005db4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	681b      	ldr	r3, [r3, #0]
 8005dba:	f003 0308 	and.w	r3, r3, #8
 8005dbe:	2b00      	cmp	r3, #0
 8005dc0:	d009      	beq.n	8005dd6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005dc2:	4b12      	ldr	r3, [pc, #72]	; (8005e0c <HAL_RCC_ClockConfig+0x1bc>)
 8005dc4:	689b      	ldr	r3, [r3, #8]
 8005dc6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	691b      	ldr	r3, [r3, #16]
 8005dce:	00db      	lsls	r3, r3, #3
 8005dd0:	490e      	ldr	r1, [pc, #56]	; (8005e0c <HAL_RCC_ClockConfig+0x1bc>)
 8005dd2:	4313      	orrs	r3, r2
 8005dd4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8005dd6:	f000 f821 	bl	8005e1c <HAL_RCC_GetSysClockFreq>
 8005dda:	4601      	mov	r1, r0
 8005ddc:	4b0b      	ldr	r3, [pc, #44]	; (8005e0c <HAL_RCC_ClockConfig+0x1bc>)
 8005dde:	689b      	ldr	r3, [r3, #8]
 8005de0:	091b      	lsrs	r3, r3, #4
 8005de2:	f003 030f 	and.w	r3, r3, #15
 8005de6:	4a0a      	ldr	r2, [pc, #40]	; (8005e10 <HAL_RCC_ClockConfig+0x1c0>)
 8005de8:	5cd3      	ldrb	r3, [r2, r3]
 8005dea:	fa21 f303 	lsr.w	r3, r1, r3
 8005dee:	4a09      	ldr	r2, [pc, #36]	; (8005e14 <HAL_RCC_ClockConfig+0x1c4>)
 8005df0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8005df2:	4b09      	ldr	r3, [pc, #36]	; (8005e18 <HAL_RCC_ClockConfig+0x1c8>)
 8005df4:	681b      	ldr	r3, [r3, #0]
 8005df6:	4618      	mov	r0, r3
 8005df8:	f7fe f9d4 	bl	80041a4 <HAL_InitTick>

  return HAL_OK;
 8005dfc:	2300      	movs	r3, #0
}
 8005dfe:	4618      	mov	r0, r3
 8005e00:	3710      	adds	r7, #16
 8005e02:	46bd      	mov	sp, r7
 8005e04:	bd80      	pop	{r7, pc}
 8005e06:	bf00      	nop
 8005e08:	40023c00 	.word	0x40023c00
 8005e0c:	40023800 	.word	0x40023800
 8005e10:	0800ca58 	.word	0x0800ca58
 8005e14:	200000f8 	.word	0x200000f8
 8005e18:	200000fc 	.word	0x200000fc

08005e1c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005e1c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005e1e:	b085      	sub	sp, #20
 8005e20:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8005e22:	2300      	movs	r3, #0
 8005e24:	607b      	str	r3, [r7, #4]
 8005e26:	2300      	movs	r3, #0
 8005e28:	60fb      	str	r3, [r7, #12]
 8005e2a:	2300      	movs	r3, #0
 8005e2c:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8005e2e:	2300      	movs	r3, #0
 8005e30:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005e32:	4b63      	ldr	r3, [pc, #396]	; (8005fc0 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8005e34:	689b      	ldr	r3, [r3, #8]
 8005e36:	f003 030c 	and.w	r3, r3, #12
 8005e3a:	2b04      	cmp	r3, #4
 8005e3c:	d007      	beq.n	8005e4e <HAL_RCC_GetSysClockFreq+0x32>
 8005e3e:	2b08      	cmp	r3, #8
 8005e40:	d008      	beq.n	8005e54 <HAL_RCC_GetSysClockFreq+0x38>
 8005e42:	2b00      	cmp	r3, #0
 8005e44:	f040 80b4 	bne.w	8005fb0 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005e48:	4b5e      	ldr	r3, [pc, #376]	; (8005fc4 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8005e4a:	60bb      	str	r3, [r7, #8]
       break;
 8005e4c:	e0b3      	b.n	8005fb6 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005e4e:	4b5e      	ldr	r3, [pc, #376]	; (8005fc8 <HAL_RCC_GetSysClockFreq+0x1ac>)
 8005e50:	60bb      	str	r3, [r7, #8]
      break;
 8005e52:	e0b0      	b.n	8005fb6 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005e54:	4b5a      	ldr	r3, [pc, #360]	; (8005fc0 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8005e56:	685b      	ldr	r3, [r3, #4]
 8005e58:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005e5c:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005e5e:	4b58      	ldr	r3, [pc, #352]	; (8005fc0 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8005e60:	685b      	ldr	r3, [r3, #4]
 8005e62:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005e66:	2b00      	cmp	r3, #0
 8005e68:	d04a      	beq.n	8005f00 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005e6a:	4b55      	ldr	r3, [pc, #340]	; (8005fc0 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8005e6c:	685b      	ldr	r3, [r3, #4]
 8005e6e:	099b      	lsrs	r3, r3, #6
 8005e70:	f04f 0400 	mov.w	r4, #0
 8005e74:	f240 11ff 	movw	r1, #511	; 0x1ff
 8005e78:	f04f 0200 	mov.w	r2, #0
 8005e7c:	ea03 0501 	and.w	r5, r3, r1
 8005e80:	ea04 0602 	and.w	r6, r4, r2
 8005e84:	4629      	mov	r1, r5
 8005e86:	4632      	mov	r2, r6
 8005e88:	f04f 0300 	mov.w	r3, #0
 8005e8c:	f04f 0400 	mov.w	r4, #0
 8005e90:	0154      	lsls	r4, r2, #5
 8005e92:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8005e96:	014b      	lsls	r3, r1, #5
 8005e98:	4619      	mov	r1, r3
 8005e9a:	4622      	mov	r2, r4
 8005e9c:	1b49      	subs	r1, r1, r5
 8005e9e:	eb62 0206 	sbc.w	r2, r2, r6
 8005ea2:	f04f 0300 	mov.w	r3, #0
 8005ea6:	f04f 0400 	mov.w	r4, #0
 8005eaa:	0194      	lsls	r4, r2, #6
 8005eac:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8005eb0:	018b      	lsls	r3, r1, #6
 8005eb2:	1a5b      	subs	r3, r3, r1
 8005eb4:	eb64 0402 	sbc.w	r4, r4, r2
 8005eb8:	f04f 0100 	mov.w	r1, #0
 8005ebc:	f04f 0200 	mov.w	r2, #0
 8005ec0:	00e2      	lsls	r2, r4, #3
 8005ec2:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8005ec6:	00d9      	lsls	r1, r3, #3
 8005ec8:	460b      	mov	r3, r1
 8005eca:	4614      	mov	r4, r2
 8005ecc:	195b      	adds	r3, r3, r5
 8005ece:	eb44 0406 	adc.w	r4, r4, r6
 8005ed2:	f04f 0100 	mov.w	r1, #0
 8005ed6:	f04f 0200 	mov.w	r2, #0
 8005eda:	0262      	lsls	r2, r4, #9
 8005edc:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8005ee0:	0259      	lsls	r1, r3, #9
 8005ee2:	460b      	mov	r3, r1
 8005ee4:	4614      	mov	r4, r2
 8005ee6:	4618      	mov	r0, r3
 8005ee8:	4621      	mov	r1, r4
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	f04f 0400 	mov.w	r4, #0
 8005ef0:	461a      	mov	r2, r3
 8005ef2:	4623      	mov	r3, r4
 8005ef4:	f7fa fea8 	bl	8000c48 <__aeabi_uldivmod>
 8005ef8:	4603      	mov	r3, r0
 8005efa:	460c      	mov	r4, r1
 8005efc:	60fb      	str	r3, [r7, #12]
 8005efe:	e049      	b.n	8005f94 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005f00:	4b2f      	ldr	r3, [pc, #188]	; (8005fc0 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8005f02:	685b      	ldr	r3, [r3, #4]
 8005f04:	099b      	lsrs	r3, r3, #6
 8005f06:	f04f 0400 	mov.w	r4, #0
 8005f0a:	f240 11ff 	movw	r1, #511	; 0x1ff
 8005f0e:	f04f 0200 	mov.w	r2, #0
 8005f12:	ea03 0501 	and.w	r5, r3, r1
 8005f16:	ea04 0602 	and.w	r6, r4, r2
 8005f1a:	4629      	mov	r1, r5
 8005f1c:	4632      	mov	r2, r6
 8005f1e:	f04f 0300 	mov.w	r3, #0
 8005f22:	f04f 0400 	mov.w	r4, #0
 8005f26:	0154      	lsls	r4, r2, #5
 8005f28:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8005f2c:	014b      	lsls	r3, r1, #5
 8005f2e:	4619      	mov	r1, r3
 8005f30:	4622      	mov	r2, r4
 8005f32:	1b49      	subs	r1, r1, r5
 8005f34:	eb62 0206 	sbc.w	r2, r2, r6
 8005f38:	f04f 0300 	mov.w	r3, #0
 8005f3c:	f04f 0400 	mov.w	r4, #0
 8005f40:	0194      	lsls	r4, r2, #6
 8005f42:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8005f46:	018b      	lsls	r3, r1, #6
 8005f48:	1a5b      	subs	r3, r3, r1
 8005f4a:	eb64 0402 	sbc.w	r4, r4, r2
 8005f4e:	f04f 0100 	mov.w	r1, #0
 8005f52:	f04f 0200 	mov.w	r2, #0
 8005f56:	00e2      	lsls	r2, r4, #3
 8005f58:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8005f5c:	00d9      	lsls	r1, r3, #3
 8005f5e:	460b      	mov	r3, r1
 8005f60:	4614      	mov	r4, r2
 8005f62:	195b      	adds	r3, r3, r5
 8005f64:	eb44 0406 	adc.w	r4, r4, r6
 8005f68:	f04f 0100 	mov.w	r1, #0
 8005f6c:	f04f 0200 	mov.w	r2, #0
 8005f70:	02a2      	lsls	r2, r4, #10
 8005f72:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8005f76:	0299      	lsls	r1, r3, #10
 8005f78:	460b      	mov	r3, r1
 8005f7a:	4614      	mov	r4, r2
 8005f7c:	4618      	mov	r0, r3
 8005f7e:	4621      	mov	r1, r4
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	f04f 0400 	mov.w	r4, #0
 8005f86:	461a      	mov	r2, r3
 8005f88:	4623      	mov	r3, r4
 8005f8a:	f7fa fe5d 	bl	8000c48 <__aeabi_uldivmod>
 8005f8e:	4603      	mov	r3, r0
 8005f90:	460c      	mov	r4, r1
 8005f92:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8005f94:	4b0a      	ldr	r3, [pc, #40]	; (8005fc0 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8005f96:	685b      	ldr	r3, [r3, #4]
 8005f98:	0c1b      	lsrs	r3, r3, #16
 8005f9a:	f003 0303 	and.w	r3, r3, #3
 8005f9e:	3301      	adds	r3, #1
 8005fa0:	005b      	lsls	r3, r3, #1
 8005fa2:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8005fa4:	68fa      	ldr	r2, [r7, #12]
 8005fa6:	683b      	ldr	r3, [r7, #0]
 8005fa8:	fbb2 f3f3 	udiv	r3, r2, r3
 8005fac:	60bb      	str	r3, [r7, #8]
      break;
 8005fae:	e002      	b.n	8005fb6 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005fb0:	4b04      	ldr	r3, [pc, #16]	; (8005fc4 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8005fb2:	60bb      	str	r3, [r7, #8]
      break;
 8005fb4:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005fb6:	68bb      	ldr	r3, [r7, #8]
}
 8005fb8:	4618      	mov	r0, r3
 8005fba:	3714      	adds	r7, #20
 8005fbc:	46bd      	mov	sp, r7
 8005fbe:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005fc0:	40023800 	.word	0x40023800
 8005fc4:	00f42400 	.word	0x00f42400
 8005fc8:	007a1200 	.word	0x007a1200

08005fcc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005fcc:	b480      	push	{r7}
 8005fce:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005fd0:	4b03      	ldr	r3, [pc, #12]	; (8005fe0 <HAL_RCC_GetHCLKFreq+0x14>)
 8005fd2:	681b      	ldr	r3, [r3, #0]
}
 8005fd4:	4618      	mov	r0, r3
 8005fd6:	46bd      	mov	sp, r7
 8005fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fdc:	4770      	bx	lr
 8005fde:	bf00      	nop
 8005fe0:	200000f8 	.word	0x200000f8

08005fe4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005fe4:	b580      	push	{r7, lr}
 8005fe6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8005fe8:	f7ff fff0 	bl	8005fcc <HAL_RCC_GetHCLKFreq>
 8005fec:	4601      	mov	r1, r0
 8005fee:	4b05      	ldr	r3, [pc, #20]	; (8006004 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005ff0:	689b      	ldr	r3, [r3, #8]
 8005ff2:	0a9b      	lsrs	r3, r3, #10
 8005ff4:	f003 0307 	and.w	r3, r3, #7
 8005ff8:	4a03      	ldr	r2, [pc, #12]	; (8006008 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005ffa:	5cd3      	ldrb	r3, [r2, r3]
 8005ffc:	fa21 f303 	lsr.w	r3, r1, r3
}
 8006000:	4618      	mov	r0, r3
 8006002:	bd80      	pop	{r7, pc}
 8006004:	40023800 	.word	0x40023800
 8006008:	0800ca68 	.word	0x0800ca68

0800600c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800600c:	b580      	push	{r7, lr}
 800600e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8006010:	f7ff ffdc 	bl	8005fcc <HAL_RCC_GetHCLKFreq>
 8006014:	4601      	mov	r1, r0
 8006016:	4b05      	ldr	r3, [pc, #20]	; (800602c <HAL_RCC_GetPCLK2Freq+0x20>)
 8006018:	689b      	ldr	r3, [r3, #8]
 800601a:	0b5b      	lsrs	r3, r3, #13
 800601c:	f003 0307 	and.w	r3, r3, #7
 8006020:	4a03      	ldr	r2, [pc, #12]	; (8006030 <HAL_RCC_GetPCLK2Freq+0x24>)
 8006022:	5cd3      	ldrb	r3, [r2, r3]
 8006024:	fa21 f303 	lsr.w	r3, r1, r3
}
 8006028:	4618      	mov	r0, r3
 800602a:	bd80      	pop	{r7, pc}
 800602c:	40023800 	.word	0x40023800
 8006030:	0800ca68 	.word	0x0800ca68

08006034 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8006034:	b580      	push	{r7, lr}
 8006036:	b082      	sub	sp, #8
 8006038:	af00      	add	r7, sp, #0
 800603a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	2b00      	cmp	r3, #0
 8006040:	d101      	bne.n	8006046 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8006042:	2301      	movs	r3, #1
 8006044:	e056      	b.n	80060f4 <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	2200      	movs	r2, #0
 800604a:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006052:	b2db      	uxtb	r3, r3
 8006054:	2b00      	cmp	r3, #0
 8006056:	d106      	bne.n	8006066 <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	2200      	movs	r2, #0
 800605c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8006060:	6878      	ldr	r0, [r7, #4]
 8006062:	f7fc ffe7 	bl	8003034 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	2202      	movs	r2, #2
 800606a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	681b      	ldr	r3, [r3, #0]
 8006072:	681a      	ldr	r2, [r3, #0]
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	681b      	ldr	r3, [r3, #0]
 8006078:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800607c:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	685a      	ldr	r2, [r3, #4]
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	689b      	ldr	r3, [r3, #8]
 8006086:	431a      	orrs	r2, r3
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	68db      	ldr	r3, [r3, #12]
 800608c:	431a      	orrs	r2, r3
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	691b      	ldr	r3, [r3, #16]
 8006092:	431a      	orrs	r2, r3
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	695b      	ldr	r3, [r3, #20]
 8006098:	431a      	orrs	r2, r3
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	699b      	ldr	r3, [r3, #24]
 800609e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80060a2:	431a      	orrs	r2, r3
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	69db      	ldr	r3, [r3, #28]
 80060a8:	431a      	orrs	r2, r3
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	6a1b      	ldr	r3, [r3, #32]
 80060ae:	ea42 0103 	orr.w	r1, r2, r3
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	681b      	ldr	r3, [r3, #0]
 80060ba:	430a      	orrs	r2, r1
 80060bc:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	699b      	ldr	r3, [r3, #24]
 80060c2:	0c1b      	lsrs	r3, r3, #16
 80060c4:	f003 0104 	and.w	r1, r3, #4
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	681b      	ldr	r3, [r3, #0]
 80060d0:	430a      	orrs	r2, r1
 80060d2:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	681b      	ldr	r3, [r3, #0]
 80060d8:	69da      	ldr	r2, [r3, #28]
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	681b      	ldr	r3, [r3, #0]
 80060de:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80060e2:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	2200      	movs	r2, #0
 80060e8:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	2201      	movs	r2, #1
 80060ee:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80060f2:	2300      	movs	r3, #0
}
 80060f4:	4618      	mov	r0, r3
 80060f6:	3708      	adds	r7, #8
 80060f8:	46bd      	mov	sp, r7
 80060fa:	bd80      	pop	{r7, pc}

080060fc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80060fc:	b580      	push	{r7, lr}
 80060fe:	b082      	sub	sp, #8
 8006100:	af00      	add	r7, sp, #0
 8006102:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	2b00      	cmp	r3, #0
 8006108:	d101      	bne.n	800610e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800610a:	2301      	movs	r3, #1
 800610c:	e01d      	b.n	800614a <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006114:	b2db      	uxtb	r3, r3
 8006116:	2b00      	cmp	r3, #0
 8006118:	d106      	bne.n	8006128 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	2200      	movs	r2, #0
 800611e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006122:	6878      	ldr	r0, [r7, #4]
 8006124:	f7fd fcc8 	bl	8003ab8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	2202      	movs	r2, #2
 800612c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	681a      	ldr	r2, [r3, #0]
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	3304      	adds	r3, #4
 8006138:	4619      	mov	r1, r3
 800613a:	4610      	mov	r0, r2
 800613c:	f000 fe92 	bl	8006e64 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	2201      	movs	r2, #1
 8006144:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006148:	2300      	movs	r3, #0
}
 800614a:	4618      	mov	r0, r3
 800614c:	3708      	adds	r7, #8
 800614e:	46bd      	mov	sp, r7
 8006150:	bd80      	pop	{r7, pc}

08006152 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006152:	b480      	push	{r7}
 8006154:	b085      	sub	sp, #20
 8006156:	af00      	add	r7, sp, #0
 8006158:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	681b      	ldr	r3, [r3, #0]
 800615e:	68da      	ldr	r2, [r3, #12]
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	681b      	ldr	r3, [r3, #0]
 8006164:	f042 0201 	orr.w	r2, r2, #1
 8006168:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	681b      	ldr	r3, [r3, #0]
 800616e:	689b      	ldr	r3, [r3, #8]
 8006170:	f003 0307 	and.w	r3, r3, #7
 8006174:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006176:	68fb      	ldr	r3, [r7, #12]
 8006178:	2b06      	cmp	r3, #6
 800617a:	d007      	beq.n	800618c <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	681b      	ldr	r3, [r3, #0]
 8006180:	681a      	ldr	r2, [r3, #0]
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	681b      	ldr	r3, [r3, #0]
 8006186:	f042 0201 	orr.w	r2, r2, #1
 800618a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800618c:	2300      	movs	r3, #0
}
 800618e:	4618      	mov	r0, r3
 8006190:	3714      	adds	r7, #20
 8006192:	46bd      	mov	sp, r7
 8006194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006198:	4770      	bx	lr

0800619a <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 800619a:	b580      	push	{r7, lr}
 800619c:	b082      	sub	sp, #8
 800619e:	af00      	add	r7, sp, #0
 80061a0:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	2b00      	cmp	r3, #0
 80061a6:	d101      	bne.n	80061ac <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 80061a8:	2301      	movs	r3, #1
 80061aa:	e01d      	b.n	80061e8 <HAL_TIM_OC_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80061b2:	b2db      	uxtb	r3, r3
 80061b4:	2b00      	cmp	r3, #0
 80061b6:	d106      	bne.n	80061c6 <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	2200      	movs	r2, #0
 80061bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 80061c0:	6878      	ldr	r0, [r7, #4]
 80061c2:	f7fd fdfb 	bl	8003dbc <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	2202      	movs	r2, #2
 80061ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	681a      	ldr	r2, [r3, #0]
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	3304      	adds	r3, #4
 80061d6:	4619      	mov	r1, r3
 80061d8:	4610      	mov	r0, r2
 80061da:	f000 fe43 	bl	8006e64 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	2201      	movs	r2, #1
 80061e2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80061e6:	2300      	movs	r3, #0
}
 80061e8:	4618      	mov	r0, r3
 80061ea:	3708      	adds	r7, #8
 80061ec:	46bd      	mov	sp, r7
 80061ee:	bd80      	pop	{r7, pc}

080061f0 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80061f0:	b580      	push	{r7, lr}
 80061f2:	b082      	sub	sp, #8
 80061f4:	af00      	add	r7, sp, #0
 80061f6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	2b00      	cmp	r3, #0
 80061fc:	d101      	bne.n	8006202 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80061fe:	2301      	movs	r3, #1
 8006200:	e01d      	b.n	800623e <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006208:	b2db      	uxtb	r3, r3
 800620a:	2b00      	cmp	r3, #0
 800620c:	d106      	bne.n	800621c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	2200      	movs	r2, #0
 8006212:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8006216:	6878      	ldr	r0, [r7, #4]
 8006218:	f000 f815 	bl	8006246 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	2202      	movs	r2, #2
 8006220:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	681a      	ldr	r2, [r3, #0]
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	3304      	adds	r3, #4
 800622c:	4619      	mov	r1, r3
 800622e:	4610      	mov	r0, r2
 8006230:	f000 fe18 	bl	8006e64 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	2201      	movs	r2, #1
 8006238:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800623c:	2300      	movs	r3, #0
}
 800623e:	4618      	mov	r0, r3
 8006240:	3708      	adds	r7, #8
 8006242:	46bd      	mov	sp, r7
 8006244:	bd80      	pop	{r7, pc}

08006246 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8006246:	b480      	push	{r7}
 8006248:	b083      	sub	sp, #12
 800624a:	af00      	add	r7, sp, #0
 800624c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800624e:	bf00      	nop
 8006250:	370c      	adds	r7, #12
 8006252:	46bd      	mov	sp, r7
 8006254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006258:	4770      	bx	lr
	...

0800625c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800625c:	b580      	push	{r7, lr}
 800625e:	b084      	sub	sp, #16
 8006260:	af00      	add	r7, sp, #0
 8006262:	6078      	str	r0, [r7, #4]
 8006264:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	681b      	ldr	r3, [r3, #0]
 800626a:	2201      	movs	r2, #1
 800626c:	6839      	ldr	r1, [r7, #0]
 800626e:	4618      	mov	r0, r3
 8006270:	f001 fa0c 	bl	800768c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	681b      	ldr	r3, [r3, #0]
 8006278:	4a15      	ldr	r2, [pc, #84]	; (80062d0 <HAL_TIM_PWM_Start+0x74>)
 800627a:	4293      	cmp	r3, r2
 800627c:	d004      	beq.n	8006288 <HAL_TIM_PWM_Start+0x2c>
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	681b      	ldr	r3, [r3, #0]
 8006282:	4a14      	ldr	r2, [pc, #80]	; (80062d4 <HAL_TIM_PWM_Start+0x78>)
 8006284:	4293      	cmp	r3, r2
 8006286:	d101      	bne.n	800628c <HAL_TIM_PWM_Start+0x30>
 8006288:	2301      	movs	r3, #1
 800628a:	e000      	b.n	800628e <HAL_TIM_PWM_Start+0x32>
 800628c:	2300      	movs	r3, #0
 800628e:	2b00      	cmp	r3, #0
 8006290:	d007      	beq.n	80062a2 <HAL_TIM_PWM_Start+0x46>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	681b      	ldr	r3, [r3, #0]
 8006296:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	681b      	ldr	r3, [r3, #0]
 800629c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80062a0:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	681b      	ldr	r3, [r3, #0]
 80062a6:	689b      	ldr	r3, [r3, #8]
 80062a8:	f003 0307 	and.w	r3, r3, #7
 80062ac:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80062ae:	68fb      	ldr	r3, [r7, #12]
 80062b0:	2b06      	cmp	r3, #6
 80062b2:	d007      	beq.n	80062c4 <HAL_TIM_PWM_Start+0x68>
  {
    __HAL_TIM_ENABLE(htim);
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	681b      	ldr	r3, [r3, #0]
 80062b8:	681a      	ldr	r2, [r3, #0]
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	681b      	ldr	r3, [r3, #0]
 80062be:	f042 0201 	orr.w	r2, r2, #1
 80062c2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80062c4:	2300      	movs	r3, #0
}
 80062c6:	4618      	mov	r0, r3
 80062c8:	3710      	adds	r7, #16
 80062ca:	46bd      	mov	sp, r7
 80062cc:	bd80      	pop	{r7, pc}
 80062ce:	bf00      	nop
 80062d0:	40010000 	.word	0x40010000
 80062d4:	40010400 	.word	0x40010400

080062d8 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 80062d8:	b580      	push	{r7, lr}
 80062da:	b082      	sub	sp, #8
 80062dc:	af00      	add	r7, sp, #0
 80062de:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	2b00      	cmp	r3, #0
 80062e4:	d101      	bne.n	80062ea <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 80062e6:	2301      	movs	r3, #1
 80062e8:	e01d      	b.n	8006326 <HAL_TIM_IC_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80062f0:	b2db      	uxtb	r3, r3
 80062f2:	2b00      	cmp	r3, #0
 80062f4:	d106      	bne.n	8006304 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	2200      	movs	r2, #0
 80062fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 80062fe:	6878      	ldr	r0, [r7, #4]
 8006300:	f000 f815 	bl	800632e <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	2202      	movs	r2, #2
 8006308:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	681a      	ldr	r2, [r3, #0]
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	3304      	adds	r3, #4
 8006314:	4619      	mov	r1, r3
 8006316:	4610      	mov	r0, r2
 8006318:	f000 fda4 	bl	8006e64 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	2201      	movs	r2, #1
 8006320:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006324:	2300      	movs	r3, #0
}
 8006326:	4618      	mov	r0, r3
 8006328:	3708      	adds	r7, #8
 800632a:	46bd      	mov	sp, r7
 800632c:	bd80      	pop	{r7, pc}

0800632e <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 800632e:	b480      	push	{r7}
 8006330:	b083      	sub	sp, #12
 8006332:	af00      	add	r7, sp, #0
 8006334:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 8006336:	bf00      	nop
 8006338:	370c      	adds	r7, #12
 800633a:	46bd      	mov	sp, r7
 800633c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006340:	4770      	bx	lr
	...

08006344 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006344:	b580      	push	{r7, lr}
 8006346:	b084      	sub	sp, #16
 8006348:	af00      	add	r7, sp, #0
 800634a:	6078      	str	r0, [r7, #4]
 800634c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 800634e:	683b      	ldr	r3, [r7, #0]
 8006350:	2b0c      	cmp	r3, #12
 8006352:	d841      	bhi.n	80063d8 <HAL_TIM_IC_Start_IT+0x94>
 8006354:	a201      	add	r2, pc, #4	; (adr r2, 800635c <HAL_TIM_IC_Start_IT+0x18>)
 8006356:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800635a:	bf00      	nop
 800635c:	08006391 	.word	0x08006391
 8006360:	080063d9 	.word	0x080063d9
 8006364:	080063d9 	.word	0x080063d9
 8006368:	080063d9 	.word	0x080063d9
 800636c:	080063a3 	.word	0x080063a3
 8006370:	080063d9 	.word	0x080063d9
 8006374:	080063d9 	.word	0x080063d9
 8006378:	080063d9 	.word	0x080063d9
 800637c:	080063b5 	.word	0x080063b5
 8006380:	080063d9 	.word	0x080063d9
 8006384:	080063d9 	.word	0x080063d9
 8006388:	080063d9 	.word	0x080063d9
 800638c:	080063c7 	.word	0x080063c7
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	681b      	ldr	r3, [r3, #0]
 8006394:	68da      	ldr	r2, [r3, #12]
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	681b      	ldr	r3, [r3, #0]
 800639a:	f042 0202 	orr.w	r2, r2, #2
 800639e:	60da      	str	r2, [r3, #12]
      break;
 80063a0:	e01b      	b.n	80063da <HAL_TIM_IC_Start_IT+0x96>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	681b      	ldr	r3, [r3, #0]
 80063a6:	68da      	ldr	r2, [r3, #12]
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	681b      	ldr	r3, [r3, #0]
 80063ac:	f042 0204 	orr.w	r2, r2, #4
 80063b0:	60da      	str	r2, [r3, #12]
      break;
 80063b2:	e012      	b.n	80063da <HAL_TIM_IC_Start_IT+0x96>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	681b      	ldr	r3, [r3, #0]
 80063b8:	68da      	ldr	r2, [r3, #12]
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	681b      	ldr	r3, [r3, #0]
 80063be:	f042 0208 	orr.w	r2, r2, #8
 80063c2:	60da      	str	r2, [r3, #12]
      break;
 80063c4:	e009      	b.n	80063da <HAL_TIM_IC_Start_IT+0x96>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	681b      	ldr	r3, [r3, #0]
 80063ca:	68da      	ldr	r2, [r3, #12]
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	681b      	ldr	r3, [r3, #0]
 80063d0:	f042 0210 	orr.w	r2, r2, #16
 80063d4:	60da      	str	r2, [r3, #12]
      break;
 80063d6:	e000      	b.n	80063da <HAL_TIM_IC_Start_IT+0x96>
    }

    default:
      break;
 80063d8:	bf00      	nop
  }
  /* Enable the Input Capture channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	681b      	ldr	r3, [r3, #0]
 80063de:	2201      	movs	r2, #1
 80063e0:	6839      	ldr	r1, [r7, #0]
 80063e2:	4618      	mov	r0, r3
 80063e4:	f001 f952 	bl	800768c <TIM_CCxChannelCmd>

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	681b      	ldr	r3, [r3, #0]
 80063ec:	689b      	ldr	r3, [r3, #8]
 80063ee:	f003 0307 	and.w	r3, r3, #7
 80063f2:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80063f4:	68fb      	ldr	r3, [r7, #12]
 80063f6:	2b06      	cmp	r3, #6
 80063f8:	d007      	beq.n	800640a <HAL_TIM_IC_Start_IT+0xc6>
  {
    __HAL_TIM_ENABLE(htim);
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	681b      	ldr	r3, [r3, #0]
 80063fe:	681a      	ldr	r2, [r3, #0]
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	681b      	ldr	r3, [r3, #0]
 8006404:	f042 0201 	orr.w	r2, r2, #1
 8006408:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800640a:	2300      	movs	r3, #0
}
 800640c:	4618      	mov	r0, r3
 800640e:	3710      	adds	r7, #16
 8006410:	46bd      	mov	sp, r7
 8006412:	bd80      	pop	{r7, pc}

08006414 <HAL_TIM_IC_Stop_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Stop_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006414:	b580      	push	{r7, lr}
 8006416:	b082      	sub	sp, #8
 8006418:	af00      	add	r7, sp, #0
 800641a:	6078      	str	r0, [r7, #4]
 800641c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 800641e:	683b      	ldr	r3, [r7, #0]
 8006420:	2b0c      	cmp	r3, #12
 8006422:	d841      	bhi.n	80064a8 <HAL_TIM_IC_Stop_IT+0x94>
 8006424:	a201      	add	r2, pc, #4	; (adr r2, 800642c <HAL_TIM_IC_Stop_IT+0x18>)
 8006426:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800642a:	bf00      	nop
 800642c:	08006461 	.word	0x08006461
 8006430:	080064a9 	.word	0x080064a9
 8006434:	080064a9 	.word	0x080064a9
 8006438:	080064a9 	.word	0x080064a9
 800643c:	08006473 	.word	0x08006473
 8006440:	080064a9 	.word	0x080064a9
 8006444:	080064a9 	.word	0x080064a9
 8006448:	080064a9 	.word	0x080064a9
 800644c:	08006485 	.word	0x08006485
 8006450:	080064a9 	.word	0x080064a9
 8006454:	080064a9 	.word	0x080064a9
 8006458:	080064a9 	.word	0x080064a9
 800645c:	08006497 	.word	0x08006497
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	681b      	ldr	r3, [r3, #0]
 8006464:	68da      	ldr	r2, [r3, #12]
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	681b      	ldr	r3, [r3, #0]
 800646a:	f022 0202 	bic.w	r2, r2, #2
 800646e:	60da      	str	r2, [r3, #12]
      break;
 8006470:	e01b      	b.n	80064aa <HAL_TIM_IC_Stop_IT+0x96>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	681b      	ldr	r3, [r3, #0]
 8006476:	68da      	ldr	r2, [r3, #12]
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	681b      	ldr	r3, [r3, #0]
 800647c:	f022 0204 	bic.w	r2, r2, #4
 8006480:	60da      	str	r2, [r3, #12]
      break;
 8006482:	e012      	b.n	80064aa <HAL_TIM_IC_Stop_IT+0x96>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC3);
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	681b      	ldr	r3, [r3, #0]
 8006488:	68da      	ldr	r2, [r3, #12]
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	681b      	ldr	r3, [r3, #0]
 800648e:	f022 0208 	bic.w	r2, r2, #8
 8006492:	60da      	str	r2, [r3, #12]
      break;
 8006494:	e009      	b.n	80064aa <HAL_TIM_IC_Stop_IT+0x96>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC4);
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	681b      	ldr	r3, [r3, #0]
 800649a:	68da      	ldr	r2, [r3, #12]
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	681b      	ldr	r3, [r3, #0]
 80064a0:	f022 0210 	bic.w	r2, r2, #16
 80064a4:	60da      	str	r2, [r3, #12]
      break;
 80064a6:	e000      	b.n	80064aa <HAL_TIM_IC_Stop_IT+0x96>
    }

    default:
      break;
 80064a8:	bf00      	nop
  }

  /* Disable the Input Capture channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	681b      	ldr	r3, [r3, #0]
 80064ae:	2200      	movs	r2, #0
 80064b0:	6839      	ldr	r1, [r7, #0]
 80064b2:	4618      	mov	r0, r3
 80064b4:	f001 f8ea 	bl	800768c <TIM_CCxChannelCmd>

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	681b      	ldr	r3, [r3, #0]
 80064bc:	6a1a      	ldr	r2, [r3, #32]
 80064be:	f241 1311 	movw	r3, #4369	; 0x1111
 80064c2:	4013      	ands	r3, r2
 80064c4:	2b00      	cmp	r3, #0
 80064c6:	d10f      	bne.n	80064e8 <HAL_TIM_IC_Stop_IT+0xd4>
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	681b      	ldr	r3, [r3, #0]
 80064cc:	6a1a      	ldr	r2, [r3, #32]
 80064ce:	f240 4344 	movw	r3, #1092	; 0x444
 80064d2:	4013      	ands	r3, r2
 80064d4:	2b00      	cmp	r3, #0
 80064d6:	d107      	bne.n	80064e8 <HAL_TIM_IC_Stop_IT+0xd4>
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	681b      	ldr	r3, [r3, #0]
 80064dc:	681a      	ldr	r2, [r3, #0]
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	681b      	ldr	r3, [r3, #0]
 80064e2:	f022 0201 	bic.w	r2, r2, #1
 80064e6:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 80064e8:	2300      	movs	r3, #0
}
 80064ea:	4618      	mov	r0, r3
 80064ec:	3708      	adds	r7, #8
 80064ee:	46bd      	mov	sp, r7
 80064f0:	bd80      	pop	{r7, pc}
 80064f2:	bf00      	nop

080064f4 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 80064f4:	b580      	push	{r7, lr}
 80064f6:	b086      	sub	sp, #24
 80064f8:	af00      	add	r7, sp, #0
 80064fa:	6078      	str	r0, [r7, #4]
 80064fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	2b00      	cmp	r3, #0
 8006502:	d101      	bne.n	8006508 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8006504:	2301      	movs	r3, #1
 8006506:	e083      	b.n	8006610 <HAL_TIM_Encoder_Init+0x11c>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800650e:	b2db      	uxtb	r3, r3
 8006510:	2b00      	cmp	r3, #0
 8006512:	d106      	bne.n	8006522 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	2200      	movs	r2, #0
 8006518:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 800651c:	6878      	ldr	r0, [r7, #4]
 800651e:	f7fd fbcf 	bl	8003cc0 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	2202      	movs	r2, #2
 8006526:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	681b      	ldr	r3, [r3, #0]
 800652e:	689b      	ldr	r3, [r3, #8]
 8006530:	687a      	ldr	r2, [r7, #4]
 8006532:	6812      	ldr	r2, [r2, #0]
 8006534:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006538:	f023 0307 	bic.w	r3, r3, #7
 800653c:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	681a      	ldr	r2, [r3, #0]
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	3304      	adds	r3, #4
 8006546:	4619      	mov	r1, r3
 8006548:	4610      	mov	r0, r2
 800654a:	f000 fc8b 	bl	8006e64 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	681b      	ldr	r3, [r3, #0]
 8006552:	689b      	ldr	r3, [r3, #8]
 8006554:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	681b      	ldr	r3, [r3, #0]
 800655a:	699b      	ldr	r3, [r3, #24]
 800655c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	681b      	ldr	r3, [r3, #0]
 8006562:	6a1b      	ldr	r3, [r3, #32]
 8006564:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8006566:	683b      	ldr	r3, [r7, #0]
 8006568:	681b      	ldr	r3, [r3, #0]
 800656a:	697a      	ldr	r2, [r7, #20]
 800656c:	4313      	orrs	r3, r2
 800656e:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8006570:	693b      	ldr	r3, [r7, #16]
 8006572:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006576:	f023 0303 	bic.w	r3, r3, #3
 800657a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 800657c:	683b      	ldr	r3, [r7, #0]
 800657e:	689a      	ldr	r2, [r3, #8]
 8006580:	683b      	ldr	r3, [r7, #0]
 8006582:	699b      	ldr	r3, [r3, #24]
 8006584:	021b      	lsls	r3, r3, #8
 8006586:	4313      	orrs	r3, r2
 8006588:	693a      	ldr	r2, [r7, #16]
 800658a:	4313      	orrs	r3, r2
 800658c:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 800658e:	693b      	ldr	r3, [r7, #16]
 8006590:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8006594:	f023 030c 	bic.w	r3, r3, #12
 8006598:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800659a:	693b      	ldr	r3, [r7, #16]
 800659c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80065a0:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80065a4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 80065a6:	683b      	ldr	r3, [r7, #0]
 80065a8:	68da      	ldr	r2, [r3, #12]
 80065aa:	683b      	ldr	r3, [r7, #0]
 80065ac:	69db      	ldr	r3, [r3, #28]
 80065ae:	021b      	lsls	r3, r3, #8
 80065b0:	4313      	orrs	r3, r2
 80065b2:	693a      	ldr	r2, [r7, #16]
 80065b4:	4313      	orrs	r3, r2
 80065b6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 80065b8:	683b      	ldr	r3, [r7, #0]
 80065ba:	691b      	ldr	r3, [r3, #16]
 80065bc:	011a      	lsls	r2, r3, #4
 80065be:	683b      	ldr	r3, [r7, #0]
 80065c0:	6a1b      	ldr	r3, [r3, #32]
 80065c2:	031b      	lsls	r3, r3, #12
 80065c4:	4313      	orrs	r3, r2
 80065c6:	693a      	ldr	r2, [r7, #16]
 80065c8:	4313      	orrs	r3, r2
 80065ca:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 80065cc:	68fb      	ldr	r3, [r7, #12]
 80065ce:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 80065d2:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 80065d4:	68fb      	ldr	r3, [r7, #12]
 80065d6:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 80065da:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 80065dc:	683b      	ldr	r3, [r7, #0]
 80065de:	685a      	ldr	r2, [r3, #4]
 80065e0:	683b      	ldr	r3, [r7, #0]
 80065e2:	695b      	ldr	r3, [r3, #20]
 80065e4:	011b      	lsls	r3, r3, #4
 80065e6:	4313      	orrs	r3, r2
 80065e8:	68fa      	ldr	r2, [r7, #12]
 80065ea:	4313      	orrs	r3, r2
 80065ec:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	681b      	ldr	r3, [r3, #0]
 80065f2:	697a      	ldr	r2, [r7, #20]
 80065f4:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	681b      	ldr	r3, [r3, #0]
 80065fa:	693a      	ldr	r2, [r7, #16]
 80065fc:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	681b      	ldr	r3, [r3, #0]
 8006602:	68fa      	ldr	r2, [r7, #12]
 8006604:	621a      	str	r2, [r3, #32]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	2201      	movs	r2, #1
 800660a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800660e:	2300      	movs	r3, #0
}
 8006610:	4618      	mov	r0, r3
 8006612:	3718      	adds	r7, #24
 8006614:	46bd      	mov	sp, r7
 8006616:	bd80      	pop	{r7, pc}

08006618 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006618:	b580      	push	{r7, lr}
 800661a:	b082      	sub	sp, #8
 800661c:	af00      	add	r7, sp, #0
 800661e:	6078      	str	r0, [r7, #4]
 8006620:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

  /* Enable the encoder interface channels */
  switch (Channel)
 8006622:	683b      	ldr	r3, [r7, #0]
 8006624:	2b00      	cmp	r3, #0
 8006626:	d002      	beq.n	800662e <HAL_TIM_Encoder_Start+0x16>
 8006628:	2b04      	cmp	r3, #4
 800662a:	d008      	beq.n	800663e <HAL_TIM_Encoder_Start+0x26>
 800662c:	e00f      	b.n	800664e <HAL_TIM_Encoder_Start+0x36>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	681b      	ldr	r3, [r3, #0]
 8006632:	2201      	movs	r2, #1
 8006634:	2100      	movs	r1, #0
 8006636:	4618      	mov	r0, r3
 8006638:	f001 f828 	bl	800768c <TIM_CCxChannelCmd>
      break;
 800663c:	e016      	b.n	800666c <HAL_TIM_Encoder_Start+0x54>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	681b      	ldr	r3, [r3, #0]
 8006642:	2201      	movs	r2, #1
 8006644:	2104      	movs	r1, #4
 8006646:	4618      	mov	r0, r3
 8006648:	f001 f820 	bl	800768c <TIM_CCxChannelCmd>
      break;
 800664c:	e00e      	b.n	800666c <HAL_TIM_Encoder_Start+0x54>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	681b      	ldr	r3, [r3, #0]
 8006652:	2201      	movs	r2, #1
 8006654:	2100      	movs	r1, #0
 8006656:	4618      	mov	r0, r3
 8006658:	f001 f818 	bl	800768c <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	681b      	ldr	r3, [r3, #0]
 8006660:	2201      	movs	r2, #1
 8006662:	2104      	movs	r1, #4
 8006664:	4618      	mov	r0, r3
 8006666:	f001 f811 	bl	800768c <TIM_CCxChannelCmd>
      break;
 800666a:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	681b      	ldr	r3, [r3, #0]
 8006670:	681a      	ldr	r2, [r3, #0]
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	681b      	ldr	r3, [r3, #0]
 8006676:	f042 0201 	orr.w	r2, r2, #1
 800667a:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800667c:	2300      	movs	r3, #0
}
 800667e:	4618      	mov	r0, r3
 8006680:	3708      	adds	r7, #8
 8006682:	46bd      	mov	sp, r7
 8006684:	bd80      	pop	{r7, pc}

08006686 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006686:	b580      	push	{r7, lr}
 8006688:	b082      	sub	sp, #8
 800668a:	af00      	add	r7, sp, #0
 800668c:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	681b      	ldr	r3, [r3, #0]
 8006692:	691b      	ldr	r3, [r3, #16]
 8006694:	f003 0302 	and.w	r3, r3, #2
 8006698:	2b02      	cmp	r3, #2
 800669a:	d122      	bne.n	80066e2 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	681b      	ldr	r3, [r3, #0]
 80066a0:	68db      	ldr	r3, [r3, #12]
 80066a2:	f003 0302 	and.w	r3, r3, #2
 80066a6:	2b02      	cmp	r3, #2
 80066a8:	d11b      	bne.n	80066e2 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	681b      	ldr	r3, [r3, #0]
 80066ae:	f06f 0202 	mvn.w	r2, #2
 80066b2:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	2201      	movs	r2, #1
 80066b8:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	681b      	ldr	r3, [r3, #0]
 80066be:	699b      	ldr	r3, [r3, #24]
 80066c0:	f003 0303 	and.w	r3, r3, #3
 80066c4:	2b00      	cmp	r3, #0
 80066c6:	d003      	beq.n	80066d0 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80066c8:	6878      	ldr	r0, [r7, #4]
 80066ca:	f7fb fcc5 	bl	8002058 <HAL_TIM_IC_CaptureCallback>
 80066ce:	e005      	b.n	80066dc <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80066d0:	6878      	ldr	r0, [r7, #4]
 80066d2:	f000 fba9 	bl	8006e28 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80066d6:	6878      	ldr	r0, [r7, #4]
 80066d8:	f000 fbb0 	bl	8006e3c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	2200      	movs	r2, #0
 80066e0:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	681b      	ldr	r3, [r3, #0]
 80066e6:	691b      	ldr	r3, [r3, #16]
 80066e8:	f003 0304 	and.w	r3, r3, #4
 80066ec:	2b04      	cmp	r3, #4
 80066ee:	d122      	bne.n	8006736 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	681b      	ldr	r3, [r3, #0]
 80066f4:	68db      	ldr	r3, [r3, #12]
 80066f6:	f003 0304 	and.w	r3, r3, #4
 80066fa:	2b04      	cmp	r3, #4
 80066fc:	d11b      	bne.n	8006736 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	681b      	ldr	r3, [r3, #0]
 8006702:	f06f 0204 	mvn.w	r2, #4
 8006706:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	2202      	movs	r2, #2
 800670c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	681b      	ldr	r3, [r3, #0]
 8006712:	699b      	ldr	r3, [r3, #24]
 8006714:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006718:	2b00      	cmp	r3, #0
 800671a:	d003      	beq.n	8006724 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800671c:	6878      	ldr	r0, [r7, #4]
 800671e:	f7fb fc9b 	bl	8002058 <HAL_TIM_IC_CaptureCallback>
 8006722:	e005      	b.n	8006730 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006724:	6878      	ldr	r0, [r7, #4]
 8006726:	f000 fb7f 	bl	8006e28 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800672a:	6878      	ldr	r0, [r7, #4]
 800672c:	f000 fb86 	bl	8006e3c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	2200      	movs	r2, #0
 8006734:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	681b      	ldr	r3, [r3, #0]
 800673a:	691b      	ldr	r3, [r3, #16]
 800673c:	f003 0308 	and.w	r3, r3, #8
 8006740:	2b08      	cmp	r3, #8
 8006742:	d122      	bne.n	800678a <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	681b      	ldr	r3, [r3, #0]
 8006748:	68db      	ldr	r3, [r3, #12]
 800674a:	f003 0308 	and.w	r3, r3, #8
 800674e:	2b08      	cmp	r3, #8
 8006750:	d11b      	bne.n	800678a <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	681b      	ldr	r3, [r3, #0]
 8006756:	f06f 0208 	mvn.w	r2, #8
 800675a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	2204      	movs	r2, #4
 8006760:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	681b      	ldr	r3, [r3, #0]
 8006766:	69db      	ldr	r3, [r3, #28]
 8006768:	f003 0303 	and.w	r3, r3, #3
 800676c:	2b00      	cmp	r3, #0
 800676e:	d003      	beq.n	8006778 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006770:	6878      	ldr	r0, [r7, #4]
 8006772:	f7fb fc71 	bl	8002058 <HAL_TIM_IC_CaptureCallback>
 8006776:	e005      	b.n	8006784 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006778:	6878      	ldr	r0, [r7, #4]
 800677a:	f000 fb55 	bl	8006e28 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800677e:	6878      	ldr	r0, [r7, #4]
 8006780:	f000 fb5c 	bl	8006e3c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	2200      	movs	r2, #0
 8006788:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	681b      	ldr	r3, [r3, #0]
 800678e:	691b      	ldr	r3, [r3, #16]
 8006790:	f003 0310 	and.w	r3, r3, #16
 8006794:	2b10      	cmp	r3, #16
 8006796:	d122      	bne.n	80067de <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	681b      	ldr	r3, [r3, #0]
 800679c:	68db      	ldr	r3, [r3, #12]
 800679e:	f003 0310 	and.w	r3, r3, #16
 80067a2:	2b10      	cmp	r3, #16
 80067a4:	d11b      	bne.n	80067de <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	681b      	ldr	r3, [r3, #0]
 80067aa:	f06f 0210 	mvn.w	r2, #16
 80067ae:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	2208      	movs	r2, #8
 80067b4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	681b      	ldr	r3, [r3, #0]
 80067ba:	69db      	ldr	r3, [r3, #28]
 80067bc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80067c0:	2b00      	cmp	r3, #0
 80067c2:	d003      	beq.n	80067cc <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80067c4:	6878      	ldr	r0, [r7, #4]
 80067c6:	f7fb fc47 	bl	8002058 <HAL_TIM_IC_CaptureCallback>
 80067ca:	e005      	b.n	80067d8 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80067cc:	6878      	ldr	r0, [r7, #4]
 80067ce:	f000 fb2b 	bl	8006e28 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80067d2:	6878      	ldr	r0, [r7, #4]
 80067d4:	f000 fb32 	bl	8006e3c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	2200      	movs	r2, #0
 80067dc:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	681b      	ldr	r3, [r3, #0]
 80067e2:	691b      	ldr	r3, [r3, #16]
 80067e4:	f003 0301 	and.w	r3, r3, #1
 80067e8:	2b01      	cmp	r3, #1
 80067ea:	d10e      	bne.n	800680a <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	681b      	ldr	r3, [r3, #0]
 80067f0:	68db      	ldr	r3, [r3, #12]
 80067f2:	f003 0301 	and.w	r3, r3, #1
 80067f6:	2b01      	cmp	r3, #1
 80067f8:	d107      	bne.n	800680a <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	681b      	ldr	r3, [r3, #0]
 80067fe:	f06f 0201 	mvn.w	r2, #1
 8006802:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006804:	6878      	ldr	r0, [r7, #4]
 8006806:	f000 fb05 	bl	8006e14 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	681b      	ldr	r3, [r3, #0]
 800680e:	691b      	ldr	r3, [r3, #16]
 8006810:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006814:	2b80      	cmp	r3, #128	; 0x80
 8006816:	d10e      	bne.n	8006836 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	681b      	ldr	r3, [r3, #0]
 800681c:	68db      	ldr	r3, [r3, #12]
 800681e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006822:	2b80      	cmp	r3, #128	; 0x80
 8006824:	d107      	bne.n	8006836 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	681b      	ldr	r3, [r3, #0]
 800682a:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800682e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006830:	6878      	ldr	r0, [r7, #4]
 8006832:	f001 f829 	bl	8007888 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	681b      	ldr	r3, [r3, #0]
 800683a:	691b      	ldr	r3, [r3, #16]
 800683c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006840:	2b40      	cmp	r3, #64	; 0x40
 8006842:	d10e      	bne.n	8006862 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	681b      	ldr	r3, [r3, #0]
 8006848:	68db      	ldr	r3, [r3, #12]
 800684a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800684e:	2b40      	cmp	r3, #64	; 0x40
 8006850:	d107      	bne.n	8006862 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	681b      	ldr	r3, [r3, #0]
 8006856:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800685a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800685c:	6878      	ldr	r0, [r7, #4]
 800685e:	f000 faf7 	bl	8006e50 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	681b      	ldr	r3, [r3, #0]
 8006866:	691b      	ldr	r3, [r3, #16]
 8006868:	f003 0320 	and.w	r3, r3, #32
 800686c:	2b20      	cmp	r3, #32
 800686e:	d10e      	bne.n	800688e <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	681b      	ldr	r3, [r3, #0]
 8006874:	68db      	ldr	r3, [r3, #12]
 8006876:	f003 0320 	and.w	r3, r3, #32
 800687a:	2b20      	cmp	r3, #32
 800687c:	d107      	bne.n	800688e <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	681b      	ldr	r3, [r3, #0]
 8006882:	f06f 0220 	mvn.w	r2, #32
 8006886:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006888:	6878      	ldr	r0, [r7, #4]
 800688a:	f000 fff3 	bl	8007874 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800688e:	bf00      	nop
 8006890:	3708      	adds	r7, #8
 8006892:	46bd      	mov	sp, r7
 8006894:	bd80      	pop	{r7, pc}
	...

08006898 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 8006898:	b580      	push	{r7, lr}
 800689a:	b084      	sub	sp, #16
 800689c:	af00      	add	r7, sp, #0
 800689e:	60f8      	str	r0, [r7, #12]
 80068a0:	60b9      	str	r1, [r7, #8]
 80068a2:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 80068a4:	68fb      	ldr	r3, [r7, #12]
 80068a6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80068aa:	2b01      	cmp	r3, #1
 80068ac:	d101      	bne.n	80068b2 <HAL_TIM_OC_ConfigChannel+0x1a>
 80068ae:	2302      	movs	r3, #2
 80068b0:	e04e      	b.n	8006950 <HAL_TIM_OC_ConfigChannel+0xb8>
 80068b2:	68fb      	ldr	r3, [r7, #12]
 80068b4:	2201      	movs	r2, #1
 80068b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80068ba:	68fb      	ldr	r3, [r7, #12]
 80068bc:	2202      	movs	r2, #2
 80068be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	2b0c      	cmp	r3, #12
 80068c6:	d839      	bhi.n	800693c <HAL_TIM_OC_ConfigChannel+0xa4>
 80068c8:	a201      	add	r2, pc, #4	; (adr r2, 80068d0 <HAL_TIM_OC_ConfigChannel+0x38>)
 80068ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80068ce:	bf00      	nop
 80068d0:	08006905 	.word	0x08006905
 80068d4:	0800693d 	.word	0x0800693d
 80068d8:	0800693d 	.word	0x0800693d
 80068dc:	0800693d 	.word	0x0800693d
 80068e0:	08006913 	.word	0x08006913
 80068e4:	0800693d 	.word	0x0800693d
 80068e8:	0800693d 	.word	0x0800693d
 80068ec:	0800693d 	.word	0x0800693d
 80068f0:	08006921 	.word	0x08006921
 80068f4:	0800693d 	.word	0x0800693d
 80068f8:	0800693d 	.word	0x0800693d
 80068fc:	0800693d 	.word	0x0800693d
 8006900:	0800692f 	.word	0x0800692f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006904:	68fb      	ldr	r3, [r7, #12]
 8006906:	681b      	ldr	r3, [r3, #0]
 8006908:	68b9      	ldr	r1, [r7, #8]
 800690a:	4618      	mov	r0, r3
 800690c:	f000 fb4a 	bl	8006fa4 <TIM_OC1_SetConfig>
      break;
 8006910:	e015      	b.n	800693e <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006912:	68fb      	ldr	r3, [r7, #12]
 8006914:	681b      	ldr	r3, [r3, #0]
 8006916:	68b9      	ldr	r1, [r7, #8]
 8006918:	4618      	mov	r0, r3
 800691a:	f000 fbb3 	bl	8007084 <TIM_OC2_SetConfig>
      break;
 800691e:	e00e      	b.n	800693e <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8006920:	68fb      	ldr	r3, [r7, #12]
 8006922:	681b      	ldr	r3, [r3, #0]
 8006924:	68b9      	ldr	r1, [r7, #8]
 8006926:	4618      	mov	r0, r3
 8006928:	f000 fc22 	bl	8007170 <TIM_OC3_SetConfig>
      break;
 800692c:	e007      	b.n	800693e <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800692e:	68fb      	ldr	r3, [r7, #12]
 8006930:	681b      	ldr	r3, [r3, #0]
 8006932:	68b9      	ldr	r1, [r7, #8]
 8006934:	4618      	mov	r0, r3
 8006936:	f000 fc8f 	bl	8007258 <TIM_OC4_SetConfig>
      break;
 800693a:	e000      	b.n	800693e <HAL_TIM_OC_ConfigChannel+0xa6>
    }

    default:
      break;
 800693c:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 800693e:	68fb      	ldr	r3, [r7, #12]
 8006940:	2201      	movs	r2, #1
 8006942:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006946:	68fb      	ldr	r3, [r7, #12]
 8006948:	2200      	movs	r2, #0
 800694a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800694e:	2300      	movs	r3, #0
}
 8006950:	4618      	mov	r0, r3
 8006952:	3710      	adds	r7, #16
 8006954:	46bd      	mov	sp, r7
 8006956:	bd80      	pop	{r7, pc}

08006958 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8006958:	b580      	push	{r7, lr}
 800695a:	b084      	sub	sp, #16
 800695c:	af00      	add	r7, sp, #0
 800695e:	60f8      	str	r0, [r7, #12]
 8006960:	60b9      	str	r1, [r7, #8]
 8006962:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006964:	68fb      	ldr	r3, [r7, #12]
 8006966:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800696a:	2b01      	cmp	r3, #1
 800696c:	d101      	bne.n	8006972 <HAL_TIM_IC_ConfigChannel+0x1a>
 800696e:	2302      	movs	r3, #2
 8006970:	e08a      	b.n	8006a88 <HAL_TIM_IC_ConfigChannel+0x130>
 8006972:	68fb      	ldr	r3, [r7, #12]
 8006974:	2201      	movs	r2, #1
 8006976:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800697a:	68fb      	ldr	r3, [r7, #12]
 800697c:	2202      	movs	r2, #2
 800697e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (Channel == TIM_CHANNEL_1)
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	2b00      	cmp	r3, #0
 8006986:	d11b      	bne.n	80069c0 <HAL_TIM_IC_ConfigChannel+0x68>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8006988:	68fb      	ldr	r3, [r7, #12]
 800698a:	6818      	ldr	r0, [r3, #0]
 800698c:	68bb      	ldr	r3, [r7, #8]
 800698e:	6819      	ldr	r1, [r3, #0]
 8006990:	68bb      	ldr	r3, [r7, #8]
 8006992:	685a      	ldr	r2, [r3, #4]
 8006994:	68bb      	ldr	r3, [r7, #8]
 8006996:	68db      	ldr	r3, [r3, #12]
 8006998:	f000 fcb4 	bl	8007304 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 800699c:	68fb      	ldr	r3, [r7, #12]
 800699e:	681b      	ldr	r3, [r3, #0]
 80069a0:	699a      	ldr	r2, [r3, #24]
 80069a2:	68fb      	ldr	r3, [r7, #12]
 80069a4:	681b      	ldr	r3, [r3, #0]
 80069a6:	f022 020c 	bic.w	r2, r2, #12
 80069aa:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 80069ac:	68fb      	ldr	r3, [r7, #12]
 80069ae:	681b      	ldr	r3, [r3, #0]
 80069b0:	6999      	ldr	r1, [r3, #24]
 80069b2:	68bb      	ldr	r3, [r7, #8]
 80069b4:	689a      	ldr	r2, [r3, #8]
 80069b6:	68fb      	ldr	r3, [r7, #12]
 80069b8:	681b      	ldr	r3, [r3, #0]
 80069ba:	430a      	orrs	r2, r1
 80069bc:	619a      	str	r2, [r3, #24]
 80069be:	e05a      	b.n	8006a76 <HAL_TIM_IC_ConfigChannel+0x11e>
  }
  else if (Channel == TIM_CHANNEL_2)
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	2b04      	cmp	r3, #4
 80069c4:	d11c      	bne.n	8006a00 <HAL_TIM_IC_ConfigChannel+0xa8>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 80069c6:	68fb      	ldr	r3, [r7, #12]
 80069c8:	6818      	ldr	r0, [r3, #0]
 80069ca:	68bb      	ldr	r3, [r7, #8]
 80069cc:	6819      	ldr	r1, [r3, #0]
 80069ce:	68bb      	ldr	r3, [r7, #8]
 80069d0:	685a      	ldr	r2, [r3, #4]
 80069d2:	68bb      	ldr	r3, [r7, #8]
 80069d4:	68db      	ldr	r3, [r3, #12]
 80069d6:	f000 fd38 	bl	800744a <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 80069da:	68fb      	ldr	r3, [r7, #12]
 80069dc:	681b      	ldr	r3, [r3, #0]
 80069de:	699a      	ldr	r2, [r3, #24]
 80069e0:	68fb      	ldr	r3, [r7, #12]
 80069e2:	681b      	ldr	r3, [r3, #0]
 80069e4:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 80069e8:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 80069ea:	68fb      	ldr	r3, [r7, #12]
 80069ec:	681b      	ldr	r3, [r3, #0]
 80069ee:	6999      	ldr	r1, [r3, #24]
 80069f0:	68bb      	ldr	r3, [r7, #8]
 80069f2:	689b      	ldr	r3, [r3, #8]
 80069f4:	021a      	lsls	r2, r3, #8
 80069f6:	68fb      	ldr	r3, [r7, #12]
 80069f8:	681b      	ldr	r3, [r3, #0]
 80069fa:	430a      	orrs	r2, r1
 80069fc:	619a      	str	r2, [r3, #24]
 80069fe:	e03a      	b.n	8006a76 <HAL_TIM_IC_ConfigChannel+0x11e>
  }
  else if (Channel == TIM_CHANNEL_3)
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	2b08      	cmp	r3, #8
 8006a04:	d11b      	bne.n	8006a3e <HAL_TIM_IC_ConfigChannel+0xe6>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8006a06:	68fb      	ldr	r3, [r7, #12]
 8006a08:	6818      	ldr	r0, [r3, #0]
 8006a0a:	68bb      	ldr	r3, [r7, #8]
 8006a0c:	6819      	ldr	r1, [r3, #0]
 8006a0e:	68bb      	ldr	r3, [r7, #8]
 8006a10:	685a      	ldr	r2, [r3, #4]
 8006a12:	68bb      	ldr	r3, [r7, #8]
 8006a14:	68db      	ldr	r3, [r3, #12]
 8006a16:	f000 fd85 	bl	8007524 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8006a1a:	68fb      	ldr	r3, [r7, #12]
 8006a1c:	681b      	ldr	r3, [r3, #0]
 8006a1e:	69da      	ldr	r2, [r3, #28]
 8006a20:	68fb      	ldr	r3, [r7, #12]
 8006a22:	681b      	ldr	r3, [r3, #0]
 8006a24:	f022 020c 	bic.w	r2, r2, #12
 8006a28:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8006a2a:	68fb      	ldr	r3, [r7, #12]
 8006a2c:	681b      	ldr	r3, [r3, #0]
 8006a2e:	69d9      	ldr	r1, [r3, #28]
 8006a30:	68bb      	ldr	r3, [r7, #8]
 8006a32:	689a      	ldr	r2, [r3, #8]
 8006a34:	68fb      	ldr	r3, [r7, #12]
 8006a36:	681b      	ldr	r3, [r3, #0]
 8006a38:	430a      	orrs	r2, r1
 8006a3a:	61da      	str	r2, [r3, #28]
 8006a3c:	e01b      	b.n	8006a76 <HAL_TIM_IC_ConfigChannel+0x11e>
  else
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8006a3e:	68fb      	ldr	r3, [r7, #12]
 8006a40:	6818      	ldr	r0, [r3, #0]
 8006a42:	68bb      	ldr	r3, [r7, #8]
 8006a44:	6819      	ldr	r1, [r3, #0]
 8006a46:	68bb      	ldr	r3, [r7, #8]
 8006a48:	685a      	ldr	r2, [r3, #4]
 8006a4a:	68bb      	ldr	r3, [r7, #8]
 8006a4c:	68db      	ldr	r3, [r3, #12]
 8006a4e:	f000 fda5 	bl	800759c <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8006a52:	68fb      	ldr	r3, [r7, #12]
 8006a54:	681b      	ldr	r3, [r3, #0]
 8006a56:	69da      	ldr	r2, [r3, #28]
 8006a58:	68fb      	ldr	r3, [r7, #12]
 8006a5a:	681b      	ldr	r3, [r3, #0]
 8006a5c:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8006a60:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8006a62:	68fb      	ldr	r3, [r7, #12]
 8006a64:	681b      	ldr	r3, [r3, #0]
 8006a66:	69d9      	ldr	r1, [r3, #28]
 8006a68:	68bb      	ldr	r3, [r7, #8]
 8006a6a:	689b      	ldr	r3, [r3, #8]
 8006a6c:	021a      	lsls	r2, r3, #8
 8006a6e:	68fb      	ldr	r3, [r7, #12]
 8006a70:	681b      	ldr	r3, [r3, #0]
 8006a72:	430a      	orrs	r2, r1
 8006a74:	61da      	str	r2, [r3, #28]
  }

  htim->State = HAL_TIM_STATE_READY;
 8006a76:	68fb      	ldr	r3, [r7, #12]
 8006a78:	2201      	movs	r2, #1
 8006a7a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006a7e:	68fb      	ldr	r3, [r7, #12]
 8006a80:	2200      	movs	r2, #0
 8006a82:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006a86:	2300      	movs	r3, #0
}
 8006a88:	4618      	mov	r0, r3
 8006a8a:	3710      	adds	r7, #16
 8006a8c:	46bd      	mov	sp, r7
 8006a8e:	bd80      	pop	{r7, pc}

08006a90 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8006a90:	b580      	push	{r7, lr}
 8006a92:	b084      	sub	sp, #16
 8006a94:	af00      	add	r7, sp, #0
 8006a96:	60f8      	str	r0, [r7, #12]
 8006a98:	60b9      	str	r1, [r7, #8]
 8006a9a:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006a9c:	68fb      	ldr	r3, [r7, #12]
 8006a9e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006aa2:	2b01      	cmp	r3, #1
 8006aa4:	d101      	bne.n	8006aaa <HAL_TIM_PWM_ConfigChannel+0x1a>
 8006aa6:	2302      	movs	r3, #2
 8006aa8:	e0b4      	b.n	8006c14 <HAL_TIM_PWM_ConfigChannel+0x184>
 8006aaa:	68fb      	ldr	r3, [r7, #12]
 8006aac:	2201      	movs	r2, #1
 8006aae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006ab2:	68fb      	ldr	r3, [r7, #12]
 8006ab4:	2202      	movs	r2, #2
 8006ab6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	2b0c      	cmp	r3, #12
 8006abe:	f200 809f 	bhi.w	8006c00 <HAL_TIM_PWM_ConfigChannel+0x170>
 8006ac2:	a201      	add	r2, pc, #4	; (adr r2, 8006ac8 <HAL_TIM_PWM_ConfigChannel+0x38>)
 8006ac4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006ac8:	08006afd 	.word	0x08006afd
 8006acc:	08006c01 	.word	0x08006c01
 8006ad0:	08006c01 	.word	0x08006c01
 8006ad4:	08006c01 	.word	0x08006c01
 8006ad8:	08006b3d 	.word	0x08006b3d
 8006adc:	08006c01 	.word	0x08006c01
 8006ae0:	08006c01 	.word	0x08006c01
 8006ae4:	08006c01 	.word	0x08006c01
 8006ae8:	08006b7f 	.word	0x08006b7f
 8006aec:	08006c01 	.word	0x08006c01
 8006af0:	08006c01 	.word	0x08006c01
 8006af4:	08006c01 	.word	0x08006c01
 8006af8:	08006bbf 	.word	0x08006bbf
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006afc:	68fb      	ldr	r3, [r7, #12]
 8006afe:	681b      	ldr	r3, [r3, #0]
 8006b00:	68b9      	ldr	r1, [r7, #8]
 8006b02:	4618      	mov	r0, r3
 8006b04:	f000 fa4e 	bl	8006fa4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8006b08:	68fb      	ldr	r3, [r7, #12]
 8006b0a:	681b      	ldr	r3, [r3, #0]
 8006b0c:	699a      	ldr	r2, [r3, #24]
 8006b0e:	68fb      	ldr	r3, [r7, #12]
 8006b10:	681b      	ldr	r3, [r3, #0]
 8006b12:	f042 0208 	orr.w	r2, r2, #8
 8006b16:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8006b18:	68fb      	ldr	r3, [r7, #12]
 8006b1a:	681b      	ldr	r3, [r3, #0]
 8006b1c:	699a      	ldr	r2, [r3, #24]
 8006b1e:	68fb      	ldr	r3, [r7, #12]
 8006b20:	681b      	ldr	r3, [r3, #0]
 8006b22:	f022 0204 	bic.w	r2, r2, #4
 8006b26:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8006b28:	68fb      	ldr	r3, [r7, #12]
 8006b2a:	681b      	ldr	r3, [r3, #0]
 8006b2c:	6999      	ldr	r1, [r3, #24]
 8006b2e:	68bb      	ldr	r3, [r7, #8]
 8006b30:	691a      	ldr	r2, [r3, #16]
 8006b32:	68fb      	ldr	r3, [r7, #12]
 8006b34:	681b      	ldr	r3, [r3, #0]
 8006b36:	430a      	orrs	r2, r1
 8006b38:	619a      	str	r2, [r3, #24]
      break;
 8006b3a:	e062      	b.n	8006c02 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006b3c:	68fb      	ldr	r3, [r7, #12]
 8006b3e:	681b      	ldr	r3, [r3, #0]
 8006b40:	68b9      	ldr	r1, [r7, #8]
 8006b42:	4618      	mov	r0, r3
 8006b44:	f000 fa9e 	bl	8007084 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006b48:	68fb      	ldr	r3, [r7, #12]
 8006b4a:	681b      	ldr	r3, [r3, #0]
 8006b4c:	699a      	ldr	r2, [r3, #24]
 8006b4e:	68fb      	ldr	r3, [r7, #12]
 8006b50:	681b      	ldr	r3, [r3, #0]
 8006b52:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006b56:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8006b58:	68fb      	ldr	r3, [r7, #12]
 8006b5a:	681b      	ldr	r3, [r3, #0]
 8006b5c:	699a      	ldr	r2, [r3, #24]
 8006b5e:	68fb      	ldr	r3, [r7, #12]
 8006b60:	681b      	ldr	r3, [r3, #0]
 8006b62:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006b66:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006b68:	68fb      	ldr	r3, [r7, #12]
 8006b6a:	681b      	ldr	r3, [r3, #0]
 8006b6c:	6999      	ldr	r1, [r3, #24]
 8006b6e:	68bb      	ldr	r3, [r7, #8]
 8006b70:	691b      	ldr	r3, [r3, #16]
 8006b72:	021a      	lsls	r2, r3, #8
 8006b74:	68fb      	ldr	r3, [r7, #12]
 8006b76:	681b      	ldr	r3, [r3, #0]
 8006b78:	430a      	orrs	r2, r1
 8006b7a:	619a      	str	r2, [r3, #24]
      break;
 8006b7c:	e041      	b.n	8006c02 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8006b7e:	68fb      	ldr	r3, [r7, #12]
 8006b80:	681b      	ldr	r3, [r3, #0]
 8006b82:	68b9      	ldr	r1, [r7, #8]
 8006b84:	4618      	mov	r0, r3
 8006b86:	f000 faf3 	bl	8007170 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8006b8a:	68fb      	ldr	r3, [r7, #12]
 8006b8c:	681b      	ldr	r3, [r3, #0]
 8006b8e:	69da      	ldr	r2, [r3, #28]
 8006b90:	68fb      	ldr	r3, [r7, #12]
 8006b92:	681b      	ldr	r3, [r3, #0]
 8006b94:	f042 0208 	orr.w	r2, r2, #8
 8006b98:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8006b9a:	68fb      	ldr	r3, [r7, #12]
 8006b9c:	681b      	ldr	r3, [r3, #0]
 8006b9e:	69da      	ldr	r2, [r3, #28]
 8006ba0:	68fb      	ldr	r3, [r7, #12]
 8006ba2:	681b      	ldr	r3, [r3, #0]
 8006ba4:	f022 0204 	bic.w	r2, r2, #4
 8006ba8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8006baa:	68fb      	ldr	r3, [r7, #12]
 8006bac:	681b      	ldr	r3, [r3, #0]
 8006bae:	69d9      	ldr	r1, [r3, #28]
 8006bb0:	68bb      	ldr	r3, [r7, #8]
 8006bb2:	691a      	ldr	r2, [r3, #16]
 8006bb4:	68fb      	ldr	r3, [r7, #12]
 8006bb6:	681b      	ldr	r3, [r3, #0]
 8006bb8:	430a      	orrs	r2, r1
 8006bba:	61da      	str	r2, [r3, #28]
      break;
 8006bbc:	e021      	b.n	8006c02 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8006bbe:	68fb      	ldr	r3, [r7, #12]
 8006bc0:	681b      	ldr	r3, [r3, #0]
 8006bc2:	68b9      	ldr	r1, [r7, #8]
 8006bc4:	4618      	mov	r0, r3
 8006bc6:	f000 fb47 	bl	8007258 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8006bca:	68fb      	ldr	r3, [r7, #12]
 8006bcc:	681b      	ldr	r3, [r3, #0]
 8006bce:	69da      	ldr	r2, [r3, #28]
 8006bd0:	68fb      	ldr	r3, [r7, #12]
 8006bd2:	681b      	ldr	r3, [r3, #0]
 8006bd4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006bd8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8006bda:	68fb      	ldr	r3, [r7, #12]
 8006bdc:	681b      	ldr	r3, [r3, #0]
 8006bde:	69da      	ldr	r2, [r3, #28]
 8006be0:	68fb      	ldr	r3, [r7, #12]
 8006be2:	681b      	ldr	r3, [r3, #0]
 8006be4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006be8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8006bea:	68fb      	ldr	r3, [r7, #12]
 8006bec:	681b      	ldr	r3, [r3, #0]
 8006bee:	69d9      	ldr	r1, [r3, #28]
 8006bf0:	68bb      	ldr	r3, [r7, #8]
 8006bf2:	691b      	ldr	r3, [r3, #16]
 8006bf4:	021a      	lsls	r2, r3, #8
 8006bf6:	68fb      	ldr	r3, [r7, #12]
 8006bf8:	681b      	ldr	r3, [r3, #0]
 8006bfa:	430a      	orrs	r2, r1
 8006bfc:	61da      	str	r2, [r3, #28]
      break;
 8006bfe:	e000      	b.n	8006c02 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 8006c00:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 8006c02:	68fb      	ldr	r3, [r7, #12]
 8006c04:	2201      	movs	r2, #1
 8006c06:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006c0a:	68fb      	ldr	r3, [r7, #12]
 8006c0c:	2200      	movs	r2, #0
 8006c0e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006c12:	2300      	movs	r3, #0
}
 8006c14:	4618      	mov	r0, r3
 8006c16:	3710      	adds	r7, #16
 8006c18:	46bd      	mov	sp, r7
 8006c1a:	bd80      	pop	{r7, pc}

08006c1c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006c1c:	b580      	push	{r7, lr}
 8006c1e:	b084      	sub	sp, #16
 8006c20:	af00      	add	r7, sp, #0
 8006c22:	6078      	str	r0, [r7, #4]
 8006c24:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006c2c:	2b01      	cmp	r3, #1
 8006c2e:	d101      	bne.n	8006c34 <HAL_TIM_ConfigClockSource+0x18>
 8006c30:	2302      	movs	r3, #2
 8006c32:	e0a6      	b.n	8006d82 <HAL_TIM_ConfigClockSource+0x166>
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	2201      	movs	r2, #1
 8006c38:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	2202      	movs	r2, #2
 8006c40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	681b      	ldr	r3, [r3, #0]
 8006c48:	689b      	ldr	r3, [r3, #8]
 8006c4a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006c4c:	68fb      	ldr	r3, [r7, #12]
 8006c4e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8006c52:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006c54:	68fb      	ldr	r3, [r7, #12]
 8006c56:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006c5a:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	681b      	ldr	r3, [r3, #0]
 8006c60:	68fa      	ldr	r2, [r7, #12]
 8006c62:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006c64:	683b      	ldr	r3, [r7, #0]
 8006c66:	681b      	ldr	r3, [r3, #0]
 8006c68:	2b40      	cmp	r3, #64	; 0x40
 8006c6a:	d067      	beq.n	8006d3c <HAL_TIM_ConfigClockSource+0x120>
 8006c6c:	2b40      	cmp	r3, #64	; 0x40
 8006c6e:	d80b      	bhi.n	8006c88 <HAL_TIM_ConfigClockSource+0x6c>
 8006c70:	2b10      	cmp	r3, #16
 8006c72:	d073      	beq.n	8006d5c <HAL_TIM_ConfigClockSource+0x140>
 8006c74:	2b10      	cmp	r3, #16
 8006c76:	d802      	bhi.n	8006c7e <HAL_TIM_ConfigClockSource+0x62>
 8006c78:	2b00      	cmp	r3, #0
 8006c7a:	d06f      	beq.n	8006d5c <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8006c7c:	e078      	b.n	8006d70 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8006c7e:	2b20      	cmp	r3, #32
 8006c80:	d06c      	beq.n	8006d5c <HAL_TIM_ConfigClockSource+0x140>
 8006c82:	2b30      	cmp	r3, #48	; 0x30
 8006c84:	d06a      	beq.n	8006d5c <HAL_TIM_ConfigClockSource+0x140>
      break;
 8006c86:	e073      	b.n	8006d70 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8006c88:	2b70      	cmp	r3, #112	; 0x70
 8006c8a:	d00d      	beq.n	8006ca8 <HAL_TIM_ConfigClockSource+0x8c>
 8006c8c:	2b70      	cmp	r3, #112	; 0x70
 8006c8e:	d804      	bhi.n	8006c9a <HAL_TIM_ConfigClockSource+0x7e>
 8006c90:	2b50      	cmp	r3, #80	; 0x50
 8006c92:	d033      	beq.n	8006cfc <HAL_TIM_ConfigClockSource+0xe0>
 8006c94:	2b60      	cmp	r3, #96	; 0x60
 8006c96:	d041      	beq.n	8006d1c <HAL_TIM_ConfigClockSource+0x100>
      break;
 8006c98:	e06a      	b.n	8006d70 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8006c9a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006c9e:	d066      	beq.n	8006d6e <HAL_TIM_ConfigClockSource+0x152>
 8006ca0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006ca4:	d017      	beq.n	8006cd6 <HAL_TIM_ConfigClockSource+0xba>
      break;
 8006ca6:	e063      	b.n	8006d70 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	6818      	ldr	r0, [r3, #0]
 8006cac:	683b      	ldr	r3, [r7, #0]
 8006cae:	6899      	ldr	r1, [r3, #8]
 8006cb0:	683b      	ldr	r3, [r7, #0]
 8006cb2:	685a      	ldr	r2, [r3, #4]
 8006cb4:	683b      	ldr	r3, [r7, #0]
 8006cb6:	68db      	ldr	r3, [r3, #12]
 8006cb8:	f000 fcc8 	bl	800764c <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	681b      	ldr	r3, [r3, #0]
 8006cc0:	689b      	ldr	r3, [r3, #8]
 8006cc2:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006cc4:	68fb      	ldr	r3, [r7, #12]
 8006cc6:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8006cca:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	681b      	ldr	r3, [r3, #0]
 8006cd0:	68fa      	ldr	r2, [r7, #12]
 8006cd2:	609a      	str	r2, [r3, #8]
      break;
 8006cd4:	e04c      	b.n	8006d70 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	6818      	ldr	r0, [r3, #0]
 8006cda:	683b      	ldr	r3, [r7, #0]
 8006cdc:	6899      	ldr	r1, [r3, #8]
 8006cde:	683b      	ldr	r3, [r7, #0]
 8006ce0:	685a      	ldr	r2, [r3, #4]
 8006ce2:	683b      	ldr	r3, [r7, #0]
 8006ce4:	68db      	ldr	r3, [r3, #12]
 8006ce6:	f000 fcb1 	bl	800764c <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	681b      	ldr	r3, [r3, #0]
 8006cee:	689a      	ldr	r2, [r3, #8]
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	681b      	ldr	r3, [r3, #0]
 8006cf4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006cf8:	609a      	str	r2, [r3, #8]
      break;
 8006cfa:	e039      	b.n	8006d70 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	6818      	ldr	r0, [r3, #0]
 8006d00:	683b      	ldr	r3, [r7, #0]
 8006d02:	6859      	ldr	r1, [r3, #4]
 8006d04:	683b      	ldr	r3, [r7, #0]
 8006d06:	68db      	ldr	r3, [r3, #12]
 8006d08:	461a      	mov	r2, r3
 8006d0a:	f000 fb6f 	bl	80073ec <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	681b      	ldr	r3, [r3, #0]
 8006d12:	2150      	movs	r1, #80	; 0x50
 8006d14:	4618      	mov	r0, r3
 8006d16:	f000 fc7e 	bl	8007616 <TIM_ITRx_SetConfig>
      break;
 8006d1a:	e029      	b.n	8006d70 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	6818      	ldr	r0, [r3, #0]
 8006d20:	683b      	ldr	r3, [r7, #0]
 8006d22:	6859      	ldr	r1, [r3, #4]
 8006d24:	683b      	ldr	r3, [r7, #0]
 8006d26:	68db      	ldr	r3, [r3, #12]
 8006d28:	461a      	mov	r2, r3
 8006d2a:	f000 fbcb 	bl	80074c4 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	681b      	ldr	r3, [r3, #0]
 8006d32:	2160      	movs	r1, #96	; 0x60
 8006d34:	4618      	mov	r0, r3
 8006d36:	f000 fc6e 	bl	8007616 <TIM_ITRx_SetConfig>
      break;
 8006d3a:	e019      	b.n	8006d70 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	6818      	ldr	r0, [r3, #0]
 8006d40:	683b      	ldr	r3, [r7, #0]
 8006d42:	6859      	ldr	r1, [r3, #4]
 8006d44:	683b      	ldr	r3, [r7, #0]
 8006d46:	68db      	ldr	r3, [r3, #12]
 8006d48:	461a      	mov	r2, r3
 8006d4a:	f000 fb4f 	bl	80073ec <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	681b      	ldr	r3, [r3, #0]
 8006d52:	2140      	movs	r1, #64	; 0x40
 8006d54:	4618      	mov	r0, r3
 8006d56:	f000 fc5e 	bl	8007616 <TIM_ITRx_SetConfig>
      break;
 8006d5a:	e009      	b.n	8006d70 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	681a      	ldr	r2, [r3, #0]
 8006d60:	683b      	ldr	r3, [r7, #0]
 8006d62:	681b      	ldr	r3, [r3, #0]
 8006d64:	4619      	mov	r1, r3
 8006d66:	4610      	mov	r0, r2
 8006d68:	f000 fc55 	bl	8007616 <TIM_ITRx_SetConfig>
      break;
 8006d6c:	e000      	b.n	8006d70 <HAL_TIM_ConfigClockSource+0x154>
      break;
 8006d6e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	2201      	movs	r2, #1
 8006d74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	2200      	movs	r2, #0
 8006d7c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006d80:	2300      	movs	r3, #0
}
 8006d82:	4618      	mov	r0, r3
 8006d84:	3710      	adds	r7, #16
 8006d86:	46bd      	mov	sp, r7
 8006d88:	bd80      	pop	{r7, pc}
	...

08006d8c <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006d8c:	b480      	push	{r7}
 8006d8e:	b085      	sub	sp, #20
 8006d90:	af00      	add	r7, sp, #0
 8006d92:	6078      	str	r0, [r7, #4]
 8006d94:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 8006d96:	2300      	movs	r3, #0
 8006d98:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 8006d9a:	683b      	ldr	r3, [r7, #0]
 8006d9c:	2b0c      	cmp	r3, #12
 8006d9e:	d831      	bhi.n	8006e04 <HAL_TIM_ReadCapturedValue+0x78>
 8006da0:	a201      	add	r2, pc, #4	; (adr r2, 8006da8 <HAL_TIM_ReadCapturedValue+0x1c>)
 8006da2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006da6:	bf00      	nop
 8006da8:	08006ddd 	.word	0x08006ddd
 8006dac:	08006e05 	.word	0x08006e05
 8006db0:	08006e05 	.word	0x08006e05
 8006db4:	08006e05 	.word	0x08006e05
 8006db8:	08006de7 	.word	0x08006de7
 8006dbc:	08006e05 	.word	0x08006e05
 8006dc0:	08006e05 	.word	0x08006e05
 8006dc4:	08006e05 	.word	0x08006e05
 8006dc8:	08006df1 	.word	0x08006df1
 8006dcc:	08006e05 	.word	0x08006e05
 8006dd0:	08006e05 	.word	0x08006e05
 8006dd4:	08006e05 	.word	0x08006e05
 8006dd8:	08006dfb 	.word	0x08006dfb
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	681b      	ldr	r3, [r3, #0]
 8006de0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006de2:	60fb      	str	r3, [r7, #12]

      break;
 8006de4:	e00f      	b.n	8006e06 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	681b      	ldr	r3, [r3, #0]
 8006dea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006dec:	60fb      	str	r3, [r7, #12]

      break;
 8006dee:	e00a      	b.n	8006e06 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	681b      	ldr	r3, [r3, #0]
 8006df4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006df6:	60fb      	str	r3, [r7, #12]

      break;
 8006df8:	e005      	b.n	8006e06 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	681b      	ldr	r3, [r3, #0]
 8006dfe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e00:	60fb      	str	r3, [r7, #12]

      break;
 8006e02:	e000      	b.n	8006e06 <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 8006e04:	bf00      	nop
  }

  return tmpreg;
 8006e06:	68fb      	ldr	r3, [r7, #12]
}
 8006e08:	4618      	mov	r0, r3
 8006e0a:	3714      	adds	r7, #20
 8006e0c:	46bd      	mov	sp, r7
 8006e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e12:	4770      	bx	lr

08006e14 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006e14:	b480      	push	{r7}
 8006e16:	b083      	sub	sp, #12
 8006e18:	af00      	add	r7, sp, #0
 8006e1a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8006e1c:	bf00      	nop
 8006e1e:	370c      	adds	r7, #12
 8006e20:	46bd      	mov	sp, r7
 8006e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e26:	4770      	bx	lr

08006e28 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006e28:	b480      	push	{r7}
 8006e2a:	b083      	sub	sp, #12
 8006e2c:	af00      	add	r7, sp, #0
 8006e2e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006e30:	bf00      	nop
 8006e32:	370c      	adds	r7, #12
 8006e34:	46bd      	mov	sp, r7
 8006e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e3a:	4770      	bx	lr

08006e3c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006e3c:	b480      	push	{r7}
 8006e3e:	b083      	sub	sp, #12
 8006e40:	af00      	add	r7, sp, #0
 8006e42:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006e44:	bf00      	nop
 8006e46:	370c      	adds	r7, #12
 8006e48:	46bd      	mov	sp, r7
 8006e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e4e:	4770      	bx	lr

08006e50 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006e50:	b480      	push	{r7}
 8006e52:	b083      	sub	sp, #12
 8006e54:	af00      	add	r7, sp, #0
 8006e56:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006e58:	bf00      	nop
 8006e5a:	370c      	adds	r7, #12
 8006e5c:	46bd      	mov	sp, r7
 8006e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e62:	4770      	bx	lr

08006e64 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8006e64:	b480      	push	{r7}
 8006e66:	b085      	sub	sp, #20
 8006e68:	af00      	add	r7, sp, #0
 8006e6a:	6078      	str	r0, [r7, #4]
 8006e6c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	681b      	ldr	r3, [r3, #0]
 8006e72:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	4a40      	ldr	r2, [pc, #256]	; (8006f78 <TIM_Base_SetConfig+0x114>)
 8006e78:	4293      	cmp	r3, r2
 8006e7a:	d013      	beq.n	8006ea4 <TIM_Base_SetConfig+0x40>
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006e82:	d00f      	beq.n	8006ea4 <TIM_Base_SetConfig+0x40>
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	4a3d      	ldr	r2, [pc, #244]	; (8006f7c <TIM_Base_SetConfig+0x118>)
 8006e88:	4293      	cmp	r3, r2
 8006e8a:	d00b      	beq.n	8006ea4 <TIM_Base_SetConfig+0x40>
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	4a3c      	ldr	r2, [pc, #240]	; (8006f80 <TIM_Base_SetConfig+0x11c>)
 8006e90:	4293      	cmp	r3, r2
 8006e92:	d007      	beq.n	8006ea4 <TIM_Base_SetConfig+0x40>
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	4a3b      	ldr	r2, [pc, #236]	; (8006f84 <TIM_Base_SetConfig+0x120>)
 8006e98:	4293      	cmp	r3, r2
 8006e9a:	d003      	beq.n	8006ea4 <TIM_Base_SetConfig+0x40>
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	4a3a      	ldr	r2, [pc, #232]	; (8006f88 <TIM_Base_SetConfig+0x124>)
 8006ea0:	4293      	cmp	r3, r2
 8006ea2:	d108      	bne.n	8006eb6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006ea4:	68fb      	ldr	r3, [r7, #12]
 8006ea6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006eaa:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006eac:	683b      	ldr	r3, [r7, #0]
 8006eae:	685b      	ldr	r3, [r3, #4]
 8006eb0:	68fa      	ldr	r2, [r7, #12]
 8006eb2:	4313      	orrs	r3, r2
 8006eb4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	4a2f      	ldr	r2, [pc, #188]	; (8006f78 <TIM_Base_SetConfig+0x114>)
 8006eba:	4293      	cmp	r3, r2
 8006ebc:	d02b      	beq.n	8006f16 <TIM_Base_SetConfig+0xb2>
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006ec4:	d027      	beq.n	8006f16 <TIM_Base_SetConfig+0xb2>
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	4a2c      	ldr	r2, [pc, #176]	; (8006f7c <TIM_Base_SetConfig+0x118>)
 8006eca:	4293      	cmp	r3, r2
 8006ecc:	d023      	beq.n	8006f16 <TIM_Base_SetConfig+0xb2>
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	4a2b      	ldr	r2, [pc, #172]	; (8006f80 <TIM_Base_SetConfig+0x11c>)
 8006ed2:	4293      	cmp	r3, r2
 8006ed4:	d01f      	beq.n	8006f16 <TIM_Base_SetConfig+0xb2>
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	4a2a      	ldr	r2, [pc, #168]	; (8006f84 <TIM_Base_SetConfig+0x120>)
 8006eda:	4293      	cmp	r3, r2
 8006edc:	d01b      	beq.n	8006f16 <TIM_Base_SetConfig+0xb2>
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	4a29      	ldr	r2, [pc, #164]	; (8006f88 <TIM_Base_SetConfig+0x124>)
 8006ee2:	4293      	cmp	r3, r2
 8006ee4:	d017      	beq.n	8006f16 <TIM_Base_SetConfig+0xb2>
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	4a28      	ldr	r2, [pc, #160]	; (8006f8c <TIM_Base_SetConfig+0x128>)
 8006eea:	4293      	cmp	r3, r2
 8006eec:	d013      	beq.n	8006f16 <TIM_Base_SetConfig+0xb2>
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	4a27      	ldr	r2, [pc, #156]	; (8006f90 <TIM_Base_SetConfig+0x12c>)
 8006ef2:	4293      	cmp	r3, r2
 8006ef4:	d00f      	beq.n	8006f16 <TIM_Base_SetConfig+0xb2>
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	4a26      	ldr	r2, [pc, #152]	; (8006f94 <TIM_Base_SetConfig+0x130>)
 8006efa:	4293      	cmp	r3, r2
 8006efc:	d00b      	beq.n	8006f16 <TIM_Base_SetConfig+0xb2>
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	4a25      	ldr	r2, [pc, #148]	; (8006f98 <TIM_Base_SetConfig+0x134>)
 8006f02:	4293      	cmp	r3, r2
 8006f04:	d007      	beq.n	8006f16 <TIM_Base_SetConfig+0xb2>
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	4a24      	ldr	r2, [pc, #144]	; (8006f9c <TIM_Base_SetConfig+0x138>)
 8006f0a:	4293      	cmp	r3, r2
 8006f0c:	d003      	beq.n	8006f16 <TIM_Base_SetConfig+0xb2>
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	4a23      	ldr	r2, [pc, #140]	; (8006fa0 <TIM_Base_SetConfig+0x13c>)
 8006f12:	4293      	cmp	r3, r2
 8006f14:	d108      	bne.n	8006f28 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006f16:	68fb      	ldr	r3, [r7, #12]
 8006f18:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006f1c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006f1e:	683b      	ldr	r3, [r7, #0]
 8006f20:	68db      	ldr	r3, [r3, #12]
 8006f22:	68fa      	ldr	r2, [r7, #12]
 8006f24:	4313      	orrs	r3, r2
 8006f26:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006f28:	68fb      	ldr	r3, [r7, #12]
 8006f2a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006f2e:	683b      	ldr	r3, [r7, #0]
 8006f30:	695b      	ldr	r3, [r3, #20]
 8006f32:	4313      	orrs	r3, r2
 8006f34:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	68fa      	ldr	r2, [r7, #12]
 8006f3a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006f3c:	683b      	ldr	r3, [r7, #0]
 8006f3e:	689a      	ldr	r2, [r3, #8]
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006f44:	683b      	ldr	r3, [r7, #0]
 8006f46:	681a      	ldr	r2, [r3, #0]
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	4a0a      	ldr	r2, [pc, #40]	; (8006f78 <TIM_Base_SetConfig+0x114>)
 8006f50:	4293      	cmp	r3, r2
 8006f52:	d003      	beq.n	8006f5c <TIM_Base_SetConfig+0xf8>
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	4a0c      	ldr	r2, [pc, #48]	; (8006f88 <TIM_Base_SetConfig+0x124>)
 8006f58:	4293      	cmp	r3, r2
 8006f5a:	d103      	bne.n	8006f64 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006f5c:	683b      	ldr	r3, [r7, #0]
 8006f5e:	691a      	ldr	r2, [r3, #16]
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	2201      	movs	r2, #1
 8006f68:	615a      	str	r2, [r3, #20]
}
 8006f6a:	bf00      	nop
 8006f6c:	3714      	adds	r7, #20
 8006f6e:	46bd      	mov	sp, r7
 8006f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f74:	4770      	bx	lr
 8006f76:	bf00      	nop
 8006f78:	40010000 	.word	0x40010000
 8006f7c:	40000400 	.word	0x40000400
 8006f80:	40000800 	.word	0x40000800
 8006f84:	40000c00 	.word	0x40000c00
 8006f88:	40010400 	.word	0x40010400
 8006f8c:	40014000 	.word	0x40014000
 8006f90:	40014400 	.word	0x40014400
 8006f94:	40014800 	.word	0x40014800
 8006f98:	40001800 	.word	0x40001800
 8006f9c:	40001c00 	.word	0x40001c00
 8006fa0:	40002000 	.word	0x40002000

08006fa4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006fa4:	b480      	push	{r7}
 8006fa6:	b087      	sub	sp, #28
 8006fa8:	af00      	add	r7, sp, #0
 8006faa:	6078      	str	r0, [r7, #4]
 8006fac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	6a1b      	ldr	r3, [r3, #32]
 8006fb2:	f023 0201 	bic.w	r2, r3, #1
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	6a1b      	ldr	r3, [r3, #32]
 8006fbe:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	685b      	ldr	r3, [r3, #4]
 8006fc4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	699b      	ldr	r3, [r3, #24]
 8006fca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006fcc:	68fb      	ldr	r3, [r7, #12]
 8006fce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006fd2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006fd4:	68fb      	ldr	r3, [r7, #12]
 8006fd6:	f023 0303 	bic.w	r3, r3, #3
 8006fda:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006fdc:	683b      	ldr	r3, [r7, #0]
 8006fde:	681b      	ldr	r3, [r3, #0]
 8006fe0:	68fa      	ldr	r2, [r7, #12]
 8006fe2:	4313      	orrs	r3, r2
 8006fe4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8006fe6:	697b      	ldr	r3, [r7, #20]
 8006fe8:	f023 0302 	bic.w	r3, r3, #2
 8006fec:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8006fee:	683b      	ldr	r3, [r7, #0]
 8006ff0:	689b      	ldr	r3, [r3, #8]
 8006ff2:	697a      	ldr	r2, [r7, #20]
 8006ff4:	4313      	orrs	r3, r2
 8006ff6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	4a20      	ldr	r2, [pc, #128]	; (800707c <TIM_OC1_SetConfig+0xd8>)
 8006ffc:	4293      	cmp	r3, r2
 8006ffe:	d003      	beq.n	8007008 <TIM_OC1_SetConfig+0x64>
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	4a1f      	ldr	r2, [pc, #124]	; (8007080 <TIM_OC1_SetConfig+0xdc>)
 8007004:	4293      	cmp	r3, r2
 8007006:	d10c      	bne.n	8007022 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8007008:	697b      	ldr	r3, [r7, #20]
 800700a:	f023 0308 	bic.w	r3, r3, #8
 800700e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8007010:	683b      	ldr	r3, [r7, #0]
 8007012:	68db      	ldr	r3, [r3, #12]
 8007014:	697a      	ldr	r2, [r7, #20]
 8007016:	4313      	orrs	r3, r2
 8007018:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800701a:	697b      	ldr	r3, [r7, #20]
 800701c:	f023 0304 	bic.w	r3, r3, #4
 8007020:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	4a15      	ldr	r2, [pc, #84]	; (800707c <TIM_OC1_SetConfig+0xd8>)
 8007026:	4293      	cmp	r3, r2
 8007028:	d003      	beq.n	8007032 <TIM_OC1_SetConfig+0x8e>
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	4a14      	ldr	r2, [pc, #80]	; (8007080 <TIM_OC1_SetConfig+0xdc>)
 800702e:	4293      	cmp	r3, r2
 8007030:	d111      	bne.n	8007056 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8007032:	693b      	ldr	r3, [r7, #16]
 8007034:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007038:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800703a:	693b      	ldr	r3, [r7, #16]
 800703c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007040:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8007042:	683b      	ldr	r3, [r7, #0]
 8007044:	695b      	ldr	r3, [r3, #20]
 8007046:	693a      	ldr	r2, [r7, #16]
 8007048:	4313      	orrs	r3, r2
 800704a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800704c:	683b      	ldr	r3, [r7, #0]
 800704e:	699b      	ldr	r3, [r3, #24]
 8007050:	693a      	ldr	r2, [r7, #16]
 8007052:	4313      	orrs	r3, r2
 8007054:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	693a      	ldr	r2, [r7, #16]
 800705a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	68fa      	ldr	r2, [r7, #12]
 8007060:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8007062:	683b      	ldr	r3, [r7, #0]
 8007064:	685a      	ldr	r2, [r3, #4]
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	697a      	ldr	r2, [r7, #20]
 800706e:	621a      	str	r2, [r3, #32]
}
 8007070:	bf00      	nop
 8007072:	371c      	adds	r7, #28
 8007074:	46bd      	mov	sp, r7
 8007076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800707a:	4770      	bx	lr
 800707c:	40010000 	.word	0x40010000
 8007080:	40010400 	.word	0x40010400

08007084 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007084:	b480      	push	{r7}
 8007086:	b087      	sub	sp, #28
 8007088:	af00      	add	r7, sp, #0
 800708a:	6078      	str	r0, [r7, #4]
 800708c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	6a1b      	ldr	r3, [r3, #32]
 8007092:	f023 0210 	bic.w	r2, r3, #16
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	6a1b      	ldr	r3, [r3, #32]
 800709e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	685b      	ldr	r3, [r3, #4]
 80070a4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	699b      	ldr	r3, [r3, #24]
 80070aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80070ac:	68fb      	ldr	r3, [r7, #12]
 80070ae:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80070b2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80070b4:	68fb      	ldr	r3, [r7, #12]
 80070b6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80070ba:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80070bc:	683b      	ldr	r3, [r7, #0]
 80070be:	681b      	ldr	r3, [r3, #0]
 80070c0:	021b      	lsls	r3, r3, #8
 80070c2:	68fa      	ldr	r2, [r7, #12]
 80070c4:	4313      	orrs	r3, r2
 80070c6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80070c8:	697b      	ldr	r3, [r7, #20]
 80070ca:	f023 0320 	bic.w	r3, r3, #32
 80070ce:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80070d0:	683b      	ldr	r3, [r7, #0]
 80070d2:	689b      	ldr	r3, [r3, #8]
 80070d4:	011b      	lsls	r3, r3, #4
 80070d6:	697a      	ldr	r2, [r7, #20]
 80070d8:	4313      	orrs	r3, r2
 80070da:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	4a22      	ldr	r2, [pc, #136]	; (8007168 <TIM_OC2_SetConfig+0xe4>)
 80070e0:	4293      	cmp	r3, r2
 80070e2:	d003      	beq.n	80070ec <TIM_OC2_SetConfig+0x68>
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	4a21      	ldr	r2, [pc, #132]	; (800716c <TIM_OC2_SetConfig+0xe8>)
 80070e8:	4293      	cmp	r3, r2
 80070ea:	d10d      	bne.n	8007108 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80070ec:	697b      	ldr	r3, [r7, #20]
 80070ee:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80070f2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80070f4:	683b      	ldr	r3, [r7, #0]
 80070f6:	68db      	ldr	r3, [r3, #12]
 80070f8:	011b      	lsls	r3, r3, #4
 80070fa:	697a      	ldr	r2, [r7, #20]
 80070fc:	4313      	orrs	r3, r2
 80070fe:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8007100:	697b      	ldr	r3, [r7, #20]
 8007102:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007106:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	4a17      	ldr	r2, [pc, #92]	; (8007168 <TIM_OC2_SetConfig+0xe4>)
 800710c:	4293      	cmp	r3, r2
 800710e:	d003      	beq.n	8007118 <TIM_OC2_SetConfig+0x94>
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	4a16      	ldr	r2, [pc, #88]	; (800716c <TIM_OC2_SetConfig+0xe8>)
 8007114:	4293      	cmp	r3, r2
 8007116:	d113      	bne.n	8007140 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8007118:	693b      	ldr	r3, [r7, #16]
 800711a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800711e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8007120:	693b      	ldr	r3, [r7, #16]
 8007122:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007126:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8007128:	683b      	ldr	r3, [r7, #0]
 800712a:	695b      	ldr	r3, [r3, #20]
 800712c:	009b      	lsls	r3, r3, #2
 800712e:	693a      	ldr	r2, [r7, #16]
 8007130:	4313      	orrs	r3, r2
 8007132:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8007134:	683b      	ldr	r3, [r7, #0]
 8007136:	699b      	ldr	r3, [r3, #24]
 8007138:	009b      	lsls	r3, r3, #2
 800713a:	693a      	ldr	r2, [r7, #16]
 800713c:	4313      	orrs	r3, r2
 800713e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	693a      	ldr	r2, [r7, #16]
 8007144:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	68fa      	ldr	r2, [r7, #12]
 800714a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800714c:	683b      	ldr	r3, [r7, #0]
 800714e:	685a      	ldr	r2, [r3, #4]
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	697a      	ldr	r2, [r7, #20]
 8007158:	621a      	str	r2, [r3, #32]
}
 800715a:	bf00      	nop
 800715c:	371c      	adds	r7, #28
 800715e:	46bd      	mov	sp, r7
 8007160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007164:	4770      	bx	lr
 8007166:	bf00      	nop
 8007168:	40010000 	.word	0x40010000
 800716c:	40010400 	.word	0x40010400

08007170 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007170:	b480      	push	{r7}
 8007172:	b087      	sub	sp, #28
 8007174:	af00      	add	r7, sp, #0
 8007176:	6078      	str	r0, [r7, #4]
 8007178:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	6a1b      	ldr	r3, [r3, #32]
 800717e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	6a1b      	ldr	r3, [r3, #32]
 800718a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	685b      	ldr	r3, [r3, #4]
 8007190:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007192:	687b      	ldr	r3, [r7, #4]
 8007194:	69db      	ldr	r3, [r3, #28]
 8007196:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8007198:	68fb      	ldr	r3, [r7, #12]
 800719a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800719e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80071a0:	68fb      	ldr	r3, [r7, #12]
 80071a2:	f023 0303 	bic.w	r3, r3, #3
 80071a6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80071a8:	683b      	ldr	r3, [r7, #0]
 80071aa:	681b      	ldr	r3, [r3, #0]
 80071ac:	68fa      	ldr	r2, [r7, #12]
 80071ae:	4313      	orrs	r3, r2
 80071b0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80071b2:	697b      	ldr	r3, [r7, #20]
 80071b4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80071b8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80071ba:	683b      	ldr	r3, [r7, #0]
 80071bc:	689b      	ldr	r3, [r3, #8]
 80071be:	021b      	lsls	r3, r3, #8
 80071c0:	697a      	ldr	r2, [r7, #20]
 80071c2:	4313      	orrs	r3, r2
 80071c4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	4a21      	ldr	r2, [pc, #132]	; (8007250 <TIM_OC3_SetConfig+0xe0>)
 80071ca:	4293      	cmp	r3, r2
 80071cc:	d003      	beq.n	80071d6 <TIM_OC3_SetConfig+0x66>
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	4a20      	ldr	r2, [pc, #128]	; (8007254 <TIM_OC3_SetConfig+0xe4>)
 80071d2:	4293      	cmp	r3, r2
 80071d4:	d10d      	bne.n	80071f2 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80071d6:	697b      	ldr	r3, [r7, #20]
 80071d8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80071dc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80071de:	683b      	ldr	r3, [r7, #0]
 80071e0:	68db      	ldr	r3, [r3, #12]
 80071e2:	021b      	lsls	r3, r3, #8
 80071e4:	697a      	ldr	r2, [r7, #20]
 80071e6:	4313      	orrs	r3, r2
 80071e8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80071ea:	697b      	ldr	r3, [r7, #20]
 80071ec:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80071f0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	4a16      	ldr	r2, [pc, #88]	; (8007250 <TIM_OC3_SetConfig+0xe0>)
 80071f6:	4293      	cmp	r3, r2
 80071f8:	d003      	beq.n	8007202 <TIM_OC3_SetConfig+0x92>
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	4a15      	ldr	r2, [pc, #84]	; (8007254 <TIM_OC3_SetConfig+0xe4>)
 80071fe:	4293      	cmp	r3, r2
 8007200:	d113      	bne.n	800722a <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8007202:	693b      	ldr	r3, [r7, #16]
 8007204:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007208:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800720a:	693b      	ldr	r3, [r7, #16]
 800720c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007210:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8007212:	683b      	ldr	r3, [r7, #0]
 8007214:	695b      	ldr	r3, [r3, #20]
 8007216:	011b      	lsls	r3, r3, #4
 8007218:	693a      	ldr	r2, [r7, #16]
 800721a:	4313      	orrs	r3, r2
 800721c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800721e:	683b      	ldr	r3, [r7, #0]
 8007220:	699b      	ldr	r3, [r3, #24]
 8007222:	011b      	lsls	r3, r3, #4
 8007224:	693a      	ldr	r2, [r7, #16]
 8007226:	4313      	orrs	r3, r2
 8007228:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	693a      	ldr	r2, [r7, #16]
 800722e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	68fa      	ldr	r2, [r7, #12]
 8007234:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8007236:	683b      	ldr	r3, [r7, #0]
 8007238:	685a      	ldr	r2, [r3, #4]
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	697a      	ldr	r2, [r7, #20]
 8007242:	621a      	str	r2, [r3, #32]
}
 8007244:	bf00      	nop
 8007246:	371c      	adds	r7, #28
 8007248:	46bd      	mov	sp, r7
 800724a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800724e:	4770      	bx	lr
 8007250:	40010000 	.word	0x40010000
 8007254:	40010400 	.word	0x40010400

08007258 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007258:	b480      	push	{r7}
 800725a:	b087      	sub	sp, #28
 800725c:	af00      	add	r7, sp, #0
 800725e:	6078      	str	r0, [r7, #4]
 8007260:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	6a1b      	ldr	r3, [r3, #32]
 8007266:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	6a1b      	ldr	r3, [r3, #32]
 8007272:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	685b      	ldr	r3, [r3, #4]
 8007278:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	69db      	ldr	r3, [r3, #28]
 800727e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8007280:	68fb      	ldr	r3, [r7, #12]
 8007282:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007286:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8007288:	68fb      	ldr	r3, [r7, #12]
 800728a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800728e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007290:	683b      	ldr	r3, [r7, #0]
 8007292:	681b      	ldr	r3, [r3, #0]
 8007294:	021b      	lsls	r3, r3, #8
 8007296:	68fa      	ldr	r2, [r7, #12]
 8007298:	4313      	orrs	r3, r2
 800729a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800729c:	693b      	ldr	r3, [r7, #16]
 800729e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80072a2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80072a4:	683b      	ldr	r3, [r7, #0]
 80072a6:	689b      	ldr	r3, [r3, #8]
 80072a8:	031b      	lsls	r3, r3, #12
 80072aa:	693a      	ldr	r2, [r7, #16]
 80072ac:	4313      	orrs	r3, r2
 80072ae:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	4a12      	ldr	r2, [pc, #72]	; (80072fc <TIM_OC4_SetConfig+0xa4>)
 80072b4:	4293      	cmp	r3, r2
 80072b6:	d003      	beq.n	80072c0 <TIM_OC4_SetConfig+0x68>
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	4a11      	ldr	r2, [pc, #68]	; (8007300 <TIM_OC4_SetConfig+0xa8>)
 80072bc:	4293      	cmp	r3, r2
 80072be:	d109      	bne.n	80072d4 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80072c0:	697b      	ldr	r3, [r7, #20]
 80072c2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80072c6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80072c8:	683b      	ldr	r3, [r7, #0]
 80072ca:	695b      	ldr	r3, [r3, #20]
 80072cc:	019b      	lsls	r3, r3, #6
 80072ce:	697a      	ldr	r2, [r7, #20]
 80072d0:	4313      	orrs	r3, r2
 80072d2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	697a      	ldr	r2, [r7, #20]
 80072d8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	68fa      	ldr	r2, [r7, #12]
 80072de:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80072e0:	683b      	ldr	r3, [r7, #0]
 80072e2:	685a      	ldr	r2, [r3, #4]
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	693a      	ldr	r2, [r7, #16]
 80072ec:	621a      	str	r2, [r3, #32]
}
 80072ee:	bf00      	nop
 80072f0:	371c      	adds	r7, #28
 80072f2:	46bd      	mov	sp, r7
 80072f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072f8:	4770      	bx	lr
 80072fa:	bf00      	nop
 80072fc:	40010000 	.word	0x40010000
 8007300:	40010400 	.word	0x40010400

08007304 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8007304:	b480      	push	{r7}
 8007306:	b087      	sub	sp, #28
 8007308:	af00      	add	r7, sp, #0
 800730a:	60f8      	str	r0, [r7, #12]
 800730c:	60b9      	str	r1, [r7, #8]
 800730e:	607a      	str	r2, [r7, #4]
 8007310:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007312:	68fb      	ldr	r3, [r7, #12]
 8007314:	6a1b      	ldr	r3, [r3, #32]
 8007316:	f023 0201 	bic.w	r2, r3, #1
 800731a:	68fb      	ldr	r3, [r7, #12]
 800731c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800731e:	68fb      	ldr	r3, [r7, #12]
 8007320:	699b      	ldr	r3, [r3, #24]
 8007322:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007324:	68fb      	ldr	r3, [r7, #12]
 8007326:	6a1b      	ldr	r3, [r3, #32]
 8007328:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 800732a:	68fb      	ldr	r3, [r7, #12]
 800732c:	4a28      	ldr	r2, [pc, #160]	; (80073d0 <TIM_TI1_SetConfig+0xcc>)
 800732e:	4293      	cmp	r3, r2
 8007330:	d01b      	beq.n	800736a <TIM_TI1_SetConfig+0x66>
 8007332:	68fb      	ldr	r3, [r7, #12]
 8007334:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007338:	d017      	beq.n	800736a <TIM_TI1_SetConfig+0x66>
 800733a:	68fb      	ldr	r3, [r7, #12]
 800733c:	4a25      	ldr	r2, [pc, #148]	; (80073d4 <TIM_TI1_SetConfig+0xd0>)
 800733e:	4293      	cmp	r3, r2
 8007340:	d013      	beq.n	800736a <TIM_TI1_SetConfig+0x66>
 8007342:	68fb      	ldr	r3, [r7, #12]
 8007344:	4a24      	ldr	r2, [pc, #144]	; (80073d8 <TIM_TI1_SetConfig+0xd4>)
 8007346:	4293      	cmp	r3, r2
 8007348:	d00f      	beq.n	800736a <TIM_TI1_SetConfig+0x66>
 800734a:	68fb      	ldr	r3, [r7, #12]
 800734c:	4a23      	ldr	r2, [pc, #140]	; (80073dc <TIM_TI1_SetConfig+0xd8>)
 800734e:	4293      	cmp	r3, r2
 8007350:	d00b      	beq.n	800736a <TIM_TI1_SetConfig+0x66>
 8007352:	68fb      	ldr	r3, [r7, #12]
 8007354:	4a22      	ldr	r2, [pc, #136]	; (80073e0 <TIM_TI1_SetConfig+0xdc>)
 8007356:	4293      	cmp	r3, r2
 8007358:	d007      	beq.n	800736a <TIM_TI1_SetConfig+0x66>
 800735a:	68fb      	ldr	r3, [r7, #12]
 800735c:	4a21      	ldr	r2, [pc, #132]	; (80073e4 <TIM_TI1_SetConfig+0xe0>)
 800735e:	4293      	cmp	r3, r2
 8007360:	d003      	beq.n	800736a <TIM_TI1_SetConfig+0x66>
 8007362:	68fb      	ldr	r3, [r7, #12]
 8007364:	4a20      	ldr	r2, [pc, #128]	; (80073e8 <TIM_TI1_SetConfig+0xe4>)
 8007366:	4293      	cmp	r3, r2
 8007368:	d101      	bne.n	800736e <TIM_TI1_SetConfig+0x6a>
 800736a:	2301      	movs	r3, #1
 800736c:	e000      	b.n	8007370 <TIM_TI1_SetConfig+0x6c>
 800736e:	2300      	movs	r3, #0
 8007370:	2b00      	cmp	r3, #0
 8007372:	d008      	beq.n	8007386 <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8007374:	697b      	ldr	r3, [r7, #20]
 8007376:	f023 0303 	bic.w	r3, r3, #3
 800737a:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 800737c:	697a      	ldr	r2, [r7, #20]
 800737e:	687b      	ldr	r3, [r7, #4]
 8007380:	4313      	orrs	r3, r2
 8007382:	617b      	str	r3, [r7, #20]
 8007384:	e003      	b.n	800738e <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8007386:	697b      	ldr	r3, [r7, #20]
 8007388:	f043 0301 	orr.w	r3, r3, #1
 800738c:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800738e:	697b      	ldr	r3, [r7, #20]
 8007390:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007394:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8007396:	683b      	ldr	r3, [r7, #0]
 8007398:	011b      	lsls	r3, r3, #4
 800739a:	b2db      	uxtb	r3, r3
 800739c:	697a      	ldr	r2, [r7, #20]
 800739e:	4313      	orrs	r3, r2
 80073a0:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80073a2:	693b      	ldr	r3, [r7, #16]
 80073a4:	f023 030a 	bic.w	r3, r3, #10
 80073a8:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 80073aa:	68bb      	ldr	r3, [r7, #8]
 80073ac:	f003 030a 	and.w	r3, r3, #10
 80073b0:	693a      	ldr	r2, [r7, #16]
 80073b2:	4313      	orrs	r3, r2
 80073b4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80073b6:	68fb      	ldr	r3, [r7, #12]
 80073b8:	697a      	ldr	r2, [r7, #20]
 80073ba:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80073bc:	68fb      	ldr	r3, [r7, #12]
 80073be:	693a      	ldr	r2, [r7, #16]
 80073c0:	621a      	str	r2, [r3, #32]
}
 80073c2:	bf00      	nop
 80073c4:	371c      	adds	r7, #28
 80073c6:	46bd      	mov	sp, r7
 80073c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073cc:	4770      	bx	lr
 80073ce:	bf00      	nop
 80073d0:	40010000 	.word	0x40010000
 80073d4:	40000400 	.word	0x40000400
 80073d8:	40000800 	.word	0x40000800
 80073dc:	40000c00 	.word	0x40000c00
 80073e0:	40010400 	.word	0x40010400
 80073e4:	40014000 	.word	0x40014000
 80073e8:	40001800 	.word	0x40001800

080073ec <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80073ec:	b480      	push	{r7}
 80073ee:	b087      	sub	sp, #28
 80073f0:	af00      	add	r7, sp, #0
 80073f2:	60f8      	str	r0, [r7, #12]
 80073f4:	60b9      	str	r1, [r7, #8]
 80073f6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80073f8:	68fb      	ldr	r3, [r7, #12]
 80073fa:	6a1b      	ldr	r3, [r3, #32]
 80073fc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80073fe:	68fb      	ldr	r3, [r7, #12]
 8007400:	6a1b      	ldr	r3, [r3, #32]
 8007402:	f023 0201 	bic.w	r2, r3, #1
 8007406:	68fb      	ldr	r3, [r7, #12]
 8007408:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800740a:	68fb      	ldr	r3, [r7, #12]
 800740c:	699b      	ldr	r3, [r3, #24]
 800740e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007410:	693b      	ldr	r3, [r7, #16]
 8007412:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007416:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	011b      	lsls	r3, r3, #4
 800741c:	693a      	ldr	r2, [r7, #16]
 800741e:	4313      	orrs	r3, r2
 8007420:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007422:	697b      	ldr	r3, [r7, #20]
 8007424:	f023 030a 	bic.w	r3, r3, #10
 8007428:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800742a:	697a      	ldr	r2, [r7, #20]
 800742c:	68bb      	ldr	r3, [r7, #8]
 800742e:	4313      	orrs	r3, r2
 8007430:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8007432:	68fb      	ldr	r3, [r7, #12]
 8007434:	693a      	ldr	r2, [r7, #16]
 8007436:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007438:	68fb      	ldr	r3, [r7, #12]
 800743a:	697a      	ldr	r2, [r7, #20]
 800743c:	621a      	str	r2, [r3, #32]
}
 800743e:	bf00      	nop
 8007440:	371c      	adds	r7, #28
 8007442:	46bd      	mov	sp, r7
 8007444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007448:	4770      	bx	lr

0800744a <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800744a:	b480      	push	{r7}
 800744c:	b087      	sub	sp, #28
 800744e:	af00      	add	r7, sp, #0
 8007450:	60f8      	str	r0, [r7, #12]
 8007452:	60b9      	str	r1, [r7, #8]
 8007454:	607a      	str	r2, [r7, #4]
 8007456:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007458:	68fb      	ldr	r3, [r7, #12]
 800745a:	6a1b      	ldr	r3, [r3, #32]
 800745c:	f023 0210 	bic.w	r2, r3, #16
 8007460:	68fb      	ldr	r3, [r7, #12]
 8007462:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007464:	68fb      	ldr	r3, [r7, #12]
 8007466:	699b      	ldr	r3, [r3, #24]
 8007468:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800746a:	68fb      	ldr	r3, [r7, #12]
 800746c:	6a1b      	ldr	r3, [r3, #32]
 800746e:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8007470:	697b      	ldr	r3, [r7, #20]
 8007472:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007476:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	021b      	lsls	r3, r3, #8
 800747c:	697a      	ldr	r2, [r7, #20]
 800747e:	4313      	orrs	r3, r2
 8007480:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007482:	697b      	ldr	r3, [r7, #20]
 8007484:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007488:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 800748a:	683b      	ldr	r3, [r7, #0]
 800748c:	031b      	lsls	r3, r3, #12
 800748e:	b29b      	uxth	r3, r3
 8007490:	697a      	ldr	r2, [r7, #20]
 8007492:	4313      	orrs	r3, r2
 8007494:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007496:	693b      	ldr	r3, [r7, #16]
 8007498:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800749c:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 800749e:	68bb      	ldr	r3, [r7, #8]
 80074a0:	011b      	lsls	r3, r3, #4
 80074a2:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 80074a6:	693a      	ldr	r2, [r7, #16]
 80074a8:	4313      	orrs	r3, r2
 80074aa:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80074ac:	68fb      	ldr	r3, [r7, #12]
 80074ae:	697a      	ldr	r2, [r7, #20]
 80074b0:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80074b2:	68fb      	ldr	r3, [r7, #12]
 80074b4:	693a      	ldr	r2, [r7, #16]
 80074b6:	621a      	str	r2, [r3, #32]
}
 80074b8:	bf00      	nop
 80074ba:	371c      	adds	r7, #28
 80074bc:	46bd      	mov	sp, r7
 80074be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074c2:	4770      	bx	lr

080074c4 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80074c4:	b480      	push	{r7}
 80074c6:	b087      	sub	sp, #28
 80074c8:	af00      	add	r7, sp, #0
 80074ca:	60f8      	str	r0, [r7, #12]
 80074cc:	60b9      	str	r1, [r7, #8]
 80074ce:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80074d0:	68fb      	ldr	r3, [r7, #12]
 80074d2:	6a1b      	ldr	r3, [r3, #32]
 80074d4:	f023 0210 	bic.w	r2, r3, #16
 80074d8:	68fb      	ldr	r3, [r7, #12]
 80074da:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80074dc:	68fb      	ldr	r3, [r7, #12]
 80074de:	699b      	ldr	r3, [r3, #24]
 80074e0:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80074e2:	68fb      	ldr	r3, [r7, #12]
 80074e4:	6a1b      	ldr	r3, [r3, #32]
 80074e6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80074e8:	697b      	ldr	r3, [r7, #20]
 80074ea:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80074ee:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	031b      	lsls	r3, r3, #12
 80074f4:	697a      	ldr	r2, [r7, #20]
 80074f6:	4313      	orrs	r3, r2
 80074f8:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80074fa:	693b      	ldr	r3, [r7, #16]
 80074fc:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8007500:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8007502:	68bb      	ldr	r3, [r7, #8]
 8007504:	011b      	lsls	r3, r3, #4
 8007506:	693a      	ldr	r2, [r7, #16]
 8007508:	4313      	orrs	r3, r2
 800750a:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800750c:	68fb      	ldr	r3, [r7, #12]
 800750e:	697a      	ldr	r2, [r7, #20]
 8007510:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007512:	68fb      	ldr	r3, [r7, #12]
 8007514:	693a      	ldr	r2, [r7, #16]
 8007516:	621a      	str	r2, [r3, #32]
}
 8007518:	bf00      	nop
 800751a:	371c      	adds	r7, #28
 800751c:	46bd      	mov	sp, r7
 800751e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007522:	4770      	bx	lr

08007524 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8007524:	b480      	push	{r7}
 8007526:	b087      	sub	sp, #28
 8007528:	af00      	add	r7, sp, #0
 800752a:	60f8      	str	r0, [r7, #12]
 800752c:	60b9      	str	r1, [r7, #8]
 800752e:	607a      	str	r2, [r7, #4]
 8007530:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8007532:	68fb      	ldr	r3, [r7, #12]
 8007534:	6a1b      	ldr	r3, [r3, #32]
 8007536:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800753a:	68fb      	ldr	r3, [r7, #12]
 800753c:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800753e:	68fb      	ldr	r3, [r7, #12]
 8007540:	69db      	ldr	r3, [r3, #28]
 8007542:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007544:	68fb      	ldr	r3, [r7, #12]
 8007546:	6a1b      	ldr	r3, [r3, #32]
 8007548:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 800754a:	697b      	ldr	r3, [r7, #20]
 800754c:	f023 0303 	bic.w	r3, r3, #3
 8007550:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 8007552:	697a      	ldr	r2, [r7, #20]
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	4313      	orrs	r3, r2
 8007558:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 800755a:	697b      	ldr	r3, [r7, #20]
 800755c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007560:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8007562:	683b      	ldr	r3, [r7, #0]
 8007564:	011b      	lsls	r3, r3, #4
 8007566:	b2db      	uxtb	r3, r3
 8007568:	697a      	ldr	r2, [r7, #20]
 800756a:	4313      	orrs	r3, r2
 800756c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 800756e:	693b      	ldr	r3, [r7, #16]
 8007570:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 8007574:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8007576:	68bb      	ldr	r3, [r7, #8]
 8007578:	021b      	lsls	r3, r3, #8
 800757a:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 800757e:	693a      	ldr	r2, [r7, #16]
 8007580:	4313      	orrs	r3, r2
 8007582:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8007584:	68fb      	ldr	r3, [r7, #12]
 8007586:	697a      	ldr	r2, [r7, #20]
 8007588:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 800758a:	68fb      	ldr	r3, [r7, #12]
 800758c:	693a      	ldr	r2, [r7, #16]
 800758e:	621a      	str	r2, [r3, #32]
}
 8007590:	bf00      	nop
 8007592:	371c      	adds	r7, #28
 8007594:	46bd      	mov	sp, r7
 8007596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800759a:	4770      	bx	lr

0800759c <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800759c:	b480      	push	{r7}
 800759e:	b087      	sub	sp, #28
 80075a0:	af00      	add	r7, sp, #0
 80075a2:	60f8      	str	r0, [r7, #12]
 80075a4:	60b9      	str	r1, [r7, #8]
 80075a6:	607a      	str	r2, [r7, #4]
 80075a8:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80075aa:	68fb      	ldr	r3, [r7, #12]
 80075ac:	6a1b      	ldr	r3, [r3, #32]
 80075ae:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80075b2:	68fb      	ldr	r3, [r7, #12]
 80075b4:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80075b6:	68fb      	ldr	r3, [r7, #12]
 80075b8:	69db      	ldr	r3, [r3, #28]
 80075ba:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80075bc:	68fb      	ldr	r3, [r7, #12]
 80075be:	6a1b      	ldr	r3, [r3, #32]
 80075c0:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 80075c2:	697b      	ldr	r3, [r7, #20]
 80075c4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80075c8:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 80075ca:	687b      	ldr	r3, [r7, #4]
 80075cc:	021b      	lsls	r3, r3, #8
 80075ce:	697a      	ldr	r2, [r7, #20]
 80075d0:	4313      	orrs	r3, r2
 80075d2:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 80075d4:	697b      	ldr	r3, [r7, #20]
 80075d6:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80075da:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 80075dc:	683b      	ldr	r3, [r7, #0]
 80075de:	031b      	lsls	r3, r3, #12
 80075e0:	b29b      	uxth	r3, r3
 80075e2:	697a      	ldr	r2, [r7, #20]
 80075e4:	4313      	orrs	r3, r2
 80075e6:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 80075e8:	693b      	ldr	r3, [r7, #16]
 80075ea:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 80075ee:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 80075f0:	68bb      	ldr	r3, [r7, #8]
 80075f2:	031b      	lsls	r3, r3, #12
 80075f4:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 80075f8:	693a      	ldr	r2, [r7, #16]
 80075fa:	4313      	orrs	r3, r2
 80075fc:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80075fe:	68fb      	ldr	r3, [r7, #12]
 8007600:	697a      	ldr	r2, [r7, #20]
 8007602:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8007604:	68fb      	ldr	r3, [r7, #12]
 8007606:	693a      	ldr	r2, [r7, #16]
 8007608:	621a      	str	r2, [r3, #32]
}
 800760a:	bf00      	nop
 800760c:	371c      	adds	r7, #28
 800760e:	46bd      	mov	sp, r7
 8007610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007614:	4770      	bx	lr

08007616 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8007616:	b480      	push	{r7}
 8007618:	b085      	sub	sp, #20
 800761a:	af00      	add	r7, sp, #0
 800761c:	6078      	str	r0, [r7, #4]
 800761e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	689b      	ldr	r3, [r3, #8]
 8007624:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8007626:	68fb      	ldr	r3, [r7, #12]
 8007628:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800762c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800762e:	683a      	ldr	r2, [r7, #0]
 8007630:	68fb      	ldr	r3, [r7, #12]
 8007632:	4313      	orrs	r3, r2
 8007634:	f043 0307 	orr.w	r3, r3, #7
 8007638:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800763a:	687b      	ldr	r3, [r7, #4]
 800763c:	68fa      	ldr	r2, [r7, #12]
 800763e:	609a      	str	r2, [r3, #8]
}
 8007640:	bf00      	nop
 8007642:	3714      	adds	r7, #20
 8007644:	46bd      	mov	sp, r7
 8007646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800764a:	4770      	bx	lr

0800764c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800764c:	b480      	push	{r7}
 800764e:	b087      	sub	sp, #28
 8007650:	af00      	add	r7, sp, #0
 8007652:	60f8      	str	r0, [r7, #12]
 8007654:	60b9      	str	r1, [r7, #8]
 8007656:	607a      	str	r2, [r7, #4]
 8007658:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800765a:	68fb      	ldr	r3, [r7, #12]
 800765c:	689b      	ldr	r3, [r3, #8]
 800765e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007660:	697b      	ldr	r3, [r7, #20]
 8007662:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007666:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007668:	683b      	ldr	r3, [r7, #0]
 800766a:	021a      	lsls	r2, r3, #8
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	431a      	orrs	r2, r3
 8007670:	68bb      	ldr	r3, [r7, #8]
 8007672:	4313      	orrs	r3, r2
 8007674:	697a      	ldr	r2, [r7, #20]
 8007676:	4313      	orrs	r3, r2
 8007678:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800767a:	68fb      	ldr	r3, [r7, #12]
 800767c:	697a      	ldr	r2, [r7, #20]
 800767e:	609a      	str	r2, [r3, #8]
}
 8007680:	bf00      	nop
 8007682:	371c      	adds	r7, #28
 8007684:	46bd      	mov	sp, r7
 8007686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800768a:	4770      	bx	lr

0800768c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800768c:	b480      	push	{r7}
 800768e:	b087      	sub	sp, #28
 8007690:	af00      	add	r7, sp, #0
 8007692:	60f8      	str	r0, [r7, #12]
 8007694:	60b9      	str	r1, [r7, #8]
 8007696:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8007698:	68bb      	ldr	r3, [r7, #8]
 800769a:	f003 031f 	and.w	r3, r3, #31
 800769e:	2201      	movs	r2, #1
 80076a0:	fa02 f303 	lsl.w	r3, r2, r3
 80076a4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80076a6:	68fb      	ldr	r3, [r7, #12]
 80076a8:	6a1a      	ldr	r2, [r3, #32]
 80076aa:	697b      	ldr	r3, [r7, #20]
 80076ac:	43db      	mvns	r3, r3
 80076ae:	401a      	ands	r2, r3
 80076b0:	68fb      	ldr	r3, [r7, #12]
 80076b2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80076b4:	68fb      	ldr	r3, [r7, #12]
 80076b6:	6a1a      	ldr	r2, [r3, #32]
 80076b8:	68bb      	ldr	r3, [r7, #8]
 80076ba:	f003 031f 	and.w	r3, r3, #31
 80076be:	6879      	ldr	r1, [r7, #4]
 80076c0:	fa01 f303 	lsl.w	r3, r1, r3
 80076c4:	431a      	orrs	r2, r3
 80076c6:	68fb      	ldr	r3, [r7, #12]
 80076c8:	621a      	str	r2, [r3, #32]
}
 80076ca:	bf00      	nop
 80076cc:	371c      	adds	r7, #28
 80076ce:	46bd      	mov	sp, r7
 80076d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076d4:	4770      	bx	lr
	...

080076d8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80076d8:	b480      	push	{r7}
 80076da:	b085      	sub	sp, #20
 80076dc:	af00      	add	r7, sp, #0
 80076de:	6078      	str	r0, [r7, #4]
 80076e0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80076e2:	687b      	ldr	r3, [r7, #4]
 80076e4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80076e8:	2b01      	cmp	r3, #1
 80076ea:	d101      	bne.n	80076f0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80076ec:	2302      	movs	r3, #2
 80076ee:	e05a      	b.n	80077a6 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	2201      	movs	r2, #1
 80076f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	2202      	movs	r2, #2
 80076fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007700:	687b      	ldr	r3, [r7, #4]
 8007702:	681b      	ldr	r3, [r3, #0]
 8007704:	685b      	ldr	r3, [r3, #4]
 8007706:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007708:	687b      	ldr	r3, [r7, #4]
 800770a:	681b      	ldr	r3, [r3, #0]
 800770c:	689b      	ldr	r3, [r3, #8]
 800770e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007710:	68fb      	ldr	r3, [r7, #12]
 8007712:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007716:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007718:	683b      	ldr	r3, [r7, #0]
 800771a:	681b      	ldr	r3, [r3, #0]
 800771c:	68fa      	ldr	r2, [r7, #12]
 800771e:	4313      	orrs	r3, r2
 8007720:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007722:	687b      	ldr	r3, [r7, #4]
 8007724:	681b      	ldr	r3, [r3, #0]
 8007726:	68fa      	ldr	r2, [r7, #12]
 8007728:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800772a:	687b      	ldr	r3, [r7, #4]
 800772c:	681b      	ldr	r3, [r3, #0]
 800772e:	4a21      	ldr	r2, [pc, #132]	; (80077b4 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8007730:	4293      	cmp	r3, r2
 8007732:	d022      	beq.n	800777a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	681b      	ldr	r3, [r3, #0]
 8007738:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800773c:	d01d      	beq.n	800777a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800773e:	687b      	ldr	r3, [r7, #4]
 8007740:	681b      	ldr	r3, [r3, #0]
 8007742:	4a1d      	ldr	r2, [pc, #116]	; (80077b8 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8007744:	4293      	cmp	r3, r2
 8007746:	d018      	beq.n	800777a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	681b      	ldr	r3, [r3, #0]
 800774c:	4a1b      	ldr	r2, [pc, #108]	; (80077bc <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800774e:	4293      	cmp	r3, r2
 8007750:	d013      	beq.n	800777a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007752:	687b      	ldr	r3, [r7, #4]
 8007754:	681b      	ldr	r3, [r3, #0]
 8007756:	4a1a      	ldr	r2, [pc, #104]	; (80077c0 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8007758:	4293      	cmp	r3, r2
 800775a:	d00e      	beq.n	800777a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	681b      	ldr	r3, [r3, #0]
 8007760:	4a18      	ldr	r2, [pc, #96]	; (80077c4 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8007762:	4293      	cmp	r3, r2
 8007764:	d009      	beq.n	800777a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007766:	687b      	ldr	r3, [r7, #4]
 8007768:	681b      	ldr	r3, [r3, #0]
 800776a:	4a17      	ldr	r2, [pc, #92]	; (80077c8 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800776c:	4293      	cmp	r3, r2
 800776e:	d004      	beq.n	800777a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007770:	687b      	ldr	r3, [r7, #4]
 8007772:	681b      	ldr	r3, [r3, #0]
 8007774:	4a15      	ldr	r2, [pc, #84]	; (80077cc <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8007776:	4293      	cmp	r3, r2
 8007778:	d10c      	bne.n	8007794 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800777a:	68bb      	ldr	r3, [r7, #8]
 800777c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007780:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007782:	683b      	ldr	r3, [r7, #0]
 8007784:	685b      	ldr	r3, [r3, #4]
 8007786:	68ba      	ldr	r2, [r7, #8]
 8007788:	4313      	orrs	r3, r2
 800778a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800778c:	687b      	ldr	r3, [r7, #4]
 800778e:	681b      	ldr	r3, [r3, #0]
 8007790:	68ba      	ldr	r2, [r7, #8]
 8007792:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	2201      	movs	r2, #1
 8007798:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800779c:	687b      	ldr	r3, [r7, #4]
 800779e:	2200      	movs	r2, #0
 80077a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80077a4:	2300      	movs	r3, #0
}
 80077a6:	4618      	mov	r0, r3
 80077a8:	3714      	adds	r7, #20
 80077aa:	46bd      	mov	sp, r7
 80077ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077b0:	4770      	bx	lr
 80077b2:	bf00      	nop
 80077b4:	40010000 	.word	0x40010000
 80077b8:	40000400 	.word	0x40000400
 80077bc:	40000800 	.word	0x40000800
 80077c0:	40000c00 	.word	0x40000c00
 80077c4:	40010400 	.word	0x40010400
 80077c8:	40014000 	.word	0x40014000
 80077cc:	40001800 	.word	0x40001800

080077d0 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80077d0:	b480      	push	{r7}
 80077d2:	b085      	sub	sp, #20
 80077d4:	af00      	add	r7, sp, #0
 80077d6:	6078      	str	r0, [r7, #4]
 80077d8:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80077da:	2300      	movs	r3, #0
 80077dc:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80077de:	687b      	ldr	r3, [r7, #4]
 80077e0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80077e4:	2b01      	cmp	r3, #1
 80077e6:	d101      	bne.n	80077ec <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80077e8:	2302      	movs	r3, #2
 80077ea:	e03d      	b.n	8007868 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	2201      	movs	r2, #1
 80077f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80077f4:	68fb      	ldr	r3, [r7, #12]
 80077f6:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80077fa:	683b      	ldr	r3, [r7, #0]
 80077fc:	68db      	ldr	r3, [r3, #12]
 80077fe:	4313      	orrs	r3, r2
 8007800:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8007802:	68fb      	ldr	r3, [r7, #12]
 8007804:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8007808:	683b      	ldr	r3, [r7, #0]
 800780a:	689b      	ldr	r3, [r3, #8]
 800780c:	4313      	orrs	r3, r2
 800780e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8007810:	68fb      	ldr	r3, [r7, #12]
 8007812:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8007816:	683b      	ldr	r3, [r7, #0]
 8007818:	685b      	ldr	r3, [r3, #4]
 800781a:	4313      	orrs	r3, r2
 800781c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800781e:	68fb      	ldr	r3, [r7, #12]
 8007820:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8007824:	683b      	ldr	r3, [r7, #0]
 8007826:	681b      	ldr	r3, [r3, #0]
 8007828:	4313      	orrs	r3, r2
 800782a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800782c:	68fb      	ldr	r3, [r7, #12]
 800782e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8007832:	683b      	ldr	r3, [r7, #0]
 8007834:	691b      	ldr	r3, [r3, #16]
 8007836:	4313      	orrs	r3, r2
 8007838:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800783a:	68fb      	ldr	r3, [r7, #12]
 800783c:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8007840:	683b      	ldr	r3, [r7, #0]
 8007842:	695b      	ldr	r3, [r3, #20]
 8007844:	4313      	orrs	r3, r2
 8007846:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8007848:	68fb      	ldr	r3, [r7, #12]
 800784a:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800784e:	683b      	ldr	r3, [r7, #0]
 8007850:	69db      	ldr	r3, [r3, #28]
 8007852:	4313      	orrs	r3, r2
 8007854:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8007856:	687b      	ldr	r3, [r7, #4]
 8007858:	681b      	ldr	r3, [r3, #0]
 800785a:	68fa      	ldr	r2, [r7, #12]
 800785c:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800785e:	687b      	ldr	r3, [r7, #4]
 8007860:	2200      	movs	r2, #0
 8007862:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007866:	2300      	movs	r3, #0
}
 8007868:	4618      	mov	r0, r3
 800786a:	3714      	adds	r7, #20
 800786c:	46bd      	mov	sp, r7
 800786e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007872:	4770      	bx	lr

08007874 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007874:	b480      	push	{r7}
 8007876:	b083      	sub	sp, #12
 8007878:	af00      	add	r7, sp, #0
 800787a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800787c:	bf00      	nop
 800787e:	370c      	adds	r7, #12
 8007880:	46bd      	mov	sp, r7
 8007882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007886:	4770      	bx	lr

08007888 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007888:	b480      	push	{r7}
 800788a:	b083      	sub	sp, #12
 800788c:	af00      	add	r7, sp, #0
 800788e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007890:	bf00      	nop
 8007892:	370c      	adds	r7, #12
 8007894:	46bd      	mov	sp, r7
 8007896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800789a:	4770      	bx	lr

0800789c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800789c:	b580      	push	{r7, lr}
 800789e:	b082      	sub	sp, #8
 80078a0:	af00      	add	r7, sp, #0
 80078a2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80078a4:	687b      	ldr	r3, [r7, #4]
 80078a6:	2b00      	cmp	r3, #0
 80078a8:	d101      	bne.n	80078ae <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80078aa:	2301      	movs	r3, #1
 80078ac:	e03f      	b.n	800792e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80078ae:	687b      	ldr	r3, [r7, #4]
 80078b0:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80078b4:	b2db      	uxtb	r3, r3
 80078b6:	2b00      	cmp	r3, #0
 80078b8:	d106      	bne.n	80078c8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80078ba:	687b      	ldr	r3, [r7, #4]
 80078bc:	2200      	movs	r2, #0
 80078be:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80078c2:	6878      	ldr	r0, [r7, #4]
 80078c4:	f7fc fb9c 	bl	8004000 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80078c8:	687b      	ldr	r3, [r7, #4]
 80078ca:	2224      	movs	r2, #36	; 0x24
 80078cc:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80078d0:	687b      	ldr	r3, [r7, #4]
 80078d2:	681b      	ldr	r3, [r3, #0]
 80078d4:	68da      	ldr	r2, [r3, #12]
 80078d6:	687b      	ldr	r3, [r7, #4]
 80078d8:	681b      	ldr	r3, [r3, #0]
 80078da:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80078de:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80078e0:	6878      	ldr	r0, [r7, #4]
 80078e2:	f000 fbf1 	bl	80080c8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80078e6:	687b      	ldr	r3, [r7, #4]
 80078e8:	681b      	ldr	r3, [r3, #0]
 80078ea:	691a      	ldr	r2, [r3, #16]
 80078ec:	687b      	ldr	r3, [r7, #4]
 80078ee:	681b      	ldr	r3, [r3, #0]
 80078f0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80078f4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80078f6:	687b      	ldr	r3, [r7, #4]
 80078f8:	681b      	ldr	r3, [r3, #0]
 80078fa:	695a      	ldr	r2, [r3, #20]
 80078fc:	687b      	ldr	r3, [r7, #4]
 80078fe:	681b      	ldr	r3, [r3, #0]
 8007900:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8007904:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8007906:	687b      	ldr	r3, [r7, #4]
 8007908:	681b      	ldr	r3, [r3, #0]
 800790a:	68da      	ldr	r2, [r3, #12]
 800790c:	687b      	ldr	r3, [r7, #4]
 800790e:	681b      	ldr	r3, [r3, #0]
 8007910:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007914:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007916:	687b      	ldr	r3, [r7, #4]
 8007918:	2200      	movs	r2, #0
 800791a:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 800791c:	687b      	ldr	r3, [r7, #4]
 800791e:	2220      	movs	r2, #32
 8007920:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8007924:	687b      	ldr	r3, [r7, #4]
 8007926:	2220      	movs	r2, #32
 8007928:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 800792c:	2300      	movs	r3, #0
}
 800792e:	4618      	mov	r0, r3
 8007930:	3708      	adds	r7, #8
 8007932:	46bd      	mov	sp, r7
 8007934:	bd80      	pop	{r7, pc}

08007936 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007936:	b580      	push	{r7, lr}
 8007938:	b088      	sub	sp, #32
 800793a:	af02      	add	r7, sp, #8
 800793c:	60f8      	str	r0, [r7, #12]
 800793e:	60b9      	str	r1, [r7, #8]
 8007940:	603b      	str	r3, [r7, #0]
 8007942:	4613      	mov	r3, r2
 8007944:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 8007946:	2300      	movs	r3, #0
 8007948:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800794a:	68fb      	ldr	r3, [r7, #12]
 800794c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8007950:	b2db      	uxtb	r3, r3
 8007952:	2b20      	cmp	r3, #32
 8007954:	f040 8083 	bne.w	8007a5e <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 8007958:	68bb      	ldr	r3, [r7, #8]
 800795a:	2b00      	cmp	r3, #0
 800795c:	d002      	beq.n	8007964 <HAL_UART_Transmit+0x2e>
 800795e:	88fb      	ldrh	r3, [r7, #6]
 8007960:	2b00      	cmp	r3, #0
 8007962:	d101      	bne.n	8007968 <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 8007964:	2301      	movs	r3, #1
 8007966:	e07b      	b.n	8007a60 <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8007968:	68fb      	ldr	r3, [r7, #12]
 800796a:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800796e:	2b01      	cmp	r3, #1
 8007970:	d101      	bne.n	8007976 <HAL_UART_Transmit+0x40>
 8007972:	2302      	movs	r3, #2
 8007974:	e074      	b.n	8007a60 <HAL_UART_Transmit+0x12a>
 8007976:	68fb      	ldr	r3, [r7, #12]
 8007978:	2201      	movs	r2, #1
 800797a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800797e:	68fb      	ldr	r3, [r7, #12]
 8007980:	2200      	movs	r2, #0
 8007982:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007984:	68fb      	ldr	r3, [r7, #12]
 8007986:	2221      	movs	r2, #33	; 0x21
 8007988:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 800798c:	f7fc fc4e 	bl	800422c <HAL_GetTick>
 8007990:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8007992:	68fb      	ldr	r3, [r7, #12]
 8007994:	88fa      	ldrh	r2, [r7, #6]
 8007996:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8007998:	68fb      	ldr	r3, [r7, #12]
 800799a:	88fa      	ldrh	r2, [r7, #6]
 800799c:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800799e:	68fb      	ldr	r3, [r7, #12]
 80079a0:	2200      	movs	r2, #0
 80079a2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 80079a6:	e042      	b.n	8007a2e <HAL_UART_Transmit+0xf8>
    {
      huart->TxXferCount--;
 80079a8:	68fb      	ldr	r3, [r7, #12]
 80079aa:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80079ac:	b29b      	uxth	r3, r3
 80079ae:	3b01      	subs	r3, #1
 80079b0:	b29a      	uxth	r2, r3
 80079b2:	68fb      	ldr	r3, [r7, #12]
 80079b4:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 80079b6:	68fb      	ldr	r3, [r7, #12]
 80079b8:	689b      	ldr	r3, [r3, #8]
 80079ba:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80079be:	d122      	bne.n	8007a06 <HAL_UART_Transmit+0xd0>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80079c0:	683b      	ldr	r3, [r7, #0]
 80079c2:	9300      	str	r3, [sp, #0]
 80079c4:	697b      	ldr	r3, [r7, #20]
 80079c6:	2200      	movs	r2, #0
 80079c8:	2180      	movs	r1, #128	; 0x80
 80079ca:	68f8      	ldr	r0, [r7, #12]
 80079cc:	f000 fa10 	bl	8007df0 <UART_WaitOnFlagUntilTimeout>
 80079d0:	4603      	mov	r3, r0
 80079d2:	2b00      	cmp	r3, #0
 80079d4:	d001      	beq.n	80079da <HAL_UART_Transmit+0xa4>
        {
          return HAL_TIMEOUT;
 80079d6:	2303      	movs	r3, #3
 80079d8:	e042      	b.n	8007a60 <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 80079da:	68bb      	ldr	r3, [r7, #8]
 80079dc:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 80079de:	693b      	ldr	r3, [r7, #16]
 80079e0:	881b      	ldrh	r3, [r3, #0]
 80079e2:	461a      	mov	r2, r3
 80079e4:	68fb      	ldr	r3, [r7, #12]
 80079e6:	681b      	ldr	r3, [r3, #0]
 80079e8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80079ec:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 80079ee:	68fb      	ldr	r3, [r7, #12]
 80079f0:	691b      	ldr	r3, [r3, #16]
 80079f2:	2b00      	cmp	r3, #0
 80079f4:	d103      	bne.n	80079fe <HAL_UART_Transmit+0xc8>
        {
          pData += 2U;
 80079f6:	68bb      	ldr	r3, [r7, #8]
 80079f8:	3302      	adds	r3, #2
 80079fa:	60bb      	str	r3, [r7, #8]
 80079fc:	e017      	b.n	8007a2e <HAL_UART_Transmit+0xf8>
        }
        else
        {
          pData += 1U;
 80079fe:	68bb      	ldr	r3, [r7, #8]
 8007a00:	3301      	adds	r3, #1
 8007a02:	60bb      	str	r3, [r7, #8]
 8007a04:	e013      	b.n	8007a2e <HAL_UART_Transmit+0xf8>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8007a06:	683b      	ldr	r3, [r7, #0]
 8007a08:	9300      	str	r3, [sp, #0]
 8007a0a:	697b      	ldr	r3, [r7, #20]
 8007a0c:	2200      	movs	r2, #0
 8007a0e:	2180      	movs	r1, #128	; 0x80
 8007a10:	68f8      	ldr	r0, [r7, #12]
 8007a12:	f000 f9ed 	bl	8007df0 <UART_WaitOnFlagUntilTimeout>
 8007a16:	4603      	mov	r3, r0
 8007a18:	2b00      	cmp	r3, #0
 8007a1a:	d001      	beq.n	8007a20 <HAL_UART_Transmit+0xea>
        {
          return HAL_TIMEOUT;
 8007a1c:	2303      	movs	r3, #3
 8007a1e:	e01f      	b.n	8007a60 <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8007a20:	68bb      	ldr	r3, [r7, #8]
 8007a22:	1c5a      	adds	r2, r3, #1
 8007a24:	60ba      	str	r2, [r7, #8]
 8007a26:	781a      	ldrb	r2, [r3, #0]
 8007a28:	68fb      	ldr	r3, [r7, #12]
 8007a2a:	681b      	ldr	r3, [r3, #0]
 8007a2c:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 8007a2e:	68fb      	ldr	r3, [r7, #12]
 8007a30:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8007a32:	b29b      	uxth	r3, r3
 8007a34:	2b00      	cmp	r3, #0
 8007a36:	d1b7      	bne.n	80079a8 <HAL_UART_Transmit+0x72>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8007a38:	683b      	ldr	r3, [r7, #0]
 8007a3a:	9300      	str	r3, [sp, #0]
 8007a3c:	697b      	ldr	r3, [r7, #20]
 8007a3e:	2200      	movs	r2, #0
 8007a40:	2140      	movs	r1, #64	; 0x40
 8007a42:	68f8      	ldr	r0, [r7, #12]
 8007a44:	f000 f9d4 	bl	8007df0 <UART_WaitOnFlagUntilTimeout>
 8007a48:	4603      	mov	r3, r0
 8007a4a:	2b00      	cmp	r3, #0
 8007a4c:	d001      	beq.n	8007a52 <HAL_UART_Transmit+0x11c>
    {
      return HAL_TIMEOUT;
 8007a4e:	2303      	movs	r3, #3
 8007a50:	e006      	b.n	8007a60 <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8007a52:	68fb      	ldr	r3, [r7, #12]
 8007a54:	2220      	movs	r2, #32
 8007a56:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 8007a5a:	2300      	movs	r3, #0
 8007a5c:	e000      	b.n	8007a60 <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 8007a5e:	2302      	movs	r3, #2
  }
}
 8007a60:	4618      	mov	r0, r3
 8007a62:	3718      	adds	r7, #24
 8007a64:	46bd      	mov	sp, r7
 8007a66:	bd80      	pop	{r7, pc}

08007a68 <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007a68:	b580      	push	{r7, lr}
 8007a6a:	b088      	sub	sp, #32
 8007a6c:	af02      	add	r7, sp, #8
 8007a6e:	60f8      	str	r0, [r7, #12]
 8007a70:	60b9      	str	r1, [r7, #8]
 8007a72:	603b      	str	r3, [r7, #0]
 8007a74:	4613      	mov	r3, r2
 8007a76:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 8007a78:	2300      	movs	r3, #0
 8007a7a:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8007a7c:	68fb      	ldr	r3, [r7, #12]
 8007a7e:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8007a82:	b2db      	uxtb	r3, r3
 8007a84:	2b20      	cmp	r3, #32
 8007a86:	f040 8090 	bne.w	8007baa <HAL_UART_Receive+0x142>
  {
    if ((pData == NULL) || (Size == 0U))
 8007a8a:	68bb      	ldr	r3, [r7, #8]
 8007a8c:	2b00      	cmp	r3, #0
 8007a8e:	d002      	beq.n	8007a96 <HAL_UART_Receive+0x2e>
 8007a90:	88fb      	ldrh	r3, [r7, #6]
 8007a92:	2b00      	cmp	r3, #0
 8007a94:	d101      	bne.n	8007a9a <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8007a96:	2301      	movs	r3, #1
 8007a98:	e088      	b.n	8007bac <HAL_UART_Receive+0x144>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8007a9a:	68fb      	ldr	r3, [r7, #12]
 8007a9c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8007aa0:	2b01      	cmp	r3, #1
 8007aa2:	d101      	bne.n	8007aa8 <HAL_UART_Receive+0x40>
 8007aa4:	2302      	movs	r3, #2
 8007aa6:	e081      	b.n	8007bac <HAL_UART_Receive+0x144>
 8007aa8:	68fb      	ldr	r3, [r7, #12]
 8007aaa:	2201      	movs	r2, #1
 8007aac:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007ab0:	68fb      	ldr	r3, [r7, #12]
 8007ab2:	2200      	movs	r2, #0
 8007ab4:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8007ab6:	68fb      	ldr	r3, [r7, #12]
 8007ab8:	2222      	movs	r2, #34	; 0x22
 8007aba:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8007abe:	f7fc fbb5 	bl	800422c <HAL_GetTick>
 8007ac2:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8007ac4:	68fb      	ldr	r3, [r7, #12]
 8007ac6:	88fa      	ldrh	r2, [r7, #6]
 8007ac8:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8007aca:	68fb      	ldr	r3, [r7, #12]
 8007acc:	88fa      	ldrh	r2, [r7, #6]
 8007ace:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8007ad0:	68fb      	ldr	r3, [r7, #12]
 8007ad2:	2200      	movs	r2, #0
 8007ad4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8007ad8:	e05c      	b.n	8007b94 <HAL_UART_Receive+0x12c>
    {
      huart->RxXferCount--;
 8007ada:	68fb      	ldr	r3, [r7, #12]
 8007adc:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007ade:	b29b      	uxth	r3, r3
 8007ae0:	3b01      	subs	r3, #1
 8007ae2:	b29a      	uxth	r2, r3
 8007ae4:	68fb      	ldr	r3, [r7, #12]
 8007ae6:	85da      	strh	r2, [r3, #46]	; 0x2e
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8007ae8:	68fb      	ldr	r3, [r7, #12]
 8007aea:	689b      	ldr	r3, [r3, #8]
 8007aec:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007af0:	d12b      	bne.n	8007b4a <HAL_UART_Receive+0xe2>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8007af2:	683b      	ldr	r3, [r7, #0]
 8007af4:	9300      	str	r3, [sp, #0]
 8007af6:	697b      	ldr	r3, [r7, #20]
 8007af8:	2200      	movs	r2, #0
 8007afa:	2120      	movs	r1, #32
 8007afc:	68f8      	ldr	r0, [r7, #12]
 8007afe:	f000 f977 	bl	8007df0 <UART_WaitOnFlagUntilTimeout>
 8007b02:	4603      	mov	r3, r0
 8007b04:	2b00      	cmp	r3, #0
 8007b06:	d001      	beq.n	8007b0c <HAL_UART_Receive+0xa4>
        {
          return HAL_TIMEOUT;
 8007b08:	2303      	movs	r3, #3
 8007b0a:	e04f      	b.n	8007bac <HAL_UART_Receive+0x144>
        }
        tmp = (uint16_t *) pData;
 8007b0c:	68bb      	ldr	r3, [r7, #8]
 8007b0e:	613b      	str	r3, [r7, #16]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8007b10:	68fb      	ldr	r3, [r7, #12]
 8007b12:	691b      	ldr	r3, [r3, #16]
 8007b14:	2b00      	cmp	r3, #0
 8007b16:	d10c      	bne.n	8007b32 <HAL_UART_Receive+0xca>
        {
          *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8007b18:	68fb      	ldr	r3, [r7, #12]
 8007b1a:	681b      	ldr	r3, [r3, #0]
 8007b1c:	685b      	ldr	r3, [r3, #4]
 8007b1e:	b29b      	uxth	r3, r3
 8007b20:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007b24:	b29a      	uxth	r2, r3
 8007b26:	693b      	ldr	r3, [r7, #16]
 8007b28:	801a      	strh	r2, [r3, #0]
          pData += 2U;
 8007b2a:	68bb      	ldr	r3, [r7, #8]
 8007b2c:	3302      	adds	r3, #2
 8007b2e:	60bb      	str	r3, [r7, #8]
 8007b30:	e030      	b.n	8007b94 <HAL_UART_Receive+0x12c>
        }
        else
        {
          *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 8007b32:	68fb      	ldr	r3, [r7, #12]
 8007b34:	681b      	ldr	r3, [r3, #0]
 8007b36:	685b      	ldr	r3, [r3, #4]
 8007b38:	b29b      	uxth	r3, r3
 8007b3a:	b2db      	uxtb	r3, r3
 8007b3c:	b29a      	uxth	r2, r3
 8007b3e:	693b      	ldr	r3, [r7, #16]
 8007b40:	801a      	strh	r2, [r3, #0]
          pData += 1U;
 8007b42:	68bb      	ldr	r3, [r7, #8]
 8007b44:	3301      	adds	r3, #1
 8007b46:	60bb      	str	r3, [r7, #8]
 8007b48:	e024      	b.n	8007b94 <HAL_UART_Receive+0x12c>
        }

      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8007b4a:	683b      	ldr	r3, [r7, #0]
 8007b4c:	9300      	str	r3, [sp, #0]
 8007b4e:	697b      	ldr	r3, [r7, #20]
 8007b50:	2200      	movs	r2, #0
 8007b52:	2120      	movs	r1, #32
 8007b54:	68f8      	ldr	r0, [r7, #12]
 8007b56:	f000 f94b 	bl	8007df0 <UART_WaitOnFlagUntilTimeout>
 8007b5a:	4603      	mov	r3, r0
 8007b5c:	2b00      	cmp	r3, #0
 8007b5e:	d001      	beq.n	8007b64 <HAL_UART_Receive+0xfc>
        {
          return HAL_TIMEOUT;
 8007b60:	2303      	movs	r3, #3
 8007b62:	e023      	b.n	8007bac <HAL_UART_Receive+0x144>
        }
        if (huart->Init.Parity == UART_PARITY_NONE)
 8007b64:	68fb      	ldr	r3, [r7, #12]
 8007b66:	691b      	ldr	r3, [r3, #16]
 8007b68:	2b00      	cmp	r3, #0
 8007b6a:	d108      	bne.n	8007b7e <HAL_UART_Receive+0x116>
        {
          *pData++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8007b6c:	68fb      	ldr	r3, [r7, #12]
 8007b6e:	681b      	ldr	r3, [r3, #0]
 8007b70:	6859      	ldr	r1, [r3, #4]
 8007b72:	68bb      	ldr	r3, [r7, #8]
 8007b74:	1c5a      	adds	r2, r3, #1
 8007b76:	60ba      	str	r2, [r7, #8]
 8007b78:	b2ca      	uxtb	r2, r1
 8007b7a:	701a      	strb	r2, [r3, #0]
 8007b7c:	e00a      	b.n	8007b94 <HAL_UART_Receive+0x12c>
        }
        else
        {
          *pData++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8007b7e:	68fb      	ldr	r3, [r7, #12]
 8007b80:	681b      	ldr	r3, [r3, #0]
 8007b82:	685b      	ldr	r3, [r3, #4]
 8007b84:	b2da      	uxtb	r2, r3
 8007b86:	68bb      	ldr	r3, [r7, #8]
 8007b88:	1c59      	adds	r1, r3, #1
 8007b8a:	60b9      	str	r1, [r7, #8]
 8007b8c:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8007b90:	b2d2      	uxtb	r2, r2
 8007b92:	701a      	strb	r2, [r3, #0]
    while (huart->RxXferCount > 0U)
 8007b94:	68fb      	ldr	r3, [r7, #12]
 8007b96:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007b98:	b29b      	uxth	r3, r3
 8007b9a:	2b00      	cmp	r3, #0
 8007b9c:	d19d      	bne.n	8007ada <HAL_UART_Receive+0x72>

      }
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8007b9e:	68fb      	ldr	r3, [r7, #12]
 8007ba0:	2220      	movs	r2, #32
 8007ba2:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    return HAL_OK;
 8007ba6:	2300      	movs	r3, #0
 8007ba8:	e000      	b.n	8007bac <HAL_UART_Receive+0x144>
  }
  else
  {
    return HAL_BUSY;
 8007baa:	2302      	movs	r3, #2
  }
}
 8007bac:	4618      	mov	r0, r3
 8007bae:	3718      	adds	r7, #24
 8007bb0:	46bd      	mov	sp, r7
 8007bb2:	bd80      	pop	{r7, pc}

08007bb4 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8007bb4:	b580      	push	{r7, lr}
 8007bb6:	b088      	sub	sp, #32
 8007bb8:	af00      	add	r7, sp, #0
 8007bba:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8007bbc:	687b      	ldr	r3, [r7, #4]
 8007bbe:	681b      	ldr	r3, [r3, #0]
 8007bc0:	681b      	ldr	r3, [r3, #0]
 8007bc2:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8007bc4:	687b      	ldr	r3, [r7, #4]
 8007bc6:	681b      	ldr	r3, [r3, #0]
 8007bc8:	68db      	ldr	r3, [r3, #12]
 8007bca:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8007bcc:	687b      	ldr	r3, [r7, #4]
 8007bce:	681b      	ldr	r3, [r3, #0]
 8007bd0:	695b      	ldr	r3, [r3, #20]
 8007bd2:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 8007bd4:	2300      	movs	r3, #0
 8007bd6:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 8007bd8:	2300      	movs	r3, #0
 8007bda:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8007bdc:	69fb      	ldr	r3, [r7, #28]
 8007bde:	f003 030f 	and.w	r3, r3, #15
 8007be2:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 8007be4:	693b      	ldr	r3, [r7, #16]
 8007be6:	2b00      	cmp	r3, #0
 8007be8:	d10d      	bne.n	8007c06 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8007bea:	69fb      	ldr	r3, [r7, #28]
 8007bec:	f003 0320 	and.w	r3, r3, #32
 8007bf0:	2b00      	cmp	r3, #0
 8007bf2:	d008      	beq.n	8007c06 <HAL_UART_IRQHandler+0x52>
 8007bf4:	69bb      	ldr	r3, [r7, #24]
 8007bf6:	f003 0320 	and.w	r3, r3, #32
 8007bfa:	2b00      	cmp	r3, #0
 8007bfc:	d003      	beq.n	8007c06 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8007bfe:	6878      	ldr	r0, [r7, #4]
 8007c00:	f000 f9e0 	bl	8007fc4 <UART_Receive_IT>
      return;
 8007c04:	e0d1      	b.n	8007daa <HAL_UART_IRQHandler+0x1f6>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8007c06:	693b      	ldr	r3, [r7, #16]
 8007c08:	2b00      	cmp	r3, #0
 8007c0a:	f000 80b0 	beq.w	8007d6e <HAL_UART_IRQHandler+0x1ba>
 8007c0e:	697b      	ldr	r3, [r7, #20]
 8007c10:	f003 0301 	and.w	r3, r3, #1
 8007c14:	2b00      	cmp	r3, #0
 8007c16:	d105      	bne.n	8007c24 <HAL_UART_IRQHandler+0x70>
 8007c18:	69bb      	ldr	r3, [r7, #24]
 8007c1a:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8007c1e:	2b00      	cmp	r3, #0
 8007c20:	f000 80a5 	beq.w	8007d6e <HAL_UART_IRQHandler+0x1ba>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8007c24:	69fb      	ldr	r3, [r7, #28]
 8007c26:	f003 0301 	and.w	r3, r3, #1
 8007c2a:	2b00      	cmp	r3, #0
 8007c2c:	d00a      	beq.n	8007c44 <HAL_UART_IRQHandler+0x90>
 8007c2e:	69bb      	ldr	r3, [r7, #24]
 8007c30:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007c34:	2b00      	cmp	r3, #0
 8007c36:	d005      	beq.n	8007c44 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007c38:	687b      	ldr	r3, [r7, #4]
 8007c3a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007c3c:	f043 0201 	orr.w	r2, r3, #1
 8007c40:	687b      	ldr	r3, [r7, #4]
 8007c42:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8007c44:	69fb      	ldr	r3, [r7, #28]
 8007c46:	f003 0304 	and.w	r3, r3, #4
 8007c4a:	2b00      	cmp	r3, #0
 8007c4c:	d00a      	beq.n	8007c64 <HAL_UART_IRQHandler+0xb0>
 8007c4e:	697b      	ldr	r3, [r7, #20]
 8007c50:	f003 0301 	and.w	r3, r3, #1
 8007c54:	2b00      	cmp	r3, #0
 8007c56:	d005      	beq.n	8007c64 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007c58:	687b      	ldr	r3, [r7, #4]
 8007c5a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007c5c:	f043 0202 	orr.w	r2, r3, #2
 8007c60:	687b      	ldr	r3, [r7, #4]
 8007c62:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8007c64:	69fb      	ldr	r3, [r7, #28]
 8007c66:	f003 0302 	and.w	r3, r3, #2
 8007c6a:	2b00      	cmp	r3, #0
 8007c6c:	d00a      	beq.n	8007c84 <HAL_UART_IRQHandler+0xd0>
 8007c6e:	697b      	ldr	r3, [r7, #20]
 8007c70:	f003 0301 	and.w	r3, r3, #1
 8007c74:	2b00      	cmp	r3, #0
 8007c76:	d005      	beq.n	8007c84 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007c78:	687b      	ldr	r3, [r7, #4]
 8007c7a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007c7c:	f043 0204 	orr.w	r2, r3, #4
 8007c80:	687b      	ldr	r3, [r7, #4]
 8007c82:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8007c84:	69fb      	ldr	r3, [r7, #28]
 8007c86:	f003 0308 	and.w	r3, r3, #8
 8007c8a:	2b00      	cmp	r3, #0
 8007c8c:	d00f      	beq.n	8007cae <HAL_UART_IRQHandler+0xfa>
 8007c8e:	69bb      	ldr	r3, [r7, #24]
 8007c90:	f003 0320 	and.w	r3, r3, #32
 8007c94:	2b00      	cmp	r3, #0
 8007c96:	d104      	bne.n	8007ca2 <HAL_UART_IRQHandler+0xee>
 8007c98:	697b      	ldr	r3, [r7, #20]
 8007c9a:	f003 0301 	and.w	r3, r3, #1
 8007c9e:	2b00      	cmp	r3, #0
 8007ca0:	d005      	beq.n	8007cae <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8007ca2:	687b      	ldr	r3, [r7, #4]
 8007ca4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007ca6:	f043 0208 	orr.w	r2, r3, #8
 8007caa:	687b      	ldr	r3, [r7, #4]
 8007cac:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8007cae:	687b      	ldr	r3, [r7, #4]
 8007cb0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007cb2:	2b00      	cmp	r3, #0
 8007cb4:	d078      	beq.n	8007da8 <HAL_UART_IRQHandler+0x1f4>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8007cb6:	69fb      	ldr	r3, [r7, #28]
 8007cb8:	f003 0320 	and.w	r3, r3, #32
 8007cbc:	2b00      	cmp	r3, #0
 8007cbe:	d007      	beq.n	8007cd0 <HAL_UART_IRQHandler+0x11c>
 8007cc0:	69bb      	ldr	r3, [r7, #24]
 8007cc2:	f003 0320 	and.w	r3, r3, #32
 8007cc6:	2b00      	cmp	r3, #0
 8007cc8:	d002      	beq.n	8007cd0 <HAL_UART_IRQHandler+0x11c>
      {
        UART_Receive_IT(huart);
 8007cca:	6878      	ldr	r0, [r7, #4]
 8007ccc:	f000 f97a 	bl	8007fc4 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8007cd0:	687b      	ldr	r3, [r7, #4]
 8007cd2:	681b      	ldr	r3, [r3, #0]
 8007cd4:	695b      	ldr	r3, [r3, #20]
 8007cd6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007cda:	2b40      	cmp	r3, #64	; 0x40
 8007cdc:	bf0c      	ite	eq
 8007cde:	2301      	moveq	r3, #1
 8007ce0:	2300      	movne	r3, #0
 8007ce2:	b2db      	uxtb	r3, r3
 8007ce4:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8007ce6:	687b      	ldr	r3, [r7, #4]
 8007ce8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007cea:	f003 0308 	and.w	r3, r3, #8
 8007cee:	2b00      	cmp	r3, #0
 8007cf0:	d102      	bne.n	8007cf8 <HAL_UART_IRQHandler+0x144>
 8007cf2:	68fb      	ldr	r3, [r7, #12]
 8007cf4:	2b00      	cmp	r3, #0
 8007cf6:	d031      	beq.n	8007d5c <HAL_UART_IRQHandler+0x1a8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8007cf8:	6878      	ldr	r0, [r7, #4]
 8007cfa:	f000 f8c3 	bl	8007e84 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007cfe:	687b      	ldr	r3, [r7, #4]
 8007d00:	681b      	ldr	r3, [r3, #0]
 8007d02:	695b      	ldr	r3, [r3, #20]
 8007d04:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007d08:	2b40      	cmp	r3, #64	; 0x40
 8007d0a:	d123      	bne.n	8007d54 <HAL_UART_IRQHandler+0x1a0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007d0c:	687b      	ldr	r3, [r7, #4]
 8007d0e:	681b      	ldr	r3, [r3, #0]
 8007d10:	695a      	ldr	r2, [r3, #20]
 8007d12:	687b      	ldr	r3, [r7, #4]
 8007d14:	681b      	ldr	r3, [r3, #0]
 8007d16:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007d1a:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8007d1c:	687b      	ldr	r3, [r7, #4]
 8007d1e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007d20:	2b00      	cmp	r3, #0
 8007d22:	d013      	beq.n	8007d4c <HAL_UART_IRQHandler+0x198>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8007d24:	687b      	ldr	r3, [r7, #4]
 8007d26:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007d28:	4a21      	ldr	r2, [pc, #132]	; (8007db0 <HAL_UART_IRQHandler+0x1fc>)
 8007d2a:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8007d2c:	687b      	ldr	r3, [r7, #4]
 8007d2e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007d30:	4618      	mov	r0, r3
 8007d32:	f7fc fd83 	bl	800483c <HAL_DMA_Abort_IT>
 8007d36:	4603      	mov	r3, r0
 8007d38:	2b00      	cmp	r3, #0
 8007d3a:	d016      	beq.n	8007d6a <HAL_UART_IRQHandler+0x1b6>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8007d3c:	687b      	ldr	r3, [r7, #4]
 8007d3e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007d40:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007d42:	687a      	ldr	r2, [r7, #4]
 8007d44:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8007d46:	4610      	mov	r0, r2
 8007d48:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007d4a:	e00e      	b.n	8007d6a <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8007d4c:	6878      	ldr	r0, [r7, #4]
 8007d4e:	f000 f845 	bl	8007ddc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007d52:	e00a      	b.n	8007d6a <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8007d54:	6878      	ldr	r0, [r7, #4]
 8007d56:	f000 f841 	bl	8007ddc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007d5a:	e006      	b.n	8007d6a <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8007d5c:	6878      	ldr	r0, [r7, #4]
 8007d5e:	f000 f83d 	bl	8007ddc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007d62:	687b      	ldr	r3, [r7, #4]
 8007d64:	2200      	movs	r2, #0
 8007d66:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 8007d68:	e01e      	b.n	8007da8 <HAL_UART_IRQHandler+0x1f4>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007d6a:	bf00      	nop
    return;
 8007d6c:	e01c      	b.n	8007da8 <HAL_UART_IRQHandler+0x1f4>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8007d6e:	69fb      	ldr	r3, [r7, #28]
 8007d70:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007d74:	2b00      	cmp	r3, #0
 8007d76:	d008      	beq.n	8007d8a <HAL_UART_IRQHandler+0x1d6>
 8007d78:	69bb      	ldr	r3, [r7, #24]
 8007d7a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007d7e:	2b00      	cmp	r3, #0
 8007d80:	d003      	beq.n	8007d8a <HAL_UART_IRQHandler+0x1d6>
  {
    UART_Transmit_IT(huart);
 8007d82:	6878      	ldr	r0, [r7, #4]
 8007d84:	f000 f8b0 	bl	8007ee8 <UART_Transmit_IT>
    return;
 8007d88:	e00f      	b.n	8007daa <HAL_UART_IRQHandler+0x1f6>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8007d8a:	69fb      	ldr	r3, [r7, #28]
 8007d8c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007d90:	2b00      	cmp	r3, #0
 8007d92:	d00a      	beq.n	8007daa <HAL_UART_IRQHandler+0x1f6>
 8007d94:	69bb      	ldr	r3, [r7, #24]
 8007d96:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007d9a:	2b00      	cmp	r3, #0
 8007d9c:	d005      	beq.n	8007daa <HAL_UART_IRQHandler+0x1f6>
  {
    UART_EndTransmit_IT(huart);
 8007d9e:	6878      	ldr	r0, [r7, #4]
 8007da0:	f000 f8f8 	bl	8007f94 <UART_EndTransmit_IT>
    return;
 8007da4:	bf00      	nop
 8007da6:	e000      	b.n	8007daa <HAL_UART_IRQHandler+0x1f6>
    return;
 8007da8:	bf00      	nop
  }
}
 8007daa:	3720      	adds	r7, #32
 8007dac:	46bd      	mov	sp, r7
 8007dae:	bd80      	pop	{r7, pc}
 8007db0:	08007ec1 	.word	0x08007ec1

08007db4 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8007db4:	b480      	push	{r7}
 8007db6:	b083      	sub	sp, #12
 8007db8:	af00      	add	r7, sp, #0
 8007dba:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8007dbc:	bf00      	nop
 8007dbe:	370c      	adds	r7, #12
 8007dc0:	46bd      	mov	sp, r7
 8007dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dc6:	4770      	bx	lr

08007dc8 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8007dc8:	b480      	push	{r7}
 8007dca:	b083      	sub	sp, #12
 8007dcc:	af00      	add	r7, sp, #0
 8007dce:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8007dd0:	bf00      	nop
 8007dd2:	370c      	adds	r7, #12
 8007dd4:	46bd      	mov	sp, r7
 8007dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dda:	4770      	bx	lr

08007ddc <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8007ddc:	b480      	push	{r7}
 8007dde:	b083      	sub	sp, #12
 8007de0:	af00      	add	r7, sp, #0
 8007de2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8007de4:	bf00      	nop
 8007de6:	370c      	adds	r7, #12
 8007de8:	46bd      	mov	sp, r7
 8007dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dee:	4770      	bx	lr

08007df0 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8007df0:	b580      	push	{r7, lr}
 8007df2:	b084      	sub	sp, #16
 8007df4:	af00      	add	r7, sp, #0
 8007df6:	60f8      	str	r0, [r7, #12]
 8007df8:	60b9      	str	r1, [r7, #8]
 8007dfa:	603b      	str	r3, [r7, #0]
 8007dfc:	4613      	mov	r3, r2
 8007dfe:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007e00:	e02c      	b.n	8007e5c <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007e02:	69bb      	ldr	r3, [r7, #24]
 8007e04:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007e08:	d028      	beq.n	8007e5c <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8007e0a:	69bb      	ldr	r3, [r7, #24]
 8007e0c:	2b00      	cmp	r3, #0
 8007e0e:	d007      	beq.n	8007e20 <UART_WaitOnFlagUntilTimeout+0x30>
 8007e10:	f7fc fa0c 	bl	800422c <HAL_GetTick>
 8007e14:	4602      	mov	r2, r0
 8007e16:	683b      	ldr	r3, [r7, #0]
 8007e18:	1ad3      	subs	r3, r2, r3
 8007e1a:	69ba      	ldr	r2, [r7, #24]
 8007e1c:	429a      	cmp	r2, r3
 8007e1e:	d21d      	bcs.n	8007e5c <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8007e20:	68fb      	ldr	r3, [r7, #12]
 8007e22:	681b      	ldr	r3, [r3, #0]
 8007e24:	68da      	ldr	r2, [r3, #12]
 8007e26:	68fb      	ldr	r3, [r7, #12]
 8007e28:	681b      	ldr	r3, [r3, #0]
 8007e2a:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8007e2e:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007e30:	68fb      	ldr	r3, [r7, #12]
 8007e32:	681b      	ldr	r3, [r3, #0]
 8007e34:	695a      	ldr	r2, [r3, #20]
 8007e36:	68fb      	ldr	r3, [r7, #12]
 8007e38:	681b      	ldr	r3, [r3, #0]
 8007e3a:	f022 0201 	bic.w	r2, r2, #1
 8007e3e:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8007e40:	68fb      	ldr	r3, [r7, #12]
 8007e42:	2220      	movs	r2, #32
 8007e44:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8007e48:	68fb      	ldr	r3, [r7, #12]
 8007e4a:	2220      	movs	r2, #32
 8007e4c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8007e50:	68fb      	ldr	r3, [r7, #12]
 8007e52:	2200      	movs	r2, #0
 8007e54:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 8007e58:	2303      	movs	r3, #3
 8007e5a:	e00f      	b.n	8007e7c <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007e5c:	68fb      	ldr	r3, [r7, #12]
 8007e5e:	681b      	ldr	r3, [r3, #0]
 8007e60:	681a      	ldr	r2, [r3, #0]
 8007e62:	68bb      	ldr	r3, [r7, #8]
 8007e64:	4013      	ands	r3, r2
 8007e66:	68ba      	ldr	r2, [r7, #8]
 8007e68:	429a      	cmp	r2, r3
 8007e6a:	bf0c      	ite	eq
 8007e6c:	2301      	moveq	r3, #1
 8007e6e:	2300      	movne	r3, #0
 8007e70:	b2db      	uxtb	r3, r3
 8007e72:	461a      	mov	r2, r3
 8007e74:	79fb      	ldrb	r3, [r7, #7]
 8007e76:	429a      	cmp	r2, r3
 8007e78:	d0c3      	beq.n	8007e02 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8007e7a:	2300      	movs	r3, #0
}
 8007e7c:	4618      	mov	r0, r3
 8007e7e:	3710      	adds	r7, #16
 8007e80:	46bd      	mov	sp, r7
 8007e82:	bd80      	pop	{r7, pc}

08007e84 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007e84:	b480      	push	{r7}
 8007e86:	b083      	sub	sp, #12
 8007e88:	af00      	add	r7, sp, #0
 8007e8a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007e8c:	687b      	ldr	r3, [r7, #4]
 8007e8e:	681b      	ldr	r3, [r3, #0]
 8007e90:	68da      	ldr	r2, [r3, #12]
 8007e92:	687b      	ldr	r3, [r7, #4]
 8007e94:	681b      	ldr	r3, [r3, #0]
 8007e96:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8007e9a:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007e9c:	687b      	ldr	r3, [r7, #4]
 8007e9e:	681b      	ldr	r3, [r3, #0]
 8007ea0:	695a      	ldr	r2, [r3, #20]
 8007ea2:	687b      	ldr	r3, [r7, #4]
 8007ea4:	681b      	ldr	r3, [r3, #0]
 8007ea6:	f022 0201 	bic.w	r2, r2, #1
 8007eaa:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007eac:	687b      	ldr	r3, [r7, #4]
 8007eae:	2220      	movs	r2, #32
 8007eb0:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 8007eb4:	bf00      	nop
 8007eb6:	370c      	adds	r7, #12
 8007eb8:	46bd      	mov	sp, r7
 8007eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ebe:	4770      	bx	lr

08007ec0 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007ec0:	b580      	push	{r7, lr}
 8007ec2:	b084      	sub	sp, #16
 8007ec4:	af00      	add	r7, sp, #0
 8007ec6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007ec8:	687b      	ldr	r3, [r7, #4]
 8007eca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007ecc:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8007ece:	68fb      	ldr	r3, [r7, #12]
 8007ed0:	2200      	movs	r2, #0
 8007ed2:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8007ed4:	68fb      	ldr	r3, [r7, #12]
 8007ed6:	2200      	movs	r2, #0
 8007ed8:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007eda:	68f8      	ldr	r0, [r7, #12]
 8007edc:	f7ff ff7e 	bl	8007ddc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007ee0:	bf00      	nop
 8007ee2:	3710      	adds	r7, #16
 8007ee4:	46bd      	mov	sp, r7
 8007ee6:	bd80      	pop	{r7, pc}

08007ee8 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8007ee8:	b480      	push	{r7}
 8007eea:	b085      	sub	sp, #20
 8007eec:	af00      	add	r7, sp, #0
 8007eee:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8007ef0:	687b      	ldr	r3, [r7, #4]
 8007ef2:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8007ef6:	b2db      	uxtb	r3, r3
 8007ef8:	2b21      	cmp	r3, #33	; 0x21
 8007efa:	d144      	bne.n	8007f86 <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8007efc:	687b      	ldr	r3, [r7, #4]
 8007efe:	689b      	ldr	r3, [r3, #8]
 8007f00:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007f04:	d11a      	bne.n	8007f3c <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8007f06:	687b      	ldr	r3, [r7, #4]
 8007f08:	6a1b      	ldr	r3, [r3, #32]
 8007f0a:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8007f0c:	68fb      	ldr	r3, [r7, #12]
 8007f0e:	881b      	ldrh	r3, [r3, #0]
 8007f10:	461a      	mov	r2, r3
 8007f12:	687b      	ldr	r3, [r7, #4]
 8007f14:	681b      	ldr	r3, [r3, #0]
 8007f16:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007f1a:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8007f1c:	687b      	ldr	r3, [r7, #4]
 8007f1e:	691b      	ldr	r3, [r3, #16]
 8007f20:	2b00      	cmp	r3, #0
 8007f22:	d105      	bne.n	8007f30 <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 8007f24:	687b      	ldr	r3, [r7, #4]
 8007f26:	6a1b      	ldr	r3, [r3, #32]
 8007f28:	1c9a      	adds	r2, r3, #2
 8007f2a:	687b      	ldr	r3, [r7, #4]
 8007f2c:	621a      	str	r2, [r3, #32]
 8007f2e:	e00e      	b.n	8007f4e <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 8007f30:	687b      	ldr	r3, [r7, #4]
 8007f32:	6a1b      	ldr	r3, [r3, #32]
 8007f34:	1c5a      	adds	r2, r3, #1
 8007f36:	687b      	ldr	r3, [r7, #4]
 8007f38:	621a      	str	r2, [r3, #32]
 8007f3a:	e008      	b.n	8007f4e <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8007f3c:	687b      	ldr	r3, [r7, #4]
 8007f3e:	6a1b      	ldr	r3, [r3, #32]
 8007f40:	1c59      	adds	r1, r3, #1
 8007f42:	687a      	ldr	r2, [r7, #4]
 8007f44:	6211      	str	r1, [r2, #32]
 8007f46:	781a      	ldrb	r2, [r3, #0]
 8007f48:	687b      	ldr	r3, [r7, #4]
 8007f4a:	681b      	ldr	r3, [r3, #0]
 8007f4c:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8007f4e:	687b      	ldr	r3, [r7, #4]
 8007f50:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8007f52:	b29b      	uxth	r3, r3
 8007f54:	3b01      	subs	r3, #1
 8007f56:	b29b      	uxth	r3, r3
 8007f58:	687a      	ldr	r2, [r7, #4]
 8007f5a:	4619      	mov	r1, r3
 8007f5c:	84d1      	strh	r1, [r2, #38]	; 0x26
 8007f5e:	2b00      	cmp	r3, #0
 8007f60:	d10f      	bne.n	8007f82 <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8007f62:	687b      	ldr	r3, [r7, #4]
 8007f64:	681b      	ldr	r3, [r3, #0]
 8007f66:	68da      	ldr	r2, [r3, #12]
 8007f68:	687b      	ldr	r3, [r7, #4]
 8007f6a:	681b      	ldr	r3, [r3, #0]
 8007f6c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007f70:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8007f72:	687b      	ldr	r3, [r7, #4]
 8007f74:	681b      	ldr	r3, [r3, #0]
 8007f76:	68da      	ldr	r2, [r3, #12]
 8007f78:	687b      	ldr	r3, [r7, #4]
 8007f7a:	681b      	ldr	r3, [r3, #0]
 8007f7c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007f80:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8007f82:	2300      	movs	r3, #0
 8007f84:	e000      	b.n	8007f88 <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 8007f86:	2302      	movs	r3, #2
  }
}
 8007f88:	4618      	mov	r0, r3
 8007f8a:	3714      	adds	r7, #20
 8007f8c:	46bd      	mov	sp, r7
 8007f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f92:	4770      	bx	lr

08007f94 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8007f94:	b580      	push	{r7, lr}
 8007f96:	b082      	sub	sp, #8
 8007f98:	af00      	add	r7, sp, #0
 8007f9a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8007f9c:	687b      	ldr	r3, [r7, #4]
 8007f9e:	681b      	ldr	r3, [r3, #0]
 8007fa0:	68da      	ldr	r2, [r3, #12]
 8007fa2:	687b      	ldr	r3, [r7, #4]
 8007fa4:	681b      	ldr	r3, [r3, #0]
 8007fa6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007faa:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007fac:	687b      	ldr	r3, [r7, #4]
 8007fae:	2220      	movs	r2, #32
 8007fb0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8007fb4:	6878      	ldr	r0, [r7, #4]
 8007fb6:	f7ff fefd 	bl	8007db4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8007fba:	2300      	movs	r3, #0
}
 8007fbc:	4618      	mov	r0, r3
 8007fbe:	3708      	adds	r7, #8
 8007fc0:	46bd      	mov	sp, r7
 8007fc2:	bd80      	pop	{r7, pc}

08007fc4 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8007fc4:	b580      	push	{r7, lr}
 8007fc6:	b084      	sub	sp, #16
 8007fc8:	af00      	add	r7, sp, #0
 8007fca:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007fcc:	687b      	ldr	r3, [r7, #4]
 8007fce:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8007fd2:	b2db      	uxtb	r3, r3
 8007fd4:	2b22      	cmp	r3, #34	; 0x22
 8007fd6:	d171      	bne.n	80080bc <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8007fd8:	687b      	ldr	r3, [r7, #4]
 8007fda:	689b      	ldr	r3, [r3, #8]
 8007fdc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007fe0:	d123      	bne.n	800802a <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 8007fe2:	687b      	ldr	r3, [r7, #4]
 8007fe4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007fe6:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8007fe8:	687b      	ldr	r3, [r7, #4]
 8007fea:	691b      	ldr	r3, [r3, #16]
 8007fec:	2b00      	cmp	r3, #0
 8007fee:	d10e      	bne.n	800800e <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8007ff0:	687b      	ldr	r3, [r7, #4]
 8007ff2:	681b      	ldr	r3, [r3, #0]
 8007ff4:	685b      	ldr	r3, [r3, #4]
 8007ff6:	b29b      	uxth	r3, r3
 8007ff8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007ffc:	b29a      	uxth	r2, r3
 8007ffe:	68fb      	ldr	r3, [r7, #12]
 8008000:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 8008002:	687b      	ldr	r3, [r7, #4]
 8008004:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008006:	1c9a      	adds	r2, r3, #2
 8008008:	687b      	ldr	r3, [r7, #4]
 800800a:	629a      	str	r2, [r3, #40]	; 0x28
 800800c:	e029      	b.n	8008062 <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 800800e:	687b      	ldr	r3, [r7, #4]
 8008010:	681b      	ldr	r3, [r3, #0]
 8008012:	685b      	ldr	r3, [r3, #4]
 8008014:	b29b      	uxth	r3, r3
 8008016:	b2db      	uxtb	r3, r3
 8008018:	b29a      	uxth	r2, r3
 800801a:	68fb      	ldr	r3, [r7, #12]
 800801c:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 800801e:	687b      	ldr	r3, [r7, #4]
 8008020:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008022:	1c5a      	adds	r2, r3, #1
 8008024:	687b      	ldr	r3, [r7, #4]
 8008026:	629a      	str	r2, [r3, #40]	; 0x28
 8008028:	e01b      	b.n	8008062 <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 800802a:	687b      	ldr	r3, [r7, #4]
 800802c:	691b      	ldr	r3, [r3, #16]
 800802e:	2b00      	cmp	r3, #0
 8008030:	d10a      	bne.n	8008048 <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8008032:	687b      	ldr	r3, [r7, #4]
 8008034:	681b      	ldr	r3, [r3, #0]
 8008036:	6858      	ldr	r0, [r3, #4]
 8008038:	687b      	ldr	r3, [r7, #4]
 800803a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800803c:	1c59      	adds	r1, r3, #1
 800803e:	687a      	ldr	r2, [r7, #4]
 8008040:	6291      	str	r1, [r2, #40]	; 0x28
 8008042:	b2c2      	uxtb	r2, r0
 8008044:	701a      	strb	r2, [r3, #0]
 8008046:	e00c      	b.n	8008062 <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8008048:	687b      	ldr	r3, [r7, #4]
 800804a:	681b      	ldr	r3, [r3, #0]
 800804c:	685b      	ldr	r3, [r3, #4]
 800804e:	b2da      	uxtb	r2, r3
 8008050:	687b      	ldr	r3, [r7, #4]
 8008052:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008054:	1c58      	adds	r0, r3, #1
 8008056:	6879      	ldr	r1, [r7, #4]
 8008058:	6288      	str	r0, [r1, #40]	; 0x28
 800805a:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800805e:	b2d2      	uxtb	r2, r2
 8008060:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 8008062:	687b      	ldr	r3, [r7, #4]
 8008064:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8008066:	b29b      	uxth	r3, r3
 8008068:	3b01      	subs	r3, #1
 800806a:	b29b      	uxth	r3, r3
 800806c:	687a      	ldr	r2, [r7, #4]
 800806e:	4619      	mov	r1, r3
 8008070:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8008072:	2b00      	cmp	r3, #0
 8008074:	d120      	bne.n	80080b8 <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8008076:	687b      	ldr	r3, [r7, #4]
 8008078:	681b      	ldr	r3, [r3, #0]
 800807a:	68da      	ldr	r2, [r3, #12]
 800807c:	687b      	ldr	r3, [r7, #4]
 800807e:	681b      	ldr	r3, [r3, #0]
 8008080:	f022 0220 	bic.w	r2, r2, #32
 8008084:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8008086:	687b      	ldr	r3, [r7, #4]
 8008088:	681b      	ldr	r3, [r3, #0]
 800808a:	68da      	ldr	r2, [r3, #12]
 800808c:	687b      	ldr	r3, [r7, #4]
 800808e:	681b      	ldr	r3, [r3, #0]
 8008090:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8008094:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8008096:	687b      	ldr	r3, [r7, #4]
 8008098:	681b      	ldr	r3, [r3, #0]
 800809a:	695a      	ldr	r2, [r3, #20]
 800809c:	687b      	ldr	r3, [r7, #4]
 800809e:	681b      	ldr	r3, [r3, #0]
 80080a0:	f022 0201 	bic.w	r2, r2, #1
 80080a4:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80080a6:	687b      	ldr	r3, [r7, #4]
 80080a8:	2220      	movs	r2, #32
 80080aa:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 80080ae:	6878      	ldr	r0, [r7, #4]
 80080b0:	f7ff fe8a 	bl	8007dc8 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 80080b4:	2300      	movs	r3, #0
 80080b6:	e002      	b.n	80080be <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 80080b8:	2300      	movs	r3, #0
 80080ba:	e000      	b.n	80080be <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 80080bc:	2302      	movs	r3, #2
  }
}
 80080be:	4618      	mov	r0, r3
 80080c0:	3710      	adds	r7, #16
 80080c2:	46bd      	mov	sp, r7
 80080c4:	bd80      	pop	{r7, pc}
	...

080080c8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80080c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80080cc:	b085      	sub	sp, #20
 80080ce:	af00      	add	r7, sp, #0
 80080d0:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80080d2:	687b      	ldr	r3, [r7, #4]
 80080d4:	681b      	ldr	r3, [r3, #0]
 80080d6:	691b      	ldr	r3, [r3, #16]
 80080d8:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80080dc:	687b      	ldr	r3, [r7, #4]
 80080de:	68da      	ldr	r2, [r3, #12]
 80080e0:	687b      	ldr	r3, [r7, #4]
 80080e2:	681b      	ldr	r3, [r3, #0]
 80080e4:	430a      	orrs	r2, r1
 80080e6:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80080e8:	687b      	ldr	r3, [r7, #4]
 80080ea:	689a      	ldr	r2, [r3, #8]
 80080ec:	687b      	ldr	r3, [r7, #4]
 80080ee:	691b      	ldr	r3, [r3, #16]
 80080f0:	431a      	orrs	r2, r3
 80080f2:	687b      	ldr	r3, [r7, #4]
 80080f4:	695b      	ldr	r3, [r3, #20]
 80080f6:	431a      	orrs	r2, r3
 80080f8:	687b      	ldr	r3, [r7, #4]
 80080fa:	69db      	ldr	r3, [r3, #28]
 80080fc:	4313      	orrs	r3, r2
 80080fe:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8008100:	687b      	ldr	r3, [r7, #4]
 8008102:	681b      	ldr	r3, [r3, #0]
 8008104:	68db      	ldr	r3, [r3, #12]
 8008106:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 800810a:	f023 030c 	bic.w	r3, r3, #12
 800810e:	687a      	ldr	r2, [r7, #4]
 8008110:	6812      	ldr	r2, [r2, #0]
 8008112:	68f9      	ldr	r1, [r7, #12]
 8008114:	430b      	orrs	r3, r1
 8008116:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8008118:	687b      	ldr	r3, [r7, #4]
 800811a:	681b      	ldr	r3, [r3, #0]
 800811c:	695b      	ldr	r3, [r3, #20]
 800811e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8008122:	687b      	ldr	r3, [r7, #4]
 8008124:	699a      	ldr	r2, [r3, #24]
 8008126:	687b      	ldr	r3, [r7, #4]
 8008128:	681b      	ldr	r3, [r3, #0]
 800812a:	430a      	orrs	r2, r1
 800812c:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800812e:	687b      	ldr	r3, [r7, #4]
 8008130:	69db      	ldr	r3, [r3, #28]
 8008132:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008136:	f040 818b 	bne.w	8008450 <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800813a:	687b      	ldr	r3, [r7, #4]
 800813c:	681b      	ldr	r3, [r3, #0]
 800813e:	4ac1      	ldr	r2, [pc, #772]	; (8008444 <UART_SetConfig+0x37c>)
 8008140:	4293      	cmp	r3, r2
 8008142:	d005      	beq.n	8008150 <UART_SetConfig+0x88>
 8008144:	687b      	ldr	r3, [r7, #4]
 8008146:	681b      	ldr	r3, [r3, #0]
 8008148:	4abf      	ldr	r2, [pc, #764]	; (8008448 <UART_SetConfig+0x380>)
 800814a:	4293      	cmp	r3, r2
 800814c:	f040 80bd 	bne.w	80082ca <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8008150:	f7fd ff5c 	bl	800600c <HAL_RCC_GetPCLK2Freq>
 8008154:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8008156:	68bb      	ldr	r3, [r7, #8]
 8008158:	461d      	mov	r5, r3
 800815a:	f04f 0600 	mov.w	r6, #0
 800815e:	46a8      	mov	r8, r5
 8008160:	46b1      	mov	r9, r6
 8008162:	eb18 0308 	adds.w	r3, r8, r8
 8008166:	eb49 0409 	adc.w	r4, r9, r9
 800816a:	4698      	mov	r8, r3
 800816c:	46a1      	mov	r9, r4
 800816e:	eb18 0805 	adds.w	r8, r8, r5
 8008172:	eb49 0906 	adc.w	r9, r9, r6
 8008176:	f04f 0100 	mov.w	r1, #0
 800817a:	f04f 0200 	mov.w	r2, #0
 800817e:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8008182:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8008186:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800818a:	4688      	mov	r8, r1
 800818c:	4691      	mov	r9, r2
 800818e:	eb18 0005 	adds.w	r0, r8, r5
 8008192:	eb49 0106 	adc.w	r1, r9, r6
 8008196:	687b      	ldr	r3, [r7, #4]
 8008198:	685b      	ldr	r3, [r3, #4]
 800819a:	461d      	mov	r5, r3
 800819c:	f04f 0600 	mov.w	r6, #0
 80081a0:	196b      	adds	r3, r5, r5
 80081a2:	eb46 0406 	adc.w	r4, r6, r6
 80081a6:	461a      	mov	r2, r3
 80081a8:	4623      	mov	r3, r4
 80081aa:	f7f8 fd4d 	bl	8000c48 <__aeabi_uldivmod>
 80081ae:	4603      	mov	r3, r0
 80081b0:	460c      	mov	r4, r1
 80081b2:	461a      	mov	r2, r3
 80081b4:	4ba5      	ldr	r3, [pc, #660]	; (800844c <UART_SetConfig+0x384>)
 80081b6:	fba3 2302 	umull	r2, r3, r3, r2
 80081ba:	095b      	lsrs	r3, r3, #5
 80081bc:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80081c0:	68bb      	ldr	r3, [r7, #8]
 80081c2:	461d      	mov	r5, r3
 80081c4:	f04f 0600 	mov.w	r6, #0
 80081c8:	46a9      	mov	r9, r5
 80081ca:	46b2      	mov	sl, r6
 80081cc:	eb19 0309 	adds.w	r3, r9, r9
 80081d0:	eb4a 040a 	adc.w	r4, sl, sl
 80081d4:	4699      	mov	r9, r3
 80081d6:	46a2      	mov	sl, r4
 80081d8:	eb19 0905 	adds.w	r9, r9, r5
 80081dc:	eb4a 0a06 	adc.w	sl, sl, r6
 80081e0:	f04f 0100 	mov.w	r1, #0
 80081e4:	f04f 0200 	mov.w	r2, #0
 80081e8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80081ec:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80081f0:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80081f4:	4689      	mov	r9, r1
 80081f6:	4692      	mov	sl, r2
 80081f8:	eb19 0005 	adds.w	r0, r9, r5
 80081fc:	eb4a 0106 	adc.w	r1, sl, r6
 8008200:	687b      	ldr	r3, [r7, #4]
 8008202:	685b      	ldr	r3, [r3, #4]
 8008204:	461d      	mov	r5, r3
 8008206:	f04f 0600 	mov.w	r6, #0
 800820a:	196b      	adds	r3, r5, r5
 800820c:	eb46 0406 	adc.w	r4, r6, r6
 8008210:	461a      	mov	r2, r3
 8008212:	4623      	mov	r3, r4
 8008214:	f7f8 fd18 	bl	8000c48 <__aeabi_uldivmod>
 8008218:	4603      	mov	r3, r0
 800821a:	460c      	mov	r4, r1
 800821c:	461a      	mov	r2, r3
 800821e:	4b8b      	ldr	r3, [pc, #556]	; (800844c <UART_SetConfig+0x384>)
 8008220:	fba3 1302 	umull	r1, r3, r3, r2
 8008224:	095b      	lsrs	r3, r3, #5
 8008226:	2164      	movs	r1, #100	; 0x64
 8008228:	fb01 f303 	mul.w	r3, r1, r3
 800822c:	1ad3      	subs	r3, r2, r3
 800822e:	00db      	lsls	r3, r3, #3
 8008230:	3332      	adds	r3, #50	; 0x32
 8008232:	4a86      	ldr	r2, [pc, #536]	; (800844c <UART_SetConfig+0x384>)
 8008234:	fba2 2303 	umull	r2, r3, r2, r3
 8008238:	095b      	lsrs	r3, r3, #5
 800823a:	005b      	lsls	r3, r3, #1
 800823c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8008240:	4498      	add	r8, r3
 8008242:	68bb      	ldr	r3, [r7, #8]
 8008244:	461d      	mov	r5, r3
 8008246:	f04f 0600 	mov.w	r6, #0
 800824a:	46a9      	mov	r9, r5
 800824c:	46b2      	mov	sl, r6
 800824e:	eb19 0309 	adds.w	r3, r9, r9
 8008252:	eb4a 040a 	adc.w	r4, sl, sl
 8008256:	4699      	mov	r9, r3
 8008258:	46a2      	mov	sl, r4
 800825a:	eb19 0905 	adds.w	r9, r9, r5
 800825e:	eb4a 0a06 	adc.w	sl, sl, r6
 8008262:	f04f 0100 	mov.w	r1, #0
 8008266:	f04f 0200 	mov.w	r2, #0
 800826a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800826e:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8008272:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8008276:	4689      	mov	r9, r1
 8008278:	4692      	mov	sl, r2
 800827a:	eb19 0005 	adds.w	r0, r9, r5
 800827e:	eb4a 0106 	adc.w	r1, sl, r6
 8008282:	687b      	ldr	r3, [r7, #4]
 8008284:	685b      	ldr	r3, [r3, #4]
 8008286:	461d      	mov	r5, r3
 8008288:	f04f 0600 	mov.w	r6, #0
 800828c:	196b      	adds	r3, r5, r5
 800828e:	eb46 0406 	adc.w	r4, r6, r6
 8008292:	461a      	mov	r2, r3
 8008294:	4623      	mov	r3, r4
 8008296:	f7f8 fcd7 	bl	8000c48 <__aeabi_uldivmod>
 800829a:	4603      	mov	r3, r0
 800829c:	460c      	mov	r4, r1
 800829e:	461a      	mov	r2, r3
 80082a0:	4b6a      	ldr	r3, [pc, #424]	; (800844c <UART_SetConfig+0x384>)
 80082a2:	fba3 1302 	umull	r1, r3, r3, r2
 80082a6:	095b      	lsrs	r3, r3, #5
 80082a8:	2164      	movs	r1, #100	; 0x64
 80082aa:	fb01 f303 	mul.w	r3, r1, r3
 80082ae:	1ad3      	subs	r3, r2, r3
 80082b0:	00db      	lsls	r3, r3, #3
 80082b2:	3332      	adds	r3, #50	; 0x32
 80082b4:	4a65      	ldr	r2, [pc, #404]	; (800844c <UART_SetConfig+0x384>)
 80082b6:	fba2 2303 	umull	r2, r3, r2, r3
 80082ba:	095b      	lsrs	r3, r3, #5
 80082bc:	f003 0207 	and.w	r2, r3, #7
 80082c0:	687b      	ldr	r3, [r7, #4]
 80082c2:	681b      	ldr	r3, [r3, #0]
 80082c4:	4442      	add	r2, r8
 80082c6:	609a      	str	r2, [r3, #8]
 80082c8:	e26f      	b.n	80087aa <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80082ca:	f7fd fe8b 	bl	8005fe4 <HAL_RCC_GetPCLK1Freq>
 80082ce:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80082d0:	68bb      	ldr	r3, [r7, #8]
 80082d2:	461d      	mov	r5, r3
 80082d4:	f04f 0600 	mov.w	r6, #0
 80082d8:	46a8      	mov	r8, r5
 80082da:	46b1      	mov	r9, r6
 80082dc:	eb18 0308 	adds.w	r3, r8, r8
 80082e0:	eb49 0409 	adc.w	r4, r9, r9
 80082e4:	4698      	mov	r8, r3
 80082e6:	46a1      	mov	r9, r4
 80082e8:	eb18 0805 	adds.w	r8, r8, r5
 80082ec:	eb49 0906 	adc.w	r9, r9, r6
 80082f0:	f04f 0100 	mov.w	r1, #0
 80082f4:	f04f 0200 	mov.w	r2, #0
 80082f8:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80082fc:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8008300:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8008304:	4688      	mov	r8, r1
 8008306:	4691      	mov	r9, r2
 8008308:	eb18 0005 	adds.w	r0, r8, r5
 800830c:	eb49 0106 	adc.w	r1, r9, r6
 8008310:	687b      	ldr	r3, [r7, #4]
 8008312:	685b      	ldr	r3, [r3, #4]
 8008314:	461d      	mov	r5, r3
 8008316:	f04f 0600 	mov.w	r6, #0
 800831a:	196b      	adds	r3, r5, r5
 800831c:	eb46 0406 	adc.w	r4, r6, r6
 8008320:	461a      	mov	r2, r3
 8008322:	4623      	mov	r3, r4
 8008324:	f7f8 fc90 	bl	8000c48 <__aeabi_uldivmod>
 8008328:	4603      	mov	r3, r0
 800832a:	460c      	mov	r4, r1
 800832c:	461a      	mov	r2, r3
 800832e:	4b47      	ldr	r3, [pc, #284]	; (800844c <UART_SetConfig+0x384>)
 8008330:	fba3 2302 	umull	r2, r3, r3, r2
 8008334:	095b      	lsrs	r3, r3, #5
 8008336:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800833a:	68bb      	ldr	r3, [r7, #8]
 800833c:	461d      	mov	r5, r3
 800833e:	f04f 0600 	mov.w	r6, #0
 8008342:	46a9      	mov	r9, r5
 8008344:	46b2      	mov	sl, r6
 8008346:	eb19 0309 	adds.w	r3, r9, r9
 800834a:	eb4a 040a 	adc.w	r4, sl, sl
 800834e:	4699      	mov	r9, r3
 8008350:	46a2      	mov	sl, r4
 8008352:	eb19 0905 	adds.w	r9, r9, r5
 8008356:	eb4a 0a06 	adc.w	sl, sl, r6
 800835a:	f04f 0100 	mov.w	r1, #0
 800835e:	f04f 0200 	mov.w	r2, #0
 8008362:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8008366:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800836a:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800836e:	4689      	mov	r9, r1
 8008370:	4692      	mov	sl, r2
 8008372:	eb19 0005 	adds.w	r0, r9, r5
 8008376:	eb4a 0106 	adc.w	r1, sl, r6
 800837a:	687b      	ldr	r3, [r7, #4]
 800837c:	685b      	ldr	r3, [r3, #4]
 800837e:	461d      	mov	r5, r3
 8008380:	f04f 0600 	mov.w	r6, #0
 8008384:	196b      	adds	r3, r5, r5
 8008386:	eb46 0406 	adc.w	r4, r6, r6
 800838a:	461a      	mov	r2, r3
 800838c:	4623      	mov	r3, r4
 800838e:	f7f8 fc5b 	bl	8000c48 <__aeabi_uldivmod>
 8008392:	4603      	mov	r3, r0
 8008394:	460c      	mov	r4, r1
 8008396:	461a      	mov	r2, r3
 8008398:	4b2c      	ldr	r3, [pc, #176]	; (800844c <UART_SetConfig+0x384>)
 800839a:	fba3 1302 	umull	r1, r3, r3, r2
 800839e:	095b      	lsrs	r3, r3, #5
 80083a0:	2164      	movs	r1, #100	; 0x64
 80083a2:	fb01 f303 	mul.w	r3, r1, r3
 80083a6:	1ad3      	subs	r3, r2, r3
 80083a8:	00db      	lsls	r3, r3, #3
 80083aa:	3332      	adds	r3, #50	; 0x32
 80083ac:	4a27      	ldr	r2, [pc, #156]	; (800844c <UART_SetConfig+0x384>)
 80083ae:	fba2 2303 	umull	r2, r3, r2, r3
 80083b2:	095b      	lsrs	r3, r3, #5
 80083b4:	005b      	lsls	r3, r3, #1
 80083b6:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80083ba:	4498      	add	r8, r3
 80083bc:	68bb      	ldr	r3, [r7, #8]
 80083be:	461d      	mov	r5, r3
 80083c0:	f04f 0600 	mov.w	r6, #0
 80083c4:	46a9      	mov	r9, r5
 80083c6:	46b2      	mov	sl, r6
 80083c8:	eb19 0309 	adds.w	r3, r9, r9
 80083cc:	eb4a 040a 	adc.w	r4, sl, sl
 80083d0:	4699      	mov	r9, r3
 80083d2:	46a2      	mov	sl, r4
 80083d4:	eb19 0905 	adds.w	r9, r9, r5
 80083d8:	eb4a 0a06 	adc.w	sl, sl, r6
 80083dc:	f04f 0100 	mov.w	r1, #0
 80083e0:	f04f 0200 	mov.w	r2, #0
 80083e4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80083e8:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80083ec:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80083f0:	4689      	mov	r9, r1
 80083f2:	4692      	mov	sl, r2
 80083f4:	eb19 0005 	adds.w	r0, r9, r5
 80083f8:	eb4a 0106 	adc.w	r1, sl, r6
 80083fc:	687b      	ldr	r3, [r7, #4]
 80083fe:	685b      	ldr	r3, [r3, #4]
 8008400:	461d      	mov	r5, r3
 8008402:	f04f 0600 	mov.w	r6, #0
 8008406:	196b      	adds	r3, r5, r5
 8008408:	eb46 0406 	adc.w	r4, r6, r6
 800840c:	461a      	mov	r2, r3
 800840e:	4623      	mov	r3, r4
 8008410:	f7f8 fc1a 	bl	8000c48 <__aeabi_uldivmod>
 8008414:	4603      	mov	r3, r0
 8008416:	460c      	mov	r4, r1
 8008418:	461a      	mov	r2, r3
 800841a:	4b0c      	ldr	r3, [pc, #48]	; (800844c <UART_SetConfig+0x384>)
 800841c:	fba3 1302 	umull	r1, r3, r3, r2
 8008420:	095b      	lsrs	r3, r3, #5
 8008422:	2164      	movs	r1, #100	; 0x64
 8008424:	fb01 f303 	mul.w	r3, r1, r3
 8008428:	1ad3      	subs	r3, r2, r3
 800842a:	00db      	lsls	r3, r3, #3
 800842c:	3332      	adds	r3, #50	; 0x32
 800842e:	4a07      	ldr	r2, [pc, #28]	; (800844c <UART_SetConfig+0x384>)
 8008430:	fba2 2303 	umull	r2, r3, r2, r3
 8008434:	095b      	lsrs	r3, r3, #5
 8008436:	f003 0207 	and.w	r2, r3, #7
 800843a:	687b      	ldr	r3, [r7, #4]
 800843c:	681b      	ldr	r3, [r3, #0]
 800843e:	4442      	add	r2, r8
 8008440:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 8008442:	e1b2      	b.n	80087aa <UART_SetConfig+0x6e2>
 8008444:	40011000 	.word	0x40011000
 8008448:	40011400 	.word	0x40011400
 800844c:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8008450:	687b      	ldr	r3, [r7, #4]
 8008452:	681b      	ldr	r3, [r3, #0]
 8008454:	4ad7      	ldr	r2, [pc, #860]	; (80087b4 <UART_SetConfig+0x6ec>)
 8008456:	4293      	cmp	r3, r2
 8008458:	d005      	beq.n	8008466 <UART_SetConfig+0x39e>
 800845a:	687b      	ldr	r3, [r7, #4]
 800845c:	681b      	ldr	r3, [r3, #0]
 800845e:	4ad6      	ldr	r2, [pc, #856]	; (80087b8 <UART_SetConfig+0x6f0>)
 8008460:	4293      	cmp	r3, r2
 8008462:	f040 80d1 	bne.w	8008608 <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 8008466:	f7fd fdd1 	bl	800600c <HAL_RCC_GetPCLK2Freq>
 800846a:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800846c:	68bb      	ldr	r3, [r7, #8]
 800846e:	469a      	mov	sl, r3
 8008470:	f04f 0b00 	mov.w	fp, #0
 8008474:	46d0      	mov	r8, sl
 8008476:	46d9      	mov	r9, fp
 8008478:	eb18 0308 	adds.w	r3, r8, r8
 800847c:	eb49 0409 	adc.w	r4, r9, r9
 8008480:	4698      	mov	r8, r3
 8008482:	46a1      	mov	r9, r4
 8008484:	eb18 080a 	adds.w	r8, r8, sl
 8008488:	eb49 090b 	adc.w	r9, r9, fp
 800848c:	f04f 0100 	mov.w	r1, #0
 8008490:	f04f 0200 	mov.w	r2, #0
 8008494:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8008498:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800849c:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80084a0:	4688      	mov	r8, r1
 80084a2:	4691      	mov	r9, r2
 80084a4:	eb1a 0508 	adds.w	r5, sl, r8
 80084a8:	eb4b 0609 	adc.w	r6, fp, r9
 80084ac:	687b      	ldr	r3, [r7, #4]
 80084ae:	685b      	ldr	r3, [r3, #4]
 80084b0:	4619      	mov	r1, r3
 80084b2:	f04f 0200 	mov.w	r2, #0
 80084b6:	f04f 0300 	mov.w	r3, #0
 80084ba:	f04f 0400 	mov.w	r4, #0
 80084be:	0094      	lsls	r4, r2, #2
 80084c0:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80084c4:	008b      	lsls	r3, r1, #2
 80084c6:	461a      	mov	r2, r3
 80084c8:	4623      	mov	r3, r4
 80084ca:	4628      	mov	r0, r5
 80084cc:	4631      	mov	r1, r6
 80084ce:	f7f8 fbbb 	bl	8000c48 <__aeabi_uldivmod>
 80084d2:	4603      	mov	r3, r0
 80084d4:	460c      	mov	r4, r1
 80084d6:	461a      	mov	r2, r3
 80084d8:	4bb8      	ldr	r3, [pc, #736]	; (80087bc <UART_SetConfig+0x6f4>)
 80084da:	fba3 2302 	umull	r2, r3, r3, r2
 80084de:	095b      	lsrs	r3, r3, #5
 80084e0:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80084e4:	68bb      	ldr	r3, [r7, #8]
 80084e6:	469b      	mov	fp, r3
 80084e8:	f04f 0c00 	mov.w	ip, #0
 80084ec:	46d9      	mov	r9, fp
 80084ee:	46e2      	mov	sl, ip
 80084f0:	eb19 0309 	adds.w	r3, r9, r9
 80084f4:	eb4a 040a 	adc.w	r4, sl, sl
 80084f8:	4699      	mov	r9, r3
 80084fa:	46a2      	mov	sl, r4
 80084fc:	eb19 090b 	adds.w	r9, r9, fp
 8008500:	eb4a 0a0c 	adc.w	sl, sl, ip
 8008504:	f04f 0100 	mov.w	r1, #0
 8008508:	f04f 0200 	mov.w	r2, #0
 800850c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8008510:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8008514:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8008518:	4689      	mov	r9, r1
 800851a:	4692      	mov	sl, r2
 800851c:	eb1b 0509 	adds.w	r5, fp, r9
 8008520:	eb4c 060a 	adc.w	r6, ip, sl
 8008524:	687b      	ldr	r3, [r7, #4]
 8008526:	685b      	ldr	r3, [r3, #4]
 8008528:	4619      	mov	r1, r3
 800852a:	f04f 0200 	mov.w	r2, #0
 800852e:	f04f 0300 	mov.w	r3, #0
 8008532:	f04f 0400 	mov.w	r4, #0
 8008536:	0094      	lsls	r4, r2, #2
 8008538:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800853c:	008b      	lsls	r3, r1, #2
 800853e:	461a      	mov	r2, r3
 8008540:	4623      	mov	r3, r4
 8008542:	4628      	mov	r0, r5
 8008544:	4631      	mov	r1, r6
 8008546:	f7f8 fb7f 	bl	8000c48 <__aeabi_uldivmod>
 800854a:	4603      	mov	r3, r0
 800854c:	460c      	mov	r4, r1
 800854e:	461a      	mov	r2, r3
 8008550:	4b9a      	ldr	r3, [pc, #616]	; (80087bc <UART_SetConfig+0x6f4>)
 8008552:	fba3 1302 	umull	r1, r3, r3, r2
 8008556:	095b      	lsrs	r3, r3, #5
 8008558:	2164      	movs	r1, #100	; 0x64
 800855a:	fb01 f303 	mul.w	r3, r1, r3
 800855e:	1ad3      	subs	r3, r2, r3
 8008560:	011b      	lsls	r3, r3, #4
 8008562:	3332      	adds	r3, #50	; 0x32
 8008564:	4a95      	ldr	r2, [pc, #596]	; (80087bc <UART_SetConfig+0x6f4>)
 8008566:	fba2 2303 	umull	r2, r3, r2, r3
 800856a:	095b      	lsrs	r3, r3, #5
 800856c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8008570:	4498      	add	r8, r3
 8008572:	68bb      	ldr	r3, [r7, #8]
 8008574:	469b      	mov	fp, r3
 8008576:	f04f 0c00 	mov.w	ip, #0
 800857a:	46d9      	mov	r9, fp
 800857c:	46e2      	mov	sl, ip
 800857e:	eb19 0309 	adds.w	r3, r9, r9
 8008582:	eb4a 040a 	adc.w	r4, sl, sl
 8008586:	4699      	mov	r9, r3
 8008588:	46a2      	mov	sl, r4
 800858a:	eb19 090b 	adds.w	r9, r9, fp
 800858e:	eb4a 0a0c 	adc.w	sl, sl, ip
 8008592:	f04f 0100 	mov.w	r1, #0
 8008596:	f04f 0200 	mov.w	r2, #0
 800859a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800859e:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80085a2:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80085a6:	4689      	mov	r9, r1
 80085a8:	4692      	mov	sl, r2
 80085aa:	eb1b 0509 	adds.w	r5, fp, r9
 80085ae:	eb4c 060a 	adc.w	r6, ip, sl
 80085b2:	687b      	ldr	r3, [r7, #4]
 80085b4:	685b      	ldr	r3, [r3, #4]
 80085b6:	4619      	mov	r1, r3
 80085b8:	f04f 0200 	mov.w	r2, #0
 80085bc:	f04f 0300 	mov.w	r3, #0
 80085c0:	f04f 0400 	mov.w	r4, #0
 80085c4:	0094      	lsls	r4, r2, #2
 80085c6:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80085ca:	008b      	lsls	r3, r1, #2
 80085cc:	461a      	mov	r2, r3
 80085ce:	4623      	mov	r3, r4
 80085d0:	4628      	mov	r0, r5
 80085d2:	4631      	mov	r1, r6
 80085d4:	f7f8 fb38 	bl	8000c48 <__aeabi_uldivmod>
 80085d8:	4603      	mov	r3, r0
 80085da:	460c      	mov	r4, r1
 80085dc:	461a      	mov	r2, r3
 80085de:	4b77      	ldr	r3, [pc, #476]	; (80087bc <UART_SetConfig+0x6f4>)
 80085e0:	fba3 1302 	umull	r1, r3, r3, r2
 80085e4:	095b      	lsrs	r3, r3, #5
 80085e6:	2164      	movs	r1, #100	; 0x64
 80085e8:	fb01 f303 	mul.w	r3, r1, r3
 80085ec:	1ad3      	subs	r3, r2, r3
 80085ee:	011b      	lsls	r3, r3, #4
 80085f0:	3332      	adds	r3, #50	; 0x32
 80085f2:	4a72      	ldr	r2, [pc, #456]	; (80087bc <UART_SetConfig+0x6f4>)
 80085f4:	fba2 2303 	umull	r2, r3, r2, r3
 80085f8:	095b      	lsrs	r3, r3, #5
 80085fa:	f003 020f 	and.w	r2, r3, #15
 80085fe:	687b      	ldr	r3, [r7, #4]
 8008600:	681b      	ldr	r3, [r3, #0]
 8008602:	4442      	add	r2, r8
 8008604:	609a      	str	r2, [r3, #8]
 8008606:	e0d0      	b.n	80087aa <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 8008608:	f7fd fcec 	bl	8005fe4 <HAL_RCC_GetPCLK1Freq>
 800860c:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800860e:	68bb      	ldr	r3, [r7, #8]
 8008610:	469a      	mov	sl, r3
 8008612:	f04f 0b00 	mov.w	fp, #0
 8008616:	46d0      	mov	r8, sl
 8008618:	46d9      	mov	r9, fp
 800861a:	eb18 0308 	adds.w	r3, r8, r8
 800861e:	eb49 0409 	adc.w	r4, r9, r9
 8008622:	4698      	mov	r8, r3
 8008624:	46a1      	mov	r9, r4
 8008626:	eb18 080a 	adds.w	r8, r8, sl
 800862a:	eb49 090b 	adc.w	r9, r9, fp
 800862e:	f04f 0100 	mov.w	r1, #0
 8008632:	f04f 0200 	mov.w	r2, #0
 8008636:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800863a:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800863e:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8008642:	4688      	mov	r8, r1
 8008644:	4691      	mov	r9, r2
 8008646:	eb1a 0508 	adds.w	r5, sl, r8
 800864a:	eb4b 0609 	adc.w	r6, fp, r9
 800864e:	687b      	ldr	r3, [r7, #4]
 8008650:	685b      	ldr	r3, [r3, #4]
 8008652:	4619      	mov	r1, r3
 8008654:	f04f 0200 	mov.w	r2, #0
 8008658:	f04f 0300 	mov.w	r3, #0
 800865c:	f04f 0400 	mov.w	r4, #0
 8008660:	0094      	lsls	r4, r2, #2
 8008662:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8008666:	008b      	lsls	r3, r1, #2
 8008668:	461a      	mov	r2, r3
 800866a:	4623      	mov	r3, r4
 800866c:	4628      	mov	r0, r5
 800866e:	4631      	mov	r1, r6
 8008670:	f7f8 faea 	bl	8000c48 <__aeabi_uldivmod>
 8008674:	4603      	mov	r3, r0
 8008676:	460c      	mov	r4, r1
 8008678:	461a      	mov	r2, r3
 800867a:	4b50      	ldr	r3, [pc, #320]	; (80087bc <UART_SetConfig+0x6f4>)
 800867c:	fba3 2302 	umull	r2, r3, r3, r2
 8008680:	095b      	lsrs	r3, r3, #5
 8008682:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8008686:	68bb      	ldr	r3, [r7, #8]
 8008688:	469b      	mov	fp, r3
 800868a:	f04f 0c00 	mov.w	ip, #0
 800868e:	46d9      	mov	r9, fp
 8008690:	46e2      	mov	sl, ip
 8008692:	eb19 0309 	adds.w	r3, r9, r9
 8008696:	eb4a 040a 	adc.w	r4, sl, sl
 800869a:	4699      	mov	r9, r3
 800869c:	46a2      	mov	sl, r4
 800869e:	eb19 090b 	adds.w	r9, r9, fp
 80086a2:	eb4a 0a0c 	adc.w	sl, sl, ip
 80086a6:	f04f 0100 	mov.w	r1, #0
 80086aa:	f04f 0200 	mov.w	r2, #0
 80086ae:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80086b2:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80086b6:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80086ba:	4689      	mov	r9, r1
 80086bc:	4692      	mov	sl, r2
 80086be:	eb1b 0509 	adds.w	r5, fp, r9
 80086c2:	eb4c 060a 	adc.w	r6, ip, sl
 80086c6:	687b      	ldr	r3, [r7, #4]
 80086c8:	685b      	ldr	r3, [r3, #4]
 80086ca:	4619      	mov	r1, r3
 80086cc:	f04f 0200 	mov.w	r2, #0
 80086d0:	f04f 0300 	mov.w	r3, #0
 80086d4:	f04f 0400 	mov.w	r4, #0
 80086d8:	0094      	lsls	r4, r2, #2
 80086da:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80086de:	008b      	lsls	r3, r1, #2
 80086e0:	461a      	mov	r2, r3
 80086e2:	4623      	mov	r3, r4
 80086e4:	4628      	mov	r0, r5
 80086e6:	4631      	mov	r1, r6
 80086e8:	f7f8 faae 	bl	8000c48 <__aeabi_uldivmod>
 80086ec:	4603      	mov	r3, r0
 80086ee:	460c      	mov	r4, r1
 80086f0:	461a      	mov	r2, r3
 80086f2:	4b32      	ldr	r3, [pc, #200]	; (80087bc <UART_SetConfig+0x6f4>)
 80086f4:	fba3 1302 	umull	r1, r3, r3, r2
 80086f8:	095b      	lsrs	r3, r3, #5
 80086fa:	2164      	movs	r1, #100	; 0x64
 80086fc:	fb01 f303 	mul.w	r3, r1, r3
 8008700:	1ad3      	subs	r3, r2, r3
 8008702:	011b      	lsls	r3, r3, #4
 8008704:	3332      	adds	r3, #50	; 0x32
 8008706:	4a2d      	ldr	r2, [pc, #180]	; (80087bc <UART_SetConfig+0x6f4>)
 8008708:	fba2 2303 	umull	r2, r3, r2, r3
 800870c:	095b      	lsrs	r3, r3, #5
 800870e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8008712:	4498      	add	r8, r3
 8008714:	68bb      	ldr	r3, [r7, #8]
 8008716:	469b      	mov	fp, r3
 8008718:	f04f 0c00 	mov.w	ip, #0
 800871c:	46d9      	mov	r9, fp
 800871e:	46e2      	mov	sl, ip
 8008720:	eb19 0309 	adds.w	r3, r9, r9
 8008724:	eb4a 040a 	adc.w	r4, sl, sl
 8008728:	4699      	mov	r9, r3
 800872a:	46a2      	mov	sl, r4
 800872c:	eb19 090b 	adds.w	r9, r9, fp
 8008730:	eb4a 0a0c 	adc.w	sl, sl, ip
 8008734:	f04f 0100 	mov.w	r1, #0
 8008738:	f04f 0200 	mov.w	r2, #0
 800873c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8008740:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8008744:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8008748:	4689      	mov	r9, r1
 800874a:	4692      	mov	sl, r2
 800874c:	eb1b 0509 	adds.w	r5, fp, r9
 8008750:	eb4c 060a 	adc.w	r6, ip, sl
 8008754:	687b      	ldr	r3, [r7, #4]
 8008756:	685b      	ldr	r3, [r3, #4]
 8008758:	4619      	mov	r1, r3
 800875a:	f04f 0200 	mov.w	r2, #0
 800875e:	f04f 0300 	mov.w	r3, #0
 8008762:	f04f 0400 	mov.w	r4, #0
 8008766:	0094      	lsls	r4, r2, #2
 8008768:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800876c:	008b      	lsls	r3, r1, #2
 800876e:	461a      	mov	r2, r3
 8008770:	4623      	mov	r3, r4
 8008772:	4628      	mov	r0, r5
 8008774:	4631      	mov	r1, r6
 8008776:	f7f8 fa67 	bl	8000c48 <__aeabi_uldivmod>
 800877a:	4603      	mov	r3, r0
 800877c:	460c      	mov	r4, r1
 800877e:	461a      	mov	r2, r3
 8008780:	4b0e      	ldr	r3, [pc, #56]	; (80087bc <UART_SetConfig+0x6f4>)
 8008782:	fba3 1302 	umull	r1, r3, r3, r2
 8008786:	095b      	lsrs	r3, r3, #5
 8008788:	2164      	movs	r1, #100	; 0x64
 800878a:	fb01 f303 	mul.w	r3, r1, r3
 800878e:	1ad3      	subs	r3, r2, r3
 8008790:	011b      	lsls	r3, r3, #4
 8008792:	3332      	adds	r3, #50	; 0x32
 8008794:	4a09      	ldr	r2, [pc, #36]	; (80087bc <UART_SetConfig+0x6f4>)
 8008796:	fba2 2303 	umull	r2, r3, r2, r3
 800879a:	095b      	lsrs	r3, r3, #5
 800879c:	f003 020f 	and.w	r2, r3, #15
 80087a0:	687b      	ldr	r3, [r7, #4]
 80087a2:	681b      	ldr	r3, [r3, #0]
 80087a4:	4442      	add	r2, r8
 80087a6:	609a      	str	r2, [r3, #8]
}
 80087a8:	e7ff      	b.n	80087aa <UART_SetConfig+0x6e2>
 80087aa:	bf00      	nop
 80087ac:	3714      	adds	r7, #20
 80087ae:	46bd      	mov	sp, r7
 80087b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80087b4:	40011000 	.word	0x40011000
 80087b8:	40011400 	.word	0x40011400
 80087bc:	51eb851f 	.word	0x51eb851f

080087c0 <clearerr>:
 80087c0:	b538      	push	{r3, r4, r5, lr}
 80087c2:	4b0e      	ldr	r3, [pc, #56]	; (80087fc <clearerr+0x3c>)
 80087c4:	681d      	ldr	r5, [r3, #0]
 80087c6:	4604      	mov	r4, r0
 80087c8:	b125      	cbz	r5, 80087d4 <clearerr+0x14>
 80087ca:	69ab      	ldr	r3, [r5, #24]
 80087cc:	b913      	cbnz	r3, 80087d4 <clearerr+0x14>
 80087ce:	4628      	mov	r0, r5
 80087d0:	f000 f862 	bl	8008898 <__sinit>
 80087d4:	4b0a      	ldr	r3, [pc, #40]	; (8008800 <clearerr+0x40>)
 80087d6:	429c      	cmp	r4, r3
 80087d8:	d105      	bne.n	80087e6 <clearerr+0x26>
 80087da:	686c      	ldr	r4, [r5, #4]
 80087dc:	89a3      	ldrh	r3, [r4, #12]
 80087de:	f023 0360 	bic.w	r3, r3, #96	; 0x60
 80087e2:	81a3      	strh	r3, [r4, #12]
 80087e4:	bd38      	pop	{r3, r4, r5, pc}
 80087e6:	4b07      	ldr	r3, [pc, #28]	; (8008804 <clearerr+0x44>)
 80087e8:	429c      	cmp	r4, r3
 80087ea:	d101      	bne.n	80087f0 <clearerr+0x30>
 80087ec:	68ac      	ldr	r4, [r5, #8]
 80087ee:	e7f5      	b.n	80087dc <clearerr+0x1c>
 80087f0:	4b05      	ldr	r3, [pc, #20]	; (8008808 <clearerr+0x48>)
 80087f2:	429c      	cmp	r4, r3
 80087f4:	bf08      	it	eq
 80087f6:	68ec      	ldreq	r4, [r5, #12]
 80087f8:	e7f0      	b.n	80087dc <clearerr+0x1c>
 80087fa:	bf00      	nop
 80087fc:	20000104 	.word	0x20000104
 8008800:	0800ca90 	.word	0x0800ca90
 8008804:	0800cab0 	.word	0x0800cab0
 8008808:	0800ca70 	.word	0x0800ca70

0800880c <__errno>:
 800880c:	4b01      	ldr	r3, [pc, #4]	; (8008814 <__errno+0x8>)
 800880e:	6818      	ldr	r0, [r3, #0]
 8008810:	4770      	bx	lr
 8008812:	bf00      	nop
 8008814:	20000104 	.word	0x20000104

08008818 <std>:
 8008818:	2300      	movs	r3, #0
 800881a:	b510      	push	{r4, lr}
 800881c:	4604      	mov	r4, r0
 800881e:	e9c0 3300 	strd	r3, r3, [r0]
 8008822:	6083      	str	r3, [r0, #8]
 8008824:	8181      	strh	r1, [r0, #12]
 8008826:	6643      	str	r3, [r0, #100]	; 0x64
 8008828:	81c2      	strh	r2, [r0, #14]
 800882a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800882e:	6183      	str	r3, [r0, #24]
 8008830:	4619      	mov	r1, r3
 8008832:	2208      	movs	r2, #8
 8008834:	305c      	adds	r0, #92	; 0x5c
 8008836:	f000 f90b 	bl	8008a50 <memset>
 800883a:	4b05      	ldr	r3, [pc, #20]	; (8008850 <std+0x38>)
 800883c:	6263      	str	r3, [r4, #36]	; 0x24
 800883e:	4b05      	ldr	r3, [pc, #20]	; (8008854 <std+0x3c>)
 8008840:	62a3      	str	r3, [r4, #40]	; 0x28
 8008842:	4b05      	ldr	r3, [pc, #20]	; (8008858 <std+0x40>)
 8008844:	62e3      	str	r3, [r4, #44]	; 0x2c
 8008846:	4b05      	ldr	r3, [pc, #20]	; (800885c <std+0x44>)
 8008848:	6224      	str	r4, [r4, #32]
 800884a:	6323      	str	r3, [r4, #48]	; 0x30
 800884c:	bd10      	pop	{r4, pc}
 800884e:	bf00      	nop
 8008850:	0800950d 	.word	0x0800950d
 8008854:	0800952f 	.word	0x0800952f
 8008858:	08009567 	.word	0x08009567
 800885c:	0800958b 	.word	0x0800958b

08008860 <_cleanup_r>:
 8008860:	4901      	ldr	r1, [pc, #4]	; (8008868 <_cleanup_r+0x8>)
 8008862:	f000 b8a1 	b.w	80089a8 <_fwalk_reent>
 8008866:	bf00      	nop
 8008868:	0800a4ed 	.word	0x0800a4ed

0800886c <__sfmoreglue>:
 800886c:	b570      	push	{r4, r5, r6, lr}
 800886e:	1e4a      	subs	r2, r1, #1
 8008870:	2568      	movs	r5, #104	; 0x68
 8008872:	4355      	muls	r5, r2
 8008874:	460e      	mov	r6, r1
 8008876:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800887a:	f000 f8f1 	bl	8008a60 <_malloc_r>
 800887e:	4604      	mov	r4, r0
 8008880:	b140      	cbz	r0, 8008894 <__sfmoreglue+0x28>
 8008882:	2100      	movs	r1, #0
 8008884:	e9c0 1600 	strd	r1, r6, [r0]
 8008888:	300c      	adds	r0, #12
 800888a:	60a0      	str	r0, [r4, #8]
 800888c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8008890:	f000 f8de 	bl	8008a50 <memset>
 8008894:	4620      	mov	r0, r4
 8008896:	bd70      	pop	{r4, r5, r6, pc}

08008898 <__sinit>:
 8008898:	6983      	ldr	r3, [r0, #24]
 800889a:	b510      	push	{r4, lr}
 800889c:	4604      	mov	r4, r0
 800889e:	bb33      	cbnz	r3, 80088ee <__sinit+0x56>
 80088a0:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 80088a4:	6503      	str	r3, [r0, #80]	; 0x50
 80088a6:	4b12      	ldr	r3, [pc, #72]	; (80088f0 <__sinit+0x58>)
 80088a8:	4a12      	ldr	r2, [pc, #72]	; (80088f4 <__sinit+0x5c>)
 80088aa:	681b      	ldr	r3, [r3, #0]
 80088ac:	6282      	str	r2, [r0, #40]	; 0x28
 80088ae:	4298      	cmp	r0, r3
 80088b0:	bf04      	itt	eq
 80088b2:	2301      	moveq	r3, #1
 80088b4:	6183      	streq	r3, [r0, #24]
 80088b6:	f000 f81f 	bl	80088f8 <__sfp>
 80088ba:	6060      	str	r0, [r4, #4]
 80088bc:	4620      	mov	r0, r4
 80088be:	f000 f81b 	bl	80088f8 <__sfp>
 80088c2:	60a0      	str	r0, [r4, #8]
 80088c4:	4620      	mov	r0, r4
 80088c6:	f000 f817 	bl	80088f8 <__sfp>
 80088ca:	2200      	movs	r2, #0
 80088cc:	60e0      	str	r0, [r4, #12]
 80088ce:	2104      	movs	r1, #4
 80088d0:	6860      	ldr	r0, [r4, #4]
 80088d2:	f7ff ffa1 	bl	8008818 <std>
 80088d6:	2201      	movs	r2, #1
 80088d8:	2109      	movs	r1, #9
 80088da:	68a0      	ldr	r0, [r4, #8]
 80088dc:	f7ff ff9c 	bl	8008818 <std>
 80088e0:	2202      	movs	r2, #2
 80088e2:	2112      	movs	r1, #18
 80088e4:	68e0      	ldr	r0, [r4, #12]
 80088e6:	f7ff ff97 	bl	8008818 <std>
 80088ea:	2301      	movs	r3, #1
 80088ec:	61a3      	str	r3, [r4, #24]
 80088ee:	bd10      	pop	{r4, pc}
 80088f0:	0800cad0 	.word	0x0800cad0
 80088f4:	08008861 	.word	0x08008861

080088f8 <__sfp>:
 80088f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80088fa:	4b1b      	ldr	r3, [pc, #108]	; (8008968 <__sfp+0x70>)
 80088fc:	681e      	ldr	r6, [r3, #0]
 80088fe:	69b3      	ldr	r3, [r6, #24]
 8008900:	4607      	mov	r7, r0
 8008902:	b913      	cbnz	r3, 800890a <__sfp+0x12>
 8008904:	4630      	mov	r0, r6
 8008906:	f7ff ffc7 	bl	8008898 <__sinit>
 800890a:	3648      	adds	r6, #72	; 0x48
 800890c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8008910:	3b01      	subs	r3, #1
 8008912:	d503      	bpl.n	800891c <__sfp+0x24>
 8008914:	6833      	ldr	r3, [r6, #0]
 8008916:	b133      	cbz	r3, 8008926 <__sfp+0x2e>
 8008918:	6836      	ldr	r6, [r6, #0]
 800891a:	e7f7      	b.n	800890c <__sfp+0x14>
 800891c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8008920:	b16d      	cbz	r5, 800893e <__sfp+0x46>
 8008922:	3468      	adds	r4, #104	; 0x68
 8008924:	e7f4      	b.n	8008910 <__sfp+0x18>
 8008926:	2104      	movs	r1, #4
 8008928:	4638      	mov	r0, r7
 800892a:	f7ff ff9f 	bl	800886c <__sfmoreglue>
 800892e:	6030      	str	r0, [r6, #0]
 8008930:	2800      	cmp	r0, #0
 8008932:	d1f1      	bne.n	8008918 <__sfp+0x20>
 8008934:	230c      	movs	r3, #12
 8008936:	603b      	str	r3, [r7, #0]
 8008938:	4604      	mov	r4, r0
 800893a:	4620      	mov	r0, r4
 800893c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800893e:	4b0b      	ldr	r3, [pc, #44]	; (800896c <__sfp+0x74>)
 8008940:	6665      	str	r5, [r4, #100]	; 0x64
 8008942:	e9c4 5500 	strd	r5, r5, [r4]
 8008946:	60a5      	str	r5, [r4, #8]
 8008948:	e9c4 3503 	strd	r3, r5, [r4, #12]
 800894c:	e9c4 5505 	strd	r5, r5, [r4, #20]
 8008950:	2208      	movs	r2, #8
 8008952:	4629      	mov	r1, r5
 8008954:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8008958:	f000 f87a 	bl	8008a50 <memset>
 800895c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8008960:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8008964:	e7e9      	b.n	800893a <__sfp+0x42>
 8008966:	bf00      	nop
 8008968:	0800cad0 	.word	0x0800cad0
 800896c:	ffff0001 	.word	0xffff0001

08008970 <_fwalk>:
 8008970:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008974:	4688      	mov	r8, r1
 8008976:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800897a:	2600      	movs	r6, #0
 800897c:	b914      	cbnz	r4, 8008984 <_fwalk+0x14>
 800897e:	4630      	mov	r0, r6
 8008980:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008984:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 8008988:	3f01      	subs	r7, #1
 800898a:	d501      	bpl.n	8008990 <_fwalk+0x20>
 800898c:	6824      	ldr	r4, [r4, #0]
 800898e:	e7f5      	b.n	800897c <_fwalk+0xc>
 8008990:	89ab      	ldrh	r3, [r5, #12]
 8008992:	2b01      	cmp	r3, #1
 8008994:	d906      	bls.n	80089a4 <_fwalk+0x34>
 8008996:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800899a:	3301      	adds	r3, #1
 800899c:	d002      	beq.n	80089a4 <_fwalk+0x34>
 800899e:	4628      	mov	r0, r5
 80089a0:	47c0      	blx	r8
 80089a2:	4306      	orrs	r6, r0
 80089a4:	3568      	adds	r5, #104	; 0x68
 80089a6:	e7ef      	b.n	8008988 <_fwalk+0x18>

080089a8 <_fwalk_reent>:
 80089a8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80089ac:	4680      	mov	r8, r0
 80089ae:	4689      	mov	r9, r1
 80089b0:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80089b4:	2600      	movs	r6, #0
 80089b6:	b914      	cbnz	r4, 80089be <_fwalk_reent+0x16>
 80089b8:	4630      	mov	r0, r6
 80089ba:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80089be:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 80089c2:	3f01      	subs	r7, #1
 80089c4:	d501      	bpl.n	80089ca <_fwalk_reent+0x22>
 80089c6:	6824      	ldr	r4, [r4, #0]
 80089c8:	e7f5      	b.n	80089b6 <_fwalk_reent+0xe>
 80089ca:	89ab      	ldrh	r3, [r5, #12]
 80089cc:	2b01      	cmp	r3, #1
 80089ce:	d907      	bls.n	80089e0 <_fwalk_reent+0x38>
 80089d0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80089d4:	3301      	adds	r3, #1
 80089d6:	d003      	beq.n	80089e0 <_fwalk_reent+0x38>
 80089d8:	4629      	mov	r1, r5
 80089da:	4640      	mov	r0, r8
 80089dc:	47c8      	blx	r9
 80089de:	4306      	orrs	r6, r0
 80089e0:	3568      	adds	r5, #104	; 0x68
 80089e2:	e7ee      	b.n	80089c2 <_fwalk_reent+0x1a>

080089e4 <getchar>:
 80089e4:	4b07      	ldr	r3, [pc, #28]	; (8008a04 <getchar+0x20>)
 80089e6:	b510      	push	{r4, lr}
 80089e8:	681c      	ldr	r4, [r3, #0]
 80089ea:	b124      	cbz	r4, 80089f6 <getchar+0x12>
 80089ec:	69a3      	ldr	r3, [r4, #24]
 80089ee:	b913      	cbnz	r3, 80089f6 <getchar+0x12>
 80089f0:	4620      	mov	r0, r4
 80089f2:	f7ff ff51 	bl	8008898 <__sinit>
 80089f6:	6861      	ldr	r1, [r4, #4]
 80089f8:	4620      	mov	r0, r4
 80089fa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80089fe:	f001 bdb1 	b.w	800a564 <_getc_r>
 8008a02:	bf00      	nop
 8008a04:	20000104 	.word	0x20000104

08008a08 <__libc_init_array>:
 8008a08:	b570      	push	{r4, r5, r6, lr}
 8008a0a:	4e0d      	ldr	r6, [pc, #52]	; (8008a40 <__libc_init_array+0x38>)
 8008a0c:	4c0d      	ldr	r4, [pc, #52]	; (8008a44 <__libc_init_array+0x3c>)
 8008a0e:	1ba4      	subs	r4, r4, r6
 8008a10:	10a4      	asrs	r4, r4, #2
 8008a12:	2500      	movs	r5, #0
 8008a14:	42a5      	cmp	r5, r4
 8008a16:	d109      	bne.n	8008a2c <__libc_init_array+0x24>
 8008a18:	4e0b      	ldr	r6, [pc, #44]	; (8008a48 <__libc_init_array+0x40>)
 8008a1a:	4c0c      	ldr	r4, [pc, #48]	; (8008a4c <__libc_init_array+0x44>)
 8008a1c:	f003 f9b6 	bl	800bd8c <_init>
 8008a20:	1ba4      	subs	r4, r4, r6
 8008a22:	10a4      	asrs	r4, r4, #2
 8008a24:	2500      	movs	r5, #0
 8008a26:	42a5      	cmp	r5, r4
 8008a28:	d105      	bne.n	8008a36 <__libc_init_array+0x2e>
 8008a2a:	bd70      	pop	{r4, r5, r6, pc}
 8008a2c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8008a30:	4798      	blx	r3
 8008a32:	3501      	adds	r5, #1
 8008a34:	e7ee      	b.n	8008a14 <__libc_init_array+0xc>
 8008a36:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8008a3a:	4798      	blx	r3
 8008a3c:	3501      	adds	r5, #1
 8008a3e:	e7f2      	b.n	8008a26 <__libc_init_array+0x1e>
 8008a40:	0800d108 	.word	0x0800d108
 8008a44:	0800d108 	.word	0x0800d108
 8008a48:	0800d108 	.word	0x0800d108
 8008a4c:	0800d10c 	.word	0x0800d10c

08008a50 <memset>:
 8008a50:	4402      	add	r2, r0
 8008a52:	4603      	mov	r3, r0
 8008a54:	4293      	cmp	r3, r2
 8008a56:	d100      	bne.n	8008a5a <memset+0xa>
 8008a58:	4770      	bx	lr
 8008a5a:	f803 1b01 	strb.w	r1, [r3], #1
 8008a5e:	e7f9      	b.n	8008a54 <memset+0x4>

08008a60 <_malloc_r>:
 8008a60:	b570      	push	{r4, r5, r6, lr}
 8008a62:	1ccd      	adds	r5, r1, #3
 8008a64:	f025 0503 	bic.w	r5, r5, #3
 8008a68:	3508      	adds	r5, #8
 8008a6a:	2d0c      	cmp	r5, #12
 8008a6c:	bf38      	it	cc
 8008a6e:	250c      	movcc	r5, #12
 8008a70:	2d00      	cmp	r5, #0
 8008a72:	4606      	mov	r6, r0
 8008a74:	db01      	blt.n	8008a7a <_malloc_r+0x1a>
 8008a76:	42a9      	cmp	r1, r5
 8008a78:	d903      	bls.n	8008a82 <_malloc_r+0x22>
 8008a7a:	230c      	movs	r3, #12
 8008a7c:	6033      	str	r3, [r6, #0]
 8008a7e:	2000      	movs	r0, #0
 8008a80:	bd70      	pop	{r4, r5, r6, pc}
 8008a82:	f001 fe32 	bl	800a6ea <__malloc_lock>
 8008a86:	4a21      	ldr	r2, [pc, #132]	; (8008b0c <_malloc_r+0xac>)
 8008a88:	6814      	ldr	r4, [r2, #0]
 8008a8a:	4621      	mov	r1, r4
 8008a8c:	b991      	cbnz	r1, 8008ab4 <_malloc_r+0x54>
 8008a8e:	4c20      	ldr	r4, [pc, #128]	; (8008b10 <_malloc_r+0xb0>)
 8008a90:	6823      	ldr	r3, [r4, #0]
 8008a92:	b91b      	cbnz	r3, 8008a9c <_malloc_r+0x3c>
 8008a94:	4630      	mov	r0, r6
 8008a96:	f000 fd29 	bl	80094ec <_sbrk_r>
 8008a9a:	6020      	str	r0, [r4, #0]
 8008a9c:	4629      	mov	r1, r5
 8008a9e:	4630      	mov	r0, r6
 8008aa0:	f000 fd24 	bl	80094ec <_sbrk_r>
 8008aa4:	1c43      	adds	r3, r0, #1
 8008aa6:	d124      	bne.n	8008af2 <_malloc_r+0x92>
 8008aa8:	230c      	movs	r3, #12
 8008aaa:	6033      	str	r3, [r6, #0]
 8008aac:	4630      	mov	r0, r6
 8008aae:	f001 fe1d 	bl	800a6ec <__malloc_unlock>
 8008ab2:	e7e4      	b.n	8008a7e <_malloc_r+0x1e>
 8008ab4:	680b      	ldr	r3, [r1, #0]
 8008ab6:	1b5b      	subs	r3, r3, r5
 8008ab8:	d418      	bmi.n	8008aec <_malloc_r+0x8c>
 8008aba:	2b0b      	cmp	r3, #11
 8008abc:	d90f      	bls.n	8008ade <_malloc_r+0x7e>
 8008abe:	600b      	str	r3, [r1, #0]
 8008ac0:	50cd      	str	r5, [r1, r3]
 8008ac2:	18cc      	adds	r4, r1, r3
 8008ac4:	4630      	mov	r0, r6
 8008ac6:	f001 fe11 	bl	800a6ec <__malloc_unlock>
 8008aca:	f104 000b 	add.w	r0, r4, #11
 8008ace:	1d23      	adds	r3, r4, #4
 8008ad0:	f020 0007 	bic.w	r0, r0, #7
 8008ad4:	1ac3      	subs	r3, r0, r3
 8008ad6:	d0d3      	beq.n	8008a80 <_malloc_r+0x20>
 8008ad8:	425a      	negs	r2, r3
 8008ada:	50e2      	str	r2, [r4, r3]
 8008adc:	e7d0      	b.n	8008a80 <_malloc_r+0x20>
 8008ade:	428c      	cmp	r4, r1
 8008ae0:	684b      	ldr	r3, [r1, #4]
 8008ae2:	bf16      	itet	ne
 8008ae4:	6063      	strne	r3, [r4, #4]
 8008ae6:	6013      	streq	r3, [r2, #0]
 8008ae8:	460c      	movne	r4, r1
 8008aea:	e7eb      	b.n	8008ac4 <_malloc_r+0x64>
 8008aec:	460c      	mov	r4, r1
 8008aee:	6849      	ldr	r1, [r1, #4]
 8008af0:	e7cc      	b.n	8008a8c <_malloc_r+0x2c>
 8008af2:	1cc4      	adds	r4, r0, #3
 8008af4:	f024 0403 	bic.w	r4, r4, #3
 8008af8:	42a0      	cmp	r0, r4
 8008afa:	d005      	beq.n	8008b08 <_malloc_r+0xa8>
 8008afc:	1a21      	subs	r1, r4, r0
 8008afe:	4630      	mov	r0, r6
 8008b00:	f000 fcf4 	bl	80094ec <_sbrk_r>
 8008b04:	3001      	adds	r0, #1
 8008b06:	d0cf      	beq.n	8008aa8 <_malloc_r+0x48>
 8008b08:	6025      	str	r5, [r4, #0]
 8008b0a:	e7db      	b.n	8008ac4 <_malloc_r+0x64>
 8008b0c:	20000784 	.word	0x20000784
 8008b10:	20000788 	.word	0x20000788

08008b14 <__cvt>:
 8008b14:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008b18:	ec55 4b10 	vmov	r4, r5, d0
 8008b1c:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 8008b1e:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8008b22:	2d00      	cmp	r5, #0
 8008b24:	460e      	mov	r6, r1
 8008b26:	4691      	mov	r9, r2
 8008b28:	4619      	mov	r1, r3
 8008b2a:	bfb8      	it	lt
 8008b2c:	4622      	movlt	r2, r4
 8008b2e:	462b      	mov	r3, r5
 8008b30:	f027 0720 	bic.w	r7, r7, #32
 8008b34:	bfbb      	ittet	lt
 8008b36:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8008b3a:	461d      	movlt	r5, r3
 8008b3c:	2300      	movge	r3, #0
 8008b3e:	232d      	movlt	r3, #45	; 0x2d
 8008b40:	bfb8      	it	lt
 8008b42:	4614      	movlt	r4, r2
 8008b44:	2f46      	cmp	r7, #70	; 0x46
 8008b46:	700b      	strb	r3, [r1, #0]
 8008b48:	d004      	beq.n	8008b54 <__cvt+0x40>
 8008b4a:	2f45      	cmp	r7, #69	; 0x45
 8008b4c:	d100      	bne.n	8008b50 <__cvt+0x3c>
 8008b4e:	3601      	adds	r6, #1
 8008b50:	2102      	movs	r1, #2
 8008b52:	e000      	b.n	8008b56 <__cvt+0x42>
 8008b54:	2103      	movs	r1, #3
 8008b56:	ab03      	add	r3, sp, #12
 8008b58:	9301      	str	r3, [sp, #4]
 8008b5a:	ab02      	add	r3, sp, #8
 8008b5c:	9300      	str	r3, [sp, #0]
 8008b5e:	4632      	mov	r2, r6
 8008b60:	4653      	mov	r3, sl
 8008b62:	ec45 4b10 	vmov	d0, r4, r5
 8008b66:	f000 fe83 	bl	8009870 <_dtoa_r>
 8008b6a:	2f47      	cmp	r7, #71	; 0x47
 8008b6c:	4680      	mov	r8, r0
 8008b6e:	d102      	bne.n	8008b76 <__cvt+0x62>
 8008b70:	f019 0f01 	tst.w	r9, #1
 8008b74:	d026      	beq.n	8008bc4 <__cvt+0xb0>
 8008b76:	2f46      	cmp	r7, #70	; 0x46
 8008b78:	eb08 0906 	add.w	r9, r8, r6
 8008b7c:	d111      	bne.n	8008ba2 <__cvt+0x8e>
 8008b7e:	f898 3000 	ldrb.w	r3, [r8]
 8008b82:	2b30      	cmp	r3, #48	; 0x30
 8008b84:	d10a      	bne.n	8008b9c <__cvt+0x88>
 8008b86:	2200      	movs	r2, #0
 8008b88:	2300      	movs	r3, #0
 8008b8a:	4620      	mov	r0, r4
 8008b8c:	4629      	mov	r1, r5
 8008b8e:	f7f7 ff9b 	bl	8000ac8 <__aeabi_dcmpeq>
 8008b92:	b918      	cbnz	r0, 8008b9c <__cvt+0x88>
 8008b94:	f1c6 0601 	rsb	r6, r6, #1
 8008b98:	f8ca 6000 	str.w	r6, [sl]
 8008b9c:	f8da 3000 	ldr.w	r3, [sl]
 8008ba0:	4499      	add	r9, r3
 8008ba2:	2200      	movs	r2, #0
 8008ba4:	2300      	movs	r3, #0
 8008ba6:	4620      	mov	r0, r4
 8008ba8:	4629      	mov	r1, r5
 8008baa:	f7f7 ff8d 	bl	8000ac8 <__aeabi_dcmpeq>
 8008bae:	b938      	cbnz	r0, 8008bc0 <__cvt+0xac>
 8008bb0:	2230      	movs	r2, #48	; 0x30
 8008bb2:	9b03      	ldr	r3, [sp, #12]
 8008bb4:	454b      	cmp	r3, r9
 8008bb6:	d205      	bcs.n	8008bc4 <__cvt+0xb0>
 8008bb8:	1c59      	adds	r1, r3, #1
 8008bba:	9103      	str	r1, [sp, #12]
 8008bbc:	701a      	strb	r2, [r3, #0]
 8008bbe:	e7f8      	b.n	8008bb2 <__cvt+0x9e>
 8008bc0:	f8cd 900c 	str.w	r9, [sp, #12]
 8008bc4:	9b03      	ldr	r3, [sp, #12]
 8008bc6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8008bc8:	eba3 0308 	sub.w	r3, r3, r8
 8008bcc:	4640      	mov	r0, r8
 8008bce:	6013      	str	r3, [r2, #0]
 8008bd0:	b004      	add	sp, #16
 8008bd2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08008bd6 <__exponent>:
 8008bd6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008bd8:	2900      	cmp	r1, #0
 8008bda:	4604      	mov	r4, r0
 8008bdc:	bfba      	itte	lt
 8008bde:	4249      	neglt	r1, r1
 8008be0:	232d      	movlt	r3, #45	; 0x2d
 8008be2:	232b      	movge	r3, #43	; 0x2b
 8008be4:	2909      	cmp	r1, #9
 8008be6:	f804 2b02 	strb.w	r2, [r4], #2
 8008bea:	7043      	strb	r3, [r0, #1]
 8008bec:	dd20      	ble.n	8008c30 <__exponent+0x5a>
 8008bee:	f10d 0307 	add.w	r3, sp, #7
 8008bf2:	461f      	mov	r7, r3
 8008bf4:	260a      	movs	r6, #10
 8008bf6:	fb91 f5f6 	sdiv	r5, r1, r6
 8008bfa:	fb06 1115 	mls	r1, r6, r5, r1
 8008bfe:	3130      	adds	r1, #48	; 0x30
 8008c00:	2d09      	cmp	r5, #9
 8008c02:	f803 1c01 	strb.w	r1, [r3, #-1]
 8008c06:	f103 32ff 	add.w	r2, r3, #4294967295
 8008c0a:	4629      	mov	r1, r5
 8008c0c:	dc09      	bgt.n	8008c22 <__exponent+0x4c>
 8008c0e:	3130      	adds	r1, #48	; 0x30
 8008c10:	3b02      	subs	r3, #2
 8008c12:	f802 1c01 	strb.w	r1, [r2, #-1]
 8008c16:	42bb      	cmp	r3, r7
 8008c18:	4622      	mov	r2, r4
 8008c1a:	d304      	bcc.n	8008c26 <__exponent+0x50>
 8008c1c:	1a10      	subs	r0, r2, r0
 8008c1e:	b003      	add	sp, #12
 8008c20:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008c22:	4613      	mov	r3, r2
 8008c24:	e7e7      	b.n	8008bf6 <__exponent+0x20>
 8008c26:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008c2a:	f804 2b01 	strb.w	r2, [r4], #1
 8008c2e:	e7f2      	b.n	8008c16 <__exponent+0x40>
 8008c30:	2330      	movs	r3, #48	; 0x30
 8008c32:	4419      	add	r1, r3
 8008c34:	7083      	strb	r3, [r0, #2]
 8008c36:	1d02      	adds	r2, r0, #4
 8008c38:	70c1      	strb	r1, [r0, #3]
 8008c3a:	e7ef      	b.n	8008c1c <__exponent+0x46>

08008c3c <_printf_float>:
 8008c3c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008c40:	b08d      	sub	sp, #52	; 0x34
 8008c42:	460c      	mov	r4, r1
 8008c44:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 8008c48:	4616      	mov	r6, r2
 8008c4a:	461f      	mov	r7, r3
 8008c4c:	4605      	mov	r5, r0
 8008c4e:	f001 fcb5 	bl	800a5bc <_localeconv_r>
 8008c52:	6803      	ldr	r3, [r0, #0]
 8008c54:	9304      	str	r3, [sp, #16]
 8008c56:	4618      	mov	r0, r3
 8008c58:	f7f7 faba 	bl	80001d0 <strlen>
 8008c5c:	2300      	movs	r3, #0
 8008c5e:	930a      	str	r3, [sp, #40]	; 0x28
 8008c60:	f8d8 3000 	ldr.w	r3, [r8]
 8008c64:	9005      	str	r0, [sp, #20]
 8008c66:	3307      	adds	r3, #7
 8008c68:	f023 0307 	bic.w	r3, r3, #7
 8008c6c:	f103 0208 	add.w	r2, r3, #8
 8008c70:	f894 a018 	ldrb.w	sl, [r4, #24]
 8008c74:	f8d4 b000 	ldr.w	fp, [r4]
 8008c78:	f8c8 2000 	str.w	r2, [r8]
 8008c7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c80:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8008c84:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8008c88:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8008c8c:	9307      	str	r3, [sp, #28]
 8008c8e:	f8cd 8018 	str.w	r8, [sp, #24]
 8008c92:	f04f 32ff 	mov.w	r2, #4294967295
 8008c96:	4ba7      	ldr	r3, [pc, #668]	; (8008f34 <_printf_float+0x2f8>)
 8008c98:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008c9c:	f7f7 ff46 	bl	8000b2c <__aeabi_dcmpun>
 8008ca0:	bb70      	cbnz	r0, 8008d00 <_printf_float+0xc4>
 8008ca2:	f04f 32ff 	mov.w	r2, #4294967295
 8008ca6:	4ba3      	ldr	r3, [pc, #652]	; (8008f34 <_printf_float+0x2f8>)
 8008ca8:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008cac:	f7f7 ff20 	bl	8000af0 <__aeabi_dcmple>
 8008cb0:	bb30      	cbnz	r0, 8008d00 <_printf_float+0xc4>
 8008cb2:	2200      	movs	r2, #0
 8008cb4:	2300      	movs	r3, #0
 8008cb6:	4640      	mov	r0, r8
 8008cb8:	4649      	mov	r1, r9
 8008cba:	f7f7 ff0f 	bl	8000adc <__aeabi_dcmplt>
 8008cbe:	b110      	cbz	r0, 8008cc6 <_printf_float+0x8a>
 8008cc0:	232d      	movs	r3, #45	; 0x2d
 8008cc2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008cc6:	4a9c      	ldr	r2, [pc, #624]	; (8008f38 <_printf_float+0x2fc>)
 8008cc8:	4b9c      	ldr	r3, [pc, #624]	; (8008f3c <_printf_float+0x300>)
 8008cca:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 8008cce:	bf8c      	ite	hi
 8008cd0:	4690      	movhi	r8, r2
 8008cd2:	4698      	movls	r8, r3
 8008cd4:	2303      	movs	r3, #3
 8008cd6:	f02b 0204 	bic.w	r2, fp, #4
 8008cda:	6123      	str	r3, [r4, #16]
 8008cdc:	6022      	str	r2, [r4, #0]
 8008cde:	f04f 0900 	mov.w	r9, #0
 8008ce2:	9700      	str	r7, [sp, #0]
 8008ce4:	4633      	mov	r3, r6
 8008ce6:	aa0b      	add	r2, sp, #44	; 0x2c
 8008ce8:	4621      	mov	r1, r4
 8008cea:	4628      	mov	r0, r5
 8008cec:	f000 f9e6 	bl	80090bc <_printf_common>
 8008cf0:	3001      	adds	r0, #1
 8008cf2:	f040 808d 	bne.w	8008e10 <_printf_float+0x1d4>
 8008cf6:	f04f 30ff 	mov.w	r0, #4294967295
 8008cfa:	b00d      	add	sp, #52	; 0x34
 8008cfc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008d00:	4642      	mov	r2, r8
 8008d02:	464b      	mov	r3, r9
 8008d04:	4640      	mov	r0, r8
 8008d06:	4649      	mov	r1, r9
 8008d08:	f7f7 ff10 	bl	8000b2c <__aeabi_dcmpun>
 8008d0c:	b110      	cbz	r0, 8008d14 <_printf_float+0xd8>
 8008d0e:	4a8c      	ldr	r2, [pc, #560]	; (8008f40 <_printf_float+0x304>)
 8008d10:	4b8c      	ldr	r3, [pc, #560]	; (8008f44 <_printf_float+0x308>)
 8008d12:	e7da      	b.n	8008cca <_printf_float+0x8e>
 8008d14:	6861      	ldr	r1, [r4, #4]
 8008d16:	1c4b      	adds	r3, r1, #1
 8008d18:	f44b 6280 	orr.w	r2, fp, #1024	; 0x400
 8008d1c:	a80a      	add	r0, sp, #40	; 0x28
 8008d1e:	d13e      	bne.n	8008d9e <_printf_float+0x162>
 8008d20:	2306      	movs	r3, #6
 8008d22:	6063      	str	r3, [r4, #4]
 8008d24:	2300      	movs	r3, #0
 8008d26:	e9cd 0302 	strd	r0, r3, [sp, #8]
 8008d2a:	ab09      	add	r3, sp, #36	; 0x24
 8008d2c:	9300      	str	r3, [sp, #0]
 8008d2e:	ec49 8b10 	vmov	d0, r8, r9
 8008d32:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8008d36:	6022      	str	r2, [r4, #0]
 8008d38:	f8cd a004 	str.w	sl, [sp, #4]
 8008d3c:	6861      	ldr	r1, [r4, #4]
 8008d3e:	4628      	mov	r0, r5
 8008d40:	f7ff fee8 	bl	8008b14 <__cvt>
 8008d44:	f00a 03df 	and.w	r3, sl, #223	; 0xdf
 8008d48:	2b47      	cmp	r3, #71	; 0x47
 8008d4a:	4680      	mov	r8, r0
 8008d4c:	d109      	bne.n	8008d62 <_printf_float+0x126>
 8008d4e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008d50:	1cd8      	adds	r0, r3, #3
 8008d52:	db02      	blt.n	8008d5a <_printf_float+0x11e>
 8008d54:	6862      	ldr	r2, [r4, #4]
 8008d56:	4293      	cmp	r3, r2
 8008d58:	dd47      	ble.n	8008dea <_printf_float+0x1ae>
 8008d5a:	f1aa 0a02 	sub.w	sl, sl, #2
 8008d5e:	fa5f fa8a 	uxtb.w	sl, sl
 8008d62:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 8008d66:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008d68:	d824      	bhi.n	8008db4 <_printf_float+0x178>
 8008d6a:	3901      	subs	r1, #1
 8008d6c:	4652      	mov	r2, sl
 8008d6e:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8008d72:	9109      	str	r1, [sp, #36]	; 0x24
 8008d74:	f7ff ff2f 	bl	8008bd6 <__exponent>
 8008d78:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008d7a:	1813      	adds	r3, r2, r0
 8008d7c:	2a01      	cmp	r2, #1
 8008d7e:	4681      	mov	r9, r0
 8008d80:	6123      	str	r3, [r4, #16]
 8008d82:	dc02      	bgt.n	8008d8a <_printf_float+0x14e>
 8008d84:	6822      	ldr	r2, [r4, #0]
 8008d86:	07d1      	lsls	r1, r2, #31
 8008d88:	d501      	bpl.n	8008d8e <_printf_float+0x152>
 8008d8a:	3301      	adds	r3, #1
 8008d8c:	6123      	str	r3, [r4, #16]
 8008d8e:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8008d92:	2b00      	cmp	r3, #0
 8008d94:	d0a5      	beq.n	8008ce2 <_printf_float+0xa6>
 8008d96:	232d      	movs	r3, #45	; 0x2d
 8008d98:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008d9c:	e7a1      	b.n	8008ce2 <_printf_float+0xa6>
 8008d9e:	f1ba 0f67 	cmp.w	sl, #103	; 0x67
 8008da2:	f000 8177 	beq.w	8009094 <_printf_float+0x458>
 8008da6:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 8008daa:	d1bb      	bne.n	8008d24 <_printf_float+0xe8>
 8008dac:	2900      	cmp	r1, #0
 8008dae:	d1b9      	bne.n	8008d24 <_printf_float+0xe8>
 8008db0:	2301      	movs	r3, #1
 8008db2:	e7b6      	b.n	8008d22 <_printf_float+0xe6>
 8008db4:	f1ba 0f66 	cmp.w	sl, #102	; 0x66
 8008db8:	d119      	bne.n	8008dee <_printf_float+0x1b2>
 8008dba:	2900      	cmp	r1, #0
 8008dbc:	6863      	ldr	r3, [r4, #4]
 8008dbe:	dd0c      	ble.n	8008dda <_printf_float+0x19e>
 8008dc0:	6121      	str	r1, [r4, #16]
 8008dc2:	b913      	cbnz	r3, 8008dca <_printf_float+0x18e>
 8008dc4:	6822      	ldr	r2, [r4, #0]
 8008dc6:	07d2      	lsls	r2, r2, #31
 8008dc8:	d502      	bpl.n	8008dd0 <_printf_float+0x194>
 8008dca:	3301      	adds	r3, #1
 8008dcc:	440b      	add	r3, r1
 8008dce:	6123      	str	r3, [r4, #16]
 8008dd0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008dd2:	65a3      	str	r3, [r4, #88]	; 0x58
 8008dd4:	f04f 0900 	mov.w	r9, #0
 8008dd8:	e7d9      	b.n	8008d8e <_printf_float+0x152>
 8008dda:	b913      	cbnz	r3, 8008de2 <_printf_float+0x1a6>
 8008ddc:	6822      	ldr	r2, [r4, #0]
 8008dde:	07d0      	lsls	r0, r2, #31
 8008de0:	d501      	bpl.n	8008de6 <_printf_float+0x1aa>
 8008de2:	3302      	adds	r3, #2
 8008de4:	e7f3      	b.n	8008dce <_printf_float+0x192>
 8008de6:	2301      	movs	r3, #1
 8008de8:	e7f1      	b.n	8008dce <_printf_float+0x192>
 8008dea:	f04f 0a67 	mov.w	sl, #103	; 0x67
 8008dee:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8008df2:	4293      	cmp	r3, r2
 8008df4:	db05      	blt.n	8008e02 <_printf_float+0x1c6>
 8008df6:	6822      	ldr	r2, [r4, #0]
 8008df8:	6123      	str	r3, [r4, #16]
 8008dfa:	07d1      	lsls	r1, r2, #31
 8008dfc:	d5e8      	bpl.n	8008dd0 <_printf_float+0x194>
 8008dfe:	3301      	adds	r3, #1
 8008e00:	e7e5      	b.n	8008dce <_printf_float+0x192>
 8008e02:	2b00      	cmp	r3, #0
 8008e04:	bfd4      	ite	le
 8008e06:	f1c3 0302 	rsble	r3, r3, #2
 8008e0a:	2301      	movgt	r3, #1
 8008e0c:	4413      	add	r3, r2
 8008e0e:	e7de      	b.n	8008dce <_printf_float+0x192>
 8008e10:	6823      	ldr	r3, [r4, #0]
 8008e12:	055a      	lsls	r2, r3, #21
 8008e14:	d407      	bmi.n	8008e26 <_printf_float+0x1ea>
 8008e16:	6923      	ldr	r3, [r4, #16]
 8008e18:	4642      	mov	r2, r8
 8008e1a:	4631      	mov	r1, r6
 8008e1c:	4628      	mov	r0, r5
 8008e1e:	47b8      	blx	r7
 8008e20:	3001      	adds	r0, #1
 8008e22:	d12b      	bne.n	8008e7c <_printf_float+0x240>
 8008e24:	e767      	b.n	8008cf6 <_printf_float+0xba>
 8008e26:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 8008e2a:	f240 80dc 	bls.w	8008fe6 <_printf_float+0x3aa>
 8008e2e:	2200      	movs	r2, #0
 8008e30:	2300      	movs	r3, #0
 8008e32:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8008e36:	f7f7 fe47 	bl	8000ac8 <__aeabi_dcmpeq>
 8008e3a:	2800      	cmp	r0, #0
 8008e3c:	d033      	beq.n	8008ea6 <_printf_float+0x26a>
 8008e3e:	2301      	movs	r3, #1
 8008e40:	4a41      	ldr	r2, [pc, #260]	; (8008f48 <_printf_float+0x30c>)
 8008e42:	4631      	mov	r1, r6
 8008e44:	4628      	mov	r0, r5
 8008e46:	47b8      	blx	r7
 8008e48:	3001      	adds	r0, #1
 8008e4a:	f43f af54 	beq.w	8008cf6 <_printf_float+0xba>
 8008e4e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008e52:	429a      	cmp	r2, r3
 8008e54:	db02      	blt.n	8008e5c <_printf_float+0x220>
 8008e56:	6823      	ldr	r3, [r4, #0]
 8008e58:	07d8      	lsls	r0, r3, #31
 8008e5a:	d50f      	bpl.n	8008e7c <_printf_float+0x240>
 8008e5c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008e60:	4631      	mov	r1, r6
 8008e62:	4628      	mov	r0, r5
 8008e64:	47b8      	blx	r7
 8008e66:	3001      	adds	r0, #1
 8008e68:	f43f af45 	beq.w	8008cf6 <_printf_float+0xba>
 8008e6c:	f04f 0800 	mov.w	r8, #0
 8008e70:	f104 091a 	add.w	r9, r4, #26
 8008e74:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008e76:	3b01      	subs	r3, #1
 8008e78:	4543      	cmp	r3, r8
 8008e7a:	dc09      	bgt.n	8008e90 <_printf_float+0x254>
 8008e7c:	6823      	ldr	r3, [r4, #0]
 8008e7e:	079b      	lsls	r3, r3, #30
 8008e80:	f100 8103 	bmi.w	800908a <_printf_float+0x44e>
 8008e84:	68e0      	ldr	r0, [r4, #12]
 8008e86:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008e88:	4298      	cmp	r0, r3
 8008e8a:	bfb8      	it	lt
 8008e8c:	4618      	movlt	r0, r3
 8008e8e:	e734      	b.n	8008cfa <_printf_float+0xbe>
 8008e90:	2301      	movs	r3, #1
 8008e92:	464a      	mov	r2, r9
 8008e94:	4631      	mov	r1, r6
 8008e96:	4628      	mov	r0, r5
 8008e98:	47b8      	blx	r7
 8008e9a:	3001      	adds	r0, #1
 8008e9c:	f43f af2b 	beq.w	8008cf6 <_printf_float+0xba>
 8008ea0:	f108 0801 	add.w	r8, r8, #1
 8008ea4:	e7e6      	b.n	8008e74 <_printf_float+0x238>
 8008ea6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008ea8:	2b00      	cmp	r3, #0
 8008eaa:	dc2b      	bgt.n	8008f04 <_printf_float+0x2c8>
 8008eac:	2301      	movs	r3, #1
 8008eae:	4a26      	ldr	r2, [pc, #152]	; (8008f48 <_printf_float+0x30c>)
 8008eb0:	4631      	mov	r1, r6
 8008eb2:	4628      	mov	r0, r5
 8008eb4:	47b8      	blx	r7
 8008eb6:	3001      	adds	r0, #1
 8008eb8:	f43f af1d 	beq.w	8008cf6 <_printf_float+0xba>
 8008ebc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008ebe:	b923      	cbnz	r3, 8008eca <_printf_float+0x28e>
 8008ec0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008ec2:	b913      	cbnz	r3, 8008eca <_printf_float+0x28e>
 8008ec4:	6823      	ldr	r3, [r4, #0]
 8008ec6:	07d9      	lsls	r1, r3, #31
 8008ec8:	d5d8      	bpl.n	8008e7c <_printf_float+0x240>
 8008eca:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008ece:	4631      	mov	r1, r6
 8008ed0:	4628      	mov	r0, r5
 8008ed2:	47b8      	blx	r7
 8008ed4:	3001      	adds	r0, #1
 8008ed6:	f43f af0e 	beq.w	8008cf6 <_printf_float+0xba>
 8008eda:	f04f 0900 	mov.w	r9, #0
 8008ede:	f104 0a1a 	add.w	sl, r4, #26
 8008ee2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008ee4:	425b      	negs	r3, r3
 8008ee6:	454b      	cmp	r3, r9
 8008ee8:	dc01      	bgt.n	8008eee <_printf_float+0x2b2>
 8008eea:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008eec:	e794      	b.n	8008e18 <_printf_float+0x1dc>
 8008eee:	2301      	movs	r3, #1
 8008ef0:	4652      	mov	r2, sl
 8008ef2:	4631      	mov	r1, r6
 8008ef4:	4628      	mov	r0, r5
 8008ef6:	47b8      	blx	r7
 8008ef8:	3001      	adds	r0, #1
 8008efa:	f43f aefc 	beq.w	8008cf6 <_printf_float+0xba>
 8008efe:	f109 0901 	add.w	r9, r9, #1
 8008f02:	e7ee      	b.n	8008ee2 <_printf_float+0x2a6>
 8008f04:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008f06:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8008f08:	429a      	cmp	r2, r3
 8008f0a:	bfa8      	it	ge
 8008f0c:	461a      	movge	r2, r3
 8008f0e:	2a00      	cmp	r2, #0
 8008f10:	4691      	mov	r9, r2
 8008f12:	dd07      	ble.n	8008f24 <_printf_float+0x2e8>
 8008f14:	4613      	mov	r3, r2
 8008f16:	4631      	mov	r1, r6
 8008f18:	4642      	mov	r2, r8
 8008f1a:	4628      	mov	r0, r5
 8008f1c:	47b8      	blx	r7
 8008f1e:	3001      	adds	r0, #1
 8008f20:	f43f aee9 	beq.w	8008cf6 <_printf_float+0xba>
 8008f24:	f104 031a 	add.w	r3, r4, #26
 8008f28:	f04f 0b00 	mov.w	fp, #0
 8008f2c:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8008f30:	9306      	str	r3, [sp, #24]
 8008f32:	e015      	b.n	8008f60 <_printf_float+0x324>
 8008f34:	7fefffff 	.word	0x7fefffff
 8008f38:	0800cad8 	.word	0x0800cad8
 8008f3c:	0800cad4 	.word	0x0800cad4
 8008f40:	0800cae0 	.word	0x0800cae0
 8008f44:	0800cadc 	.word	0x0800cadc
 8008f48:	0800cae4 	.word	0x0800cae4
 8008f4c:	2301      	movs	r3, #1
 8008f4e:	9a06      	ldr	r2, [sp, #24]
 8008f50:	4631      	mov	r1, r6
 8008f52:	4628      	mov	r0, r5
 8008f54:	47b8      	blx	r7
 8008f56:	3001      	adds	r0, #1
 8008f58:	f43f aecd 	beq.w	8008cf6 <_printf_float+0xba>
 8008f5c:	f10b 0b01 	add.w	fp, fp, #1
 8008f60:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8008f64:	ebaa 0309 	sub.w	r3, sl, r9
 8008f68:	455b      	cmp	r3, fp
 8008f6a:	dcef      	bgt.n	8008f4c <_printf_float+0x310>
 8008f6c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008f70:	429a      	cmp	r2, r3
 8008f72:	44d0      	add	r8, sl
 8008f74:	db15      	blt.n	8008fa2 <_printf_float+0x366>
 8008f76:	6823      	ldr	r3, [r4, #0]
 8008f78:	07da      	lsls	r2, r3, #31
 8008f7a:	d412      	bmi.n	8008fa2 <_printf_float+0x366>
 8008f7c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008f7e:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008f80:	eba3 020a 	sub.w	r2, r3, sl
 8008f84:	eba3 0a01 	sub.w	sl, r3, r1
 8008f88:	4592      	cmp	sl, r2
 8008f8a:	bfa8      	it	ge
 8008f8c:	4692      	movge	sl, r2
 8008f8e:	f1ba 0f00 	cmp.w	sl, #0
 8008f92:	dc0e      	bgt.n	8008fb2 <_printf_float+0x376>
 8008f94:	f04f 0800 	mov.w	r8, #0
 8008f98:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8008f9c:	f104 091a 	add.w	r9, r4, #26
 8008fa0:	e019      	b.n	8008fd6 <_printf_float+0x39a>
 8008fa2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008fa6:	4631      	mov	r1, r6
 8008fa8:	4628      	mov	r0, r5
 8008faa:	47b8      	blx	r7
 8008fac:	3001      	adds	r0, #1
 8008fae:	d1e5      	bne.n	8008f7c <_printf_float+0x340>
 8008fb0:	e6a1      	b.n	8008cf6 <_printf_float+0xba>
 8008fb2:	4653      	mov	r3, sl
 8008fb4:	4642      	mov	r2, r8
 8008fb6:	4631      	mov	r1, r6
 8008fb8:	4628      	mov	r0, r5
 8008fba:	47b8      	blx	r7
 8008fbc:	3001      	adds	r0, #1
 8008fbe:	d1e9      	bne.n	8008f94 <_printf_float+0x358>
 8008fc0:	e699      	b.n	8008cf6 <_printf_float+0xba>
 8008fc2:	2301      	movs	r3, #1
 8008fc4:	464a      	mov	r2, r9
 8008fc6:	4631      	mov	r1, r6
 8008fc8:	4628      	mov	r0, r5
 8008fca:	47b8      	blx	r7
 8008fcc:	3001      	adds	r0, #1
 8008fce:	f43f ae92 	beq.w	8008cf6 <_printf_float+0xba>
 8008fd2:	f108 0801 	add.w	r8, r8, #1
 8008fd6:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008fda:	1a9b      	subs	r3, r3, r2
 8008fdc:	eba3 030a 	sub.w	r3, r3, sl
 8008fe0:	4543      	cmp	r3, r8
 8008fe2:	dcee      	bgt.n	8008fc2 <_printf_float+0x386>
 8008fe4:	e74a      	b.n	8008e7c <_printf_float+0x240>
 8008fe6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008fe8:	2a01      	cmp	r2, #1
 8008fea:	dc01      	bgt.n	8008ff0 <_printf_float+0x3b4>
 8008fec:	07db      	lsls	r3, r3, #31
 8008fee:	d53a      	bpl.n	8009066 <_printf_float+0x42a>
 8008ff0:	2301      	movs	r3, #1
 8008ff2:	4642      	mov	r2, r8
 8008ff4:	4631      	mov	r1, r6
 8008ff6:	4628      	mov	r0, r5
 8008ff8:	47b8      	blx	r7
 8008ffa:	3001      	adds	r0, #1
 8008ffc:	f43f ae7b 	beq.w	8008cf6 <_printf_float+0xba>
 8009000:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009004:	4631      	mov	r1, r6
 8009006:	4628      	mov	r0, r5
 8009008:	47b8      	blx	r7
 800900a:	3001      	adds	r0, #1
 800900c:	f108 0801 	add.w	r8, r8, #1
 8009010:	f43f ae71 	beq.w	8008cf6 <_printf_float+0xba>
 8009014:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009016:	2200      	movs	r2, #0
 8009018:	f103 3aff 	add.w	sl, r3, #4294967295
 800901c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8009020:	2300      	movs	r3, #0
 8009022:	f7f7 fd51 	bl	8000ac8 <__aeabi_dcmpeq>
 8009026:	b9c8      	cbnz	r0, 800905c <_printf_float+0x420>
 8009028:	4653      	mov	r3, sl
 800902a:	4642      	mov	r2, r8
 800902c:	4631      	mov	r1, r6
 800902e:	4628      	mov	r0, r5
 8009030:	47b8      	blx	r7
 8009032:	3001      	adds	r0, #1
 8009034:	d10e      	bne.n	8009054 <_printf_float+0x418>
 8009036:	e65e      	b.n	8008cf6 <_printf_float+0xba>
 8009038:	2301      	movs	r3, #1
 800903a:	4652      	mov	r2, sl
 800903c:	4631      	mov	r1, r6
 800903e:	4628      	mov	r0, r5
 8009040:	47b8      	blx	r7
 8009042:	3001      	adds	r0, #1
 8009044:	f43f ae57 	beq.w	8008cf6 <_printf_float+0xba>
 8009048:	f108 0801 	add.w	r8, r8, #1
 800904c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800904e:	3b01      	subs	r3, #1
 8009050:	4543      	cmp	r3, r8
 8009052:	dcf1      	bgt.n	8009038 <_printf_float+0x3fc>
 8009054:	464b      	mov	r3, r9
 8009056:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800905a:	e6de      	b.n	8008e1a <_printf_float+0x1de>
 800905c:	f04f 0800 	mov.w	r8, #0
 8009060:	f104 0a1a 	add.w	sl, r4, #26
 8009064:	e7f2      	b.n	800904c <_printf_float+0x410>
 8009066:	2301      	movs	r3, #1
 8009068:	e7df      	b.n	800902a <_printf_float+0x3ee>
 800906a:	2301      	movs	r3, #1
 800906c:	464a      	mov	r2, r9
 800906e:	4631      	mov	r1, r6
 8009070:	4628      	mov	r0, r5
 8009072:	47b8      	blx	r7
 8009074:	3001      	adds	r0, #1
 8009076:	f43f ae3e 	beq.w	8008cf6 <_printf_float+0xba>
 800907a:	f108 0801 	add.w	r8, r8, #1
 800907e:	68e3      	ldr	r3, [r4, #12]
 8009080:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8009082:	1a9b      	subs	r3, r3, r2
 8009084:	4543      	cmp	r3, r8
 8009086:	dcf0      	bgt.n	800906a <_printf_float+0x42e>
 8009088:	e6fc      	b.n	8008e84 <_printf_float+0x248>
 800908a:	f04f 0800 	mov.w	r8, #0
 800908e:	f104 0919 	add.w	r9, r4, #25
 8009092:	e7f4      	b.n	800907e <_printf_float+0x442>
 8009094:	2900      	cmp	r1, #0
 8009096:	f43f ae8b 	beq.w	8008db0 <_printf_float+0x174>
 800909a:	2300      	movs	r3, #0
 800909c:	e9cd 0302 	strd	r0, r3, [sp, #8]
 80090a0:	ab09      	add	r3, sp, #36	; 0x24
 80090a2:	9300      	str	r3, [sp, #0]
 80090a4:	ec49 8b10 	vmov	d0, r8, r9
 80090a8:	6022      	str	r2, [r4, #0]
 80090aa:	f8cd a004 	str.w	sl, [sp, #4]
 80090ae:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 80090b2:	4628      	mov	r0, r5
 80090b4:	f7ff fd2e 	bl	8008b14 <__cvt>
 80090b8:	4680      	mov	r8, r0
 80090ba:	e648      	b.n	8008d4e <_printf_float+0x112>

080090bc <_printf_common>:
 80090bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80090c0:	4691      	mov	r9, r2
 80090c2:	461f      	mov	r7, r3
 80090c4:	688a      	ldr	r2, [r1, #8]
 80090c6:	690b      	ldr	r3, [r1, #16]
 80090c8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80090cc:	4293      	cmp	r3, r2
 80090ce:	bfb8      	it	lt
 80090d0:	4613      	movlt	r3, r2
 80090d2:	f8c9 3000 	str.w	r3, [r9]
 80090d6:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80090da:	4606      	mov	r6, r0
 80090dc:	460c      	mov	r4, r1
 80090de:	b112      	cbz	r2, 80090e6 <_printf_common+0x2a>
 80090e0:	3301      	adds	r3, #1
 80090e2:	f8c9 3000 	str.w	r3, [r9]
 80090e6:	6823      	ldr	r3, [r4, #0]
 80090e8:	0699      	lsls	r1, r3, #26
 80090ea:	bf42      	ittt	mi
 80090ec:	f8d9 3000 	ldrmi.w	r3, [r9]
 80090f0:	3302      	addmi	r3, #2
 80090f2:	f8c9 3000 	strmi.w	r3, [r9]
 80090f6:	6825      	ldr	r5, [r4, #0]
 80090f8:	f015 0506 	ands.w	r5, r5, #6
 80090fc:	d107      	bne.n	800910e <_printf_common+0x52>
 80090fe:	f104 0a19 	add.w	sl, r4, #25
 8009102:	68e3      	ldr	r3, [r4, #12]
 8009104:	f8d9 2000 	ldr.w	r2, [r9]
 8009108:	1a9b      	subs	r3, r3, r2
 800910a:	42ab      	cmp	r3, r5
 800910c:	dc28      	bgt.n	8009160 <_printf_common+0xa4>
 800910e:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8009112:	6822      	ldr	r2, [r4, #0]
 8009114:	3300      	adds	r3, #0
 8009116:	bf18      	it	ne
 8009118:	2301      	movne	r3, #1
 800911a:	0692      	lsls	r2, r2, #26
 800911c:	d42d      	bmi.n	800917a <_printf_common+0xbe>
 800911e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8009122:	4639      	mov	r1, r7
 8009124:	4630      	mov	r0, r6
 8009126:	47c0      	blx	r8
 8009128:	3001      	adds	r0, #1
 800912a:	d020      	beq.n	800916e <_printf_common+0xb2>
 800912c:	6823      	ldr	r3, [r4, #0]
 800912e:	68e5      	ldr	r5, [r4, #12]
 8009130:	f8d9 2000 	ldr.w	r2, [r9]
 8009134:	f003 0306 	and.w	r3, r3, #6
 8009138:	2b04      	cmp	r3, #4
 800913a:	bf08      	it	eq
 800913c:	1aad      	subeq	r5, r5, r2
 800913e:	68a3      	ldr	r3, [r4, #8]
 8009140:	6922      	ldr	r2, [r4, #16]
 8009142:	bf0c      	ite	eq
 8009144:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009148:	2500      	movne	r5, #0
 800914a:	4293      	cmp	r3, r2
 800914c:	bfc4      	itt	gt
 800914e:	1a9b      	subgt	r3, r3, r2
 8009150:	18ed      	addgt	r5, r5, r3
 8009152:	f04f 0900 	mov.w	r9, #0
 8009156:	341a      	adds	r4, #26
 8009158:	454d      	cmp	r5, r9
 800915a:	d11a      	bne.n	8009192 <_printf_common+0xd6>
 800915c:	2000      	movs	r0, #0
 800915e:	e008      	b.n	8009172 <_printf_common+0xb6>
 8009160:	2301      	movs	r3, #1
 8009162:	4652      	mov	r2, sl
 8009164:	4639      	mov	r1, r7
 8009166:	4630      	mov	r0, r6
 8009168:	47c0      	blx	r8
 800916a:	3001      	adds	r0, #1
 800916c:	d103      	bne.n	8009176 <_printf_common+0xba>
 800916e:	f04f 30ff 	mov.w	r0, #4294967295
 8009172:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009176:	3501      	adds	r5, #1
 8009178:	e7c3      	b.n	8009102 <_printf_common+0x46>
 800917a:	18e1      	adds	r1, r4, r3
 800917c:	1c5a      	adds	r2, r3, #1
 800917e:	2030      	movs	r0, #48	; 0x30
 8009180:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8009184:	4422      	add	r2, r4
 8009186:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800918a:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800918e:	3302      	adds	r3, #2
 8009190:	e7c5      	b.n	800911e <_printf_common+0x62>
 8009192:	2301      	movs	r3, #1
 8009194:	4622      	mov	r2, r4
 8009196:	4639      	mov	r1, r7
 8009198:	4630      	mov	r0, r6
 800919a:	47c0      	blx	r8
 800919c:	3001      	adds	r0, #1
 800919e:	d0e6      	beq.n	800916e <_printf_common+0xb2>
 80091a0:	f109 0901 	add.w	r9, r9, #1
 80091a4:	e7d8      	b.n	8009158 <_printf_common+0x9c>
	...

080091a8 <_printf_i>:
 80091a8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80091ac:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 80091b0:	460c      	mov	r4, r1
 80091b2:	7e09      	ldrb	r1, [r1, #24]
 80091b4:	b085      	sub	sp, #20
 80091b6:	296e      	cmp	r1, #110	; 0x6e
 80091b8:	4617      	mov	r7, r2
 80091ba:	4606      	mov	r6, r0
 80091bc:	4698      	mov	r8, r3
 80091be:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80091c0:	f000 80b3 	beq.w	800932a <_printf_i+0x182>
 80091c4:	d822      	bhi.n	800920c <_printf_i+0x64>
 80091c6:	2963      	cmp	r1, #99	; 0x63
 80091c8:	d036      	beq.n	8009238 <_printf_i+0x90>
 80091ca:	d80a      	bhi.n	80091e2 <_printf_i+0x3a>
 80091cc:	2900      	cmp	r1, #0
 80091ce:	f000 80b9 	beq.w	8009344 <_printf_i+0x19c>
 80091d2:	2958      	cmp	r1, #88	; 0x58
 80091d4:	f000 8083 	beq.w	80092de <_printf_i+0x136>
 80091d8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80091dc:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 80091e0:	e032      	b.n	8009248 <_printf_i+0xa0>
 80091e2:	2964      	cmp	r1, #100	; 0x64
 80091e4:	d001      	beq.n	80091ea <_printf_i+0x42>
 80091e6:	2969      	cmp	r1, #105	; 0x69
 80091e8:	d1f6      	bne.n	80091d8 <_printf_i+0x30>
 80091ea:	6820      	ldr	r0, [r4, #0]
 80091ec:	6813      	ldr	r3, [r2, #0]
 80091ee:	0605      	lsls	r5, r0, #24
 80091f0:	f103 0104 	add.w	r1, r3, #4
 80091f4:	d52a      	bpl.n	800924c <_printf_i+0xa4>
 80091f6:	681b      	ldr	r3, [r3, #0]
 80091f8:	6011      	str	r1, [r2, #0]
 80091fa:	2b00      	cmp	r3, #0
 80091fc:	da03      	bge.n	8009206 <_printf_i+0x5e>
 80091fe:	222d      	movs	r2, #45	; 0x2d
 8009200:	425b      	negs	r3, r3
 8009202:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8009206:	486f      	ldr	r0, [pc, #444]	; (80093c4 <_printf_i+0x21c>)
 8009208:	220a      	movs	r2, #10
 800920a:	e039      	b.n	8009280 <_printf_i+0xd8>
 800920c:	2973      	cmp	r1, #115	; 0x73
 800920e:	f000 809d 	beq.w	800934c <_printf_i+0x1a4>
 8009212:	d808      	bhi.n	8009226 <_printf_i+0x7e>
 8009214:	296f      	cmp	r1, #111	; 0x6f
 8009216:	d020      	beq.n	800925a <_printf_i+0xb2>
 8009218:	2970      	cmp	r1, #112	; 0x70
 800921a:	d1dd      	bne.n	80091d8 <_printf_i+0x30>
 800921c:	6823      	ldr	r3, [r4, #0]
 800921e:	f043 0320 	orr.w	r3, r3, #32
 8009222:	6023      	str	r3, [r4, #0]
 8009224:	e003      	b.n	800922e <_printf_i+0x86>
 8009226:	2975      	cmp	r1, #117	; 0x75
 8009228:	d017      	beq.n	800925a <_printf_i+0xb2>
 800922a:	2978      	cmp	r1, #120	; 0x78
 800922c:	d1d4      	bne.n	80091d8 <_printf_i+0x30>
 800922e:	2378      	movs	r3, #120	; 0x78
 8009230:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8009234:	4864      	ldr	r0, [pc, #400]	; (80093c8 <_printf_i+0x220>)
 8009236:	e055      	b.n	80092e4 <_printf_i+0x13c>
 8009238:	6813      	ldr	r3, [r2, #0]
 800923a:	1d19      	adds	r1, r3, #4
 800923c:	681b      	ldr	r3, [r3, #0]
 800923e:	6011      	str	r1, [r2, #0]
 8009240:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009244:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8009248:	2301      	movs	r3, #1
 800924a:	e08c      	b.n	8009366 <_printf_i+0x1be>
 800924c:	681b      	ldr	r3, [r3, #0]
 800924e:	6011      	str	r1, [r2, #0]
 8009250:	f010 0f40 	tst.w	r0, #64	; 0x40
 8009254:	bf18      	it	ne
 8009256:	b21b      	sxthne	r3, r3
 8009258:	e7cf      	b.n	80091fa <_printf_i+0x52>
 800925a:	6813      	ldr	r3, [r2, #0]
 800925c:	6825      	ldr	r5, [r4, #0]
 800925e:	1d18      	adds	r0, r3, #4
 8009260:	6010      	str	r0, [r2, #0]
 8009262:	0628      	lsls	r0, r5, #24
 8009264:	d501      	bpl.n	800926a <_printf_i+0xc2>
 8009266:	681b      	ldr	r3, [r3, #0]
 8009268:	e002      	b.n	8009270 <_printf_i+0xc8>
 800926a:	0668      	lsls	r0, r5, #25
 800926c:	d5fb      	bpl.n	8009266 <_printf_i+0xbe>
 800926e:	881b      	ldrh	r3, [r3, #0]
 8009270:	4854      	ldr	r0, [pc, #336]	; (80093c4 <_printf_i+0x21c>)
 8009272:	296f      	cmp	r1, #111	; 0x6f
 8009274:	bf14      	ite	ne
 8009276:	220a      	movne	r2, #10
 8009278:	2208      	moveq	r2, #8
 800927a:	2100      	movs	r1, #0
 800927c:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8009280:	6865      	ldr	r5, [r4, #4]
 8009282:	60a5      	str	r5, [r4, #8]
 8009284:	2d00      	cmp	r5, #0
 8009286:	f2c0 8095 	blt.w	80093b4 <_printf_i+0x20c>
 800928a:	6821      	ldr	r1, [r4, #0]
 800928c:	f021 0104 	bic.w	r1, r1, #4
 8009290:	6021      	str	r1, [r4, #0]
 8009292:	2b00      	cmp	r3, #0
 8009294:	d13d      	bne.n	8009312 <_printf_i+0x16a>
 8009296:	2d00      	cmp	r5, #0
 8009298:	f040 808e 	bne.w	80093b8 <_printf_i+0x210>
 800929c:	4665      	mov	r5, ip
 800929e:	2a08      	cmp	r2, #8
 80092a0:	d10b      	bne.n	80092ba <_printf_i+0x112>
 80092a2:	6823      	ldr	r3, [r4, #0]
 80092a4:	07db      	lsls	r3, r3, #31
 80092a6:	d508      	bpl.n	80092ba <_printf_i+0x112>
 80092a8:	6923      	ldr	r3, [r4, #16]
 80092aa:	6862      	ldr	r2, [r4, #4]
 80092ac:	429a      	cmp	r2, r3
 80092ae:	bfde      	ittt	le
 80092b0:	2330      	movle	r3, #48	; 0x30
 80092b2:	f805 3c01 	strble.w	r3, [r5, #-1]
 80092b6:	f105 35ff 	addle.w	r5, r5, #4294967295
 80092ba:	ebac 0305 	sub.w	r3, ip, r5
 80092be:	6123      	str	r3, [r4, #16]
 80092c0:	f8cd 8000 	str.w	r8, [sp]
 80092c4:	463b      	mov	r3, r7
 80092c6:	aa03      	add	r2, sp, #12
 80092c8:	4621      	mov	r1, r4
 80092ca:	4630      	mov	r0, r6
 80092cc:	f7ff fef6 	bl	80090bc <_printf_common>
 80092d0:	3001      	adds	r0, #1
 80092d2:	d14d      	bne.n	8009370 <_printf_i+0x1c8>
 80092d4:	f04f 30ff 	mov.w	r0, #4294967295
 80092d8:	b005      	add	sp, #20
 80092da:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80092de:	4839      	ldr	r0, [pc, #228]	; (80093c4 <_printf_i+0x21c>)
 80092e0:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 80092e4:	6813      	ldr	r3, [r2, #0]
 80092e6:	6821      	ldr	r1, [r4, #0]
 80092e8:	1d1d      	adds	r5, r3, #4
 80092ea:	681b      	ldr	r3, [r3, #0]
 80092ec:	6015      	str	r5, [r2, #0]
 80092ee:	060a      	lsls	r2, r1, #24
 80092f0:	d50b      	bpl.n	800930a <_printf_i+0x162>
 80092f2:	07ca      	lsls	r2, r1, #31
 80092f4:	bf44      	itt	mi
 80092f6:	f041 0120 	orrmi.w	r1, r1, #32
 80092fa:	6021      	strmi	r1, [r4, #0]
 80092fc:	b91b      	cbnz	r3, 8009306 <_printf_i+0x15e>
 80092fe:	6822      	ldr	r2, [r4, #0]
 8009300:	f022 0220 	bic.w	r2, r2, #32
 8009304:	6022      	str	r2, [r4, #0]
 8009306:	2210      	movs	r2, #16
 8009308:	e7b7      	b.n	800927a <_printf_i+0xd2>
 800930a:	064d      	lsls	r5, r1, #25
 800930c:	bf48      	it	mi
 800930e:	b29b      	uxthmi	r3, r3
 8009310:	e7ef      	b.n	80092f2 <_printf_i+0x14a>
 8009312:	4665      	mov	r5, ip
 8009314:	fbb3 f1f2 	udiv	r1, r3, r2
 8009318:	fb02 3311 	mls	r3, r2, r1, r3
 800931c:	5cc3      	ldrb	r3, [r0, r3]
 800931e:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8009322:	460b      	mov	r3, r1
 8009324:	2900      	cmp	r1, #0
 8009326:	d1f5      	bne.n	8009314 <_printf_i+0x16c>
 8009328:	e7b9      	b.n	800929e <_printf_i+0xf6>
 800932a:	6813      	ldr	r3, [r2, #0]
 800932c:	6825      	ldr	r5, [r4, #0]
 800932e:	6961      	ldr	r1, [r4, #20]
 8009330:	1d18      	adds	r0, r3, #4
 8009332:	6010      	str	r0, [r2, #0]
 8009334:	0628      	lsls	r0, r5, #24
 8009336:	681b      	ldr	r3, [r3, #0]
 8009338:	d501      	bpl.n	800933e <_printf_i+0x196>
 800933a:	6019      	str	r1, [r3, #0]
 800933c:	e002      	b.n	8009344 <_printf_i+0x19c>
 800933e:	066a      	lsls	r2, r5, #25
 8009340:	d5fb      	bpl.n	800933a <_printf_i+0x192>
 8009342:	8019      	strh	r1, [r3, #0]
 8009344:	2300      	movs	r3, #0
 8009346:	6123      	str	r3, [r4, #16]
 8009348:	4665      	mov	r5, ip
 800934a:	e7b9      	b.n	80092c0 <_printf_i+0x118>
 800934c:	6813      	ldr	r3, [r2, #0]
 800934e:	1d19      	adds	r1, r3, #4
 8009350:	6011      	str	r1, [r2, #0]
 8009352:	681d      	ldr	r5, [r3, #0]
 8009354:	6862      	ldr	r2, [r4, #4]
 8009356:	2100      	movs	r1, #0
 8009358:	4628      	mov	r0, r5
 800935a:	f7f6 ff41 	bl	80001e0 <memchr>
 800935e:	b108      	cbz	r0, 8009364 <_printf_i+0x1bc>
 8009360:	1b40      	subs	r0, r0, r5
 8009362:	6060      	str	r0, [r4, #4]
 8009364:	6863      	ldr	r3, [r4, #4]
 8009366:	6123      	str	r3, [r4, #16]
 8009368:	2300      	movs	r3, #0
 800936a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800936e:	e7a7      	b.n	80092c0 <_printf_i+0x118>
 8009370:	6923      	ldr	r3, [r4, #16]
 8009372:	462a      	mov	r2, r5
 8009374:	4639      	mov	r1, r7
 8009376:	4630      	mov	r0, r6
 8009378:	47c0      	blx	r8
 800937a:	3001      	adds	r0, #1
 800937c:	d0aa      	beq.n	80092d4 <_printf_i+0x12c>
 800937e:	6823      	ldr	r3, [r4, #0]
 8009380:	079b      	lsls	r3, r3, #30
 8009382:	d413      	bmi.n	80093ac <_printf_i+0x204>
 8009384:	68e0      	ldr	r0, [r4, #12]
 8009386:	9b03      	ldr	r3, [sp, #12]
 8009388:	4298      	cmp	r0, r3
 800938a:	bfb8      	it	lt
 800938c:	4618      	movlt	r0, r3
 800938e:	e7a3      	b.n	80092d8 <_printf_i+0x130>
 8009390:	2301      	movs	r3, #1
 8009392:	464a      	mov	r2, r9
 8009394:	4639      	mov	r1, r7
 8009396:	4630      	mov	r0, r6
 8009398:	47c0      	blx	r8
 800939a:	3001      	adds	r0, #1
 800939c:	d09a      	beq.n	80092d4 <_printf_i+0x12c>
 800939e:	3501      	adds	r5, #1
 80093a0:	68e3      	ldr	r3, [r4, #12]
 80093a2:	9a03      	ldr	r2, [sp, #12]
 80093a4:	1a9b      	subs	r3, r3, r2
 80093a6:	42ab      	cmp	r3, r5
 80093a8:	dcf2      	bgt.n	8009390 <_printf_i+0x1e8>
 80093aa:	e7eb      	b.n	8009384 <_printf_i+0x1dc>
 80093ac:	2500      	movs	r5, #0
 80093ae:	f104 0919 	add.w	r9, r4, #25
 80093b2:	e7f5      	b.n	80093a0 <_printf_i+0x1f8>
 80093b4:	2b00      	cmp	r3, #0
 80093b6:	d1ac      	bne.n	8009312 <_printf_i+0x16a>
 80093b8:	7803      	ldrb	r3, [r0, #0]
 80093ba:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80093be:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80093c2:	e76c      	b.n	800929e <_printf_i+0xf6>
 80093c4:	0800cae6 	.word	0x0800cae6
 80093c8:	0800caf7 	.word	0x0800caf7

080093cc <iprintf>:
 80093cc:	b40f      	push	{r0, r1, r2, r3}
 80093ce:	4b0a      	ldr	r3, [pc, #40]	; (80093f8 <iprintf+0x2c>)
 80093d0:	b513      	push	{r0, r1, r4, lr}
 80093d2:	681c      	ldr	r4, [r3, #0]
 80093d4:	b124      	cbz	r4, 80093e0 <iprintf+0x14>
 80093d6:	69a3      	ldr	r3, [r4, #24]
 80093d8:	b913      	cbnz	r3, 80093e0 <iprintf+0x14>
 80093da:	4620      	mov	r0, r4
 80093dc:	f7ff fa5c 	bl	8008898 <__sinit>
 80093e0:	ab05      	add	r3, sp, #20
 80093e2:	9a04      	ldr	r2, [sp, #16]
 80093e4:	68a1      	ldr	r1, [r4, #8]
 80093e6:	9301      	str	r3, [sp, #4]
 80093e8:	4620      	mov	r0, r4
 80093ea:	f001 fce1 	bl	800adb0 <_vfiprintf_r>
 80093ee:	b002      	add	sp, #8
 80093f0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80093f4:	b004      	add	sp, #16
 80093f6:	4770      	bx	lr
 80093f8:	20000104 	.word	0x20000104

080093fc <putchar>:
 80093fc:	b538      	push	{r3, r4, r5, lr}
 80093fe:	4b08      	ldr	r3, [pc, #32]	; (8009420 <putchar+0x24>)
 8009400:	681c      	ldr	r4, [r3, #0]
 8009402:	4605      	mov	r5, r0
 8009404:	b124      	cbz	r4, 8009410 <putchar+0x14>
 8009406:	69a3      	ldr	r3, [r4, #24]
 8009408:	b913      	cbnz	r3, 8009410 <putchar+0x14>
 800940a:	4620      	mov	r0, r4
 800940c:	f7ff fa44 	bl	8008898 <__sinit>
 8009410:	68a2      	ldr	r2, [r4, #8]
 8009412:	4629      	mov	r1, r5
 8009414:	4620      	mov	r0, r4
 8009416:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800941a:	f001 bddf 	b.w	800afdc <_putc_r>
 800941e:	bf00      	nop
 8009420:	20000104 	.word	0x20000104

08009424 <_puts_r>:
 8009424:	b570      	push	{r4, r5, r6, lr}
 8009426:	460e      	mov	r6, r1
 8009428:	4605      	mov	r5, r0
 800942a:	b118      	cbz	r0, 8009434 <_puts_r+0x10>
 800942c:	6983      	ldr	r3, [r0, #24]
 800942e:	b90b      	cbnz	r3, 8009434 <_puts_r+0x10>
 8009430:	f7ff fa32 	bl	8008898 <__sinit>
 8009434:	69ab      	ldr	r3, [r5, #24]
 8009436:	68ac      	ldr	r4, [r5, #8]
 8009438:	b913      	cbnz	r3, 8009440 <_puts_r+0x1c>
 800943a:	4628      	mov	r0, r5
 800943c:	f7ff fa2c 	bl	8008898 <__sinit>
 8009440:	4b23      	ldr	r3, [pc, #140]	; (80094d0 <_puts_r+0xac>)
 8009442:	429c      	cmp	r4, r3
 8009444:	d117      	bne.n	8009476 <_puts_r+0x52>
 8009446:	686c      	ldr	r4, [r5, #4]
 8009448:	89a3      	ldrh	r3, [r4, #12]
 800944a:	071b      	lsls	r3, r3, #28
 800944c:	d51d      	bpl.n	800948a <_puts_r+0x66>
 800944e:	6923      	ldr	r3, [r4, #16]
 8009450:	b1db      	cbz	r3, 800948a <_puts_r+0x66>
 8009452:	3e01      	subs	r6, #1
 8009454:	68a3      	ldr	r3, [r4, #8]
 8009456:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800945a:	3b01      	subs	r3, #1
 800945c:	60a3      	str	r3, [r4, #8]
 800945e:	b9e9      	cbnz	r1, 800949c <_puts_r+0x78>
 8009460:	2b00      	cmp	r3, #0
 8009462:	da2e      	bge.n	80094c2 <_puts_r+0x9e>
 8009464:	4622      	mov	r2, r4
 8009466:	210a      	movs	r1, #10
 8009468:	4628      	mov	r0, r5
 800946a:	f000 f893 	bl	8009594 <__swbuf_r>
 800946e:	3001      	adds	r0, #1
 8009470:	d011      	beq.n	8009496 <_puts_r+0x72>
 8009472:	200a      	movs	r0, #10
 8009474:	e011      	b.n	800949a <_puts_r+0x76>
 8009476:	4b17      	ldr	r3, [pc, #92]	; (80094d4 <_puts_r+0xb0>)
 8009478:	429c      	cmp	r4, r3
 800947a:	d101      	bne.n	8009480 <_puts_r+0x5c>
 800947c:	68ac      	ldr	r4, [r5, #8]
 800947e:	e7e3      	b.n	8009448 <_puts_r+0x24>
 8009480:	4b15      	ldr	r3, [pc, #84]	; (80094d8 <_puts_r+0xb4>)
 8009482:	429c      	cmp	r4, r3
 8009484:	bf08      	it	eq
 8009486:	68ec      	ldreq	r4, [r5, #12]
 8009488:	e7de      	b.n	8009448 <_puts_r+0x24>
 800948a:	4621      	mov	r1, r4
 800948c:	4628      	mov	r0, r5
 800948e:	f000 f8e5 	bl	800965c <__swsetup_r>
 8009492:	2800      	cmp	r0, #0
 8009494:	d0dd      	beq.n	8009452 <_puts_r+0x2e>
 8009496:	f04f 30ff 	mov.w	r0, #4294967295
 800949a:	bd70      	pop	{r4, r5, r6, pc}
 800949c:	2b00      	cmp	r3, #0
 800949e:	da04      	bge.n	80094aa <_puts_r+0x86>
 80094a0:	69a2      	ldr	r2, [r4, #24]
 80094a2:	429a      	cmp	r2, r3
 80094a4:	dc06      	bgt.n	80094b4 <_puts_r+0x90>
 80094a6:	290a      	cmp	r1, #10
 80094a8:	d004      	beq.n	80094b4 <_puts_r+0x90>
 80094aa:	6823      	ldr	r3, [r4, #0]
 80094ac:	1c5a      	adds	r2, r3, #1
 80094ae:	6022      	str	r2, [r4, #0]
 80094b0:	7019      	strb	r1, [r3, #0]
 80094b2:	e7cf      	b.n	8009454 <_puts_r+0x30>
 80094b4:	4622      	mov	r2, r4
 80094b6:	4628      	mov	r0, r5
 80094b8:	f000 f86c 	bl	8009594 <__swbuf_r>
 80094bc:	3001      	adds	r0, #1
 80094be:	d1c9      	bne.n	8009454 <_puts_r+0x30>
 80094c0:	e7e9      	b.n	8009496 <_puts_r+0x72>
 80094c2:	6823      	ldr	r3, [r4, #0]
 80094c4:	200a      	movs	r0, #10
 80094c6:	1c5a      	adds	r2, r3, #1
 80094c8:	6022      	str	r2, [r4, #0]
 80094ca:	7018      	strb	r0, [r3, #0]
 80094cc:	e7e5      	b.n	800949a <_puts_r+0x76>
 80094ce:	bf00      	nop
 80094d0:	0800ca90 	.word	0x0800ca90
 80094d4:	0800cab0 	.word	0x0800cab0
 80094d8:	0800ca70 	.word	0x0800ca70

080094dc <puts>:
 80094dc:	4b02      	ldr	r3, [pc, #8]	; (80094e8 <puts+0xc>)
 80094de:	4601      	mov	r1, r0
 80094e0:	6818      	ldr	r0, [r3, #0]
 80094e2:	f7ff bf9f 	b.w	8009424 <_puts_r>
 80094e6:	bf00      	nop
 80094e8:	20000104 	.word	0x20000104

080094ec <_sbrk_r>:
 80094ec:	b538      	push	{r3, r4, r5, lr}
 80094ee:	4c06      	ldr	r4, [pc, #24]	; (8009508 <_sbrk_r+0x1c>)
 80094f0:	2300      	movs	r3, #0
 80094f2:	4605      	mov	r5, r0
 80094f4:	4608      	mov	r0, r1
 80094f6:	6023      	str	r3, [r4, #0]
 80094f8:	f7f9 fefa 	bl	80032f0 <_sbrk>
 80094fc:	1c43      	adds	r3, r0, #1
 80094fe:	d102      	bne.n	8009506 <_sbrk_r+0x1a>
 8009500:	6823      	ldr	r3, [r4, #0]
 8009502:	b103      	cbz	r3, 8009506 <_sbrk_r+0x1a>
 8009504:	602b      	str	r3, [r5, #0]
 8009506:	bd38      	pop	{r3, r4, r5, pc}
 8009508:	20000bdc 	.word	0x20000bdc

0800950c <__sread>:
 800950c:	b510      	push	{r4, lr}
 800950e:	460c      	mov	r4, r1
 8009510:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009514:	f001 fd98 	bl	800b048 <_read_r>
 8009518:	2800      	cmp	r0, #0
 800951a:	bfab      	itete	ge
 800951c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800951e:	89a3      	ldrhlt	r3, [r4, #12]
 8009520:	181b      	addge	r3, r3, r0
 8009522:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8009526:	bfac      	ite	ge
 8009528:	6563      	strge	r3, [r4, #84]	; 0x54
 800952a:	81a3      	strhlt	r3, [r4, #12]
 800952c:	bd10      	pop	{r4, pc}

0800952e <__swrite>:
 800952e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009532:	461f      	mov	r7, r3
 8009534:	898b      	ldrh	r3, [r1, #12]
 8009536:	05db      	lsls	r3, r3, #23
 8009538:	4605      	mov	r5, r0
 800953a:	460c      	mov	r4, r1
 800953c:	4616      	mov	r6, r2
 800953e:	d505      	bpl.n	800954c <__swrite+0x1e>
 8009540:	2302      	movs	r3, #2
 8009542:	2200      	movs	r2, #0
 8009544:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009548:	f001 f846 	bl	800a5d8 <_lseek_r>
 800954c:	89a3      	ldrh	r3, [r4, #12]
 800954e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009552:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009556:	81a3      	strh	r3, [r4, #12]
 8009558:	4632      	mov	r2, r6
 800955a:	463b      	mov	r3, r7
 800955c:	4628      	mov	r0, r5
 800955e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009562:	f000 b869 	b.w	8009638 <_write_r>

08009566 <__sseek>:
 8009566:	b510      	push	{r4, lr}
 8009568:	460c      	mov	r4, r1
 800956a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800956e:	f001 f833 	bl	800a5d8 <_lseek_r>
 8009572:	1c43      	adds	r3, r0, #1
 8009574:	89a3      	ldrh	r3, [r4, #12]
 8009576:	bf15      	itete	ne
 8009578:	6560      	strne	r0, [r4, #84]	; 0x54
 800957a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800957e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8009582:	81a3      	strheq	r3, [r4, #12]
 8009584:	bf18      	it	ne
 8009586:	81a3      	strhne	r3, [r4, #12]
 8009588:	bd10      	pop	{r4, pc}

0800958a <__sclose>:
 800958a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800958e:	f000 b8d3 	b.w	8009738 <_close_r>
	...

08009594 <__swbuf_r>:
 8009594:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009596:	460e      	mov	r6, r1
 8009598:	4614      	mov	r4, r2
 800959a:	4605      	mov	r5, r0
 800959c:	b118      	cbz	r0, 80095a6 <__swbuf_r+0x12>
 800959e:	6983      	ldr	r3, [r0, #24]
 80095a0:	b90b      	cbnz	r3, 80095a6 <__swbuf_r+0x12>
 80095a2:	f7ff f979 	bl	8008898 <__sinit>
 80095a6:	4b21      	ldr	r3, [pc, #132]	; (800962c <__swbuf_r+0x98>)
 80095a8:	429c      	cmp	r4, r3
 80095aa:	d12a      	bne.n	8009602 <__swbuf_r+0x6e>
 80095ac:	686c      	ldr	r4, [r5, #4]
 80095ae:	69a3      	ldr	r3, [r4, #24]
 80095b0:	60a3      	str	r3, [r4, #8]
 80095b2:	89a3      	ldrh	r3, [r4, #12]
 80095b4:	071a      	lsls	r2, r3, #28
 80095b6:	d52e      	bpl.n	8009616 <__swbuf_r+0x82>
 80095b8:	6923      	ldr	r3, [r4, #16]
 80095ba:	b363      	cbz	r3, 8009616 <__swbuf_r+0x82>
 80095bc:	6923      	ldr	r3, [r4, #16]
 80095be:	6820      	ldr	r0, [r4, #0]
 80095c0:	1ac0      	subs	r0, r0, r3
 80095c2:	6963      	ldr	r3, [r4, #20]
 80095c4:	b2f6      	uxtb	r6, r6
 80095c6:	4283      	cmp	r3, r0
 80095c8:	4637      	mov	r7, r6
 80095ca:	dc04      	bgt.n	80095d6 <__swbuf_r+0x42>
 80095cc:	4621      	mov	r1, r4
 80095ce:	4628      	mov	r0, r5
 80095d0:	f000 ff8c 	bl	800a4ec <_fflush_r>
 80095d4:	bb28      	cbnz	r0, 8009622 <__swbuf_r+0x8e>
 80095d6:	68a3      	ldr	r3, [r4, #8]
 80095d8:	3b01      	subs	r3, #1
 80095da:	60a3      	str	r3, [r4, #8]
 80095dc:	6823      	ldr	r3, [r4, #0]
 80095de:	1c5a      	adds	r2, r3, #1
 80095e0:	6022      	str	r2, [r4, #0]
 80095e2:	701e      	strb	r6, [r3, #0]
 80095e4:	6963      	ldr	r3, [r4, #20]
 80095e6:	3001      	adds	r0, #1
 80095e8:	4283      	cmp	r3, r0
 80095ea:	d004      	beq.n	80095f6 <__swbuf_r+0x62>
 80095ec:	89a3      	ldrh	r3, [r4, #12]
 80095ee:	07db      	lsls	r3, r3, #31
 80095f0:	d519      	bpl.n	8009626 <__swbuf_r+0x92>
 80095f2:	2e0a      	cmp	r6, #10
 80095f4:	d117      	bne.n	8009626 <__swbuf_r+0x92>
 80095f6:	4621      	mov	r1, r4
 80095f8:	4628      	mov	r0, r5
 80095fa:	f000 ff77 	bl	800a4ec <_fflush_r>
 80095fe:	b190      	cbz	r0, 8009626 <__swbuf_r+0x92>
 8009600:	e00f      	b.n	8009622 <__swbuf_r+0x8e>
 8009602:	4b0b      	ldr	r3, [pc, #44]	; (8009630 <__swbuf_r+0x9c>)
 8009604:	429c      	cmp	r4, r3
 8009606:	d101      	bne.n	800960c <__swbuf_r+0x78>
 8009608:	68ac      	ldr	r4, [r5, #8]
 800960a:	e7d0      	b.n	80095ae <__swbuf_r+0x1a>
 800960c:	4b09      	ldr	r3, [pc, #36]	; (8009634 <__swbuf_r+0xa0>)
 800960e:	429c      	cmp	r4, r3
 8009610:	bf08      	it	eq
 8009612:	68ec      	ldreq	r4, [r5, #12]
 8009614:	e7cb      	b.n	80095ae <__swbuf_r+0x1a>
 8009616:	4621      	mov	r1, r4
 8009618:	4628      	mov	r0, r5
 800961a:	f000 f81f 	bl	800965c <__swsetup_r>
 800961e:	2800      	cmp	r0, #0
 8009620:	d0cc      	beq.n	80095bc <__swbuf_r+0x28>
 8009622:	f04f 37ff 	mov.w	r7, #4294967295
 8009626:	4638      	mov	r0, r7
 8009628:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800962a:	bf00      	nop
 800962c:	0800ca90 	.word	0x0800ca90
 8009630:	0800cab0 	.word	0x0800cab0
 8009634:	0800ca70 	.word	0x0800ca70

08009638 <_write_r>:
 8009638:	b538      	push	{r3, r4, r5, lr}
 800963a:	4c07      	ldr	r4, [pc, #28]	; (8009658 <_write_r+0x20>)
 800963c:	4605      	mov	r5, r0
 800963e:	4608      	mov	r0, r1
 8009640:	4611      	mov	r1, r2
 8009642:	2200      	movs	r2, #0
 8009644:	6022      	str	r2, [r4, #0]
 8009646:	461a      	mov	r2, r3
 8009648:	f7f9 fe02 	bl	8003250 <_write>
 800964c:	1c43      	adds	r3, r0, #1
 800964e:	d102      	bne.n	8009656 <_write_r+0x1e>
 8009650:	6823      	ldr	r3, [r4, #0]
 8009652:	b103      	cbz	r3, 8009656 <_write_r+0x1e>
 8009654:	602b      	str	r3, [r5, #0]
 8009656:	bd38      	pop	{r3, r4, r5, pc}
 8009658:	20000bdc 	.word	0x20000bdc

0800965c <__swsetup_r>:
 800965c:	4b32      	ldr	r3, [pc, #200]	; (8009728 <__swsetup_r+0xcc>)
 800965e:	b570      	push	{r4, r5, r6, lr}
 8009660:	681d      	ldr	r5, [r3, #0]
 8009662:	4606      	mov	r6, r0
 8009664:	460c      	mov	r4, r1
 8009666:	b125      	cbz	r5, 8009672 <__swsetup_r+0x16>
 8009668:	69ab      	ldr	r3, [r5, #24]
 800966a:	b913      	cbnz	r3, 8009672 <__swsetup_r+0x16>
 800966c:	4628      	mov	r0, r5
 800966e:	f7ff f913 	bl	8008898 <__sinit>
 8009672:	4b2e      	ldr	r3, [pc, #184]	; (800972c <__swsetup_r+0xd0>)
 8009674:	429c      	cmp	r4, r3
 8009676:	d10f      	bne.n	8009698 <__swsetup_r+0x3c>
 8009678:	686c      	ldr	r4, [r5, #4]
 800967a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800967e:	b29a      	uxth	r2, r3
 8009680:	0715      	lsls	r5, r2, #28
 8009682:	d42c      	bmi.n	80096de <__swsetup_r+0x82>
 8009684:	06d0      	lsls	r0, r2, #27
 8009686:	d411      	bmi.n	80096ac <__swsetup_r+0x50>
 8009688:	2209      	movs	r2, #9
 800968a:	6032      	str	r2, [r6, #0]
 800968c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009690:	81a3      	strh	r3, [r4, #12]
 8009692:	f04f 30ff 	mov.w	r0, #4294967295
 8009696:	e03e      	b.n	8009716 <__swsetup_r+0xba>
 8009698:	4b25      	ldr	r3, [pc, #148]	; (8009730 <__swsetup_r+0xd4>)
 800969a:	429c      	cmp	r4, r3
 800969c:	d101      	bne.n	80096a2 <__swsetup_r+0x46>
 800969e:	68ac      	ldr	r4, [r5, #8]
 80096a0:	e7eb      	b.n	800967a <__swsetup_r+0x1e>
 80096a2:	4b24      	ldr	r3, [pc, #144]	; (8009734 <__swsetup_r+0xd8>)
 80096a4:	429c      	cmp	r4, r3
 80096a6:	bf08      	it	eq
 80096a8:	68ec      	ldreq	r4, [r5, #12]
 80096aa:	e7e6      	b.n	800967a <__swsetup_r+0x1e>
 80096ac:	0751      	lsls	r1, r2, #29
 80096ae:	d512      	bpl.n	80096d6 <__swsetup_r+0x7a>
 80096b0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80096b2:	b141      	cbz	r1, 80096c6 <__swsetup_r+0x6a>
 80096b4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80096b8:	4299      	cmp	r1, r3
 80096ba:	d002      	beq.n	80096c2 <__swsetup_r+0x66>
 80096bc:	4630      	mov	r0, r6
 80096be:	f001 faff 	bl	800acc0 <_free_r>
 80096c2:	2300      	movs	r3, #0
 80096c4:	6363      	str	r3, [r4, #52]	; 0x34
 80096c6:	89a3      	ldrh	r3, [r4, #12]
 80096c8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80096cc:	81a3      	strh	r3, [r4, #12]
 80096ce:	2300      	movs	r3, #0
 80096d0:	6063      	str	r3, [r4, #4]
 80096d2:	6923      	ldr	r3, [r4, #16]
 80096d4:	6023      	str	r3, [r4, #0]
 80096d6:	89a3      	ldrh	r3, [r4, #12]
 80096d8:	f043 0308 	orr.w	r3, r3, #8
 80096dc:	81a3      	strh	r3, [r4, #12]
 80096de:	6923      	ldr	r3, [r4, #16]
 80096e0:	b94b      	cbnz	r3, 80096f6 <__swsetup_r+0x9a>
 80096e2:	89a3      	ldrh	r3, [r4, #12]
 80096e4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80096e8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80096ec:	d003      	beq.n	80096f6 <__swsetup_r+0x9a>
 80096ee:	4621      	mov	r1, r4
 80096f0:	4630      	mov	r0, r6
 80096f2:	f000 ffa7 	bl	800a644 <__smakebuf_r>
 80096f6:	89a2      	ldrh	r2, [r4, #12]
 80096f8:	f012 0301 	ands.w	r3, r2, #1
 80096fc:	d00c      	beq.n	8009718 <__swsetup_r+0xbc>
 80096fe:	2300      	movs	r3, #0
 8009700:	60a3      	str	r3, [r4, #8]
 8009702:	6963      	ldr	r3, [r4, #20]
 8009704:	425b      	negs	r3, r3
 8009706:	61a3      	str	r3, [r4, #24]
 8009708:	6923      	ldr	r3, [r4, #16]
 800970a:	b953      	cbnz	r3, 8009722 <__swsetup_r+0xc6>
 800970c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009710:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8009714:	d1ba      	bne.n	800968c <__swsetup_r+0x30>
 8009716:	bd70      	pop	{r4, r5, r6, pc}
 8009718:	0792      	lsls	r2, r2, #30
 800971a:	bf58      	it	pl
 800971c:	6963      	ldrpl	r3, [r4, #20]
 800971e:	60a3      	str	r3, [r4, #8]
 8009720:	e7f2      	b.n	8009708 <__swsetup_r+0xac>
 8009722:	2000      	movs	r0, #0
 8009724:	e7f7      	b.n	8009716 <__swsetup_r+0xba>
 8009726:	bf00      	nop
 8009728:	20000104 	.word	0x20000104
 800972c:	0800ca90 	.word	0x0800ca90
 8009730:	0800cab0 	.word	0x0800cab0
 8009734:	0800ca70 	.word	0x0800ca70

08009738 <_close_r>:
 8009738:	b538      	push	{r3, r4, r5, lr}
 800973a:	4c06      	ldr	r4, [pc, #24]	; (8009754 <_close_r+0x1c>)
 800973c:	2300      	movs	r3, #0
 800973e:	4605      	mov	r5, r0
 8009740:	4608      	mov	r0, r1
 8009742:	6023      	str	r3, [r4, #0]
 8009744:	f7f9 fda0 	bl	8003288 <_close>
 8009748:	1c43      	adds	r3, r0, #1
 800974a:	d102      	bne.n	8009752 <_close_r+0x1a>
 800974c:	6823      	ldr	r3, [r4, #0]
 800974e:	b103      	cbz	r3, 8009752 <_close_r+0x1a>
 8009750:	602b      	str	r3, [r5, #0]
 8009752:	bd38      	pop	{r3, r4, r5, pc}
 8009754:	20000bdc 	.word	0x20000bdc

08009758 <quorem>:
 8009758:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800975c:	6903      	ldr	r3, [r0, #16]
 800975e:	690c      	ldr	r4, [r1, #16]
 8009760:	42a3      	cmp	r3, r4
 8009762:	4680      	mov	r8, r0
 8009764:	f2c0 8082 	blt.w	800986c <quorem+0x114>
 8009768:	3c01      	subs	r4, #1
 800976a:	f101 0714 	add.w	r7, r1, #20
 800976e:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 8009772:	f100 0614 	add.w	r6, r0, #20
 8009776:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 800977a:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 800977e:	eb06 030c 	add.w	r3, r6, ip
 8009782:	3501      	adds	r5, #1
 8009784:	eb07 090c 	add.w	r9, r7, ip
 8009788:	9301      	str	r3, [sp, #4]
 800978a:	fbb0 f5f5 	udiv	r5, r0, r5
 800978e:	b395      	cbz	r5, 80097f6 <quorem+0x9e>
 8009790:	f04f 0a00 	mov.w	sl, #0
 8009794:	4638      	mov	r0, r7
 8009796:	46b6      	mov	lr, r6
 8009798:	46d3      	mov	fp, sl
 800979a:	f850 2b04 	ldr.w	r2, [r0], #4
 800979e:	b293      	uxth	r3, r2
 80097a0:	fb05 a303 	mla	r3, r5, r3, sl
 80097a4:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80097a8:	b29b      	uxth	r3, r3
 80097aa:	ebab 0303 	sub.w	r3, fp, r3
 80097ae:	0c12      	lsrs	r2, r2, #16
 80097b0:	f8de b000 	ldr.w	fp, [lr]
 80097b4:	fb05 a202 	mla	r2, r5, r2, sl
 80097b8:	fa13 f38b 	uxtah	r3, r3, fp
 80097bc:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 80097c0:	fa1f fb82 	uxth.w	fp, r2
 80097c4:	f8de 2000 	ldr.w	r2, [lr]
 80097c8:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 80097cc:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80097d0:	b29b      	uxth	r3, r3
 80097d2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80097d6:	4581      	cmp	r9, r0
 80097d8:	ea4f 4b22 	mov.w	fp, r2, asr #16
 80097dc:	f84e 3b04 	str.w	r3, [lr], #4
 80097e0:	d2db      	bcs.n	800979a <quorem+0x42>
 80097e2:	f856 300c 	ldr.w	r3, [r6, ip]
 80097e6:	b933      	cbnz	r3, 80097f6 <quorem+0x9e>
 80097e8:	9b01      	ldr	r3, [sp, #4]
 80097ea:	3b04      	subs	r3, #4
 80097ec:	429e      	cmp	r6, r3
 80097ee:	461a      	mov	r2, r3
 80097f0:	d330      	bcc.n	8009854 <quorem+0xfc>
 80097f2:	f8c8 4010 	str.w	r4, [r8, #16]
 80097f6:	4640      	mov	r0, r8
 80097f8:	f001 f98e 	bl	800ab18 <__mcmp>
 80097fc:	2800      	cmp	r0, #0
 80097fe:	db25      	blt.n	800984c <quorem+0xf4>
 8009800:	3501      	adds	r5, #1
 8009802:	4630      	mov	r0, r6
 8009804:	f04f 0c00 	mov.w	ip, #0
 8009808:	f857 2b04 	ldr.w	r2, [r7], #4
 800980c:	f8d0 e000 	ldr.w	lr, [r0]
 8009810:	b293      	uxth	r3, r2
 8009812:	ebac 0303 	sub.w	r3, ip, r3
 8009816:	0c12      	lsrs	r2, r2, #16
 8009818:	fa13 f38e 	uxtah	r3, r3, lr
 800981c:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8009820:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8009824:	b29b      	uxth	r3, r3
 8009826:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800982a:	45b9      	cmp	r9, r7
 800982c:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8009830:	f840 3b04 	str.w	r3, [r0], #4
 8009834:	d2e8      	bcs.n	8009808 <quorem+0xb0>
 8009836:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 800983a:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 800983e:	b92a      	cbnz	r2, 800984c <quorem+0xf4>
 8009840:	3b04      	subs	r3, #4
 8009842:	429e      	cmp	r6, r3
 8009844:	461a      	mov	r2, r3
 8009846:	d30b      	bcc.n	8009860 <quorem+0x108>
 8009848:	f8c8 4010 	str.w	r4, [r8, #16]
 800984c:	4628      	mov	r0, r5
 800984e:	b003      	add	sp, #12
 8009850:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009854:	6812      	ldr	r2, [r2, #0]
 8009856:	3b04      	subs	r3, #4
 8009858:	2a00      	cmp	r2, #0
 800985a:	d1ca      	bne.n	80097f2 <quorem+0x9a>
 800985c:	3c01      	subs	r4, #1
 800985e:	e7c5      	b.n	80097ec <quorem+0x94>
 8009860:	6812      	ldr	r2, [r2, #0]
 8009862:	3b04      	subs	r3, #4
 8009864:	2a00      	cmp	r2, #0
 8009866:	d1ef      	bne.n	8009848 <quorem+0xf0>
 8009868:	3c01      	subs	r4, #1
 800986a:	e7ea      	b.n	8009842 <quorem+0xea>
 800986c:	2000      	movs	r0, #0
 800986e:	e7ee      	b.n	800984e <quorem+0xf6>

08009870 <_dtoa_r>:
 8009870:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009874:	ec57 6b10 	vmov	r6, r7, d0
 8009878:	b097      	sub	sp, #92	; 0x5c
 800987a:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800987c:	9106      	str	r1, [sp, #24]
 800987e:	4604      	mov	r4, r0
 8009880:	920b      	str	r2, [sp, #44]	; 0x2c
 8009882:	9312      	str	r3, [sp, #72]	; 0x48
 8009884:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8009888:	e9cd 6700 	strd	r6, r7, [sp]
 800988c:	b93d      	cbnz	r5, 800989e <_dtoa_r+0x2e>
 800988e:	2010      	movs	r0, #16
 8009890:	f000 ff18 	bl	800a6c4 <malloc>
 8009894:	6260      	str	r0, [r4, #36]	; 0x24
 8009896:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800989a:	6005      	str	r5, [r0, #0]
 800989c:	60c5      	str	r5, [r0, #12]
 800989e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80098a0:	6819      	ldr	r1, [r3, #0]
 80098a2:	b151      	cbz	r1, 80098ba <_dtoa_r+0x4a>
 80098a4:	685a      	ldr	r2, [r3, #4]
 80098a6:	604a      	str	r2, [r1, #4]
 80098a8:	2301      	movs	r3, #1
 80098aa:	4093      	lsls	r3, r2
 80098ac:	608b      	str	r3, [r1, #8]
 80098ae:	4620      	mov	r0, r4
 80098b0:	f000 ff51 	bl	800a756 <_Bfree>
 80098b4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80098b6:	2200      	movs	r2, #0
 80098b8:	601a      	str	r2, [r3, #0]
 80098ba:	1e3b      	subs	r3, r7, #0
 80098bc:	bfbb      	ittet	lt
 80098be:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 80098c2:	9301      	strlt	r3, [sp, #4]
 80098c4:	2300      	movge	r3, #0
 80098c6:	2201      	movlt	r2, #1
 80098c8:	bfac      	ite	ge
 80098ca:	f8c8 3000 	strge.w	r3, [r8]
 80098ce:	f8c8 2000 	strlt.w	r2, [r8]
 80098d2:	4baf      	ldr	r3, [pc, #700]	; (8009b90 <_dtoa_r+0x320>)
 80098d4:	f8dd 8004 	ldr.w	r8, [sp, #4]
 80098d8:	ea33 0308 	bics.w	r3, r3, r8
 80098dc:	d114      	bne.n	8009908 <_dtoa_r+0x98>
 80098de:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80098e0:	f242 730f 	movw	r3, #9999	; 0x270f
 80098e4:	6013      	str	r3, [r2, #0]
 80098e6:	9b00      	ldr	r3, [sp, #0]
 80098e8:	b923      	cbnz	r3, 80098f4 <_dtoa_r+0x84>
 80098ea:	f3c8 0013 	ubfx	r0, r8, #0, #20
 80098ee:	2800      	cmp	r0, #0
 80098f0:	f000 8542 	beq.w	800a378 <_dtoa_r+0xb08>
 80098f4:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80098f6:	f8df b2ac 	ldr.w	fp, [pc, #684]	; 8009ba4 <_dtoa_r+0x334>
 80098fa:	2b00      	cmp	r3, #0
 80098fc:	f000 8544 	beq.w	800a388 <_dtoa_r+0xb18>
 8009900:	f10b 0303 	add.w	r3, fp, #3
 8009904:	f000 bd3e 	b.w	800a384 <_dtoa_r+0xb14>
 8009908:	e9dd 6700 	ldrd	r6, r7, [sp]
 800990c:	2200      	movs	r2, #0
 800990e:	2300      	movs	r3, #0
 8009910:	4630      	mov	r0, r6
 8009912:	4639      	mov	r1, r7
 8009914:	f7f7 f8d8 	bl	8000ac8 <__aeabi_dcmpeq>
 8009918:	4681      	mov	r9, r0
 800991a:	b168      	cbz	r0, 8009938 <_dtoa_r+0xc8>
 800991c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800991e:	2301      	movs	r3, #1
 8009920:	6013      	str	r3, [r2, #0]
 8009922:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009924:	2b00      	cmp	r3, #0
 8009926:	f000 8524 	beq.w	800a372 <_dtoa_r+0xb02>
 800992a:	4b9a      	ldr	r3, [pc, #616]	; (8009b94 <_dtoa_r+0x324>)
 800992c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800992e:	f103 3bff 	add.w	fp, r3, #4294967295
 8009932:	6013      	str	r3, [r2, #0]
 8009934:	f000 bd28 	b.w	800a388 <_dtoa_r+0xb18>
 8009938:	aa14      	add	r2, sp, #80	; 0x50
 800993a:	a915      	add	r1, sp, #84	; 0x54
 800993c:	ec47 6b10 	vmov	d0, r6, r7
 8009940:	4620      	mov	r0, r4
 8009942:	f001 f960 	bl	800ac06 <__d2b>
 8009946:	f3c8 550a 	ubfx	r5, r8, #20, #11
 800994a:	9004      	str	r0, [sp, #16]
 800994c:	2d00      	cmp	r5, #0
 800994e:	d07c      	beq.n	8009a4a <_dtoa_r+0x1da>
 8009950:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8009954:	f043 5b7f 	orr.w	fp, r3, #1069547520	; 0x3fc00000
 8009958:	46b2      	mov	sl, r6
 800995a:	f44b 1b40 	orr.w	fp, fp, #3145728	; 0x300000
 800995e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8009962:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
 8009966:	2200      	movs	r2, #0
 8009968:	4b8b      	ldr	r3, [pc, #556]	; (8009b98 <_dtoa_r+0x328>)
 800996a:	4650      	mov	r0, sl
 800996c:	4659      	mov	r1, fp
 800996e:	f7f6 fc8b 	bl	8000288 <__aeabi_dsub>
 8009972:	a381      	add	r3, pc, #516	; (adr r3, 8009b78 <_dtoa_r+0x308>)
 8009974:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009978:	f7f6 fe3e 	bl	80005f8 <__aeabi_dmul>
 800997c:	a380      	add	r3, pc, #512	; (adr r3, 8009b80 <_dtoa_r+0x310>)
 800997e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009982:	f7f6 fc83 	bl	800028c <__adddf3>
 8009986:	4606      	mov	r6, r0
 8009988:	4628      	mov	r0, r5
 800998a:	460f      	mov	r7, r1
 800998c:	f7f6 fdca 	bl	8000524 <__aeabi_i2d>
 8009990:	a37d      	add	r3, pc, #500	; (adr r3, 8009b88 <_dtoa_r+0x318>)
 8009992:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009996:	f7f6 fe2f 	bl	80005f8 <__aeabi_dmul>
 800999a:	4602      	mov	r2, r0
 800999c:	460b      	mov	r3, r1
 800999e:	4630      	mov	r0, r6
 80099a0:	4639      	mov	r1, r7
 80099a2:	f7f6 fc73 	bl	800028c <__adddf3>
 80099a6:	4606      	mov	r6, r0
 80099a8:	460f      	mov	r7, r1
 80099aa:	f7f7 f8d5 	bl	8000b58 <__aeabi_d2iz>
 80099ae:	2200      	movs	r2, #0
 80099b0:	4682      	mov	sl, r0
 80099b2:	2300      	movs	r3, #0
 80099b4:	4630      	mov	r0, r6
 80099b6:	4639      	mov	r1, r7
 80099b8:	f7f7 f890 	bl	8000adc <__aeabi_dcmplt>
 80099bc:	b148      	cbz	r0, 80099d2 <_dtoa_r+0x162>
 80099be:	4650      	mov	r0, sl
 80099c0:	f7f6 fdb0 	bl	8000524 <__aeabi_i2d>
 80099c4:	4632      	mov	r2, r6
 80099c6:	463b      	mov	r3, r7
 80099c8:	f7f7 f87e 	bl	8000ac8 <__aeabi_dcmpeq>
 80099cc:	b908      	cbnz	r0, 80099d2 <_dtoa_r+0x162>
 80099ce:	f10a 3aff 	add.w	sl, sl, #4294967295
 80099d2:	f1ba 0f16 	cmp.w	sl, #22
 80099d6:	d859      	bhi.n	8009a8c <_dtoa_r+0x21c>
 80099d8:	4970      	ldr	r1, [pc, #448]	; (8009b9c <_dtoa_r+0x32c>)
 80099da:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 80099de:	e9dd 2300 	ldrd	r2, r3, [sp]
 80099e2:	e9d1 0100 	ldrd	r0, r1, [r1]
 80099e6:	f7f7 f897 	bl	8000b18 <__aeabi_dcmpgt>
 80099ea:	2800      	cmp	r0, #0
 80099ec:	d050      	beq.n	8009a90 <_dtoa_r+0x220>
 80099ee:	f10a 3aff 	add.w	sl, sl, #4294967295
 80099f2:	2300      	movs	r3, #0
 80099f4:	930f      	str	r3, [sp, #60]	; 0x3c
 80099f6:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80099f8:	1b5d      	subs	r5, r3, r5
 80099fa:	f1b5 0801 	subs.w	r8, r5, #1
 80099fe:	bf49      	itett	mi
 8009a00:	f1c5 0301 	rsbmi	r3, r5, #1
 8009a04:	2300      	movpl	r3, #0
 8009a06:	9305      	strmi	r3, [sp, #20]
 8009a08:	f04f 0800 	movmi.w	r8, #0
 8009a0c:	bf58      	it	pl
 8009a0e:	9305      	strpl	r3, [sp, #20]
 8009a10:	f1ba 0f00 	cmp.w	sl, #0
 8009a14:	db3e      	blt.n	8009a94 <_dtoa_r+0x224>
 8009a16:	2300      	movs	r3, #0
 8009a18:	44d0      	add	r8, sl
 8009a1a:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 8009a1e:	9307      	str	r3, [sp, #28]
 8009a20:	9b06      	ldr	r3, [sp, #24]
 8009a22:	2b09      	cmp	r3, #9
 8009a24:	f200 8090 	bhi.w	8009b48 <_dtoa_r+0x2d8>
 8009a28:	2b05      	cmp	r3, #5
 8009a2a:	bfc4      	itt	gt
 8009a2c:	3b04      	subgt	r3, #4
 8009a2e:	9306      	strgt	r3, [sp, #24]
 8009a30:	9b06      	ldr	r3, [sp, #24]
 8009a32:	f1a3 0302 	sub.w	r3, r3, #2
 8009a36:	bfcc      	ite	gt
 8009a38:	2500      	movgt	r5, #0
 8009a3a:	2501      	movle	r5, #1
 8009a3c:	2b03      	cmp	r3, #3
 8009a3e:	f200 808f 	bhi.w	8009b60 <_dtoa_r+0x2f0>
 8009a42:	e8df f003 	tbb	[pc, r3]
 8009a46:	7f7d      	.short	0x7f7d
 8009a48:	7131      	.short	0x7131
 8009a4a:	e9dd 5314 	ldrd	r5, r3, [sp, #80]	; 0x50
 8009a4e:	441d      	add	r5, r3
 8009a50:	f205 4032 	addw	r0, r5, #1074	; 0x432
 8009a54:	2820      	cmp	r0, #32
 8009a56:	dd13      	ble.n	8009a80 <_dtoa_r+0x210>
 8009a58:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 8009a5c:	9b00      	ldr	r3, [sp, #0]
 8009a5e:	fa08 f800 	lsl.w	r8, r8, r0
 8009a62:	f205 4012 	addw	r0, r5, #1042	; 0x412
 8009a66:	fa23 f000 	lsr.w	r0, r3, r0
 8009a6a:	ea48 0000 	orr.w	r0, r8, r0
 8009a6e:	f7f6 fd49 	bl	8000504 <__aeabi_ui2d>
 8009a72:	2301      	movs	r3, #1
 8009a74:	4682      	mov	sl, r0
 8009a76:	f1a1 7bf8 	sub.w	fp, r1, #32505856	; 0x1f00000
 8009a7a:	3d01      	subs	r5, #1
 8009a7c:	9313      	str	r3, [sp, #76]	; 0x4c
 8009a7e:	e772      	b.n	8009966 <_dtoa_r+0xf6>
 8009a80:	9b00      	ldr	r3, [sp, #0]
 8009a82:	f1c0 0020 	rsb	r0, r0, #32
 8009a86:	fa03 f000 	lsl.w	r0, r3, r0
 8009a8a:	e7f0      	b.n	8009a6e <_dtoa_r+0x1fe>
 8009a8c:	2301      	movs	r3, #1
 8009a8e:	e7b1      	b.n	80099f4 <_dtoa_r+0x184>
 8009a90:	900f      	str	r0, [sp, #60]	; 0x3c
 8009a92:	e7b0      	b.n	80099f6 <_dtoa_r+0x186>
 8009a94:	9b05      	ldr	r3, [sp, #20]
 8009a96:	eba3 030a 	sub.w	r3, r3, sl
 8009a9a:	9305      	str	r3, [sp, #20]
 8009a9c:	f1ca 0300 	rsb	r3, sl, #0
 8009aa0:	9307      	str	r3, [sp, #28]
 8009aa2:	2300      	movs	r3, #0
 8009aa4:	930e      	str	r3, [sp, #56]	; 0x38
 8009aa6:	e7bb      	b.n	8009a20 <_dtoa_r+0x1b0>
 8009aa8:	2301      	movs	r3, #1
 8009aaa:	930a      	str	r3, [sp, #40]	; 0x28
 8009aac:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009aae:	2b00      	cmp	r3, #0
 8009ab0:	dd59      	ble.n	8009b66 <_dtoa_r+0x2f6>
 8009ab2:	9302      	str	r3, [sp, #8]
 8009ab4:	4699      	mov	r9, r3
 8009ab6:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8009ab8:	2200      	movs	r2, #0
 8009aba:	6072      	str	r2, [r6, #4]
 8009abc:	2204      	movs	r2, #4
 8009abe:	f102 0014 	add.w	r0, r2, #20
 8009ac2:	4298      	cmp	r0, r3
 8009ac4:	6871      	ldr	r1, [r6, #4]
 8009ac6:	d953      	bls.n	8009b70 <_dtoa_r+0x300>
 8009ac8:	4620      	mov	r0, r4
 8009aca:	f000 fe10 	bl	800a6ee <_Balloc>
 8009ace:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009ad0:	6030      	str	r0, [r6, #0]
 8009ad2:	f1b9 0f0e 	cmp.w	r9, #14
 8009ad6:	f8d3 b000 	ldr.w	fp, [r3]
 8009ada:	f200 80e6 	bhi.w	8009caa <_dtoa_r+0x43a>
 8009ade:	2d00      	cmp	r5, #0
 8009ae0:	f000 80e3 	beq.w	8009caa <_dtoa_r+0x43a>
 8009ae4:	ed9d 7b00 	vldr	d7, [sp]
 8009ae8:	f1ba 0f00 	cmp.w	sl, #0
 8009aec:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 8009af0:	dd74      	ble.n	8009bdc <_dtoa_r+0x36c>
 8009af2:	4a2a      	ldr	r2, [pc, #168]	; (8009b9c <_dtoa_r+0x32c>)
 8009af4:	f00a 030f 	and.w	r3, sl, #15
 8009af8:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8009afc:	ed93 7b00 	vldr	d7, [r3]
 8009b00:	ea4f 162a 	mov.w	r6, sl, asr #4
 8009b04:	06f0      	lsls	r0, r6, #27
 8009b06:	ed8d 7b08 	vstr	d7, [sp, #32]
 8009b0a:	d565      	bpl.n	8009bd8 <_dtoa_r+0x368>
 8009b0c:	4b24      	ldr	r3, [pc, #144]	; (8009ba0 <_dtoa_r+0x330>)
 8009b0e:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8009b12:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8009b16:	f7f6 fe99 	bl	800084c <__aeabi_ddiv>
 8009b1a:	e9cd 0100 	strd	r0, r1, [sp]
 8009b1e:	f006 060f 	and.w	r6, r6, #15
 8009b22:	2503      	movs	r5, #3
 8009b24:	4f1e      	ldr	r7, [pc, #120]	; (8009ba0 <_dtoa_r+0x330>)
 8009b26:	e04c      	b.n	8009bc2 <_dtoa_r+0x352>
 8009b28:	2301      	movs	r3, #1
 8009b2a:	930a      	str	r3, [sp, #40]	; 0x28
 8009b2c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009b2e:	4453      	add	r3, sl
 8009b30:	f103 0901 	add.w	r9, r3, #1
 8009b34:	9302      	str	r3, [sp, #8]
 8009b36:	464b      	mov	r3, r9
 8009b38:	2b01      	cmp	r3, #1
 8009b3a:	bfb8      	it	lt
 8009b3c:	2301      	movlt	r3, #1
 8009b3e:	e7ba      	b.n	8009ab6 <_dtoa_r+0x246>
 8009b40:	2300      	movs	r3, #0
 8009b42:	e7b2      	b.n	8009aaa <_dtoa_r+0x23a>
 8009b44:	2300      	movs	r3, #0
 8009b46:	e7f0      	b.n	8009b2a <_dtoa_r+0x2ba>
 8009b48:	2501      	movs	r5, #1
 8009b4a:	2300      	movs	r3, #0
 8009b4c:	9306      	str	r3, [sp, #24]
 8009b4e:	950a      	str	r5, [sp, #40]	; 0x28
 8009b50:	f04f 33ff 	mov.w	r3, #4294967295
 8009b54:	9302      	str	r3, [sp, #8]
 8009b56:	4699      	mov	r9, r3
 8009b58:	2200      	movs	r2, #0
 8009b5a:	2312      	movs	r3, #18
 8009b5c:	920b      	str	r2, [sp, #44]	; 0x2c
 8009b5e:	e7aa      	b.n	8009ab6 <_dtoa_r+0x246>
 8009b60:	2301      	movs	r3, #1
 8009b62:	930a      	str	r3, [sp, #40]	; 0x28
 8009b64:	e7f4      	b.n	8009b50 <_dtoa_r+0x2e0>
 8009b66:	2301      	movs	r3, #1
 8009b68:	9302      	str	r3, [sp, #8]
 8009b6a:	4699      	mov	r9, r3
 8009b6c:	461a      	mov	r2, r3
 8009b6e:	e7f5      	b.n	8009b5c <_dtoa_r+0x2ec>
 8009b70:	3101      	adds	r1, #1
 8009b72:	6071      	str	r1, [r6, #4]
 8009b74:	0052      	lsls	r2, r2, #1
 8009b76:	e7a2      	b.n	8009abe <_dtoa_r+0x24e>
 8009b78:	636f4361 	.word	0x636f4361
 8009b7c:	3fd287a7 	.word	0x3fd287a7
 8009b80:	8b60c8b3 	.word	0x8b60c8b3
 8009b84:	3fc68a28 	.word	0x3fc68a28
 8009b88:	509f79fb 	.word	0x509f79fb
 8009b8c:	3fd34413 	.word	0x3fd34413
 8009b90:	7ff00000 	.word	0x7ff00000
 8009b94:	0800cae5 	.word	0x0800cae5
 8009b98:	3ff80000 	.word	0x3ff80000
 8009b9c:	0800cb40 	.word	0x0800cb40
 8009ba0:	0800cb18 	.word	0x0800cb18
 8009ba4:	0800cb11 	.word	0x0800cb11
 8009ba8:	07f1      	lsls	r1, r6, #31
 8009baa:	d508      	bpl.n	8009bbe <_dtoa_r+0x34e>
 8009bac:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8009bb0:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009bb4:	f7f6 fd20 	bl	80005f8 <__aeabi_dmul>
 8009bb8:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8009bbc:	3501      	adds	r5, #1
 8009bbe:	1076      	asrs	r6, r6, #1
 8009bc0:	3708      	adds	r7, #8
 8009bc2:	2e00      	cmp	r6, #0
 8009bc4:	d1f0      	bne.n	8009ba8 <_dtoa_r+0x338>
 8009bc6:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8009bca:	e9dd 0100 	ldrd	r0, r1, [sp]
 8009bce:	f7f6 fe3d 	bl	800084c <__aeabi_ddiv>
 8009bd2:	e9cd 0100 	strd	r0, r1, [sp]
 8009bd6:	e01a      	b.n	8009c0e <_dtoa_r+0x39e>
 8009bd8:	2502      	movs	r5, #2
 8009bda:	e7a3      	b.n	8009b24 <_dtoa_r+0x2b4>
 8009bdc:	f000 80a0 	beq.w	8009d20 <_dtoa_r+0x4b0>
 8009be0:	f1ca 0600 	rsb	r6, sl, #0
 8009be4:	4b9f      	ldr	r3, [pc, #636]	; (8009e64 <_dtoa_r+0x5f4>)
 8009be6:	4fa0      	ldr	r7, [pc, #640]	; (8009e68 <_dtoa_r+0x5f8>)
 8009be8:	f006 020f 	and.w	r2, r6, #15
 8009bec:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009bf0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009bf4:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8009bf8:	f7f6 fcfe 	bl	80005f8 <__aeabi_dmul>
 8009bfc:	e9cd 0100 	strd	r0, r1, [sp]
 8009c00:	1136      	asrs	r6, r6, #4
 8009c02:	2300      	movs	r3, #0
 8009c04:	2502      	movs	r5, #2
 8009c06:	2e00      	cmp	r6, #0
 8009c08:	d17f      	bne.n	8009d0a <_dtoa_r+0x49a>
 8009c0a:	2b00      	cmp	r3, #0
 8009c0c:	d1e1      	bne.n	8009bd2 <_dtoa_r+0x362>
 8009c0e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009c10:	2b00      	cmp	r3, #0
 8009c12:	f000 8087 	beq.w	8009d24 <_dtoa_r+0x4b4>
 8009c16:	e9dd 6700 	ldrd	r6, r7, [sp]
 8009c1a:	2200      	movs	r2, #0
 8009c1c:	4b93      	ldr	r3, [pc, #588]	; (8009e6c <_dtoa_r+0x5fc>)
 8009c1e:	4630      	mov	r0, r6
 8009c20:	4639      	mov	r1, r7
 8009c22:	f7f6 ff5b 	bl	8000adc <__aeabi_dcmplt>
 8009c26:	2800      	cmp	r0, #0
 8009c28:	d07c      	beq.n	8009d24 <_dtoa_r+0x4b4>
 8009c2a:	f1b9 0f00 	cmp.w	r9, #0
 8009c2e:	d079      	beq.n	8009d24 <_dtoa_r+0x4b4>
 8009c30:	9b02      	ldr	r3, [sp, #8]
 8009c32:	2b00      	cmp	r3, #0
 8009c34:	dd35      	ble.n	8009ca2 <_dtoa_r+0x432>
 8009c36:	f10a 33ff 	add.w	r3, sl, #4294967295
 8009c3a:	9308      	str	r3, [sp, #32]
 8009c3c:	4639      	mov	r1, r7
 8009c3e:	2200      	movs	r2, #0
 8009c40:	4b8b      	ldr	r3, [pc, #556]	; (8009e70 <_dtoa_r+0x600>)
 8009c42:	4630      	mov	r0, r6
 8009c44:	f7f6 fcd8 	bl	80005f8 <__aeabi_dmul>
 8009c48:	e9cd 0100 	strd	r0, r1, [sp]
 8009c4c:	9f02      	ldr	r7, [sp, #8]
 8009c4e:	3501      	adds	r5, #1
 8009c50:	4628      	mov	r0, r5
 8009c52:	f7f6 fc67 	bl	8000524 <__aeabi_i2d>
 8009c56:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009c5a:	f7f6 fccd 	bl	80005f8 <__aeabi_dmul>
 8009c5e:	2200      	movs	r2, #0
 8009c60:	4b84      	ldr	r3, [pc, #528]	; (8009e74 <_dtoa_r+0x604>)
 8009c62:	f7f6 fb13 	bl	800028c <__adddf3>
 8009c66:	4605      	mov	r5, r0
 8009c68:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 8009c6c:	2f00      	cmp	r7, #0
 8009c6e:	d15d      	bne.n	8009d2c <_dtoa_r+0x4bc>
 8009c70:	2200      	movs	r2, #0
 8009c72:	4b81      	ldr	r3, [pc, #516]	; (8009e78 <_dtoa_r+0x608>)
 8009c74:	e9dd 0100 	ldrd	r0, r1, [sp]
 8009c78:	f7f6 fb06 	bl	8000288 <__aeabi_dsub>
 8009c7c:	462a      	mov	r2, r5
 8009c7e:	4633      	mov	r3, r6
 8009c80:	e9cd 0100 	strd	r0, r1, [sp]
 8009c84:	f7f6 ff48 	bl	8000b18 <__aeabi_dcmpgt>
 8009c88:	2800      	cmp	r0, #0
 8009c8a:	f040 8288 	bne.w	800a19e <_dtoa_r+0x92e>
 8009c8e:	462a      	mov	r2, r5
 8009c90:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 8009c94:	e9dd 0100 	ldrd	r0, r1, [sp]
 8009c98:	f7f6 ff20 	bl	8000adc <__aeabi_dcmplt>
 8009c9c:	2800      	cmp	r0, #0
 8009c9e:	f040 827c 	bne.w	800a19a <_dtoa_r+0x92a>
 8009ca2:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8009ca6:	e9cd 2300 	strd	r2, r3, [sp]
 8009caa:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8009cac:	2b00      	cmp	r3, #0
 8009cae:	f2c0 8150 	blt.w	8009f52 <_dtoa_r+0x6e2>
 8009cb2:	f1ba 0f0e 	cmp.w	sl, #14
 8009cb6:	f300 814c 	bgt.w	8009f52 <_dtoa_r+0x6e2>
 8009cba:	4b6a      	ldr	r3, [pc, #424]	; (8009e64 <_dtoa_r+0x5f4>)
 8009cbc:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8009cc0:	ed93 7b00 	vldr	d7, [r3]
 8009cc4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009cc6:	2b00      	cmp	r3, #0
 8009cc8:	ed8d 7b02 	vstr	d7, [sp, #8]
 8009ccc:	f280 80d8 	bge.w	8009e80 <_dtoa_r+0x610>
 8009cd0:	f1b9 0f00 	cmp.w	r9, #0
 8009cd4:	f300 80d4 	bgt.w	8009e80 <_dtoa_r+0x610>
 8009cd8:	f040 825e 	bne.w	800a198 <_dtoa_r+0x928>
 8009cdc:	2200      	movs	r2, #0
 8009cde:	4b66      	ldr	r3, [pc, #408]	; (8009e78 <_dtoa_r+0x608>)
 8009ce0:	ec51 0b17 	vmov	r0, r1, d7
 8009ce4:	f7f6 fc88 	bl	80005f8 <__aeabi_dmul>
 8009ce8:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009cec:	f7f6 ff0a 	bl	8000b04 <__aeabi_dcmpge>
 8009cf0:	464f      	mov	r7, r9
 8009cf2:	464e      	mov	r6, r9
 8009cf4:	2800      	cmp	r0, #0
 8009cf6:	f040 8234 	bne.w	800a162 <_dtoa_r+0x8f2>
 8009cfa:	2331      	movs	r3, #49	; 0x31
 8009cfc:	f10b 0501 	add.w	r5, fp, #1
 8009d00:	f88b 3000 	strb.w	r3, [fp]
 8009d04:	f10a 0a01 	add.w	sl, sl, #1
 8009d08:	e22f      	b.n	800a16a <_dtoa_r+0x8fa>
 8009d0a:	07f2      	lsls	r2, r6, #31
 8009d0c:	d505      	bpl.n	8009d1a <_dtoa_r+0x4aa>
 8009d0e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009d12:	f7f6 fc71 	bl	80005f8 <__aeabi_dmul>
 8009d16:	3501      	adds	r5, #1
 8009d18:	2301      	movs	r3, #1
 8009d1a:	1076      	asrs	r6, r6, #1
 8009d1c:	3708      	adds	r7, #8
 8009d1e:	e772      	b.n	8009c06 <_dtoa_r+0x396>
 8009d20:	2502      	movs	r5, #2
 8009d22:	e774      	b.n	8009c0e <_dtoa_r+0x39e>
 8009d24:	f8cd a020 	str.w	sl, [sp, #32]
 8009d28:	464f      	mov	r7, r9
 8009d2a:	e791      	b.n	8009c50 <_dtoa_r+0x3e0>
 8009d2c:	4b4d      	ldr	r3, [pc, #308]	; (8009e64 <_dtoa_r+0x5f4>)
 8009d2e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8009d32:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 8009d36:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009d38:	2b00      	cmp	r3, #0
 8009d3a:	d047      	beq.n	8009dcc <_dtoa_r+0x55c>
 8009d3c:	4602      	mov	r2, r0
 8009d3e:	460b      	mov	r3, r1
 8009d40:	2000      	movs	r0, #0
 8009d42:	494e      	ldr	r1, [pc, #312]	; (8009e7c <_dtoa_r+0x60c>)
 8009d44:	f7f6 fd82 	bl	800084c <__aeabi_ddiv>
 8009d48:	462a      	mov	r2, r5
 8009d4a:	4633      	mov	r3, r6
 8009d4c:	f7f6 fa9c 	bl	8000288 <__aeabi_dsub>
 8009d50:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8009d54:	465d      	mov	r5, fp
 8009d56:	e9dd 0100 	ldrd	r0, r1, [sp]
 8009d5a:	f7f6 fefd 	bl	8000b58 <__aeabi_d2iz>
 8009d5e:	4606      	mov	r6, r0
 8009d60:	f7f6 fbe0 	bl	8000524 <__aeabi_i2d>
 8009d64:	4602      	mov	r2, r0
 8009d66:	460b      	mov	r3, r1
 8009d68:	e9dd 0100 	ldrd	r0, r1, [sp]
 8009d6c:	f7f6 fa8c 	bl	8000288 <__aeabi_dsub>
 8009d70:	3630      	adds	r6, #48	; 0x30
 8009d72:	f805 6b01 	strb.w	r6, [r5], #1
 8009d76:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8009d7a:	e9cd 0100 	strd	r0, r1, [sp]
 8009d7e:	f7f6 fead 	bl	8000adc <__aeabi_dcmplt>
 8009d82:	2800      	cmp	r0, #0
 8009d84:	d163      	bne.n	8009e4e <_dtoa_r+0x5de>
 8009d86:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009d8a:	2000      	movs	r0, #0
 8009d8c:	4937      	ldr	r1, [pc, #220]	; (8009e6c <_dtoa_r+0x5fc>)
 8009d8e:	f7f6 fa7b 	bl	8000288 <__aeabi_dsub>
 8009d92:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8009d96:	f7f6 fea1 	bl	8000adc <__aeabi_dcmplt>
 8009d9a:	2800      	cmp	r0, #0
 8009d9c:	f040 80b7 	bne.w	8009f0e <_dtoa_r+0x69e>
 8009da0:	eba5 030b 	sub.w	r3, r5, fp
 8009da4:	429f      	cmp	r7, r3
 8009da6:	f77f af7c 	ble.w	8009ca2 <_dtoa_r+0x432>
 8009daa:	2200      	movs	r2, #0
 8009dac:	4b30      	ldr	r3, [pc, #192]	; (8009e70 <_dtoa_r+0x600>)
 8009dae:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8009db2:	f7f6 fc21 	bl	80005f8 <__aeabi_dmul>
 8009db6:	2200      	movs	r2, #0
 8009db8:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8009dbc:	4b2c      	ldr	r3, [pc, #176]	; (8009e70 <_dtoa_r+0x600>)
 8009dbe:	e9dd 0100 	ldrd	r0, r1, [sp]
 8009dc2:	f7f6 fc19 	bl	80005f8 <__aeabi_dmul>
 8009dc6:	e9cd 0100 	strd	r0, r1, [sp]
 8009dca:	e7c4      	b.n	8009d56 <_dtoa_r+0x4e6>
 8009dcc:	462a      	mov	r2, r5
 8009dce:	4633      	mov	r3, r6
 8009dd0:	f7f6 fc12 	bl	80005f8 <__aeabi_dmul>
 8009dd4:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8009dd8:	eb0b 0507 	add.w	r5, fp, r7
 8009ddc:	465e      	mov	r6, fp
 8009dde:	e9dd 0100 	ldrd	r0, r1, [sp]
 8009de2:	f7f6 feb9 	bl	8000b58 <__aeabi_d2iz>
 8009de6:	4607      	mov	r7, r0
 8009de8:	f7f6 fb9c 	bl	8000524 <__aeabi_i2d>
 8009dec:	3730      	adds	r7, #48	; 0x30
 8009dee:	4602      	mov	r2, r0
 8009df0:	460b      	mov	r3, r1
 8009df2:	e9dd 0100 	ldrd	r0, r1, [sp]
 8009df6:	f7f6 fa47 	bl	8000288 <__aeabi_dsub>
 8009dfa:	f806 7b01 	strb.w	r7, [r6], #1
 8009dfe:	42ae      	cmp	r6, r5
 8009e00:	e9cd 0100 	strd	r0, r1, [sp]
 8009e04:	f04f 0200 	mov.w	r2, #0
 8009e08:	d126      	bne.n	8009e58 <_dtoa_r+0x5e8>
 8009e0a:	4b1c      	ldr	r3, [pc, #112]	; (8009e7c <_dtoa_r+0x60c>)
 8009e0c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8009e10:	f7f6 fa3c 	bl	800028c <__adddf3>
 8009e14:	4602      	mov	r2, r0
 8009e16:	460b      	mov	r3, r1
 8009e18:	e9dd 0100 	ldrd	r0, r1, [sp]
 8009e1c:	f7f6 fe7c 	bl	8000b18 <__aeabi_dcmpgt>
 8009e20:	2800      	cmp	r0, #0
 8009e22:	d174      	bne.n	8009f0e <_dtoa_r+0x69e>
 8009e24:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8009e28:	2000      	movs	r0, #0
 8009e2a:	4914      	ldr	r1, [pc, #80]	; (8009e7c <_dtoa_r+0x60c>)
 8009e2c:	f7f6 fa2c 	bl	8000288 <__aeabi_dsub>
 8009e30:	4602      	mov	r2, r0
 8009e32:	460b      	mov	r3, r1
 8009e34:	e9dd 0100 	ldrd	r0, r1, [sp]
 8009e38:	f7f6 fe50 	bl	8000adc <__aeabi_dcmplt>
 8009e3c:	2800      	cmp	r0, #0
 8009e3e:	f43f af30 	beq.w	8009ca2 <_dtoa_r+0x432>
 8009e42:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8009e46:	2b30      	cmp	r3, #48	; 0x30
 8009e48:	f105 32ff 	add.w	r2, r5, #4294967295
 8009e4c:	d002      	beq.n	8009e54 <_dtoa_r+0x5e4>
 8009e4e:	f8dd a020 	ldr.w	sl, [sp, #32]
 8009e52:	e04a      	b.n	8009eea <_dtoa_r+0x67a>
 8009e54:	4615      	mov	r5, r2
 8009e56:	e7f4      	b.n	8009e42 <_dtoa_r+0x5d2>
 8009e58:	4b05      	ldr	r3, [pc, #20]	; (8009e70 <_dtoa_r+0x600>)
 8009e5a:	f7f6 fbcd 	bl	80005f8 <__aeabi_dmul>
 8009e5e:	e9cd 0100 	strd	r0, r1, [sp]
 8009e62:	e7bc      	b.n	8009dde <_dtoa_r+0x56e>
 8009e64:	0800cb40 	.word	0x0800cb40
 8009e68:	0800cb18 	.word	0x0800cb18
 8009e6c:	3ff00000 	.word	0x3ff00000
 8009e70:	40240000 	.word	0x40240000
 8009e74:	401c0000 	.word	0x401c0000
 8009e78:	40140000 	.word	0x40140000
 8009e7c:	3fe00000 	.word	0x3fe00000
 8009e80:	e9dd 6700 	ldrd	r6, r7, [sp]
 8009e84:	465d      	mov	r5, fp
 8009e86:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8009e8a:	4630      	mov	r0, r6
 8009e8c:	4639      	mov	r1, r7
 8009e8e:	f7f6 fcdd 	bl	800084c <__aeabi_ddiv>
 8009e92:	f7f6 fe61 	bl	8000b58 <__aeabi_d2iz>
 8009e96:	4680      	mov	r8, r0
 8009e98:	f7f6 fb44 	bl	8000524 <__aeabi_i2d>
 8009e9c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8009ea0:	f7f6 fbaa 	bl	80005f8 <__aeabi_dmul>
 8009ea4:	4602      	mov	r2, r0
 8009ea6:	460b      	mov	r3, r1
 8009ea8:	4630      	mov	r0, r6
 8009eaa:	4639      	mov	r1, r7
 8009eac:	f108 0630 	add.w	r6, r8, #48	; 0x30
 8009eb0:	f7f6 f9ea 	bl	8000288 <__aeabi_dsub>
 8009eb4:	f805 6b01 	strb.w	r6, [r5], #1
 8009eb8:	eba5 060b 	sub.w	r6, r5, fp
 8009ebc:	45b1      	cmp	r9, r6
 8009ebe:	4602      	mov	r2, r0
 8009ec0:	460b      	mov	r3, r1
 8009ec2:	d139      	bne.n	8009f38 <_dtoa_r+0x6c8>
 8009ec4:	f7f6 f9e2 	bl	800028c <__adddf3>
 8009ec8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8009ecc:	4606      	mov	r6, r0
 8009ece:	460f      	mov	r7, r1
 8009ed0:	f7f6 fe22 	bl	8000b18 <__aeabi_dcmpgt>
 8009ed4:	b9c8      	cbnz	r0, 8009f0a <_dtoa_r+0x69a>
 8009ed6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8009eda:	4630      	mov	r0, r6
 8009edc:	4639      	mov	r1, r7
 8009ede:	f7f6 fdf3 	bl	8000ac8 <__aeabi_dcmpeq>
 8009ee2:	b110      	cbz	r0, 8009eea <_dtoa_r+0x67a>
 8009ee4:	f018 0f01 	tst.w	r8, #1
 8009ee8:	d10f      	bne.n	8009f0a <_dtoa_r+0x69a>
 8009eea:	9904      	ldr	r1, [sp, #16]
 8009eec:	4620      	mov	r0, r4
 8009eee:	f000 fc32 	bl	800a756 <_Bfree>
 8009ef2:	2300      	movs	r3, #0
 8009ef4:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8009ef6:	702b      	strb	r3, [r5, #0]
 8009ef8:	f10a 0301 	add.w	r3, sl, #1
 8009efc:	6013      	str	r3, [r2, #0]
 8009efe:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009f00:	2b00      	cmp	r3, #0
 8009f02:	f000 8241 	beq.w	800a388 <_dtoa_r+0xb18>
 8009f06:	601d      	str	r5, [r3, #0]
 8009f08:	e23e      	b.n	800a388 <_dtoa_r+0xb18>
 8009f0a:	f8cd a020 	str.w	sl, [sp, #32]
 8009f0e:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8009f12:	2a39      	cmp	r2, #57	; 0x39
 8009f14:	f105 33ff 	add.w	r3, r5, #4294967295
 8009f18:	d108      	bne.n	8009f2c <_dtoa_r+0x6bc>
 8009f1a:	459b      	cmp	fp, r3
 8009f1c:	d10a      	bne.n	8009f34 <_dtoa_r+0x6c4>
 8009f1e:	9b08      	ldr	r3, [sp, #32]
 8009f20:	3301      	adds	r3, #1
 8009f22:	9308      	str	r3, [sp, #32]
 8009f24:	2330      	movs	r3, #48	; 0x30
 8009f26:	f88b 3000 	strb.w	r3, [fp]
 8009f2a:	465b      	mov	r3, fp
 8009f2c:	781a      	ldrb	r2, [r3, #0]
 8009f2e:	3201      	adds	r2, #1
 8009f30:	701a      	strb	r2, [r3, #0]
 8009f32:	e78c      	b.n	8009e4e <_dtoa_r+0x5de>
 8009f34:	461d      	mov	r5, r3
 8009f36:	e7ea      	b.n	8009f0e <_dtoa_r+0x69e>
 8009f38:	2200      	movs	r2, #0
 8009f3a:	4b9b      	ldr	r3, [pc, #620]	; (800a1a8 <_dtoa_r+0x938>)
 8009f3c:	f7f6 fb5c 	bl	80005f8 <__aeabi_dmul>
 8009f40:	2200      	movs	r2, #0
 8009f42:	2300      	movs	r3, #0
 8009f44:	4606      	mov	r6, r0
 8009f46:	460f      	mov	r7, r1
 8009f48:	f7f6 fdbe 	bl	8000ac8 <__aeabi_dcmpeq>
 8009f4c:	2800      	cmp	r0, #0
 8009f4e:	d09a      	beq.n	8009e86 <_dtoa_r+0x616>
 8009f50:	e7cb      	b.n	8009eea <_dtoa_r+0x67a>
 8009f52:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009f54:	2a00      	cmp	r2, #0
 8009f56:	f000 808b 	beq.w	800a070 <_dtoa_r+0x800>
 8009f5a:	9a06      	ldr	r2, [sp, #24]
 8009f5c:	2a01      	cmp	r2, #1
 8009f5e:	dc6e      	bgt.n	800a03e <_dtoa_r+0x7ce>
 8009f60:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8009f62:	2a00      	cmp	r2, #0
 8009f64:	d067      	beq.n	800a036 <_dtoa_r+0x7c6>
 8009f66:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8009f6a:	9f07      	ldr	r7, [sp, #28]
 8009f6c:	9d05      	ldr	r5, [sp, #20]
 8009f6e:	9a05      	ldr	r2, [sp, #20]
 8009f70:	2101      	movs	r1, #1
 8009f72:	441a      	add	r2, r3
 8009f74:	4620      	mov	r0, r4
 8009f76:	9205      	str	r2, [sp, #20]
 8009f78:	4498      	add	r8, r3
 8009f7a:	f000 fc8c 	bl	800a896 <__i2b>
 8009f7e:	4606      	mov	r6, r0
 8009f80:	2d00      	cmp	r5, #0
 8009f82:	dd0c      	ble.n	8009f9e <_dtoa_r+0x72e>
 8009f84:	f1b8 0f00 	cmp.w	r8, #0
 8009f88:	dd09      	ble.n	8009f9e <_dtoa_r+0x72e>
 8009f8a:	4545      	cmp	r5, r8
 8009f8c:	9a05      	ldr	r2, [sp, #20]
 8009f8e:	462b      	mov	r3, r5
 8009f90:	bfa8      	it	ge
 8009f92:	4643      	movge	r3, r8
 8009f94:	1ad2      	subs	r2, r2, r3
 8009f96:	9205      	str	r2, [sp, #20]
 8009f98:	1aed      	subs	r5, r5, r3
 8009f9a:	eba8 0803 	sub.w	r8, r8, r3
 8009f9e:	9b07      	ldr	r3, [sp, #28]
 8009fa0:	b1eb      	cbz	r3, 8009fde <_dtoa_r+0x76e>
 8009fa2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009fa4:	2b00      	cmp	r3, #0
 8009fa6:	d067      	beq.n	800a078 <_dtoa_r+0x808>
 8009fa8:	b18f      	cbz	r7, 8009fce <_dtoa_r+0x75e>
 8009faa:	4631      	mov	r1, r6
 8009fac:	463a      	mov	r2, r7
 8009fae:	4620      	mov	r0, r4
 8009fb0:	f000 fd10 	bl	800a9d4 <__pow5mult>
 8009fb4:	9a04      	ldr	r2, [sp, #16]
 8009fb6:	4601      	mov	r1, r0
 8009fb8:	4606      	mov	r6, r0
 8009fba:	4620      	mov	r0, r4
 8009fbc:	f000 fc74 	bl	800a8a8 <__multiply>
 8009fc0:	9904      	ldr	r1, [sp, #16]
 8009fc2:	9008      	str	r0, [sp, #32]
 8009fc4:	4620      	mov	r0, r4
 8009fc6:	f000 fbc6 	bl	800a756 <_Bfree>
 8009fca:	9b08      	ldr	r3, [sp, #32]
 8009fcc:	9304      	str	r3, [sp, #16]
 8009fce:	9b07      	ldr	r3, [sp, #28]
 8009fd0:	1bda      	subs	r2, r3, r7
 8009fd2:	d004      	beq.n	8009fde <_dtoa_r+0x76e>
 8009fd4:	9904      	ldr	r1, [sp, #16]
 8009fd6:	4620      	mov	r0, r4
 8009fd8:	f000 fcfc 	bl	800a9d4 <__pow5mult>
 8009fdc:	9004      	str	r0, [sp, #16]
 8009fde:	2101      	movs	r1, #1
 8009fe0:	4620      	mov	r0, r4
 8009fe2:	f000 fc58 	bl	800a896 <__i2b>
 8009fe6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009fe8:	4607      	mov	r7, r0
 8009fea:	2b00      	cmp	r3, #0
 8009fec:	f000 81d0 	beq.w	800a390 <_dtoa_r+0xb20>
 8009ff0:	461a      	mov	r2, r3
 8009ff2:	4601      	mov	r1, r0
 8009ff4:	4620      	mov	r0, r4
 8009ff6:	f000 fced 	bl	800a9d4 <__pow5mult>
 8009ffa:	9b06      	ldr	r3, [sp, #24]
 8009ffc:	2b01      	cmp	r3, #1
 8009ffe:	4607      	mov	r7, r0
 800a000:	dc40      	bgt.n	800a084 <_dtoa_r+0x814>
 800a002:	9b00      	ldr	r3, [sp, #0]
 800a004:	2b00      	cmp	r3, #0
 800a006:	d139      	bne.n	800a07c <_dtoa_r+0x80c>
 800a008:	9b01      	ldr	r3, [sp, #4]
 800a00a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a00e:	2b00      	cmp	r3, #0
 800a010:	d136      	bne.n	800a080 <_dtoa_r+0x810>
 800a012:	9b01      	ldr	r3, [sp, #4]
 800a014:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800a018:	0d1b      	lsrs	r3, r3, #20
 800a01a:	051b      	lsls	r3, r3, #20
 800a01c:	b12b      	cbz	r3, 800a02a <_dtoa_r+0x7ba>
 800a01e:	9b05      	ldr	r3, [sp, #20]
 800a020:	3301      	adds	r3, #1
 800a022:	9305      	str	r3, [sp, #20]
 800a024:	f108 0801 	add.w	r8, r8, #1
 800a028:	2301      	movs	r3, #1
 800a02a:	9307      	str	r3, [sp, #28]
 800a02c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a02e:	2b00      	cmp	r3, #0
 800a030:	d12a      	bne.n	800a088 <_dtoa_r+0x818>
 800a032:	2001      	movs	r0, #1
 800a034:	e030      	b.n	800a098 <_dtoa_r+0x828>
 800a036:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800a038:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800a03c:	e795      	b.n	8009f6a <_dtoa_r+0x6fa>
 800a03e:	9b07      	ldr	r3, [sp, #28]
 800a040:	f109 37ff 	add.w	r7, r9, #4294967295
 800a044:	42bb      	cmp	r3, r7
 800a046:	bfbf      	itttt	lt
 800a048:	9b07      	ldrlt	r3, [sp, #28]
 800a04a:	9707      	strlt	r7, [sp, #28]
 800a04c:	1afa      	sublt	r2, r7, r3
 800a04e:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 800a050:	bfbb      	ittet	lt
 800a052:	189b      	addlt	r3, r3, r2
 800a054:	930e      	strlt	r3, [sp, #56]	; 0x38
 800a056:	1bdf      	subge	r7, r3, r7
 800a058:	2700      	movlt	r7, #0
 800a05a:	f1b9 0f00 	cmp.w	r9, #0
 800a05e:	bfb5      	itete	lt
 800a060:	9b05      	ldrlt	r3, [sp, #20]
 800a062:	9d05      	ldrge	r5, [sp, #20]
 800a064:	eba3 0509 	sublt.w	r5, r3, r9
 800a068:	464b      	movge	r3, r9
 800a06a:	bfb8      	it	lt
 800a06c:	2300      	movlt	r3, #0
 800a06e:	e77e      	b.n	8009f6e <_dtoa_r+0x6fe>
 800a070:	9f07      	ldr	r7, [sp, #28]
 800a072:	9d05      	ldr	r5, [sp, #20]
 800a074:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 800a076:	e783      	b.n	8009f80 <_dtoa_r+0x710>
 800a078:	9a07      	ldr	r2, [sp, #28]
 800a07a:	e7ab      	b.n	8009fd4 <_dtoa_r+0x764>
 800a07c:	2300      	movs	r3, #0
 800a07e:	e7d4      	b.n	800a02a <_dtoa_r+0x7ba>
 800a080:	9b00      	ldr	r3, [sp, #0]
 800a082:	e7d2      	b.n	800a02a <_dtoa_r+0x7ba>
 800a084:	2300      	movs	r3, #0
 800a086:	9307      	str	r3, [sp, #28]
 800a088:	693b      	ldr	r3, [r7, #16]
 800a08a:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 800a08e:	6918      	ldr	r0, [r3, #16]
 800a090:	f000 fbb3 	bl	800a7fa <__hi0bits>
 800a094:	f1c0 0020 	rsb	r0, r0, #32
 800a098:	4440      	add	r0, r8
 800a09a:	f010 001f 	ands.w	r0, r0, #31
 800a09e:	d047      	beq.n	800a130 <_dtoa_r+0x8c0>
 800a0a0:	f1c0 0320 	rsb	r3, r0, #32
 800a0a4:	2b04      	cmp	r3, #4
 800a0a6:	dd3b      	ble.n	800a120 <_dtoa_r+0x8b0>
 800a0a8:	9b05      	ldr	r3, [sp, #20]
 800a0aa:	f1c0 001c 	rsb	r0, r0, #28
 800a0ae:	4403      	add	r3, r0
 800a0b0:	9305      	str	r3, [sp, #20]
 800a0b2:	4405      	add	r5, r0
 800a0b4:	4480      	add	r8, r0
 800a0b6:	9b05      	ldr	r3, [sp, #20]
 800a0b8:	2b00      	cmp	r3, #0
 800a0ba:	dd05      	ble.n	800a0c8 <_dtoa_r+0x858>
 800a0bc:	461a      	mov	r2, r3
 800a0be:	9904      	ldr	r1, [sp, #16]
 800a0c0:	4620      	mov	r0, r4
 800a0c2:	f000 fcd5 	bl	800aa70 <__lshift>
 800a0c6:	9004      	str	r0, [sp, #16]
 800a0c8:	f1b8 0f00 	cmp.w	r8, #0
 800a0cc:	dd05      	ble.n	800a0da <_dtoa_r+0x86a>
 800a0ce:	4639      	mov	r1, r7
 800a0d0:	4642      	mov	r2, r8
 800a0d2:	4620      	mov	r0, r4
 800a0d4:	f000 fccc 	bl	800aa70 <__lshift>
 800a0d8:	4607      	mov	r7, r0
 800a0da:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800a0dc:	b353      	cbz	r3, 800a134 <_dtoa_r+0x8c4>
 800a0de:	4639      	mov	r1, r7
 800a0e0:	9804      	ldr	r0, [sp, #16]
 800a0e2:	f000 fd19 	bl	800ab18 <__mcmp>
 800a0e6:	2800      	cmp	r0, #0
 800a0e8:	da24      	bge.n	800a134 <_dtoa_r+0x8c4>
 800a0ea:	2300      	movs	r3, #0
 800a0ec:	220a      	movs	r2, #10
 800a0ee:	9904      	ldr	r1, [sp, #16]
 800a0f0:	4620      	mov	r0, r4
 800a0f2:	f000 fb47 	bl	800a784 <__multadd>
 800a0f6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a0f8:	9004      	str	r0, [sp, #16]
 800a0fa:	f10a 3aff 	add.w	sl, sl, #4294967295
 800a0fe:	2b00      	cmp	r3, #0
 800a100:	f000 814d 	beq.w	800a39e <_dtoa_r+0xb2e>
 800a104:	2300      	movs	r3, #0
 800a106:	4631      	mov	r1, r6
 800a108:	220a      	movs	r2, #10
 800a10a:	4620      	mov	r0, r4
 800a10c:	f000 fb3a 	bl	800a784 <__multadd>
 800a110:	9b02      	ldr	r3, [sp, #8]
 800a112:	2b00      	cmp	r3, #0
 800a114:	4606      	mov	r6, r0
 800a116:	dc4f      	bgt.n	800a1b8 <_dtoa_r+0x948>
 800a118:	9b06      	ldr	r3, [sp, #24]
 800a11a:	2b02      	cmp	r3, #2
 800a11c:	dd4c      	ble.n	800a1b8 <_dtoa_r+0x948>
 800a11e:	e011      	b.n	800a144 <_dtoa_r+0x8d4>
 800a120:	d0c9      	beq.n	800a0b6 <_dtoa_r+0x846>
 800a122:	9a05      	ldr	r2, [sp, #20]
 800a124:	331c      	adds	r3, #28
 800a126:	441a      	add	r2, r3
 800a128:	9205      	str	r2, [sp, #20]
 800a12a:	441d      	add	r5, r3
 800a12c:	4498      	add	r8, r3
 800a12e:	e7c2      	b.n	800a0b6 <_dtoa_r+0x846>
 800a130:	4603      	mov	r3, r0
 800a132:	e7f6      	b.n	800a122 <_dtoa_r+0x8b2>
 800a134:	f1b9 0f00 	cmp.w	r9, #0
 800a138:	dc38      	bgt.n	800a1ac <_dtoa_r+0x93c>
 800a13a:	9b06      	ldr	r3, [sp, #24]
 800a13c:	2b02      	cmp	r3, #2
 800a13e:	dd35      	ble.n	800a1ac <_dtoa_r+0x93c>
 800a140:	f8cd 9008 	str.w	r9, [sp, #8]
 800a144:	9b02      	ldr	r3, [sp, #8]
 800a146:	b963      	cbnz	r3, 800a162 <_dtoa_r+0x8f2>
 800a148:	4639      	mov	r1, r7
 800a14a:	2205      	movs	r2, #5
 800a14c:	4620      	mov	r0, r4
 800a14e:	f000 fb19 	bl	800a784 <__multadd>
 800a152:	4601      	mov	r1, r0
 800a154:	4607      	mov	r7, r0
 800a156:	9804      	ldr	r0, [sp, #16]
 800a158:	f000 fcde 	bl	800ab18 <__mcmp>
 800a15c:	2800      	cmp	r0, #0
 800a15e:	f73f adcc 	bgt.w	8009cfa <_dtoa_r+0x48a>
 800a162:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a164:	465d      	mov	r5, fp
 800a166:	ea6f 0a03 	mvn.w	sl, r3
 800a16a:	f04f 0900 	mov.w	r9, #0
 800a16e:	4639      	mov	r1, r7
 800a170:	4620      	mov	r0, r4
 800a172:	f000 faf0 	bl	800a756 <_Bfree>
 800a176:	2e00      	cmp	r6, #0
 800a178:	f43f aeb7 	beq.w	8009eea <_dtoa_r+0x67a>
 800a17c:	f1b9 0f00 	cmp.w	r9, #0
 800a180:	d005      	beq.n	800a18e <_dtoa_r+0x91e>
 800a182:	45b1      	cmp	r9, r6
 800a184:	d003      	beq.n	800a18e <_dtoa_r+0x91e>
 800a186:	4649      	mov	r1, r9
 800a188:	4620      	mov	r0, r4
 800a18a:	f000 fae4 	bl	800a756 <_Bfree>
 800a18e:	4631      	mov	r1, r6
 800a190:	4620      	mov	r0, r4
 800a192:	f000 fae0 	bl	800a756 <_Bfree>
 800a196:	e6a8      	b.n	8009eea <_dtoa_r+0x67a>
 800a198:	2700      	movs	r7, #0
 800a19a:	463e      	mov	r6, r7
 800a19c:	e7e1      	b.n	800a162 <_dtoa_r+0x8f2>
 800a19e:	f8dd a020 	ldr.w	sl, [sp, #32]
 800a1a2:	463e      	mov	r6, r7
 800a1a4:	e5a9      	b.n	8009cfa <_dtoa_r+0x48a>
 800a1a6:	bf00      	nop
 800a1a8:	40240000 	.word	0x40240000
 800a1ac:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a1ae:	f8cd 9008 	str.w	r9, [sp, #8]
 800a1b2:	2b00      	cmp	r3, #0
 800a1b4:	f000 80fa 	beq.w	800a3ac <_dtoa_r+0xb3c>
 800a1b8:	2d00      	cmp	r5, #0
 800a1ba:	dd05      	ble.n	800a1c8 <_dtoa_r+0x958>
 800a1bc:	4631      	mov	r1, r6
 800a1be:	462a      	mov	r2, r5
 800a1c0:	4620      	mov	r0, r4
 800a1c2:	f000 fc55 	bl	800aa70 <__lshift>
 800a1c6:	4606      	mov	r6, r0
 800a1c8:	9b07      	ldr	r3, [sp, #28]
 800a1ca:	2b00      	cmp	r3, #0
 800a1cc:	d04c      	beq.n	800a268 <_dtoa_r+0x9f8>
 800a1ce:	6871      	ldr	r1, [r6, #4]
 800a1d0:	4620      	mov	r0, r4
 800a1d2:	f000 fa8c 	bl	800a6ee <_Balloc>
 800a1d6:	6932      	ldr	r2, [r6, #16]
 800a1d8:	3202      	adds	r2, #2
 800a1da:	4605      	mov	r5, r0
 800a1dc:	0092      	lsls	r2, r2, #2
 800a1de:	f106 010c 	add.w	r1, r6, #12
 800a1e2:	300c      	adds	r0, #12
 800a1e4:	f000 fa76 	bl	800a6d4 <memcpy>
 800a1e8:	2201      	movs	r2, #1
 800a1ea:	4629      	mov	r1, r5
 800a1ec:	4620      	mov	r0, r4
 800a1ee:	f000 fc3f 	bl	800aa70 <__lshift>
 800a1f2:	9b00      	ldr	r3, [sp, #0]
 800a1f4:	f8cd b014 	str.w	fp, [sp, #20]
 800a1f8:	f003 0301 	and.w	r3, r3, #1
 800a1fc:	46b1      	mov	r9, r6
 800a1fe:	9307      	str	r3, [sp, #28]
 800a200:	4606      	mov	r6, r0
 800a202:	4639      	mov	r1, r7
 800a204:	9804      	ldr	r0, [sp, #16]
 800a206:	f7ff faa7 	bl	8009758 <quorem>
 800a20a:	4649      	mov	r1, r9
 800a20c:	4605      	mov	r5, r0
 800a20e:	f100 0830 	add.w	r8, r0, #48	; 0x30
 800a212:	9804      	ldr	r0, [sp, #16]
 800a214:	f000 fc80 	bl	800ab18 <__mcmp>
 800a218:	4632      	mov	r2, r6
 800a21a:	9000      	str	r0, [sp, #0]
 800a21c:	4639      	mov	r1, r7
 800a21e:	4620      	mov	r0, r4
 800a220:	f000 fc94 	bl	800ab4c <__mdiff>
 800a224:	68c3      	ldr	r3, [r0, #12]
 800a226:	4602      	mov	r2, r0
 800a228:	bb03      	cbnz	r3, 800a26c <_dtoa_r+0x9fc>
 800a22a:	4601      	mov	r1, r0
 800a22c:	9008      	str	r0, [sp, #32]
 800a22e:	9804      	ldr	r0, [sp, #16]
 800a230:	f000 fc72 	bl	800ab18 <__mcmp>
 800a234:	9a08      	ldr	r2, [sp, #32]
 800a236:	4603      	mov	r3, r0
 800a238:	4611      	mov	r1, r2
 800a23a:	4620      	mov	r0, r4
 800a23c:	9308      	str	r3, [sp, #32]
 800a23e:	f000 fa8a 	bl	800a756 <_Bfree>
 800a242:	9b08      	ldr	r3, [sp, #32]
 800a244:	b9a3      	cbnz	r3, 800a270 <_dtoa_r+0xa00>
 800a246:	9a06      	ldr	r2, [sp, #24]
 800a248:	b992      	cbnz	r2, 800a270 <_dtoa_r+0xa00>
 800a24a:	9a07      	ldr	r2, [sp, #28]
 800a24c:	b982      	cbnz	r2, 800a270 <_dtoa_r+0xa00>
 800a24e:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800a252:	d029      	beq.n	800a2a8 <_dtoa_r+0xa38>
 800a254:	9b00      	ldr	r3, [sp, #0]
 800a256:	2b00      	cmp	r3, #0
 800a258:	dd01      	ble.n	800a25e <_dtoa_r+0x9ee>
 800a25a:	f105 0831 	add.w	r8, r5, #49	; 0x31
 800a25e:	9b05      	ldr	r3, [sp, #20]
 800a260:	1c5d      	adds	r5, r3, #1
 800a262:	f883 8000 	strb.w	r8, [r3]
 800a266:	e782      	b.n	800a16e <_dtoa_r+0x8fe>
 800a268:	4630      	mov	r0, r6
 800a26a:	e7c2      	b.n	800a1f2 <_dtoa_r+0x982>
 800a26c:	2301      	movs	r3, #1
 800a26e:	e7e3      	b.n	800a238 <_dtoa_r+0x9c8>
 800a270:	9a00      	ldr	r2, [sp, #0]
 800a272:	2a00      	cmp	r2, #0
 800a274:	db04      	blt.n	800a280 <_dtoa_r+0xa10>
 800a276:	d125      	bne.n	800a2c4 <_dtoa_r+0xa54>
 800a278:	9a06      	ldr	r2, [sp, #24]
 800a27a:	bb1a      	cbnz	r2, 800a2c4 <_dtoa_r+0xa54>
 800a27c:	9a07      	ldr	r2, [sp, #28]
 800a27e:	bb0a      	cbnz	r2, 800a2c4 <_dtoa_r+0xa54>
 800a280:	2b00      	cmp	r3, #0
 800a282:	ddec      	ble.n	800a25e <_dtoa_r+0x9ee>
 800a284:	2201      	movs	r2, #1
 800a286:	9904      	ldr	r1, [sp, #16]
 800a288:	4620      	mov	r0, r4
 800a28a:	f000 fbf1 	bl	800aa70 <__lshift>
 800a28e:	4639      	mov	r1, r7
 800a290:	9004      	str	r0, [sp, #16]
 800a292:	f000 fc41 	bl	800ab18 <__mcmp>
 800a296:	2800      	cmp	r0, #0
 800a298:	dc03      	bgt.n	800a2a2 <_dtoa_r+0xa32>
 800a29a:	d1e0      	bne.n	800a25e <_dtoa_r+0x9ee>
 800a29c:	f018 0f01 	tst.w	r8, #1
 800a2a0:	d0dd      	beq.n	800a25e <_dtoa_r+0x9ee>
 800a2a2:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800a2a6:	d1d8      	bne.n	800a25a <_dtoa_r+0x9ea>
 800a2a8:	9b05      	ldr	r3, [sp, #20]
 800a2aa:	9a05      	ldr	r2, [sp, #20]
 800a2ac:	1c5d      	adds	r5, r3, #1
 800a2ae:	2339      	movs	r3, #57	; 0x39
 800a2b0:	7013      	strb	r3, [r2, #0]
 800a2b2:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800a2b6:	2b39      	cmp	r3, #57	; 0x39
 800a2b8:	f105 32ff 	add.w	r2, r5, #4294967295
 800a2bc:	d04f      	beq.n	800a35e <_dtoa_r+0xaee>
 800a2be:	3301      	adds	r3, #1
 800a2c0:	7013      	strb	r3, [r2, #0]
 800a2c2:	e754      	b.n	800a16e <_dtoa_r+0x8fe>
 800a2c4:	9a05      	ldr	r2, [sp, #20]
 800a2c6:	2b00      	cmp	r3, #0
 800a2c8:	f102 0501 	add.w	r5, r2, #1
 800a2cc:	dd06      	ble.n	800a2dc <_dtoa_r+0xa6c>
 800a2ce:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800a2d2:	d0e9      	beq.n	800a2a8 <_dtoa_r+0xa38>
 800a2d4:	f108 0801 	add.w	r8, r8, #1
 800a2d8:	9b05      	ldr	r3, [sp, #20]
 800a2da:	e7c2      	b.n	800a262 <_dtoa_r+0x9f2>
 800a2dc:	9a02      	ldr	r2, [sp, #8]
 800a2de:	f805 8c01 	strb.w	r8, [r5, #-1]
 800a2e2:	eba5 030b 	sub.w	r3, r5, fp
 800a2e6:	4293      	cmp	r3, r2
 800a2e8:	d021      	beq.n	800a32e <_dtoa_r+0xabe>
 800a2ea:	2300      	movs	r3, #0
 800a2ec:	220a      	movs	r2, #10
 800a2ee:	9904      	ldr	r1, [sp, #16]
 800a2f0:	4620      	mov	r0, r4
 800a2f2:	f000 fa47 	bl	800a784 <__multadd>
 800a2f6:	45b1      	cmp	r9, r6
 800a2f8:	9004      	str	r0, [sp, #16]
 800a2fa:	f04f 0300 	mov.w	r3, #0
 800a2fe:	f04f 020a 	mov.w	r2, #10
 800a302:	4649      	mov	r1, r9
 800a304:	4620      	mov	r0, r4
 800a306:	d105      	bne.n	800a314 <_dtoa_r+0xaa4>
 800a308:	f000 fa3c 	bl	800a784 <__multadd>
 800a30c:	4681      	mov	r9, r0
 800a30e:	4606      	mov	r6, r0
 800a310:	9505      	str	r5, [sp, #20]
 800a312:	e776      	b.n	800a202 <_dtoa_r+0x992>
 800a314:	f000 fa36 	bl	800a784 <__multadd>
 800a318:	4631      	mov	r1, r6
 800a31a:	4681      	mov	r9, r0
 800a31c:	2300      	movs	r3, #0
 800a31e:	220a      	movs	r2, #10
 800a320:	4620      	mov	r0, r4
 800a322:	f000 fa2f 	bl	800a784 <__multadd>
 800a326:	4606      	mov	r6, r0
 800a328:	e7f2      	b.n	800a310 <_dtoa_r+0xaa0>
 800a32a:	f04f 0900 	mov.w	r9, #0
 800a32e:	2201      	movs	r2, #1
 800a330:	9904      	ldr	r1, [sp, #16]
 800a332:	4620      	mov	r0, r4
 800a334:	f000 fb9c 	bl	800aa70 <__lshift>
 800a338:	4639      	mov	r1, r7
 800a33a:	9004      	str	r0, [sp, #16]
 800a33c:	f000 fbec 	bl	800ab18 <__mcmp>
 800a340:	2800      	cmp	r0, #0
 800a342:	dcb6      	bgt.n	800a2b2 <_dtoa_r+0xa42>
 800a344:	d102      	bne.n	800a34c <_dtoa_r+0xadc>
 800a346:	f018 0f01 	tst.w	r8, #1
 800a34a:	d1b2      	bne.n	800a2b2 <_dtoa_r+0xa42>
 800a34c:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800a350:	2b30      	cmp	r3, #48	; 0x30
 800a352:	f105 32ff 	add.w	r2, r5, #4294967295
 800a356:	f47f af0a 	bne.w	800a16e <_dtoa_r+0x8fe>
 800a35a:	4615      	mov	r5, r2
 800a35c:	e7f6      	b.n	800a34c <_dtoa_r+0xadc>
 800a35e:	4593      	cmp	fp, r2
 800a360:	d105      	bne.n	800a36e <_dtoa_r+0xafe>
 800a362:	2331      	movs	r3, #49	; 0x31
 800a364:	f10a 0a01 	add.w	sl, sl, #1
 800a368:	f88b 3000 	strb.w	r3, [fp]
 800a36c:	e6ff      	b.n	800a16e <_dtoa_r+0x8fe>
 800a36e:	4615      	mov	r5, r2
 800a370:	e79f      	b.n	800a2b2 <_dtoa_r+0xa42>
 800a372:	f8df b064 	ldr.w	fp, [pc, #100]	; 800a3d8 <_dtoa_r+0xb68>
 800a376:	e007      	b.n	800a388 <_dtoa_r+0xb18>
 800a378:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a37a:	f8df b060 	ldr.w	fp, [pc, #96]	; 800a3dc <_dtoa_r+0xb6c>
 800a37e:	b11b      	cbz	r3, 800a388 <_dtoa_r+0xb18>
 800a380:	f10b 0308 	add.w	r3, fp, #8
 800a384:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800a386:	6013      	str	r3, [r2, #0]
 800a388:	4658      	mov	r0, fp
 800a38a:	b017      	add	sp, #92	; 0x5c
 800a38c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a390:	9b06      	ldr	r3, [sp, #24]
 800a392:	2b01      	cmp	r3, #1
 800a394:	f77f ae35 	ble.w	800a002 <_dtoa_r+0x792>
 800a398:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a39a:	9307      	str	r3, [sp, #28]
 800a39c:	e649      	b.n	800a032 <_dtoa_r+0x7c2>
 800a39e:	9b02      	ldr	r3, [sp, #8]
 800a3a0:	2b00      	cmp	r3, #0
 800a3a2:	dc03      	bgt.n	800a3ac <_dtoa_r+0xb3c>
 800a3a4:	9b06      	ldr	r3, [sp, #24]
 800a3a6:	2b02      	cmp	r3, #2
 800a3a8:	f73f aecc 	bgt.w	800a144 <_dtoa_r+0x8d4>
 800a3ac:	465d      	mov	r5, fp
 800a3ae:	4639      	mov	r1, r7
 800a3b0:	9804      	ldr	r0, [sp, #16]
 800a3b2:	f7ff f9d1 	bl	8009758 <quorem>
 800a3b6:	f100 0830 	add.w	r8, r0, #48	; 0x30
 800a3ba:	f805 8b01 	strb.w	r8, [r5], #1
 800a3be:	9a02      	ldr	r2, [sp, #8]
 800a3c0:	eba5 030b 	sub.w	r3, r5, fp
 800a3c4:	429a      	cmp	r2, r3
 800a3c6:	ddb0      	ble.n	800a32a <_dtoa_r+0xaba>
 800a3c8:	2300      	movs	r3, #0
 800a3ca:	220a      	movs	r2, #10
 800a3cc:	9904      	ldr	r1, [sp, #16]
 800a3ce:	4620      	mov	r0, r4
 800a3d0:	f000 f9d8 	bl	800a784 <__multadd>
 800a3d4:	9004      	str	r0, [sp, #16]
 800a3d6:	e7ea      	b.n	800a3ae <_dtoa_r+0xb3e>
 800a3d8:	0800cae4 	.word	0x0800cae4
 800a3dc:	0800cb08 	.word	0x0800cb08

0800a3e0 <__sflush_r>:
 800a3e0:	898a      	ldrh	r2, [r1, #12]
 800a3e2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a3e6:	4605      	mov	r5, r0
 800a3e8:	0710      	lsls	r0, r2, #28
 800a3ea:	460c      	mov	r4, r1
 800a3ec:	d458      	bmi.n	800a4a0 <__sflush_r+0xc0>
 800a3ee:	684b      	ldr	r3, [r1, #4]
 800a3f0:	2b00      	cmp	r3, #0
 800a3f2:	dc05      	bgt.n	800a400 <__sflush_r+0x20>
 800a3f4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800a3f6:	2b00      	cmp	r3, #0
 800a3f8:	dc02      	bgt.n	800a400 <__sflush_r+0x20>
 800a3fa:	2000      	movs	r0, #0
 800a3fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a400:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a402:	2e00      	cmp	r6, #0
 800a404:	d0f9      	beq.n	800a3fa <__sflush_r+0x1a>
 800a406:	2300      	movs	r3, #0
 800a408:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800a40c:	682f      	ldr	r7, [r5, #0]
 800a40e:	6a21      	ldr	r1, [r4, #32]
 800a410:	602b      	str	r3, [r5, #0]
 800a412:	d032      	beq.n	800a47a <__sflush_r+0x9a>
 800a414:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800a416:	89a3      	ldrh	r3, [r4, #12]
 800a418:	075a      	lsls	r2, r3, #29
 800a41a:	d505      	bpl.n	800a428 <__sflush_r+0x48>
 800a41c:	6863      	ldr	r3, [r4, #4]
 800a41e:	1ac0      	subs	r0, r0, r3
 800a420:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800a422:	b10b      	cbz	r3, 800a428 <__sflush_r+0x48>
 800a424:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800a426:	1ac0      	subs	r0, r0, r3
 800a428:	2300      	movs	r3, #0
 800a42a:	4602      	mov	r2, r0
 800a42c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a42e:	6a21      	ldr	r1, [r4, #32]
 800a430:	4628      	mov	r0, r5
 800a432:	47b0      	blx	r6
 800a434:	1c43      	adds	r3, r0, #1
 800a436:	89a3      	ldrh	r3, [r4, #12]
 800a438:	d106      	bne.n	800a448 <__sflush_r+0x68>
 800a43a:	6829      	ldr	r1, [r5, #0]
 800a43c:	291d      	cmp	r1, #29
 800a43e:	d848      	bhi.n	800a4d2 <__sflush_r+0xf2>
 800a440:	4a29      	ldr	r2, [pc, #164]	; (800a4e8 <__sflush_r+0x108>)
 800a442:	40ca      	lsrs	r2, r1
 800a444:	07d6      	lsls	r6, r2, #31
 800a446:	d544      	bpl.n	800a4d2 <__sflush_r+0xf2>
 800a448:	2200      	movs	r2, #0
 800a44a:	6062      	str	r2, [r4, #4]
 800a44c:	04d9      	lsls	r1, r3, #19
 800a44e:	6922      	ldr	r2, [r4, #16]
 800a450:	6022      	str	r2, [r4, #0]
 800a452:	d504      	bpl.n	800a45e <__sflush_r+0x7e>
 800a454:	1c42      	adds	r2, r0, #1
 800a456:	d101      	bne.n	800a45c <__sflush_r+0x7c>
 800a458:	682b      	ldr	r3, [r5, #0]
 800a45a:	b903      	cbnz	r3, 800a45e <__sflush_r+0x7e>
 800a45c:	6560      	str	r0, [r4, #84]	; 0x54
 800a45e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a460:	602f      	str	r7, [r5, #0]
 800a462:	2900      	cmp	r1, #0
 800a464:	d0c9      	beq.n	800a3fa <__sflush_r+0x1a>
 800a466:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a46a:	4299      	cmp	r1, r3
 800a46c:	d002      	beq.n	800a474 <__sflush_r+0x94>
 800a46e:	4628      	mov	r0, r5
 800a470:	f000 fc26 	bl	800acc0 <_free_r>
 800a474:	2000      	movs	r0, #0
 800a476:	6360      	str	r0, [r4, #52]	; 0x34
 800a478:	e7c0      	b.n	800a3fc <__sflush_r+0x1c>
 800a47a:	2301      	movs	r3, #1
 800a47c:	4628      	mov	r0, r5
 800a47e:	47b0      	blx	r6
 800a480:	1c41      	adds	r1, r0, #1
 800a482:	d1c8      	bne.n	800a416 <__sflush_r+0x36>
 800a484:	682b      	ldr	r3, [r5, #0]
 800a486:	2b00      	cmp	r3, #0
 800a488:	d0c5      	beq.n	800a416 <__sflush_r+0x36>
 800a48a:	2b1d      	cmp	r3, #29
 800a48c:	d001      	beq.n	800a492 <__sflush_r+0xb2>
 800a48e:	2b16      	cmp	r3, #22
 800a490:	d101      	bne.n	800a496 <__sflush_r+0xb6>
 800a492:	602f      	str	r7, [r5, #0]
 800a494:	e7b1      	b.n	800a3fa <__sflush_r+0x1a>
 800a496:	89a3      	ldrh	r3, [r4, #12]
 800a498:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a49c:	81a3      	strh	r3, [r4, #12]
 800a49e:	e7ad      	b.n	800a3fc <__sflush_r+0x1c>
 800a4a0:	690f      	ldr	r7, [r1, #16]
 800a4a2:	2f00      	cmp	r7, #0
 800a4a4:	d0a9      	beq.n	800a3fa <__sflush_r+0x1a>
 800a4a6:	0793      	lsls	r3, r2, #30
 800a4a8:	680e      	ldr	r6, [r1, #0]
 800a4aa:	bf08      	it	eq
 800a4ac:	694b      	ldreq	r3, [r1, #20]
 800a4ae:	600f      	str	r7, [r1, #0]
 800a4b0:	bf18      	it	ne
 800a4b2:	2300      	movne	r3, #0
 800a4b4:	eba6 0807 	sub.w	r8, r6, r7
 800a4b8:	608b      	str	r3, [r1, #8]
 800a4ba:	f1b8 0f00 	cmp.w	r8, #0
 800a4be:	dd9c      	ble.n	800a3fa <__sflush_r+0x1a>
 800a4c0:	4643      	mov	r3, r8
 800a4c2:	463a      	mov	r2, r7
 800a4c4:	6a21      	ldr	r1, [r4, #32]
 800a4c6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800a4c8:	4628      	mov	r0, r5
 800a4ca:	47b0      	blx	r6
 800a4cc:	2800      	cmp	r0, #0
 800a4ce:	dc06      	bgt.n	800a4de <__sflush_r+0xfe>
 800a4d0:	89a3      	ldrh	r3, [r4, #12]
 800a4d2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a4d6:	81a3      	strh	r3, [r4, #12]
 800a4d8:	f04f 30ff 	mov.w	r0, #4294967295
 800a4dc:	e78e      	b.n	800a3fc <__sflush_r+0x1c>
 800a4de:	4407      	add	r7, r0
 800a4e0:	eba8 0800 	sub.w	r8, r8, r0
 800a4e4:	e7e9      	b.n	800a4ba <__sflush_r+0xda>
 800a4e6:	bf00      	nop
 800a4e8:	20400001 	.word	0x20400001

0800a4ec <_fflush_r>:
 800a4ec:	b538      	push	{r3, r4, r5, lr}
 800a4ee:	690b      	ldr	r3, [r1, #16]
 800a4f0:	4605      	mov	r5, r0
 800a4f2:	460c      	mov	r4, r1
 800a4f4:	b1db      	cbz	r3, 800a52e <_fflush_r+0x42>
 800a4f6:	b118      	cbz	r0, 800a500 <_fflush_r+0x14>
 800a4f8:	6983      	ldr	r3, [r0, #24]
 800a4fa:	b90b      	cbnz	r3, 800a500 <_fflush_r+0x14>
 800a4fc:	f7fe f9cc 	bl	8008898 <__sinit>
 800a500:	4b0c      	ldr	r3, [pc, #48]	; (800a534 <_fflush_r+0x48>)
 800a502:	429c      	cmp	r4, r3
 800a504:	d109      	bne.n	800a51a <_fflush_r+0x2e>
 800a506:	686c      	ldr	r4, [r5, #4]
 800a508:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a50c:	b17b      	cbz	r3, 800a52e <_fflush_r+0x42>
 800a50e:	4621      	mov	r1, r4
 800a510:	4628      	mov	r0, r5
 800a512:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a516:	f7ff bf63 	b.w	800a3e0 <__sflush_r>
 800a51a:	4b07      	ldr	r3, [pc, #28]	; (800a538 <_fflush_r+0x4c>)
 800a51c:	429c      	cmp	r4, r3
 800a51e:	d101      	bne.n	800a524 <_fflush_r+0x38>
 800a520:	68ac      	ldr	r4, [r5, #8]
 800a522:	e7f1      	b.n	800a508 <_fflush_r+0x1c>
 800a524:	4b05      	ldr	r3, [pc, #20]	; (800a53c <_fflush_r+0x50>)
 800a526:	429c      	cmp	r4, r3
 800a528:	bf08      	it	eq
 800a52a:	68ec      	ldreq	r4, [r5, #12]
 800a52c:	e7ec      	b.n	800a508 <_fflush_r+0x1c>
 800a52e:	2000      	movs	r0, #0
 800a530:	bd38      	pop	{r3, r4, r5, pc}
 800a532:	bf00      	nop
 800a534:	0800ca90 	.word	0x0800ca90
 800a538:	0800cab0 	.word	0x0800cab0
 800a53c:	0800ca70 	.word	0x0800ca70

0800a540 <fflush>:
 800a540:	4601      	mov	r1, r0
 800a542:	b920      	cbnz	r0, 800a54e <fflush+0xe>
 800a544:	4b04      	ldr	r3, [pc, #16]	; (800a558 <fflush+0x18>)
 800a546:	4905      	ldr	r1, [pc, #20]	; (800a55c <fflush+0x1c>)
 800a548:	6818      	ldr	r0, [r3, #0]
 800a54a:	f7fe ba2d 	b.w	80089a8 <_fwalk_reent>
 800a54e:	4b04      	ldr	r3, [pc, #16]	; (800a560 <fflush+0x20>)
 800a550:	6818      	ldr	r0, [r3, #0]
 800a552:	f7ff bfcb 	b.w	800a4ec <_fflush_r>
 800a556:	bf00      	nop
 800a558:	0800cad0 	.word	0x0800cad0
 800a55c:	0800a4ed 	.word	0x0800a4ed
 800a560:	20000104 	.word	0x20000104

0800a564 <_getc_r>:
 800a564:	b538      	push	{r3, r4, r5, lr}
 800a566:	460c      	mov	r4, r1
 800a568:	4605      	mov	r5, r0
 800a56a:	b118      	cbz	r0, 800a574 <_getc_r+0x10>
 800a56c:	6983      	ldr	r3, [r0, #24]
 800a56e:	b90b      	cbnz	r3, 800a574 <_getc_r+0x10>
 800a570:	f7fe f992 	bl	8008898 <__sinit>
 800a574:	4b0e      	ldr	r3, [pc, #56]	; (800a5b0 <_getc_r+0x4c>)
 800a576:	429c      	cmp	r4, r3
 800a578:	d10b      	bne.n	800a592 <_getc_r+0x2e>
 800a57a:	686c      	ldr	r4, [r5, #4]
 800a57c:	6863      	ldr	r3, [r4, #4]
 800a57e:	3b01      	subs	r3, #1
 800a580:	2b00      	cmp	r3, #0
 800a582:	6063      	str	r3, [r4, #4]
 800a584:	da0f      	bge.n	800a5a6 <_getc_r+0x42>
 800a586:	4621      	mov	r1, r4
 800a588:	4628      	mov	r0, r5
 800a58a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a58e:	f000 bd6d 	b.w	800b06c <__srget_r>
 800a592:	4b08      	ldr	r3, [pc, #32]	; (800a5b4 <_getc_r+0x50>)
 800a594:	429c      	cmp	r4, r3
 800a596:	d101      	bne.n	800a59c <_getc_r+0x38>
 800a598:	68ac      	ldr	r4, [r5, #8]
 800a59a:	e7ef      	b.n	800a57c <_getc_r+0x18>
 800a59c:	4b06      	ldr	r3, [pc, #24]	; (800a5b8 <_getc_r+0x54>)
 800a59e:	429c      	cmp	r4, r3
 800a5a0:	bf08      	it	eq
 800a5a2:	68ec      	ldreq	r4, [r5, #12]
 800a5a4:	e7ea      	b.n	800a57c <_getc_r+0x18>
 800a5a6:	6823      	ldr	r3, [r4, #0]
 800a5a8:	1c5a      	adds	r2, r3, #1
 800a5aa:	6022      	str	r2, [r4, #0]
 800a5ac:	7818      	ldrb	r0, [r3, #0]
 800a5ae:	bd38      	pop	{r3, r4, r5, pc}
 800a5b0:	0800ca90 	.word	0x0800ca90
 800a5b4:	0800cab0 	.word	0x0800cab0
 800a5b8:	0800ca70 	.word	0x0800ca70

0800a5bc <_localeconv_r>:
 800a5bc:	4b04      	ldr	r3, [pc, #16]	; (800a5d0 <_localeconv_r+0x14>)
 800a5be:	681b      	ldr	r3, [r3, #0]
 800a5c0:	6a18      	ldr	r0, [r3, #32]
 800a5c2:	4b04      	ldr	r3, [pc, #16]	; (800a5d4 <_localeconv_r+0x18>)
 800a5c4:	2800      	cmp	r0, #0
 800a5c6:	bf08      	it	eq
 800a5c8:	4618      	moveq	r0, r3
 800a5ca:	30f0      	adds	r0, #240	; 0xf0
 800a5cc:	4770      	bx	lr
 800a5ce:	bf00      	nop
 800a5d0:	20000104 	.word	0x20000104
 800a5d4:	20000168 	.word	0x20000168

0800a5d8 <_lseek_r>:
 800a5d8:	b538      	push	{r3, r4, r5, lr}
 800a5da:	4c07      	ldr	r4, [pc, #28]	; (800a5f8 <_lseek_r+0x20>)
 800a5dc:	4605      	mov	r5, r0
 800a5de:	4608      	mov	r0, r1
 800a5e0:	4611      	mov	r1, r2
 800a5e2:	2200      	movs	r2, #0
 800a5e4:	6022      	str	r2, [r4, #0]
 800a5e6:	461a      	mov	r2, r3
 800a5e8:	f7f8 fe75 	bl	80032d6 <_lseek>
 800a5ec:	1c43      	adds	r3, r0, #1
 800a5ee:	d102      	bne.n	800a5f6 <_lseek_r+0x1e>
 800a5f0:	6823      	ldr	r3, [r4, #0]
 800a5f2:	b103      	cbz	r3, 800a5f6 <_lseek_r+0x1e>
 800a5f4:	602b      	str	r3, [r5, #0]
 800a5f6:	bd38      	pop	{r3, r4, r5, pc}
 800a5f8:	20000bdc 	.word	0x20000bdc

0800a5fc <__swhatbuf_r>:
 800a5fc:	b570      	push	{r4, r5, r6, lr}
 800a5fe:	460e      	mov	r6, r1
 800a600:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a604:	2900      	cmp	r1, #0
 800a606:	b096      	sub	sp, #88	; 0x58
 800a608:	4614      	mov	r4, r2
 800a60a:	461d      	mov	r5, r3
 800a60c:	da07      	bge.n	800a61e <__swhatbuf_r+0x22>
 800a60e:	2300      	movs	r3, #0
 800a610:	602b      	str	r3, [r5, #0]
 800a612:	89b3      	ldrh	r3, [r6, #12]
 800a614:	061a      	lsls	r2, r3, #24
 800a616:	d410      	bmi.n	800a63a <__swhatbuf_r+0x3e>
 800a618:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a61c:	e00e      	b.n	800a63c <__swhatbuf_r+0x40>
 800a61e:	466a      	mov	r2, sp
 800a620:	f000 fd50 	bl	800b0c4 <_fstat_r>
 800a624:	2800      	cmp	r0, #0
 800a626:	dbf2      	blt.n	800a60e <__swhatbuf_r+0x12>
 800a628:	9a01      	ldr	r2, [sp, #4]
 800a62a:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800a62e:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800a632:	425a      	negs	r2, r3
 800a634:	415a      	adcs	r2, r3
 800a636:	602a      	str	r2, [r5, #0]
 800a638:	e7ee      	b.n	800a618 <__swhatbuf_r+0x1c>
 800a63a:	2340      	movs	r3, #64	; 0x40
 800a63c:	2000      	movs	r0, #0
 800a63e:	6023      	str	r3, [r4, #0]
 800a640:	b016      	add	sp, #88	; 0x58
 800a642:	bd70      	pop	{r4, r5, r6, pc}

0800a644 <__smakebuf_r>:
 800a644:	898b      	ldrh	r3, [r1, #12]
 800a646:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800a648:	079d      	lsls	r5, r3, #30
 800a64a:	4606      	mov	r6, r0
 800a64c:	460c      	mov	r4, r1
 800a64e:	d507      	bpl.n	800a660 <__smakebuf_r+0x1c>
 800a650:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800a654:	6023      	str	r3, [r4, #0]
 800a656:	6123      	str	r3, [r4, #16]
 800a658:	2301      	movs	r3, #1
 800a65a:	6163      	str	r3, [r4, #20]
 800a65c:	b002      	add	sp, #8
 800a65e:	bd70      	pop	{r4, r5, r6, pc}
 800a660:	ab01      	add	r3, sp, #4
 800a662:	466a      	mov	r2, sp
 800a664:	f7ff ffca 	bl	800a5fc <__swhatbuf_r>
 800a668:	9900      	ldr	r1, [sp, #0]
 800a66a:	4605      	mov	r5, r0
 800a66c:	4630      	mov	r0, r6
 800a66e:	f7fe f9f7 	bl	8008a60 <_malloc_r>
 800a672:	b948      	cbnz	r0, 800a688 <__smakebuf_r+0x44>
 800a674:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a678:	059a      	lsls	r2, r3, #22
 800a67a:	d4ef      	bmi.n	800a65c <__smakebuf_r+0x18>
 800a67c:	f023 0303 	bic.w	r3, r3, #3
 800a680:	f043 0302 	orr.w	r3, r3, #2
 800a684:	81a3      	strh	r3, [r4, #12]
 800a686:	e7e3      	b.n	800a650 <__smakebuf_r+0xc>
 800a688:	4b0d      	ldr	r3, [pc, #52]	; (800a6c0 <__smakebuf_r+0x7c>)
 800a68a:	62b3      	str	r3, [r6, #40]	; 0x28
 800a68c:	89a3      	ldrh	r3, [r4, #12]
 800a68e:	6020      	str	r0, [r4, #0]
 800a690:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a694:	81a3      	strh	r3, [r4, #12]
 800a696:	9b00      	ldr	r3, [sp, #0]
 800a698:	6163      	str	r3, [r4, #20]
 800a69a:	9b01      	ldr	r3, [sp, #4]
 800a69c:	6120      	str	r0, [r4, #16]
 800a69e:	b15b      	cbz	r3, 800a6b8 <__smakebuf_r+0x74>
 800a6a0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a6a4:	4630      	mov	r0, r6
 800a6a6:	f000 fd1f 	bl	800b0e8 <_isatty_r>
 800a6aa:	b128      	cbz	r0, 800a6b8 <__smakebuf_r+0x74>
 800a6ac:	89a3      	ldrh	r3, [r4, #12]
 800a6ae:	f023 0303 	bic.w	r3, r3, #3
 800a6b2:	f043 0301 	orr.w	r3, r3, #1
 800a6b6:	81a3      	strh	r3, [r4, #12]
 800a6b8:	89a3      	ldrh	r3, [r4, #12]
 800a6ba:	431d      	orrs	r5, r3
 800a6bc:	81a5      	strh	r5, [r4, #12]
 800a6be:	e7cd      	b.n	800a65c <__smakebuf_r+0x18>
 800a6c0:	08008861 	.word	0x08008861

0800a6c4 <malloc>:
 800a6c4:	4b02      	ldr	r3, [pc, #8]	; (800a6d0 <malloc+0xc>)
 800a6c6:	4601      	mov	r1, r0
 800a6c8:	6818      	ldr	r0, [r3, #0]
 800a6ca:	f7fe b9c9 	b.w	8008a60 <_malloc_r>
 800a6ce:	bf00      	nop
 800a6d0:	20000104 	.word	0x20000104

0800a6d4 <memcpy>:
 800a6d4:	b510      	push	{r4, lr}
 800a6d6:	1e43      	subs	r3, r0, #1
 800a6d8:	440a      	add	r2, r1
 800a6da:	4291      	cmp	r1, r2
 800a6dc:	d100      	bne.n	800a6e0 <memcpy+0xc>
 800a6de:	bd10      	pop	{r4, pc}
 800a6e0:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a6e4:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a6e8:	e7f7      	b.n	800a6da <memcpy+0x6>

0800a6ea <__malloc_lock>:
 800a6ea:	4770      	bx	lr

0800a6ec <__malloc_unlock>:
 800a6ec:	4770      	bx	lr

0800a6ee <_Balloc>:
 800a6ee:	b570      	push	{r4, r5, r6, lr}
 800a6f0:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800a6f2:	4604      	mov	r4, r0
 800a6f4:	460e      	mov	r6, r1
 800a6f6:	b93d      	cbnz	r5, 800a708 <_Balloc+0x1a>
 800a6f8:	2010      	movs	r0, #16
 800a6fa:	f7ff ffe3 	bl	800a6c4 <malloc>
 800a6fe:	6260      	str	r0, [r4, #36]	; 0x24
 800a700:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800a704:	6005      	str	r5, [r0, #0]
 800a706:	60c5      	str	r5, [r0, #12]
 800a708:	6a65      	ldr	r5, [r4, #36]	; 0x24
 800a70a:	68eb      	ldr	r3, [r5, #12]
 800a70c:	b183      	cbz	r3, 800a730 <_Balloc+0x42>
 800a70e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a710:	68db      	ldr	r3, [r3, #12]
 800a712:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 800a716:	b9b8      	cbnz	r0, 800a748 <_Balloc+0x5a>
 800a718:	2101      	movs	r1, #1
 800a71a:	fa01 f506 	lsl.w	r5, r1, r6
 800a71e:	1d6a      	adds	r2, r5, #5
 800a720:	0092      	lsls	r2, r2, #2
 800a722:	4620      	mov	r0, r4
 800a724:	f000 fabe 	bl	800aca4 <_calloc_r>
 800a728:	b160      	cbz	r0, 800a744 <_Balloc+0x56>
 800a72a:	e9c0 6501 	strd	r6, r5, [r0, #4]
 800a72e:	e00e      	b.n	800a74e <_Balloc+0x60>
 800a730:	2221      	movs	r2, #33	; 0x21
 800a732:	2104      	movs	r1, #4
 800a734:	4620      	mov	r0, r4
 800a736:	f000 fab5 	bl	800aca4 <_calloc_r>
 800a73a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a73c:	60e8      	str	r0, [r5, #12]
 800a73e:	68db      	ldr	r3, [r3, #12]
 800a740:	2b00      	cmp	r3, #0
 800a742:	d1e4      	bne.n	800a70e <_Balloc+0x20>
 800a744:	2000      	movs	r0, #0
 800a746:	bd70      	pop	{r4, r5, r6, pc}
 800a748:	6802      	ldr	r2, [r0, #0]
 800a74a:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 800a74e:	2300      	movs	r3, #0
 800a750:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800a754:	e7f7      	b.n	800a746 <_Balloc+0x58>

0800a756 <_Bfree>:
 800a756:	b570      	push	{r4, r5, r6, lr}
 800a758:	6a44      	ldr	r4, [r0, #36]	; 0x24
 800a75a:	4606      	mov	r6, r0
 800a75c:	460d      	mov	r5, r1
 800a75e:	b93c      	cbnz	r4, 800a770 <_Bfree+0x1a>
 800a760:	2010      	movs	r0, #16
 800a762:	f7ff ffaf 	bl	800a6c4 <malloc>
 800a766:	6270      	str	r0, [r6, #36]	; 0x24
 800a768:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800a76c:	6004      	str	r4, [r0, #0]
 800a76e:	60c4      	str	r4, [r0, #12]
 800a770:	b13d      	cbz	r5, 800a782 <_Bfree+0x2c>
 800a772:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800a774:	686a      	ldr	r2, [r5, #4]
 800a776:	68db      	ldr	r3, [r3, #12]
 800a778:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800a77c:	6029      	str	r1, [r5, #0]
 800a77e:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 800a782:	bd70      	pop	{r4, r5, r6, pc}

0800a784 <__multadd>:
 800a784:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a788:	690d      	ldr	r5, [r1, #16]
 800a78a:	461f      	mov	r7, r3
 800a78c:	4606      	mov	r6, r0
 800a78e:	460c      	mov	r4, r1
 800a790:	f101 0c14 	add.w	ip, r1, #20
 800a794:	2300      	movs	r3, #0
 800a796:	f8dc 0000 	ldr.w	r0, [ip]
 800a79a:	b281      	uxth	r1, r0
 800a79c:	fb02 7101 	mla	r1, r2, r1, r7
 800a7a0:	0c0f      	lsrs	r7, r1, #16
 800a7a2:	0c00      	lsrs	r0, r0, #16
 800a7a4:	fb02 7000 	mla	r0, r2, r0, r7
 800a7a8:	b289      	uxth	r1, r1
 800a7aa:	3301      	adds	r3, #1
 800a7ac:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 800a7b0:	429d      	cmp	r5, r3
 800a7b2:	ea4f 4710 	mov.w	r7, r0, lsr #16
 800a7b6:	f84c 1b04 	str.w	r1, [ip], #4
 800a7ba:	dcec      	bgt.n	800a796 <__multadd+0x12>
 800a7bc:	b1d7      	cbz	r7, 800a7f4 <__multadd+0x70>
 800a7be:	68a3      	ldr	r3, [r4, #8]
 800a7c0:	42ab      	cmp	r3, r5
 800a7c2:	dc12      	bgt.n	800a7ea <__multadd+0x66>
 800a7c4:	6861      	ldr	r1, [r4, #4]
 800a7c6:	4630      	mov	r0, r6
 800a7c8:	3101      	adds	r1, #1
 800a7ca:	f7ff ff90 	bl	800a6ee <_Balloc>
 800a7ce:	6922      	ldr	r2, [r4, #16]
 800a7d0:	3202      	adds	r2, #2
 800a7d2:	f104 010c 	add.w	r1, r4, #12
 800a7d6:	4680      	mov	r8, r0
 800a7d8:	0092      	lsls	r2, r2, #2
 800a7da:	300c      	adds	r0, #12
 800a7dc:	f7ff ff7a 	bl	800a6d4 <memcpy>
 800a7e0:	4621      	mov	r1, r4
 800a7e2:	4630      	mov	r0, r6
 800a7e4:	f7ff ffb7 	bl	800a756 <_Bfree>
 800a7e8:	4644      	mov	r4, r8
 800a7ea:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800a7ee:	3501      	adds	r5, #1
 800a7f0:	615f      	str	r7, [r3, #20]
 800a7f2:	6125      	str	r5, [r4, #16]
 800a7f4:	4620      	mov	r0, r4
 800a7f6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800a7fa <__hi0bits>:
 800a7fa:	0c02      	lsrs	r2, r0, #16
 800a7fc:	0412      	lsls	r2, r2, #16
 800a7fe:	4603      	mov	r3, r0
 800a800:	b9b2      	cbnz	r2, 800a830 <__hi0bits+0x36>
 800a802:	0403      	lsls	r3, r0, #16
 800a804:	2010      	movs	r0, #16
 800a806:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 800a80a:	bf04      	itt	eq
 800a80c:	021b      	lsleq	r3, r3, #8
 800a80e:	3008      	addeq	r0, #8
 800a810:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 800a814:	bf04      	itt	eq
 800a816:	011b      	lsleq	r3, r3, #4
 800a818:	3004      	addeq	r0, #4
 800a81a:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 800a81e:	bf04      	itt	eq
 800a820:	009b      	lsleq	r3, r3, #2
 800a822:	3002      	addeq	r0, #2
 800a824:	2b00      	cmp	r3, #0
 800a826:	db06      	blt.n	800a836 <__hi0bits+0x3c>
 800a828:	005b      	lsls	r3, r3, #1
 800a82a:	d503      	bpl.n	800a834 <__hi0bits+0x3a>
 800a82c:	3001      	adds	r0, #1
 800a82e:	4770      	bx	lr
 800a830:	2000      	movs	r0, #0
 800a832:	e7e8      	b.n	800a806 <__hi0bits+0xc>
 800a834:	2020      	movs	r0, #32
 800a836:	4770      	bx	lr

0800a838 <__lo0bits>:
 800a838:	6803      	ldr	r3, [r0, #0]
 800a83a:	f013 0207 	ands.w	r2, r3, #7
 800a83e:	4601      	mov	r1, r0
 800a840:	d00b      	beq.n	800a85a <__lo0bits+0x22>
 800a842:	07da      	lsls	r2, r3, #31
 800a844:	d423      	bmi.n	800a88e <__lo0bits+0x56>
 800a846:	0798      	lsls	r0, r3, #30
 800a848:	bf49      	itett	mi
 800a84a:	085b      	lsrmi	r3, r3, #1
 800a84c:	089b      	lsrpl	r3, r3, #2
 800a84e:	2001      	movmi	r0, #1
 800a850:	600b      	strmi	r3, [r1, #0]
 800a852:	bf5c      	itt	pl
 800a854:	600b      	strpl	r3, [r1, #0]
 800a856:	2002      	movpl	r0, #2
 800a858:	4770      	bx	lr
 800a85a:	b298      	uxth	r0, r3
 800a85c:	b9a8      	cbnz	r0, 800a88a <__lo0bits+0x52>
 800a85e:	0c1b      	lsrs	r3, r3, #16
 800a860:	2010      	movs	r0, #16
 800a862:	f013 0fff 	tst.w	r3, #255	; 0xff
 800a866:	bf04      	itt	eq
 800a868:	0a1b      	lsreq	r3, r3, #8
 800a86a:	3008      	addeq	r0, #8
 800a86c:	071a      	lsls	r2, r3, #28
 800a86e:	bf04      	itt	eq
 800a870:	091b      	lsreq	r3, r3, #4
 800a872:	3004      	addeq	r0, #4
 800a874:	079a      	lsls	r2, r3, #30
 800a876:	bf04      	itt	eq
 800a878:	089b      	lsreq	r3, r3, #2
 800a87a:	3002      	addeq	r0, #2
 800a87c:	07da      	lsls	r2, r3, #31
 800a87e:	d402      	bmi.n	800a886 <__lo0bits+0x4e>
 800a880:	085b      	lsrs	r3, r3, #1
 800a882:	d006      	beq.n	800a892 <__lo0bits+0x5a>
 800a884:	3001      	adds	r0, #1
 800a886:	600b      	str	r3, [r1, #0]
 800a888:	4770      	bx	lr
 800a88a:	4610      	mov	r0, r2
 800a88c:	e7e9      	b.n	800a862 <__lo0bits+0x2a>
 800a88e:	2000      	movs	r0, #0
 800a890:	4770      	bx	lr
 800a892:	2020      	movs	r0, #32
 800a894:	4770      	bx	lr

0800a896 <__i2b>:
 800a896:	b510      	push	{r4, lr}
 800a898:	460c      	mov	r4, r1
 800a89a:	2101      	movs	r1, #1
 800a89c:	f7ff ff27 	bl	800a6ee <_Balloc>
 800a8a0:	2201      	movs	r2, #1
 800a8a2:	6144      	str	r4, [r0, #20]
 800a8a4:	6102      	str	r2, [r0, #16]
 800a8a6:	bd10      	pop	{r4, pc}

0800a8a8 <__multiply>:
 800a8a8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a8ac:	4614      	mov	r4, r2
 800a8ae:	690a      	ldr	r2, [r1, #16]
 800a8b0:	6923      	ldr	r3, [r4, #16]
 800a8b2:	429a      	cmp	r2, r3
 800a8b4:	bfb8      	it	lt
 800a8b6:	460b      	movlt	r3, r1
 800a8b8:	4688      	mov	r8, r1
 800a8ba:	bfbc      	itt	lt
 800a8bc:	46a0      	movlt	r8, r4
 800a8be:	461c      	movlt	r4, r3
 800a8c0:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800a8c4:	f8d4 9010 	ldr.w	r9, [r4, #16]
 800a8c8:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800a8cc:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800a8d0:	eb07 0609 	add.w	r6, r7, r9
 800a8d4:	42b3      	cmp	r3, r6
 800a8d6:	bfb8      	it	lt
 800a8d8:	3101      	addlt	r1, #1
 800a8da:	f7ff ff08 	bl	800a6ee <_Balloc>
 800a8de:	f100 0514 	add.w	r5, r0, #20
 800a8e2:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 800a8e6:	462b      	mov	r3, r5
 800a8e8:	2200      	movs	r2, #0
 800a8ea:	4573      	cmp	r3, lr
 800a8ec:	d316      	bcc.n	800a91c <__multiply+0x74>
 800a8ee:	f104 0214 	add.w	r2, r4, #20
 800a8f2:	f108 0114 	add.w	r1, r8, #20
 800a8f6:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 800a8fa:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 800a8fe:	9300      	str	r3, [sp, #0]
 800a900:	9b00      	ldr	r3, [sp, #0]
 800a902:	9201      	str	r2, [sp, #4]
 800a904:	4293      	cmp	r3, r2
 800a906:	d80c      	bhi.n	800a922 <__multiply+0x7a>
 800a908:	2e00      	cmp	r6, #0
 800a90a:	dd03      	ble.n	800a914 <__multiply+0x6c>
 800a90c:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 800a910:	2b00      	cmp	r3, #0
 800a912:	d05d      	beq.n	800a9d0 <__multiply+0x128>
 800a914:	6106      	str	r6, [r0, #16]
 800a916:	b003      	add	sp, #12
 800a918:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a91c:	f843 2b04 	str.w	r2, [r3], #4
 800a920:	e7e3      	b.n	800a8ea <__multiply+0x42>
 800a922:	f8b2 b000 	ldrh.w	fp, [r2]
 800a926:	f1bb 0f00 	cmp.w	fp, #0
 800a92a:	d023      	beq.n	800a974 <__multiply+0xcc>
 800a92c:	4689      	mov	r9, r1
 800a92e:	46ac      	mov	ip, r5
 800a930:	f04f 0800 	mov.w	r8, #0
 800a934:	f859 4b04 	ldr.w	r4, [r9], #4
 800a938:	f8dc a000 	ldr.w	sl, [ip]
 800a93c:	b2a3      	uxth	r3, r4
 800a93e:	fa1f fa8a 	uxth.w	sl, sl
 800a942:	fb0b a303 	mla	r3, fp, r3, sl
 800a946:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 800a94a:	f8dc 4000 	ldr.w	r4, [ip]
 800a94e:	4443      	add	r3, r8
 800a950:	ea4f 4814 	mov.w	r8, r4, lsr #16
 800a954:	fb0b 840a 	mla	r4, fp, sl, r8
 800a958:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 800a95c:	46e2      	mov	sl, ip
 800a95e:	b29b      	uxth	r3, r3
 800a960:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800a964:	454f      	cmp	r7, r9
 800a966:	ea4f 4814 	mov.w	r8, r4, lsr #16
 800a96a:	f84a 3b04 	str.w	r3, [sl], #4
 800a96e:	d82b      	bhi.n	800a9c8 <__multiply+0x120>
 800a970:	f8cc 8004 	str.w	r8, [ip, #4]
 800a974:	9b01      	ldr	r3, [sp, #4]
 800a976:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 800a97a:	3204      	adds	r2, #4
 800a97c:	f1ba 0f00 	cmp.w	sl, #0
 800a980:	d020      	beq.n	800a9c4 <__multiply+0x11c>
 800a982:	682b      	ldr	r3, [r5, #0]
 800a984:	4689      	mov	r9, r1
 800a986:	46a8      	mov	r8, r5
 800a988:	f04f 0b00 	mov.w	fp, #0
 800a98c:	f8b9 c000 	ldrh.w	ip, [r9]
 800a990:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 800a994:	fb0a 440c 	mla	r4, sl, ip, r4
 800a998:	445c      	add	r4, fp
 800a99a:	46c4      	mov	ip, r8
 800a99c:	b29b      	uxth	r3, r3
 800a99e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800a9a2:	f84c 3b04 	str.w	r3, [ip], #4
 800a9a6:	f859 3b04 	ldr.w	r3, [r9], #4
 800a9aa:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 800a9ae:	0c1b      	lsrs	r3, r3, #16
 800a9b0:	fb0a b303 	mla	r3, sl, r3, fp
 800a9b4:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 800a9b8:	454f      	cmp	r7, r9
 800a9ba:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 800a9be:	d805      	bhi.n	800a9cc <__multiply+0x124>
 800a9c0:	f8c8 3004 	str.w	r3, [r8, #4]
 800a9c4:	3504      	adds	r5, #4
 800a9c6:	e79b      	b.n	800a900 <__multiply+0x58>
 800a9c8:	46d4      	mov	ip, sl
 800a9ca:	e7b3      	b.n	800a934 <__multiply+0x8c>
 800a9cc:	46e0      	mov	r8, ip
 800a9ce:	e7dd      	b.n	800a98c <__multiply+0xe4>
 800a9d0:	3e01      	subs	r6, #1
 800a9d2:	e799      	b.n	800a908 <__multiply+0x60>

0800a9d4 <__pow5mult>:
 800a9d4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a9d8:	4615      	mov	r5, r2
 800a9da:	f012 0203 	ands.w	r2, r2, #3
 800a9de:	4606      	mov	r6, r0
 800a9e0:	460f      	mov	r7, r1
 800a9e2:	d007      	beq.n	800a9f4 <__pow5mult+0x20>
 800a9e4:	3a01      	subs	r2, #1
 800a9e6:	4c21      	ldr	r4, [pc, #132]	; (800aa6c <__pow5mult+0x98>)
 800a9e8:	2300      	movs	r3, #0
 800a9ea:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800a9ee:	f7ff fec9 	bl	800a784 <__multadd>
 800a9f2:	4607      	mov	r7, r0
 800a9f4:	10ad      	asrs	r5, r5, #2
 800a9f6:	d035      	beq.n	800aa64 <__pow5mult+0x90>
 800a9f8:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800a9fa:	b93c      	cbnz	r4, 800aa0c <__pow5mult+0x38>
 800a9fc:	2010      	movs	r0, #16
 800a9fe:	f7ff fe61 	bl	800a6c4 <malloc>
 800aa02:	6270      	str	r0, [r6, #36]	; 0x24
 800aa04:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800aa08:	6004      	str	r4, [r0, #0]
 800aa0a:	60c4      	str	r4, [r0, #12]
 800aa0c:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800aa10:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800aa14:	b94c      	cbnz	r4, 800aa2a <__pow5mult+0x56>
 800aa16:	f240 2171 	movw	r1, #625	; 0x271
 800aa1a:	4630      	mov	r0, r6
 800aa1c:	f7ff ff3b 	bl	800a896 <__i2b>
 800aa20:	2300      	movs	r3, #0
 800aa22:	f8c8 0008 	str.w	r0, [r8, #8]
 800aa26:	4604      	mov	r4, r0
 800aa28:	6003      	str	r3, [r0, #0]
 800aa2a:	f04f 0800 	mov.w	r8, #0
 800aa2e:	07eb      	lsls	r3, r5, #31
 800aa30:	d50a      	bpl.n	800aa48 <__pow5mult+0x74>
 800aa32:	4639      	mov	r1, r7
 800aa34:	4622      	mov	r2, r4
 800aa36:	4630      	mov	r0, r6
 800aa38:	f7ff ff36 	bl	800a8a8 <__multiply>
 800aa3c:	4639      	mov	r1, r7
 800aa3e:	4681      	mov	r9, r0
 800aa40:	4630      	mov	r0, r6
 800aa42:	f7ff fe88 	bl	800a756 <_Bfree>
 800aa46:	464f      	mov	r7, r9
 800aa48:	106d      	asrs	r5, r5, #1
 800aa4a:	d00b      	beq.n	800aa64 <__pow5mult+0x90>
 800aa4c:	6820      	ldr	r0, [r4, #0]
 800aa4e:	b938      	cbnz	r0, 800aa60 <__pow5mult+0x8c>
 800aa50:	4622      	mov	r2, r4
 800aa52:	4621      	mov	r1, r4
 800aa54:	4630      	mov	r0, r6
 800aa56:	f7ff ff27 	bl	800a8a8 <__multiply>
 800aa5a:	6020      	str	r0, [r4, #0]
 800aa5c:	f8c0 8000 	str.w	r8, [r0]
 800aa60:	4604      	mov	r4, r0
 800aa62:	e7e4      	b.n	800aa2e <__pow5mult+0x5a>
 800aa64:	4638      	mov	r0, r7
 800aa66:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800aa6a:	bf00      	nop
 800aa6c:	0800cc08 	.word	0x0800cc08

0800aa70 <__lshift>:
 800aa70:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800aa74:	460c      	mov	r4, r1
 800aa76:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800aa7a:	6923      	ldr	r3, [r4, #16]
 800aa7c:	6849      	ldr	r1, [r1, #4]
 800aa7e:	eb0a 0903 	add.w	r9, sl, r3
 800aa82:	68a3      	ldr	r3, [r4, #8]
 800aa84:	4607      	mov	r7, r0
 800aa86:	4616      	mov	r6, r2
 800aa88:	f109 0501 	add.w	r5, r9, #1
 800aa8c:	42ab      	cmp	r3, r5
 800aa8e:	db32      	blt.n	800aaf6 <__lshift+0x86>
 800aa90:	4638      	mov	r0, r7
 800aa92:	f7ff fe2c 	bl	800a6ee <_Balloc>
 800aa96:	2300      	movs	r3, #0
 800aa98:	4680      	mov	r8, r0
 800aa9a:	f100 0114 	add.w	r1, r0, #20
 800aa9e:	461a      	mov	r2, r3
 800aaa0:	4553      	cmp	r3, sl
 800aaa2:	db2b      	blt.n	800aafc <__lshift+0x8c>
 800aaa4:	6920      	ldr	r0, [r4, #16]
 800aaa6:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800aaaa:	f104 0314 	add.w	r3, r4, #20
 800aaae:	f016 021f 	ands.w	r2, r6, #31
 800aab2:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800aab6:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800aaba:	d025      	beq.n	800ab08 <__lshift+0x98>
 800aabc:	f1c2 0e20 	rsb	lr, r2, #32
 800aac0:	2000      	movs	r0, #0
 800aac2:	681e      	ldr	r6, [r3, #0]
 800aac4:	468a      	mov	sl, r1
 800aac6:	4096      	lsls	r6, r2
 800aac8:	4330      	orrs	r0, r6
 800aaca:	f84a 0b04 	str.w	r0, [sl], #4
 800aace:	f853 0b04 	ldr.w	r0, [r3], #4
 800aad2:	459c      	cmp	ip, r3
 800aad4:	fa20 f00e 	lsr.w	r0, r0, lr
 800aad8:	d814      	bhi.n	800ab04 <__lshift+0x94>
 800aada:	6048      	str	r0, [r1, #4]
 800aadc:	b108      	cbz	r0, 800aae2 <__lshift+0x72>
 800aade:	f109 0502 	add.w	r5, r9, #2
 800aae2:	3d01      	subs	r5, #1
 800aae4:	4638      	mov	r0, r7
 800aae6:	f8c8 5010 	str.w	r5, [r8, #16]
 800aaea:	4621      	mov	r1, r4
 800aaec:	f7ff fe33 	bl	800a756 <_Bfree>
 800aaf0:	4640      	mov	r0, r8
 800aaf2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800aaf6:	3101      	adds	r1, #1
 800aaf8:	005b      	lsls	r3, r3, #1
 800aafa:	e7c7      	b.n	800aa8c <__lshift+0x1c>
 800aafc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 800ab00:	3301      	adds	r3, #1
 800ab02:	e7cd      	b.n	800aaa0 <__lshift+0x30>
 800ab04:	4651      	mov	r1, sl
 800ab06:	e7dc      	b.n	800aac2 <__lshift+0x52>
 800ab08:	3904      	subs	r1, #4
 800ab0a:	f853 2b04 	ldr.w	r2, [r3], #4
 800ab0e:	f841 2f04 	str.w	r2, [r1, #4]!
 800ab12:	459c      	cmp	ip, r3
 800ab14:	d8f9      	bhi.n	800ab0a <__lshift+0x9a>
 800ab16:	e7e4      	b.n	800aae2 <__lshift+0x72>

0800ab18 <__mcmp>:
 800ab18:	6903      	ldr	r3, [r0, #16]
 800ab1a:	690a      	ldr	r2, [r1, #16]
 800ab1c:	1a9b      	subs	r3, r3, r2
 800ab1e:	b530      	push	{r4, r5, lr}
 800ab20:	d10c      	bne.n	800ab3c <__mcmp+0x24>
 800ab22:	0092      	lsls	r2, r2, #2
 800ab24:	3014      	adds	r0, #20
 800ab26:	3114      	adds	r1, #20
 800ab28:	1884      	adds	r4, r0, r2
 800ab2a:	4411      	add	r1, r2
 800ab2c:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800ab30:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800ab34:	4295      	cmp	r5, r2
 800ab36:	d003      	beq.n	800ab40 <__mcmp+0x28>
 800ab38:	d305      	bcc.n	800ab46 <__mcmp+0x2e>
 800ab3a:	2301      	movs	r3, #1
 800ab3c:	4618      	mov	r0, r3
 800ab3e:	bd30      	pop	{r4, r5, pc}
 800ab40:	42a0      	cmp	r0, r4
 800ab42:	d3f3      	bcc.n	800ab2c <__mcmp+0x14>
 800ab44:	e7fa      	b.n	800ab3c <__mcmp+0x24>
 800ab46:	f04f 33ff 	mov.w	r3, #4294967295
 800ab4a:	e7f7      	b.n	800ab3c <__mcmp+0x24>

0800ab4c <__mdiff>:
 800ab4c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ab50:	460d      	mov	r5, r1
 800ab52:	4607      	mov	r7, r0
 800ab54:	4611      	mov	r1, r2
 800ab56:	4628      	mov	r0, r5
 800ab58:	4614      	mov	r4, r2
 800ab5a:	f7ff ffdd 	bl	800ab18 <__mcmp>
 800ab5e:	1e06      	subs	r6, r0, #0
 800ab60:	d108      	bne.n	800ab74 <__mdiff+0x28>
 800ab62:	4631      	mov	r1, r6
 800ab64:	4638      	mov	r0, r7
 800ab66:	f7ff fdc2 	bl	800a6ee <_Balloc>
 800ab6a:	2301      	movs	r3, #1
 800ab6c:	e9c0 3604 	strd	r3, r6, [r0, #16]
 800ab70:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ab74:	bfa4      	itt	ge
 800ab76:	4623      	movge	r3, r4
 800ab78:	462c      	movge	r4, r5
 800ab7a:	4638      	mov	r0, r7
 800ab7c:	6861      	ldr	r1, [r4, #4]
 800ab7e:	bfa6      	itte	ge
 800ab80:	461d      	movge	r5, r3
 800ab82:	2600      	movge	r6, #0
 800ab84:	2601      	movlt	r6, #1
 800ab86:	f7ff fdb2 	bl	800a6ee <_Balloc>
 800ab8a:	692b      	ldr	r3, [r5, #16]
 800ab8c:	60c6      	str	r6, [r0, #12]
 800ab8e:	6926      	ldr	r6, [r4, #16]
 800ab90:	f105 0914 	add.w	r9, r5, #20
 800ab94:	f104 0214 	add.w	r2, r4, #20
 800ab98:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 800ab9c:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 800aba0:	f100 0514 	add.w	r5, r0, #20
 800aba4:	f04f 0e00 	mov.w	lr, #0
 800aba8:	f852 ab04 	ldr.w	sl, [r2], #4
 800abac:	f859 4b04 	ldr.w	r4, [r9], #4
 800abb0:	fa1e f18a 	uxtah	r1, lr, sl
 800abb4:	b2a3      	uxth	r3, r4
 800abb6:	1ac9      	subs	r1, r1, r3
 800abb8:	0c23      	lsrs	r3, r4, #16
 800abba:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 800abbe:	eb03 4321 	add.w	r3, r3, r1, asr #16
 800abc2:	b289      	uxth	r1, r1
 800abc4:	ea4f 4e23 	mov.w	lr, r3, asr #16
 800abc8:	45c8      	cmp	r8, r9
 800abca:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800abce:	4694      	mov	ip, r2
 800abd0:	f845 3b04 	str.w	r3, [r5], #4
 800abd4:	d8e8      	bhi.n	800aba8 <__mdiff+0x5c>
 800abd6:	45bc      	cmp	ip, r7
 800abd8:	d304      	bcc.n	800abe4 <__mdiff+0x98>
 800abda:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 800abde:	b183      	cbz	r3, 800ac02 <__mdiff+0xb6>
 800abe0:	6106      	str	r6, [r0, #16]
 800abe2:	e7c5      	b.n	800ab70 <__mdiff+0x24>
 800abe4:	f85c 1b04 	ldr.w	r1, [ip], #4
 800abe8:	fa1e f381 	uxtah	r3, lr, r1
 800abec:	141a      	asrs	r2, r3, #16
 800abee:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800abf2:	b29b      	uxth	r3, r3
 800abf4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800abf8:	ea4f 4e22 	mov.w	lr, r2, asr #16
 800abfc:	f845 3b04 	str.w	r3, [r5], #4
 800ac00:	e7e9      	b.n	800abd6 <__mdiff+0x8a>
 800ac02:	3e01      	subs	r6, #1
 800ac04:	e7e9      	b.n	800abda <__mdiff+0x8e>

0800ac06 <__d2b>:
 800ac06:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800ac0a:	460e      	mov	r6, r1
 800ac0c:	2101      	movs	r1, #1
 800ac0e:	ec59 8b10 	vmov	r8, r9, d0
 800ac12:	4615      	mov	r5, r2
 800ac14:	f7ff fd6b 	bl	800a6ee <_Balloc>
 800ac18:	f3c9 540a 	ubfx	r4, r9, #20, #11
 800ac1c:	4607      	mov	r7, r0
 800ac1e:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800ac22:	bb34      	cbnz	r4, 800ac72 <__d2b+0x6c>
 800ac24:	9301      	str	r3, [sp, #4]
 800ac26:	f1b8 0300 	subs.w	r3, r8, #0
 800ac2a:	d027      	beq.n	800ac7c <__d2b+0x76>
 800ac2c:	a802      	add	r0, sp, #8
 800ac2e:	f840 3d08 	str.w	r3, [r0, #-8]!
 800ac32:	f7ff fe01 	bl	800a838 <__lo0bits>
 800ac36:	9900      	ldr	r1, [sp, #0]
 800ac38:	b1f0      	cbz	r0, 800ac78 <__d2b+0x72>
 800ac3a:	9a01      	ldr	r2, [sp, #4]
 800ac3c:	f1c0 0320 	rsb	r3, r0, #32
 800ac40:	fa02 f303 	lsl.w	r3, r2, r3
 800ac44:	430b      	orrs	r3, r1
 800ac46:	40c2      	lsrs	r2, r0
 800ac48:	617b      	str	r3, [r7, #20]
 800ac4a:	9201      	str	r2, [sp, #4]
 800ac4c:	9b01      	ldr	r3, [sp, #4]
 800ac4e:	61bb      	str	r3, [r7, #24]
 800ac50:	2b00      	cmp	r3, #0
 800ac52:	bf14      	ite	ne
 800ac54:	2102      	movne	r1, #2
 800ac56:	2101      	moveq	r1, #1
 800ac58:	6139      	str	r1, [r7, #16]
 800ac5a:	b1c4      	cbz	r4, 800ac8e <__d2b+0x88>
 800ac5c:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 800ac60:	4404      	add	r4, r0
 800ac62:	6034      	str	r4, [r6, #0]
 800ac64:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800ac68:	6028      	str	r0, [r5, #0]
 800ac6a:	4638      	mov	r0, r7
 800ac6c:	b003      	add	sp, #12
 800ac6e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ac72:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800ac76:	e7d5      	b.n	800ac24 <__d2b+0x1e>
 800ac78:	6179      	str	r1, [r7, #20]
 800ac7a:	e7e7      	b.n	800ac4c <__d2b+0x46>
 800ac7c:	a801      	add	r0, sp, #4
 800ac7e:	f7ff fddb 	bl	800a838 <__lo0bits>
 800ac82:	9b01      	ldr	r3, [sp, #4]
 800ac84:	617b      	str	r3, [r7, #20]
 800ac86:	2101      	movs	r1, #1
 800ac88:	6139      	str	r1, [r7, #16]
 800ac8a:	3020      	adds	r0, #32
 800ac8c:	e7e5      	b.n	800ac5a <__d2b+0x54>
 800ac8e:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 800ac92:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800ac96:	6030      	str	r0, [r6, #0]
 800ac98:	6918      	ldr	r0, [r3, #16]
 800ac9a:	f7ff fdae 	bl	800a7fa <__hi0bits>
 800ac9e:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 800aca2:	e7e1      	b.n	800ac68 <__d2b+0x62>

0800aca4 <_calloc_r>:
 800aca4:	b538      	push	{r3, r4, r5, lr}
 800aca6:	fb02 f401 	mul.w	r4, r2, r1
 800acaa:	4621      	mov	r1, r4
 800acac:	f7fd fed8 	bl	8008a60 <_malloc_r>
 800acb0:	4605      	mov	r5, r0
 800acb2:	b118      	cbz	r0, 800acbc <_calloc_r+0x18>
 800acb4:	4622      	mov	r2, r4
 800acb6:	2100      	movs	r1, #0
 800acb8:	f7fd feca 	bl	8008a50 <memset>
 800acbc:	4628      	mov	r0, r5
 800acbe:	bd38      	pop	{r3, r4, r5, pc}

0800acc0 <_free_r>:
 800acc0:	b538      	push	{r3, r4, r5, lr}
 800acc2:	4605      	mov	r5, r0
 800acc4:	2900      	cmp	r1, #0
 800acc6:	d045      	beq.n	800ad54 <_free_r+0x94>
 800acc8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800accc:	1f0c      	subs	r4, r1, #4
 800acce:	2b00      	cmp	r3, #0
 800acd0:	bfb8      	it	lt
 800acd2:	18e4      	addlt	r4, r4, r3
 800acd4:	f7ff fd09 	bl	800a6ea <__malloc_lock>
 800acd8:	4a1f      	ldr	r2, [pc, #124]	; (800ad58 <_free_r+0x98>)
 800acda:	6813      	ldr	r3, [r2, #0]
 800acdc:	4610      	mov	r0, r2
 800acde:	b933      	cbnz	r3, 800acee <_free_r+0x2e>
 800ace0:	6063      	str	r3, [r4, #4]
 800ace2:	6014      	str	r4, [r2, #0]
 800ace4:	4628      	mov	r0, r5
 800ace6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800acea:	f7ff bcff 	b.w	800a6ec <__malloc_unlock>
 800acee:	42a3      	cmp	r3, r4
 800acf0:	d90c      	bls.n	800ad0c <_free_r+0x4c>
 800acf2:	6821      	ldr	r1, [r4, #0]
 800acf4:	1862      	adds	r2, r4, r1
 800acf6:	4293      	cmp	r3, r2
 800acf8:	bf04      	itt	eq
 800acfa:	681a      	ldreq	r2, [r3, #0]
 800acfc:	685b      	ldreq	r3, [r3, #4]
 800acfe:	6063      	str	r3, [r4, #4]
 800ad00:	bf04      	itt	eq
 800ad02:	1852      	addeq	r2, r2, r1
 800ad04:	6022      	streq	r2, [r4, #0]
 800ad06:	6004      	str	r4, [r0, #0]
 800ad08:	e7ec      	b.n	800ace4 <_free_r+0x24>
 800ad0a:	4613      	mov	r3, r2
 800ad0c:	685a      	ldr	r2, [r3, #4]
 800ad0e:	b10a      	cbz	r2, 800ad14 <_free_r+0x54>
 800ad10:	42a2      	cmp	r2, r4
 800ad12:	d9fa      	bls.n	800ad0a <_free_r+0x4a>
 800ad14:	6819      	ldr	r1, [r3, #0]
 800ad16:	1858      	adds	r0, r3, r1
 800ad18:	42a0      	cmp	r0, r4
 800ad1a:	d10b      	bne.n	800ad34 <_free_r+0x74>
 800ad1c:	6820      	ldr	r0, [r4, #0]
 800ad1e:	4401      	add	r1, r0
 800ad20:	1858      	adds	r0, r3, r1
 800ad22:	4282      	cmp	r2, r0
 800ad24:	6019      	str	r1, [r3, #0]
 800ad26:	d1dd      	bne.n	800ace4 <_free_r+0x24>
 800ad28:	6810      	ldr	r0, [r2, #0]
 800ad2a:	6852      	ldr	r2, [r2, #4]
 800ad2c:	605a      	str	r2, [r3, #4]
 800ad2e:	4401      	add	r1, r0
 800ad30:	6019      	str	r1, [r3, #0]
 800ad32:	e7d7      	b.n	800ace4 <_free_r+0x24>
 800ad34:	d902      	bls.n	800ad3c <_free_r+0x7c>
 800ad36:	230c      	movs	r3, #12
 800ad38:	602b      	str	r3, [r5, #0]
 800ad3a:	e7d3      	b.n	800ace4 <_free_r+0x24>
 800ad3c:	6820      	ldr	r0, [r4, #0]
 800ad3e:	1821      	adds	r1, r4, r0
 800ad40:	428a      	cmp	r2, r1
 800ad42:	bf04      	itt	eq
 800ad44:	6811      	ldreq	r1, [r2, #0]
 800ad46:	6852      	ldreq	r2, [r2, #4]
 800ad48:	6062      	str	r2, [r4, #4]
 800ad4a:	bf04      	itt	eq
 800ad4c:	1809      	addeq	r1, r1, r0
 800ad4e:	6021      	streq	r1, [r4, #0]
 800ad50:	605c      	str	r4, [r3, #4]
 800ad52:	e7c7      	b.n	800ace4 <_free_r+0x24>
 800ad54:	bd38      	pop	{r3, r4, r5, pc}
 800ad56:	bf00      	nop
 800ad58:	20000784 	.word	0x20000784

0800ad5c <__sfputc_r>:
 800ad5c:	6893      	ldr	r3, [r2, #8]
 800ad5e:	3b01      	subs	r3, #1
 800ad60:	2b00      	cmp	r3, #0
 800ad62:	b410      	push	{r4}
 800ad64:	6093      	str	r3, [r2, #8]
 800ad66:	da08      	bge.n	800ad7a <__sfputc_r+0x1e>
 800ad68:	6994      	ldr	r4, [r2, #24]
 800ad6a:	42a3      	cmp	r3, r4
 800ad6c:	db01      	blt.n	800ad72 <__sfputc_r+0x16>
 800ad6e:	290a      	cmp	r1, #10
 800ad70:	d103      	bne.n	800ad7a <__sfputc_r+0x1e>
 800ad72:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ad76:	f7fe bc0d 	b.w	8009594 <__swbuf_r>
 800ad7a:	6813      	ldr	r3, [r2, #0]
 800ad7c:	1c58      	adds	r0, r3, #1
 800ad7e:	6010      	str	r0, [r2, #0]
 800ad80:	7019      	strb	r1, [r3, #0]
 800ad82:	4608      	mov	r0, r1
 800ad84:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ad88:	4770      	bx	lr

0800ad8a <__sfputs_r>:
 800ad8a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ad8c:	4606      	mov	r6, r0
 800ad8e:	460f      	mov	r7, r1
 800ad90:	4614      	mov	r4, r2
 800ad92:	18d5      	adds	r5, r2, r3
 800ad94:	42ac      	cmp	r4, r5
 800ad96:	d101      	bne.n	800ad9c <__sfputs_r+0x12>
 800ad98:	2000      	movs	r0, #0
 800ad9a:	e007      	b.n	800adac <__sfputs_r+0x22>
 800ad9c:	463a      	mov	r2, r7
 800ad9e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ada2:	4630      	mov	r0, r6
 800ada4:	f7ff ffda 	bl	800ad5c <__sfputc_r>
 800ada8:	1c43      	adds	r3, r0, #1
 800adaa:	d1f3      	bne.n	800ad94 <__sfputs_r+0xa>
 800adac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800adb0 <_vfiprintf_r>:
 800adb0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800adb4:	460c      	mov	r4, r1
 800adb6:	b09d      	sub	sp, #116	; 0x74
 800adb8:	4617      	mov	r7, r2
 800adba:	461d      	mov	r5, r3
 800adbc:	4606      	mov	r6, r0
 800adbe:	b118      	cbz	r0, 800adc8 <_vfiprintf_r+0x18>
 800adc0:	6983      	ldr	r3, [r0, #24]
 800adc2:	b90b      	cbnz	r3, 800adc8 <_vfiprintf_r+0x18>
 800adc4:	f7fd fd68 	bl	8008898 <__sinit>
 800adc8:	4b7c      	ldr	r3, [pc, #496]	; (800afbc <_vfiprintf_r+0x20c>)
 800adca:	429c      	cmp	r4, r3
 800adcc:	d158      	bne.n	800ae80 <_vfiprintf_r+0xd0>
 800adce:	6874      	ldr	r4, [r6, #4]
 800add0:	89a3      	ldrh	r3, [r4, #12]
 800add2:	0718      	lsls	r0, r3, #28
 800add4:	d55e      	bpl.n	800ae94 <_vfiprintf_r+0xe4>
 800add6:	6923      	ldr	r3, [r4, #16]
 800add8:	2b00      	cmp	r3, #0
 800adda:	d05b      	beq.n	800ae94 <_vfiprintf_r+0xe4>
 800addc:	2300      	movs	r3, #0
 800adde:	9309      	str	r3, [sp, #36]	; 0x24
 800ade0:	2320      	movs	r3, #32
 800ade2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800ade6:	2330      	movs	r3, #48	; 0x30
 800ade8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800adec:	9503      	str	r5, [sp, #12]
 800adee:	f04f 0b01 	mov.w	fp, #1
 800adf2:	46b8      	mov	r8, r7
 800adf4:	4645      	mov	r5, r8
 800adf6:	f815 3b01 	ldrb.w	r3, [r5], #1
 800adfa:	b10b      	cbz	r3, 800ae00 <_vfiprintf_r+0x50>
 800adfc:	2b25      	cmp	r3, #37	; 0x25
 800adfe:	d154      	bne.n	800aeaa <_vfiprintf_r+0xfa>
 800ae00:	ebb8 0a07 	subs.w	sl, r8, r7
 800ae04:	d00b      	beq.n	800ae1e <_vfiprintf_r+0x6e>
 800ae06:	4653      	mov	r3, sl
 800ae08:	463a      	mov	r2, r7
 800ae0a:	4621      	mov	r1, r4
 800ae0c:	4630      	mov	r0, r6
 800ae0e:	f7ff ffbc 	bl	800ad8a <__sfputs_r>
 800ae12:	3001      	adds	r0, #1
 800ae14:	f000 80c2 	beq.w	800af9c <_vfiprintf_r+0x1ec>
 800ae18:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ae1a:	4453      	add	r3, sl
 800ae1c:	9309      	str	r3, [sp, #36]	; 0x24
 800ae1e:	f898 3000 	ldrb.w	r3, [r8]
 800ae22:	2b00      	cmp	r3, #0
 800ae24:	f000 80ba 	beq.w	800af9c <_vfiprintf_r+0x1ec>
 800ae28:	2300      	movs	r3, #0
 800ae2a:	f04f 32ff 	mov.w	r2, #4294967295
 800ae2e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800ae32:	9304      	str	r3, [sp, #16]
 800ae34:	9307      	str	r3, [sp, #28]
 800ae36:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800ae3a:	931a      	str	r3, [sp, #104]	; 0x68
 800ae3c:	46a8      	mov	r8, r5
 800ae3e:	2205      	movs	r2, #5
 800ae40:	f818 1b01 	ldrb.w	r1, [r8], #1
 800ae44:	485e      	ldr	r0, [pc, #376]	; (800afc0 <_vfiprintf_r+0x210>)
 800ae46:	f7f5 f9cb 	bl	80001e0 <memchr>
 800ae4a:	9b04      	ldr	r3, [sp, #16]
 800ae4c:	bb78      	cbnz	r0, 800aeae <_vfiprintf_r+0xfe>
 800ae4e:	06d9      	lsls	r1, r3, #27
 800ae50:	bf44      	itt	mi
 800ae52:	2220      	movmi	r2, #32
 800ae54:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800ae58:	071a      	lsls	r2, r3, #28
 800ae5a:	bf44      	itt	mi
 800ae5c:	222b      	movmi	r2, #43	; 0x2b
 800ae5e:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800ae62:	782a      	ldrb	r2, [r5, #0]
 800ae64:	2a2a      	cmp	r2, #42	; 0x2a
 800ae66:	d02a      	beq.n	800aebe <_vfiprintf_r+0x10e>
 800ae68:	9a07      	ldr	r2, [sp, #28]
 800ae6a:	46a8      	mov	r8, r5
 800ae6c:	2000      	movs	r0, #0
 800ae6e:	250a      	movs	r5, #10
 800ae70:	4641      	mov	r1, r8
 800ae72:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ae76:	3b30      	subs	r3, #48	; 0x30
 800ae78:	2b09      	cmp	r3, #9
 800ae7a:	d969      	bls.n	800af50 <_vfiprintf_r+0x1a0>
 800ae7c:	b360      	cbz	r0, 800aed8 <_vfiprintf_r+0x128>
 800ae7e:	e024      	b.n	800aeca <_vfiprintf_r+0x11a>
 800ae80:	4b50      	ldr	r3, [pc, #320]	; (800afc4 <_vfiprintf_r+0x214>)
 800ae82:	429c      	cmp	r4, r3
 800ae84:	d101      	bne.n	800ae8a <_vfiprintf_r+0xda>
 800ae86:	68b4      	ldr	r4, [r6, #8]
 800ae88:	e7a2      	b.n	800add0 <_vfiprintf_r+0x20>
 800ae8a:	4b4f      	ldr	r3, [pc, #316]	; (800afc8 <_vfiprintf_r+0x218>)
 800ae8c:	429c      	cmp	r4, r3
 800ae8e:	bf08      	it	eq
 800ae90:	68f4      	ldreq	r4, [r6, #12]
 800ae92:	e79d      	b.n	800add0 <_vfiprintf_r+0x20>
 800ae94:	4621      	mov	r1, r4
 800ae96:	4630      	mov	r0, r6
 800ae98:	f7fe fbe0 	bl	800965c <__swsetup_r>
 800ae9c:	2800      	cmp	r0, #0
 800ae9e:	d09d      	beq.n	800addc <_vfiprintf_r+0x2c>
 800aea0:	f04f 30ff 	mov.w	r0, #4294967295
 800aea4:	b01d      	add	sp, #116	; 0x74
 800aea6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800aeaa:	46a8      	mov	r8, r5
 800aeac:	e7a2      	b.n	800adf4 <_vfiprintf_r+0x44>
 800aeae:	4a44      	ldr	r2, [pc, #272]	; (800afc0 <_vfiprintf_r+0x210>)
 800aeb0:	1a80      	subs	r0, r0, r2
 800aeb2:	fa0b f000 	lsl.w	r0, fp, r0
 800aeb6:	4318      	orrs	r0, r3
 800aeb8:	9004      	str	r0, [sp, #16]
 800aeba:	4645      	mov	r5, r8
 800aebc:	e7be      	b.n	800ae3c <_vfiprintf_r+0x8c>
 800aebe:	9a03      	ldr	r2, [sp, #12]
 800aec0:	1d11      	adds	r1, r2, #4
 800aec2:	6812      	ldr	r2, [r2, #0]
 800aec4:	9103      	str	r1, [sp, #12]
 800aec6:	2a00      	cmp	r2, #0
 800aec8:	db01      	blt.n	800aece <_vfiprintf_r+0x11e>
 800aeca:	9207      	str	r2, [sp, #28]
 800aecc:	e004      	b.n	800aed8 <_vfiprintf_r+0x128>
 800aece:	4252      	negs	r2, r2
 800aed0:	f043 0302 	orr.w	r3, r3, #2
 800aed4:	9207      	str	r2, [sp, #28]
 800aed6:	9304      	str	r3, [sp, #16]
 800aed8:	f898 3000 	ldrb.w	r3, [r8]
 800aedc:	2b2e      	cmp	r3, #46	; 0x2e
 800aede:	d10e      	bne.n	800aefe <_vfiprintf_r+0x14e>
 800aee0:	f898 3001 	ldrb.w	r3, [r8, #1]
 800aee4:	2b2a      	cmp	r3, #42	; 0x2a
 800aee6:	d138      	bne.n	800af5a <_vfiprintf_r+0x1aa>
 800aee8:	9b03      	ldr	r3, [sp, #12]
 800aeea:	1d1a      	adds	r2, r3, #4
 800aeec:	681b      	ldr	r3, [r3, #0]
 800aeee:	9203      	str	r2, [sp, #12]
 800aef0:	2b00      	cmp	r3, #0
 800aef2:	bfb8      	it	lt
 800aef4:	f04f 33ff 	movlt.w	r3, #4294967295
 800aef8:	f108 0802 	add.w	r8, r8, #2
 800aefc:	9305      	str	r3, [sp, #20]
 800aefe:	4d33      	ldr	r5, [pc, #204]	; (800afcc <_vfiprintf_r+0x21c>)
 800af00:	f898 1000 	ldrb.w	r1, [r8]
 800af04:	2203      	movs	r2, #3
 800af06:	4628      	mov	r0, r5
 800af08:	f7f5 f96a 	bl	80001e0 <memchr>
 800af0c:	b140      	cbz	r0, 800af20 <_vfiprintf_r+0x170>
 800af0e:	2340      	movs	r3, #64	; 0x40
 800af10:	1b40      	subs	r0, r0, r5
 800af12:	fa03 f000 	lsl.w	r0, r3, r0
 800af16:	9b04      	ldr	r3, [sp, #16]
 800af18:	4303      	orrs	r3, r0
 800af1a:	f108 0801 	add.w	r8, r8, #1
 800af1e:	9304      	str	r3, [sp, #16]
 800af20:	f898 1000 	ldrb.w	r1, [r8]
 800af24:	482a      	ldr	r0, [pc, #168]	; (800afd0 <_vfiprintf_r+0x220>)
 800af26:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800af2a:	2206      	movs	r2, #6
 800af2c:	f108 0701 	add.w	r7, r8, #1
 800af30:	f7f5 f956 	bl	80001e0 <memchr>
 800af34:	2800      	cmp	r0, #0
 800af36:	d037      	beq.n	800afa8 <_vfiprintf_r+0x1f8>
 800af38:	4b26      	ldr	r3, [pc, #152]	; (800afd4 <_vfiprintf_r+0x224>)
 800af3a:	bb1b      	cbnz	r3, 800af84 <_vfiprintf_r+0x1d4>
 800af3c:	9b03      	ldr	r3, [sp, #12]
 800af3e:	3307      	adds	r3, #7
 800af40:	f023 0307 	bic.w	r3, r3, #7
 800af44:	3308      	adds	r3, #8
 800af46:	9303      	str	r3, [sp, #12]
 800af48:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800af4a:	444b      	add	r3, r9
 800af4c:	9309      	str	r3, [sp, #36]	; 0x24
 800af4e:	e750      	b.n	800adf2 <_vfiprintf_r+0x42>
 800af50:	fb05 3202 	mla	r2, r5, r2, r3
 800af54:	2001      	movs	r0, #1
 800af56:	4688      	mov	r8, r1
 800af58:	e78a      	b.n	800ae70 <_vfiprintf_r+0xc0>
 800af5a:	2300      	movs	r3, #0
 800af5c:	f108 0801 	add.w	r8, r8, #1
 800af60:	9305      	str	r3, [sp, #20]
 800af62:	4619      	mov	r1, r3
 800af64:	250a      	movs	r5, #10
 800af66:	4640      	mov	r0, r8
 800af68:	f810 2b01 	ldrb.w	r2, [r0], #1
 800af6c:	3a30      	subs	r2, #48	; 0x30
 800af6e:	2a09      	cmp	r2, #9
 800af70:	d903      	bls.n	800af7a <_vfiprintf_r+0x1ca>
 800af72:	2b00      	cmp	r3, #0
 800af74:	d0c3      	beq.n	800aefe <_vfiprintf_r+0x14e>
 800af76:	9105      	str	r1, [sp, #20]
 800af78:	e7c1      	b.n	800aefe <_vfiprintf_r+0x14e>
 800af7a:	fb05 2101 	mla	r1, r5, r1, r2
 800af7e:	2301      	movs	r3, #1
 800af80:	4680      	mov	r8, r0
 800af82:	e7f0      	b.n	800af66 <_vfiprintf_r+0x1b6>
 800af84:	ab03      	add	r3, sp, #12
 800af86:	9300      	str	r3, [sp, #0]
 800af88:	4622      	mov	r2, r4
 800af8a:	4b13      	ldr	r3, [pc, #76]	; (800afd8 <_vfiprintf_r+0x228>)
 800af8c:	a904      	add	r1, sp, #16
 800af8e:	4630      	mov	r0, r6
 800af90:	f7fd fe54 	bl	8008c3c <_printf_float>
 800af94:	f1b0 3fff 	cmp.w	r0, #4294967295
 800af98:	4681      	mov	r9, r0
 800af9a:	d1d5      	bne.n	800af48 <_vfiprintf_r+0x198>
 800af9c:	89a3      	ldrh	r3, [r4, #12]
 800af9e:	065b      	lsls	r3, r3, #25
 800afa0:	f53f af7e 	bmi.w	800aea0 <_vfiprintf_r+0xf0>
 800afa4:	9809      	ldr	r0, [sp, #36]	; 0x24
 800afa6:	e77d      	b.n	800aea4 <_vfiprintf_r+0xf4>
 800afa8:	ab03      	add	r3, sp, #12
 800afaa:	9300      	str	r3, [sp, #0]
 800afac:	4622      	mov	r2, r4
 800afae:	4b0a      	ldr	r3, [pc, #40]	; (800afd8 <_vfiprintf_r+0x228>)
 800afb0:	a904      	add	r1, sp, #16
 800afb2:	4630      	mov	r0, r6
 800afb4:	f7fe f8f8 	bl	80091a8 <_printf_i>
 800afb8:	e7ec      	b.n	800af94 <_vfiprintf_r+0x1e4>
 800afba:	bf00      	nop
 800afbc:	0800ca90 	.word	0x0800ca90
 800afc0:	0800cc14 	.word	0x0800cc14
 800afc4:	0800cab0 	.word	0x0800cab0
 800afc8:	0800ca70 	.word	0x0800ca70
 800afcc:	0800cc1a 	.word	0x0800cc1a
 800afd0:	0800cc1e 	.word	0x0800cc1e
 800afd4:	08008c3d 	.word	0x08008c3d
 800afd8:	0800ad8b 	.word	0x0800ad8b

0800afdc <_putc_r>:
 800afdc:	b570      	push	{r4, r5, r6, lr}
 800afde:	460d      	mov	r5, r1
 800afe0:	4614      	mov	r4, r2
 800afe2:	4606      	mov	r6, r0
 800afe4:	b118      	cbz	r0, 800afee <_putc_r+0x12>
 800afe6:	6983      	ldr	r3, [r0, #24]
 800afe8:	b90b      	cbnz	r3, 800afee <_putc_r+0x12>
 800afea:	f7fd fc55 	bl	8008898 <__sinit>
 800afee:	4b13      	ldr	r3, [pc, #76]	; (800b03c <_putc_r+0x60>)
 800aff0:	429c      	cmp	r4, r3
 800aff2:	d112      	bne.n	800b01a <_putc_r+0x3e>
 800aff4:	6874      	ldr	r4, [r6, #4]
 800aff6:	68a3      	ldr	r3, [r4, #8]
 800aff8:	3b01      	subs	r3, #1
 800affa:	2b00      	cmp	r3, #0
 800affc:	60a3      	str	r3, [r4, #8]
 800affe:	da16      	bge.n	800b02e <_putc_r+0x52>
 800b000:	69a2      	ldr	r2, [r4, #24]
 800b002:	4293      	cmp	r3, r2
 800b004:	db02      	blt.n	800b00c <_putc_r+0x30>
 800b006:	b2eb      	uxtb	r3, r5
 800b008:	2b0a      	cmp	r3, #10
 800b00a:	d110      	bne.n	800b02e <_putc_r+0x52>
 800b00c:	4622      	mov	r2, r4
 800b00e:	4629      	mov	r1, r5
 800b010:	4630      	mov	r0, r6
 800b012:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800b016:	f7fe babd 	b.w	8009594 <__swbuf_r>
 800b01a:	4b09      	ldr	r3, [pc, #36]	; (800b040 <_putc_r+0x64>)
 800b01c:	429c      	cmp	r4, r3
 800b01e:	d101      	bne.n	800b024 <_putc_r+0x48>
 800b020:	68b4      	ldr	r4, [r6, #8]
 800b022:	e7e8      	b.n	800aff6 <_putc_r+0x1a>
 800b024:	4b07      	ldr	r3, [pc, #28]	; (800b044 <_putc_r+0x68>)
 800b026:	429c      	cmp	r4, r3
 800b028:	bf08      	it	eq
 800b02a:	68f4      	ldreq	r4, [r6, #12]
 800b02c:	e7e3      	b.n	800aff6 <_putc_r+0x1a>
 800b02e:	6823      	ldr	r3, [r4, #0]
 800b030:	1c5a      	adds	r2, r3, #1
 800b032:	6022      	str	r2, [r4, #0]
 800b034:	701d      	strb	r5, [r3, #0]
 800b036:	b2e8      	uxtb	r0, r5
 800b038:	bd70      	pop	{r4, r5, r6, pc}
 800b03a:	bf00      	nop
 800b03c:	0800ca90 	.word	0x0800ca90
 800b040:	0800cab0 	.word	0x0800cab0
 800b044:	0800ca70 	.word	0x0800ca70

0800b048 <_read_r>:
 800b048:	b538      	push	{r3, r4, r5, lr}
 800b04a:	4c07      	ldr	r4, [pc, #28]	; (800b068 <_read_r+0x20>)
 800b04c:	4605      	mov	r5, r0
 800b04e:	4608      	mov	r0, r1
 800b050:	4611      	mov	r1, r2
 800b052:	2200      	movs	r2, #0
 800b054:	6022      	str	r2, [r4, #0]
 800b056:	461a      	mov	r2, r3
 800b058:	f7f7 ff8a 	bl	8002f70 <_read>
 800b05c:	1c43      	adds	r3, r0, #1
 800b05e:	d102      	bne.n	800b066 <_read_r+0x1e>
 800b060:	6823      	ldr	r3, [r4, #0]
 800b062:	b103      	cbz	r3, 800b066 <_read_r+0x1e>
 800b064:	602b      	str	r3, [r5, #0]
 800b066:	bd38      	pop	{r3, r4, r5, pc}
 800b068:	20000bdc 	.word	0x20000bdc

0800b06c <__srget_r>:
 800b06c:	b538      	push	{r3, r4, r5, lr}
 800b06e:	460c      	mov	r4, r1
 800b070:	4605      	mov	r5, r0
 800b072:	b118      	cbz	r0, 800b07c <__srget_r+0x10>
 800b074:	6983      	ldr	r3, [r0, #24]
 800b076:	b90b      	cbnz	r3, 800b07c <__srget_r+0x10>
 800b078:	f7fd fc0e 	bl	8008898 <__sinit>
 800b07c:	4b0e      	ldr	r3, [pc, #56]	; (800b0b8 <__srget_r+0x4c>)
 800b07e:	429c      	cmp	r4, r3
 800b080:	d10d      	bne.n	800b09e <__srget_r+0x32>
 800b082:	686c      	ldr	r4, [r5, #4]
 800b084:	4621      	mov	r1, r4
 800b086:	4628      	mov	r0, r5
 800b088:	f000 f85a 	bl	800b140 <__srefill_r>
 800b08c:	b988      	cbnz	r0, 800b0b2 <__srget_r+0x46>
 800b08e:	6863      	ldr	r3, [r4, #4]
 800b090:	3b01      	subs	r3, #1
 800b092:	6063      	str	r3, [r4, #4]
 800b094:	6823      	ldr	r3, [r4, #0]
 800b096:	1c5a      	adds	r2, r3, #1
 800b098:	6022      	str	r2, [r4, #0]
 800b09a:	7818      	ldrb	r0, [r3, #0]
 800b09c:	bd38      	pop	{r3, r4, r5, pc}
 800b09e:	4b07      	ldr	r3, [pc, #28]	; (800b0bc <__srget_r+0x50>)
 800b0a0:	429c      	cmp	r4, r3
 800b0a2:	d101      	bne.n	800b0a8 <__srget_r+0x3c>
 800b0a4:	68ac      	ldr	r4, [r5, #8]
 800b0a6:	e7ed      	b.n	800b084 <__srget_r+0x18>
 800b0a8:	4b05      	ldr	r3, [pc, #20]	; (800b0c0 <__srget_r+0x54>)
 800b0aa:	429c      	cmp	r4, r3
 800b0ac:	bf08      	it	eq
 800b0ae:	68ec      	ldreq	r4, [r5, #12]
 800b0b0:	e7e8      	b.n	800b084 <__srget_r+0x18>
 800b0b2:	f04f 30ff 	mov.w	r0, #4294967295
 800b0b6:	e7f1      	b.n	800b09c <__srget_r+0x30>
 800b0b8:	0800ca90 	.word	0x0800ca90
 800b0bc:	0800cab0 	.word	0x0800cab0
 800b0c0:	0800ca70 	.word	0x0800ca70

0800b0c4 <_fstat_r>:
 800b0c4:	b538      	push	{r3, r4, r5, lr}
 800b0c6:	4c07      	ldr	r4, [pc, #28]	; (800b0e4 <_fstat_r+0x20>)
 800b0c8:	2300      	movs	r3, #0
 800b0ca:	4605      	mov	r5, r0
 800b0cc:	4608      	mov	r0, r1
 800b0ce:	4611      	mov	r1, r2
 800b0d0:	6023      	str	r3, [r4, #0]
 800b0d2:	f7f8 f8e5 	bl	80032a0 <_fstat>
 800b0d6:	1c43      	adds	r3, r0, #1
 800b0d8:	d102      	bne.n	800b0e0 <_fstat_r+0x1c>
 800b0da:	6823      	ldr	r3, [r4, #0]
 800b0dc:	b103      	cbz	r3, 800b0e0 <_fstat_r+0x1c>
 800b0de:	602b      	str	r3, [r5, #0]
 800b0e0:	bd38      	pop	{r3, r4, r5, pc}
 800b0e2:	bf00      	nop
 800b0e4:	20000bdc 	.word	0x20000bdc

0800b0e8 <_isatty_r>:
 800b0e8:	b538      	push	{r3, r4, r5, lr}
 800b0ea:	4c06      	ldr	r4, [pc, #24]	; (800b104 <_isatty_r+0x1c>)
 800b0ec:	2300      	movs	r3, #0
 800b0ee:	4605      	mov	r5, r0
 800b0f0:	4608      	mov	r0, r1
 800b0f2:	6023      	str	r3, [r4, #0]
 800b0f4:	f7f8 f8e4 	bl	80032c0 <_isatty>
 800b0f8:	1c43      	adds	r3, r0, #1
 800b0fa:	d102      	bne.n	800b102 <_isatty_r+0x1a>
 800b0fc:	6823      	ldr	r3, [r4, #0]
 800b0fe:	b103      	cbz	r3, 800b102 <_isatty_r+0x1a>
 800b100:	602b      	str	r3, [r5, #0]
 800b102:	bd38      	pop	{r3, r4, r5, pc}
 800b104:	20000bdc 	.word	0x20000bdc

0800b108 <__ascii_mbtowc>:
 800b108:	b082      	sub	sp, #8
 800b10a:	b901      	cbnz	r1, 800b10e <__ascii_mbtowc+0x6>
 800b10c:	a901      	add	r1, sp, #4
 800b10e:	b142      	cbz	r2, 800b122 <__ascii_mbtowc+0x1a>
 800b110:	b14b      	cbz	r3, 800b126 <__ascii_mbtowc+0x1e>
 800b112:	7813      	ldrb	r3, [r2, #0]
 800b114:	600b      	str	r3, [r1, #0]
 800b116:	7812      	ldrb	r2, [r2, #0]
 800b118:	1c10      	adds	r0, r2, #0
 800b11a:	bf18      	it	ne
 800b11c:	2001      	movne	r0, #1
 800b11e:	b002      	add	sp, #8
 800b120:	4770      	bx	lr
 800b122:	4610      	mov	r0, r2
 800b124:	e7fb      	b.n	800b11e <__ascii_mbtowc+0x16>
 800b126:	f06f 0001 	mvn.w	r0, #1
 800b12a:	e7f8      	b.n	800b11e <__ascii_mbtowc+0x16>

0800b12c <lflush>:
 800b12c:	8983      	ldrh	r3, [r0, #12]
 800b12e:	f003 0309 	and.w	r3, r3, #9
 800b132:	2b09      	cmp	r3, #9
 800b134:	d101      	bne.n	800b13a <lflush+0xe>
 800b136:	f7ff ba03 	b.w	800a540 <fflush>
 800b13a:	2000      	movs	r0, #0
 800b13c:	4770      	bx	lr
	...

0800b140 <__srefill_r>:
 800b140:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b142:	460c      	mov	r4, r1
 800b144:	4605      	mov	r5, r0
 800b146:	b118      	cbz	r0, 800b150 <__srefill_r+0x10>
 800b148:	6983      	ldr	r3, [r0, #24]
 800b14a:	b90b      	cbnz	r3, 800b150 <__srefill_r+0x10>
 800b14c:	f7fd fba4 	bl	8008898 <__sinit>
 800b150:	4b3c      	ldr	r3, [pc, #240]	; (800b244 <__srefill_r+0x104>)
 800b152:	429c      	cmp	r4, r3
 800b154:	d10a      	bne.n	800b16c <__srefill_r+0x2c>
 800b156:	686c      	ldr	r4, [r5, #4]
 800b158:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800b15c:	2300      	movs	r3, #0
 800b15e:	6063      	str	r3, [r4, #4]
 800b160:	b293      	uxth	r3, r2
 800b162:	069e      	lsls	r6, r3, #26
 800b164:	d50c      	bpl.n	800b180 <__srefill_r+0x40>
 800b166:	f04f 30ff 	mov.w	r0, #4294967295
 800b16a:	e067      	b.n	800b23c <__srefill_r+0xfc>
 800b16c:	4b36      	ldr	r3, [pc, #216]	; (800b248 <__srefill_r+0x108>)
 800b16e:	429c      	cmp	r4, r3
 800b170:	d101      	bne.n	800b176 <__srefill_r+0x36>
 800b172:	68ac      	ldr	r4, [r5, #8]
 800b174:	e7f0      	b.n	800b158 <__srefill_r+0x18>
 800b176:	4b35      	ldr	r3, [pc, #212]	; (800b24c <__srefill_r+0x10c>)
 800b178:	429c      	cmp	r4, r3
 800b17a:	bf08      	it	eq
 800b17c:	68ec      	ldreq	r4, [r5, #12]
 800b17e:	e7eb      	b.n	800b158 <__srefill_r+0x18>
 800b180:	0758      	lsls	r0, r3, #29
 800b182:	d449      	bmi.n	800b218 <__srefill_r+0xd8>
 800b184:	06d9      	lsls	r1, r3, #27
 800b186:	d405      	bmi.n	800b194 <__srefill_r+0x54>
 800b188:	2309      	movs	r3, #9
 800b18a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800b18e:	602b      	str	r3, [r5, #0]
 800b190:	81a2      	strh	r2, [r4, #12]
 800b192:	e7e8      	b.n	800b166 <__srefill_r+0x26>
 800b194:	071a      	lsls	r2, r3, #28
 800b196:	d50b      	bpl.n	800b1b0 <__srefill_r+0x70>
 800b198:	4621      	mov	r1, r4
 800b19a:	4628      	mov	r0, r5
 800b19c:	f7ff f9a6 	bl	800a4ec <_fflush_r>
 800b1a0:	2800      	cmp	r0, #0
 800b1a2:	d1e0      	bne.n	800b166 <__srefill_r+0x26>
 800b1a4:	89a3      	ldrh	r3, [r4, #12]
 800b1a6:	60a0      	str	r0, [r4, #8]
 800b1a8:	f023 0308 	bic.w	r3, r3, #8
 800b1ac:	81a3      	strh	r3, [r4, #12]
 800b1ae:	61a0      	str	r0, [r4, #24]
 800b1b0:	89a3      	ldrh	r3, [r4, #12]
 800b1b2:	f043 0304 	orr.w	r3, r3, #4
 800b1b6:	81a3      	strh	r3, [r4, #12]
 800b1b8:	6923      	ldr	r3, [r4, #16]
 800b1ba:	b91b      	cbnz	r3, 800b1c4 <__srefill_r+0x84>
 800b1bc:	4621      	mov	r1, r4
 800b1be:	4628      	mov	r0, r5
 800b1c0:	f7ff fa40 	bl	800a644 <__smakebuf_r>
 800b1c4:	f9b4 700c 	ldrsh.w	r7, [r4, #12]
 800b1c8:	b2be      	uxth	r6, r7
 800b1ca:	07b3      	lsls	r3, r6, #30
 800b1cc:	d00f      	beq.n	800b1ee <__srefill_r+0xae>
 800b1ce:	2301      	movs	r3, #1
 800b1d0:	81a3      	strh	r3, [r4, #12]
 800b1d2:	4b1f      	ldr	r3, [pc, #124]	; (800b250 <__srefill_r+0x110>)
 800b1d4:	491f      	ldr	r1, [pc, #124]	; (800b254 <__srefill_r+0x114>)
 800b1d6:	6818      	ldr	r0, [r3, #0]
 800b1d8:	f006 0609 	and.w	r6, r6, #9
 800b1dc:	f7fd fbc8 	bl	8008970 <_fwalk>
 800b1e0:	2e09      	cmp	r6, #9
 800b1e2:	81a7      	strh	r7, [r4, #12]
 800b1e4:	d103      	bne.n	800b1ee <__srefill_r+0xae>
 800b1e6:	4621      	mov	r1, r4
 800b1e8:	4628      	mov	r0, r5
 800b1ea:	f7ff f8f9 	bl	800a3e0 <__sflush_r>
 800b1ee:	6922      	ldr	r2, [r4, #16]
 800b1f0:	6022      	str	r2, [r4, #0]
 800b1f2:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800b1f4:	6963      	ldr	r3, [r4, #20]
 800b1f6:	6a21      	ldr	r1, [r4, #32]
 800b1f8:	4628      	mov	r0, r5
 800b1fa:	47b0      	blx	r6
 800b1fc:	2800      	cmp	r0, #0
 800b1fe:	6060      	str	r0, [r4, #4]
 800b200:	dc1d      	bgt.n	800b23e <__srefill_r+0xfe>
 800b202:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b206:	bf17      	itett	ne
 800b208:	2200      	movne	r2, #0
 800b20a:	f043 0320 	orreq.w	r3, r3, #32
 800b20e:	f043 0340 	orrne.w	r3, r3, #64	; 0x40
 800b212:	6062      	strne	r2, [r4, #4]
 800b214:	81a3      	strh	r3, [r4, #12]
 800b216:	e7a6      	b.n	800b166 <__srefill_r+0x26>
 800b218:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b21a:	2900      	cmp	r1, #0
 800b21c:	d0cc      	beq.n	800b1b8 <__srefill_r+0x78>
 800b21e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b222:	4299      	cmp	r1, r3
 800b224:	d002      	beq.n	800b22c <__srefill_r+0xec>
 800b226:	4628      	mov	r0, r5
 800b228:	f7ff fd4a 	bl	800acc0 <_free_r>
 800b22c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800b22e:	6063      	str	r3, [r4, #4]
 800b230:	2000      	movs	r0, #0
 800b232:	6360      	str	r0, [r4, #52]	; 0x34
 800b234:	2b00      	cmp	r3, #0
 800b236:	d0bf      	beq.n	800b1b8 <__srefill_r+0x78>
 800b238:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800b23a:	6023      	str	r3, [r4, #0]
 800b23c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b23e:	2000      	movs	r0, #0
 800b240:	e7fc      	b.n	800b23c <__srefill_r+0xfc>
 800b242:	bf00      	nop
 800b244:	0800ca90 	.word	0x0800ca90
 800b248:	0800cab0 	.word	0x0800cab0
 800b24c:	0800ca70 	.word	0x0800ca70
 800b250:	0800cad0 	.word	0x0800cad0
 800b254:	0800b12d 	.word	0x0800b12d

0800b258 <__ascii_wctomb>:
 800b258:	b149      	cbz	r1, 800b26e <__ascii_wctomb+0x16>
 800b25a:	2aff      	cmp	r2, #255	; 0xff
 800b25c:	bf85      	ittet	hi
 800b25e:	238a      	movhi	r3, #138	; 0x8a
 800b260:	6003      	strhi	r3, [r0, #0]
 800b262:	700a      	strbls	r2, [r1, #0]
 800b264:	f04f 30ff 	movhi.w	r0, #4294967295
 800b268:	bf98      	it	ls
 800b26a:	2001      	movls	r0, #1
 800b26c:	4770      	bx	lr
 800b26e:	4608      	mov	r0, r1
 800b270:	4770      	bx	lr
	...

0800b274 <cosf>:
 800b274:	ee10 3a10 	vmov	r3, s0
 800b278:	b507      	push	{r0, r1, r2, lr}
 800b27a:	4a1c      	ldr	r2, [pc, #112]	; (800b2ec <cosf+0x78>)
 800b27c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800b280:	4293      	cmp	r3, r2
 800b282:	dc04      	bgt.n	800b28e <cosf+0x1a>
 800b284:	eddf 0a1a 	vldr	s1, [pc, #104]	; 800b2f0 <cosf+0x7c>
 800b288:	f000 f9a2 	bl	800b5d0 <__kernel_cosf>
 800b28c:	e004      	b.n	800b298 <cosf+0x24>
 800b28e:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 800b292:	db04      	blt.n	800b29e <cosf+0x2a>
 800b294:	ee30 0a40 	vsub.f32	s0, s0, s0
 800b298:	b003      	add	sp, #12
 800b29a:	f85d fb04 	ldr.w	pc, [sp], #4
 800b29e:	4668      	mov	r0, sp
 800b2a0:	f000 f86a 	bl	800b378 <__ieee754_rem_pio2f>
 800b2a4:	f000 0003 	and.w	r0, r0, #3
 800b2a8:	2801      	cmp	r0, #1
 800b2aa:	d007      	beq.n	800b2bc <cosf+0x48>
 800b2ac:	2802      	cmp	r0, #2
 800b2ae:	d00e      	beq.n	800b2ce <cosf+0x5a>
 800b2b0:	b9a0      	cbnz	r0, 800b2dc <cosf+0x68>
 800b2b2:	eddd 0a01 	vldr	s1, [sp, #4]
 800b2b6:	ed9d 0a00 	vldr	s0, [sp]
 800b2ba:	e7e5      	b.n	800b288 <cosf+0x14>
 800b2bc:	eddd 0a01 	vldr	s1, [sp, #4]
 800b2c0:	ed9d 0a00 	vldr	s0, [sp]
 800b2c4:	f000 fc64 	bl	800bb90 <__kernel_sinf>
 800b2c8:	eeb1 0a40 	vneg.f32	s0, s0
 800b2cc:	e7e4      	b.n	800b298 <cosf+0x24>
 800b2ce:	eddd 0a01 	vldr	s1, [sp, #4]
 800b2d2:	ed9d 0a00 	vldr	s0, [sp]
 800b2d6:	f000 f97b 	bl	800b5d0 <__kernel_cosf>
 800b2da:	e7f5      	b.n	800b2c8 <cosf+0x54>
 800b2dc:	2001      	movs	r0, #1
 800b2de:	eddd 0a01 	vldr	s1, [sp, #4]
 800b2e2:	ed9d 0a00 	vldr	s0, [sp]
 800b2e6:	f000 fc53 	bl	800bb90 <__kernel_sinf>
 800b2ea:	e7d5      	b.n	800b298 <cosf+0x24>
 800b2ec:	3f490fd8 	.word	0x3f490fd8
 800b2f0:	00000000 	.word	0x00000000

0800b2f4 <sinf>:
 800b2f4:	ee10 3a10 	vmov	r3, s0
 800b2f8:	b507      	push	{r0, r1, r2, lr}
 800b2fa:	4a1d      	ldr	r2, [pc, #116]	; (800b370 <sinf+0x7c>)
 800b2fc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800b300:	4293      	cmp	r3, r2
 800b302:	dc05      	bgt.n	800b310 <sinf+0x1c>
 800b304:	eddf 0a1b 	vldr	s1, [pc, #108]	; 800b374 <sinf+0x80>
 800b308:	2000      	movs	r0, #0
 800b30a:	f000 fc41 	bl	800bb90 <__kernel_sinf>
 800b30e:	e004      	b.n	800b31a <sinf+0x26>
 800b310:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 800b314:	db04      	blt.n	800b320 <sinf+0x2c>
 800b316:	ee30 0a40 	vsub.f32	s0, s0, s0
 800b31a:	b003      	add	sp, #12
 800b31c:	f85d fb04 	ldr.w	pc, [sp], #4
 800b320:	4668      	mov	r0, sp
 800b322:	f000 f829 	bl	800b378 <__ieee754_rem_pio2f>
 800b326:	f000 0003 	and.w	r0, r0, #3
 800b32a:	2801      	cmp	r0, #1
 800b32c:	d008      	beq.n	800b340 <sinf+0x4c>
 800b32e:	2802      	cmp	r0, #2
 800b330:	d00d      	beq.n	800b34e <sinf+0x5a>
 800b332:	b9b0      	cbnz	r0, 800b362 <sinf+0x6e>
 800b334:	2001      	movs	r0, #1
 800b336:	eddd 0a01 	vldr	s1, [sp, #4]
 800b33a:	ed9d 0a00 	vldr	s0, [sp]
 800b33e:	e7e4      	b.n	800b30a <sinf+0x16>
 800b340:	eddd 0a01 	vldr	s1, [sp, #4]
 800b344:	ed9d 0a00 	vldr	s0, [sp]
 800b348:	f000 f942 	bl	800b5d0 <__kernel_cosf>
 800b34c:	e7e5      	b.n	800b31a <sinf+0x26>
 800b34e:	2001      	movs	r0, #1
 800b350:	eddd 0a01 	vldr	s1, [sp, #4]
 800b354:	ed9d 0a00 	vldr	s0, [sp]
 800b358:	f000 fc1a 	bl	800bb90 <__kernel_sinf>
 800b35c:	eeb1 0a40 	vneg.f32	s0, s0
 800b360:	e7db      	b.n	800b31a <sinf+0x26>
 800b362:	eddd 0a01 	vldr	s1, [sp, #4]
 800b366:	ed9d 0a00 	vldr	s0, [sp]
 800b36a:	f000 f931 	bl	800b5d0 <__kernel_cosf>
 800b36e:	e7f5      	b.n	800b35c <sinf+0x68>
 800b370:	3f490fd8 	.word	0x3f490fd8
 800b374:	00000000 	.word	0x00000000

0800b378 <__ieee754_rem_pio2f>:
 800b378:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b37a:	ee10 6a10 	vmov	r6, s0
 800b37e:	4b86      	ldr	r3, [pc, #536]	; (800b598 <__ieee754_rem_pio2f+0x220>)
 800b380:	f026 4400 	bic.w	r4, r6, #2147483648	; 0x80000000
 800b384:	429c      	cmp	r4, r3
 800b386:	b087      	sub	sp, #28
 800b388:	4605      	mov	r5, r0
 800b38a:	dc05      	bgt.n	800b398 <__ieee754_rem_pio2f+0x20>
 800b38c:	2300      	movs	r3, #0
 800b38e:	ed85 0a00 	vstr	s0, [r5]
 800b392:	6043      	str	r3, [r0, #4]
 800b394:	2000      	movs	r0, #0
 800b396:	e020      	b.n	800b3da <__ieee754_rem_pio2f+0x62>
 800b398:	4b80      	ldr	r3, [pc, #512]	; (800b59c <__ieee754_rem_pio2f+0x224>)
 800b39a:	429c      	cmp	r4, r3
 800b39c:	dc38      	bgt.n	800b410 <__ieee754_rem_pio2f+0x98>
 800b39e:	2e00      	cmp	r6, #0
 800b3a0:	f024 040f 	bic.w	r4, r4, #15
 800b3a4:	ed9f 7a7e 	vldr	s14, [pc, #504]	; 800b5a0 <__ieee754_rem_pio2f+0x228>
 800b3a8:	4b7e      	ldr	r3, [pc, #504]	; (800b5a4 <__ieee754_rem_pio2f+0x22c>)
 800b3aa:	dd18      	ble.n	800b3de <__ieee754_rem_pio2f+0x66>
 800b3ac:	429c      	cmp	r4, r3
 800b3ae:	ee70 7a47 	vsub.f32	s15, s0, s14
 800b3b2:	bf09      	itett	eq
 800b3b4:	ed9f 7a7c 	vldreq	s14, [pc, #496]	; 800b5a8 <__ieee754_rem_pio2f+0x230>
 800b3b8:	ed9f 7a7c 	vldrne	s14, [pc, #496]	; 800b5ac <__ieee754_rem_pio2f+0x234>
 800b3bc:	ee77 7ac7 	vsubeq.f32	s15, s15, s14
 800b3c0:	ed9f 7a7b 	vldreq	s14, [pc, #492]	; 800b5b0 <__ieee754_rem_pio2f+0x238>
 800b3c4:	ee77 6ac7 	vsub.f32	s13, s15, s14
 800b3c8:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800b3cc:	edc0 6a00 	vstr	s13, [r0]
 800b3d0:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800b3d4:	edc0 7a01 	vstr	s15, [r0, #4]
 800b3d8:	2001      	movs	r0, #1
 800b3da:	b007      	add	sp, #28
 800b3dc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b3de:	429c      	cmp	r4, r3
 800b3e0:	ee70 7a07 	vadd.f32	s15, s0, s14
 800b3e4:	bf09      	itett	eq
 800b3e6:	ed9f 7a70 	vldreq	s14, [pc, #448]	; 800b5a8 <__ieee754_rem_pio2f+0x230>
 800b3ea:	ed9f 7a70 	vldrne	s14, [pc, #448]	; 800b5ac <__ieee754_rem_pio2f+0x234>
 800b3ee:	ee77 7a87 	vaddeq.f32	s15, s15, s14
 800b3f2:	ed9f 7a6f 	vldreq	s14, [pc, #444]	; 800b5b0 <__ieee754_rem_pio2f+0x238>
 800b3f6:	ee77 6a87 	vadd.f32	s13, s15, s14
 800b3fa:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800b3fe:	edc0 6a00 	vstr	s13, [r0]
 800b402:	ee77 7a87 	vadd.f32	s15, s15, s14
 800b406:	edc0 7a01 	vstr	s15, [r0, #4]
 800b40a:	f04f 30ff 	mov.w	r0, #4294967295
 800b40e:	e7e4      	b.n	800b3da <__ieee754_rem_pio2f+0x62>
 800b410:	4b68      	ldr	r3, [pc, #416]	; (800b5b4 <__ieee754_rem_pio2f+0x23c>)
 800b412:	429c      	cmp	r4, r3
 800b414:	dc71      	bgt.n	800b4fa <__ieee754_rem_pio2f+0x182>
 800b416:	f000 fc03 	bl	800bc20 <fabsf>
 800b41a:	ed9f 7a67 	vldr	s14, [pc, #412]	; 800b5b8 <__ieee754_rem_pio2f+0x240>
 800b41e:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 800b422:	eee0 7a07 	vfma.f32	s15, s0, s14
 800b426:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800b42a:	eeb8 6ae7 	vcvt.f32.s32	s12, s15
 800b42e:	ee17 0a90 	vmov	r0, s15
 800b432:	eddf 7a5b 	vldr	s15, [pc, #364]	; 800b5a0 <__ieee754_rem_pio2f+0x228>
 800b436:	eeb1 7a46 	vneg.f32	s14, s12
 800b43a:	eea7 0a27 	vfma.f32	s0, s14, s15
 800b43e:	281f      	cmp	r0, #31
 800b440:	eddf 7a5a 	vldr	s15, [pc, #360]	; 800b5ac <__ieee754_rem_pio2f+0x234>
 800b444:	ee66 7a27 	vmul.f32	s15, s12, s15
 800b448:	ee70 6a67 	vsub.f32	s13, s0, s15
 800b44c:	ee16 3a90 	vmov	r3, s13
 800b450:	dc1c      	bgt.n	800b48c <__ieee754_rem_pio2f+0x114>
 800b452:	1e47      	subs	r7, r0, #1
 800b454:	4959      	ldr	r1, [pc, #356]	; (800b5bc <__ieee754_rem_pio2f+0x244>)
 800b456:	f851 1027 	ldr.w	r1, [r1, r7, lsl #2]
 800b45a:	f024 02ff 	bic.w	r2, r4, #255	; 0xff
 800b45e:	428a      	cmp	r2, r1
 800b460:	d014      	beq.n	800b48c <__ieee754_rem_pio2f+0x114>
 800b462:	602b      	str	r3, [r5, #0]
 800b464:	ed95 7a00 	vldr	s14, [r5]
 800b468:	ee30 0a47 	vsub.f32	s0, s0, s14
 800b46c:	2e00      	cmp	r6, #0
 800b46e:	ee30 0a67 	vsub.f32	s0, s0, s15
 800b472:	ed85 0a01 	vstr	s0, [r5, #4]
 800b476:	dab0      	bge.n	800b3da <__ieee754_rem_pio2f+0x62>
 800b478:	eeb1 7a47 	vneg.f32	s14, s14
 800b47c:	eeb1 0a40 	vneg.f32	s0, s0
 800b480:	ed85 7a00 	vstr	s14, [r5]
 800b484:	ed85 0a01 	vstr	s0, [r5, #4]
 800b488:	4240      	negs	r0, r0
 800b48a:	e7a6      	b.n	800b3da <__ieee754_rem_pio2f+0x62>
 800b48c:	15e4      	asrs	r4, r4, #23
 800b48e:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 800b492:	1aa2      	subs	r2, r4, r2
 800b494:	2a08      	cmp	r2, #8
 800b496:	dde4      	ble.n	800b462 <__ieee754_rem_pio2f+0xea>
 800b498:	eddf 7a43 	vldr	s15, [pc, #268]	; 800b5a8 <__ieee754_rem_pio2f+0x230>
 800b49c:	eef0 6a40 	vmov.f32	s13, s0
 800b4a0:	eee7 6a27 	vfma.f32	s13, s14, s15
 800b4a4:	ee30 0a66 	vsub.f32	s0, s0, s13
 800b4a8:	eea7 0a27 	vfma.f32	s0, s14, s15
 800b4ac:	eddf 7a40 	vldr	s15, [pc, #256]	; 800b5b0 <__ieee754_rem_pio2f+0x238>
 800b4b0:	ee96 0a27 	vfnms.f32	s0, s12, s15
 800b4b4:	ee76 5ac0 	vsub.f32	s11, s13, s0
 800b4b8:	eef0 7a40 	vmov.f32	s15, s0
 800b4bc:	ee15 3a90 	vmov	r3, s11
 800b4c0:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 800b4c4:	1aa4      	subs	r4, r4, r2
 800b4c6:	2c19      	cmp	r4, #25
 800b4c8:	dc04      	bgt.n	800b4d4 <__ieee754_rem_pio2f+0x15c>
 800b4ca:	edc5 5a00 	vstr	s11, [r5]
 800b4ce:	eeb0 0a66 	vmov.f32	s0, s13
 800b4d2:	e7c7      	b.n	800b464 <__ieee754_rem_pio2f+0xec>
 800b4d4:	eddf 5a3a 	vldr	s11, [pc, #232]	; 800b5c0 <__ieee754_rem_pio2f+0x248>
 800b4d8:	eeb0 0a66 	vmov.f32	s0, s13
 800b4dc:	eea7 0a25 	vfma.f32	s0, s14, s11
 800b4e0:	ee76 7ac0 	vsub.f32	s15, s13, s0
 800b4e4:	eee7 7a25 	vfma.f32	s15, s14, s11
 800b4e8:	ed9f 7a36 	vldr	s14, [pc, #216]	; 800b5c4 <__ieee754_rem_pio2f+0x24c>
 800b4ec:	eed6 7a07 	vfnms.f32	s15, s12, s14
 800b4f0:	ee30 7a67 	vsub.f32	s14, s0, s15
 800b4f4:	ed85 7a00 	vstr	s14, [r5]
 800b4f8:	e7b4      	b.n	800b464 <__ieee754_rem_pio2f+0xec>
 800b4fa:	f1b4 4fff 	cmp.w	r4, #2139095040	; 0x7f800000
 800b4fe:	db06      	blt.n	800b50e <__ieee754_rem_pio2f+0x196>
 800b500:	ee70 7a40 	vsub.f32	s15, s0, s0
 800b504:	edc0 7a01 	vstr	s15, [r0, #4]
 800b508:	edc0 7a00 	vstr	s15, [r0]
 800b50c:	e742      	b.n	800b394 <__ieee754_rem_pio2f+0x1c>
 800b50e:	15e2      	asrs	r2, r4, #23
 800b510:	3a86      	subs	r2, #134	; 0x86
 800b512:	eba4 53c2 	sub.w	r3, r4, r2, lsl #23
 800b516:	ee07 3a90 	vmov	s15, r3
 800b51a:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 800b51e:	eddf 6a2a 	vldr	s13, [pc, #168]	; 800b5c8 <__ieee754_rem_pio2f+0x250>
 800b522:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800b526:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800b52a:	ed8d 7a03 	vstr	s14, [sp, #12]
 800b52e:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800b532:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 800b536:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800b53a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800b53e:	ed8d 7a04 	vstr	s14, [sp, #16]
 800b542:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800b546:	eef5 7a40 	vcmp.f32	s15, #0.0
 800b54a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b54e:	edcd 7a05 	vstr	s15, [sp, #20]
 800b552:	d11e      	bne.n	800b592 <__ieee754_rem_pio2f+0x21a>
 800b554:	eeb5 7a40 	vcmp.f32	s14, #0.0
 800b558:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b55c:	bf0c      	ite	eq
 800b55e:	2301      	moveq	r3, #1
 800b560:	2302      	movne	r3, #2
 800b562:	491a      	ldr	r1, [pc, #104]	; (800b5cc <__ieee754_rem_pio2f+0x254>)
 800b564:	9101      	str	r1, [sp, #4]
 800b566:	2102      	movs	r1, #2
 800b568:	9100      	str	r1, [sp, #0]
 800b56a:	a803      	add	r0, sp, #12
 800b56c:	4629      	mov	r1, r5
 800b56e:	f000 f88d 	bl	800b68c <__kernel_rem_pio2f>
 800b572:	2e00      	cmp	r6, #0
 800b574:	f6bf af31 	bge.w	800b3da <__ieee754_rem_pio2f+0x62>
 800b578:	edd5 7a00 	vldr	s15, [r5]
 800b57c:	eef1 7a67 	vneg.f32	s15, s15
 800b580:	edc5 7a00 	vstr	s15, [r5]
 800b584:	edd5 7a01 	vldr	s15, [r5, #4]
 800b588:	eef1 7a67 	vneg.f32	s15, s15
 800b58c:	edc5 7a01 	vstr	s15, [r5, #4]
 800b590:	e77a      	b.n	800b488 <__ieee754_rem_pio2f+0x110>
 800b592:	2303      	movs	r3, #3
 800b594:	e7e5      	b.n	800b562 <__ieee754_rem_pio2f+0x1ea>
 800b596:	bf00      	nop
 800b598:	3f490fd8 	.word	0x3f490fd8
 800b59c:	4016cbe3 	.word	0x4016cbe3
 800b5a0:	3fc90f80 	.word	0x3fc90f80
 800b5a4:	3fc90fd0 	.word	0x3fc90fd0
 800b5a8:	37354400 	.word	0x37354400
 800b5ac:	37354443 	.word	0x37354443
 800b5b0:	2e85a308 	.word	0x2e85a308
 800b5b4:	43490f80 	.word	0x43490f80
 800b5b8:	3f22f984 	.word	0x3f22f984
 800b5bc:	0800cd30 	.word	0x0800cd30
 800b5c0:	2e85a300 	.word	0x2e85a300
 800b5c4:	248d3132 	.word	0x248d3132
 800b5c8:	43800000 	.word	0x43800000
 800b5cc:	0800cdb0 	.word	0x0800cdb0

0800b5d0 <__kernel_cosf>:
 800b5d0:	ee10 3a10 	vmov	r3, s0
 800b5d4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800b5d8:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
 800b5dc:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b5e0:	da05      	bge.n	800b5ee <__kernel_cosf+0x1e>
 800b5e2:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 800b5e6:	ee17 2a90 	vmov	r2, s15
 800b5ea:	2a00      	cmp	r2, #0
 800b5ec:	d03b      	beq.n	800b666 <__kernel_cosf+0x96>
 800b5ee:	ee20 6a00 	vmul.f32	s12, s0, s0
 800b5f2:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800b5f6:	eddf 5a1d 	vldr	s11, [pc, #116]	; 800b66c <__kernel_cosf+0x9c>
 800b5fa:	4a1d      	ldr	r2, [pc, #116]	; (800b670 <__kernel_cosf+0xa0>)
 800b5fc:	ee66 7a07 	vmul.f32	s15, s12, s14
 800b600:	ed9f 7a1c 	vldr	s14, [pc, #112]	; 800b674 <__kernel_cosf+0xa4>
 800b604:	eea6 7a25 	vfma.f32	s14, s12, s11
 800b608:	4293      	cmp	r3, r2
 800b60a:	eddf 5a1b 	vldr	s11, [pc, #108]	; 800b678 <__kernel_cosf+0xa8>
 800b60e:	eee7 5a06 	vfma.f32	s11, s14, s12
 800b612:	ed9f 7a1a 	vldr	s14, [pc, #104]	; 800b67c <__kernel_cosf+0xac>
 800b616:	eea5 7a86 	vfma.f32	s14, s11, s12
 800b61a:	eddf 5a19 	vldr	s11, [pc, #100]	; 800b680 <__kernel_cosf+0xb0>
 800b61e:	eee7 5a06 	vfma.f32	s11, s14, s12
 800b622:	ed9f 7a18 	vldr	s14, [pc, #96]	; 800b684 <__kernel_cosf+0xb4>
 800b626:	eea5 7a86 	vfma.f32	s14, s11, s12
 800b62a:	ee60 0ac0 	vnmul.f32	s1, s1, s0
 800b62e:	ee27 7a06 	vmul.f32	s14, s14, s12
 800b632:	eee6 0a07 	vfma.f32	s1, s12, s14
 800b636:	dc04      	bgt.n	800b642 <__kernel_cosf+0x72>
 800b638:	ee77 0ae0 	vsub.f32	s1, s15, s1
 800b63c:	ee36 0ae0 	vsub.f32	s0, s13, s1
 800b640:	4770      	bx	lr
 800b642:	4a11      	ldr	r2, [pc, #68]	; (800b688 <__kernel_cosf+0xb8>)
 800b644:	4293      	cmp	r3, r2
 800b646:	bfda      	itte	le
 800b648:	f103 437f 	addle.w	r3, r3, #4278190080	; 0xff000000
 800b64c:	ee07 3a10 	vmovle	s14, r3
 800b650:	eeb5 7a02 	vmovgt.f32	s14, #82	; 0x3e900000  0.2812500
 800b654:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800b658:	ee36 0ac7 	vsub.f32	s0, s13, s14
 800b65c:	ee77 7ae0 	vsub.f32	s15, s15, s1
 800b660:	ee30 0a67 	vsub.f32	s0, s0, s15
 800b664:	4770      	bx	lr
 800b666:	eeb0 0a66 	vmov.f32	s0, s13
 800b66a:	4770      	bx	lr
 800b66c:	ad47d74e 	.word	0xad47d74e
 800b670:	3e999999 	.word	0x3e999999
 800b674:	310f74f6 	.word	0x310f74f6
 800b678:	b493f27c 	.word	0xb493f27c
 800b67c:	37d00d01 	.word	0x37d00d01
 800b680:	bab60b61 	.word	0xbab60b61
 800b684:	3d2aaaab 	.word	0x3d2aaaab
 800b688:	3f480000 	.word	0x3f480000

0800b68c <__kernel_rem_pio2f>:
 800b68c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b690:	ed2d 8b04 	vpush	{d8-d9}
 800b694:	b0d7      	sub	sp, #348	; 0x15c
 800b696:	469b      	mov	fp, r3
 800b698:	460e      	mov	r6, r1
 800b69a:	4bbe      	ldr	r3, [pc, #760]	; (800b994 <__kernel_rem_pio2f+0x308>)
 800b69c:	9964      	ldr	r1, [sp, #400]	; 0x190
 800b69e:	9002      	str	r0, [sp, #8]
 800b6a0:	f853 9021 	ldr.w	r9, [r3, r1, lsl #2]
 800b6a4:	9865      	ldr	r0, [sp, #404]	; 0x194
 800b6a6:	ed9f 7abf 	vldr	s14, [pc, #764]	; 800b9a4 <__kernel_rem_pio2f+0x318>
 800b6aa:	1ed1      	subs	r1, r2, #3
 800b6ac:	2308      	movs	r3, #8
 800b6ae:	fb91 f1f3 	sdiv	r1, r1, r3
 800b6b2:	ea21 71e1 	bic.w	r1, r1, r1, asr #31
 800b6b6:	f10b 3aff 	add.w	sl, fp, #4294967295
 800b6ba:	1c4c      	adds	r4, r1, #1
 800b6bc:	eba2 04c4 	sub.w	r4, r2, r4, lsl #3
 800b6c0:	eba1 050a 	sub.w	r5, r1, sl
 800b6c4:	aa1a      	add	r2, sp, #104	; 0x68
 800b6c6:	eb09 070a 	add.w	r7, r9, sl
 800b6ca:	eb00 0c85 	add.w	ip, r0, r5, lsl #2
 800b6ce:	4696      	mov	lr, r2
 800b6d0:	2300      	movs	r3, #0
 800b6d2:	42bb      	cmp	r3, r7
 800b6d4:	dd0f      	ble.n	800b6f6 <__kernel_rem_pio2f+0x6a>
 800b6d6:	af42      	add	r7, sp, #264	; 0x108
 800b6d8:	2200      	movs	r2, #0
 800b6da:	454a      	cmp	r2, r9
 800b6dc:	dc27      	bgt.n	800b72e <__kernel_rem_pio2f+0xa2>
 800b6de:	f10d 0c68 	add.w	ip, sp, #104	; 0x68
 800b6e2:	eb0b 0302 	add.w	r3, fp, r2
 800b6e6:	eb0c 0383 	add.w	r3, ip, r3, lsl #2
 800b6ea:	9d02      	ldr	r5, [sp, #8]
 800b6ec:	eddf 7aad 	vldr	s15, [pc, #692]	; 800b9a4 <__kernel_rem_pio2f+0x318>
 800b6f0:	f04f 0c00 	mov.w	ip, #0
 800b6f4:	e015      	b.n	800b722 <__kernel_rem_pio2f+0x96>
 800b6f6:	42dd      	cmn	r5, r3
 800b6f8:	bf5d      	ittte	pl
 800b6fa:	f85c 2023 	ldrpl.w	r2, [ip, r3, lsl #2]
 800b6fe:	ee07 2a90 	vmovpl	s15, r2
 800b702:	eef8 7ae7 	vcvtpl.f32.s32	s15, s15
 800b706:	eef0 7a47 	vmovmi.f32	s15, s14
 800b70a:	ecee 7a01 	vstmia	lr!, {s15}
 800b70e:	3301      	adds	r3, #1
 800b710:	e7df      	b.n	800b6d2 <__kernel_rem_pio2f+0x46>
 800b712:	ecf5 6a01 	vldmia	r5!, {s13}
 800b716:	ed33 7a01 	vldmdb	r3!, {s14}
 800b71a:	eee6 7a87 	vfma.f32	s15, s13, s14
 800b71e:	f10c 0c01 	add.w	ip, ip, #1
 800b722:	45d4      	cmp	ip, sl
 800b724:	ddf5      	ble.n	800b712 <__kernel_rem_pio2f+0x86>
 800b726:	ece7 7a01 	vstmia	r7!, {s15}
 800b72a:	3201      	adds	r2, #1
 800b72c:	e7d5      	b.n	800b6da <__kernel_rem_pio2f+0x4e>
 800b72e:	ab06      	add	r3, sp, #24
 800b730:	eb03 0389 	add.w	r3, r3, r9, lsl #2
 800b734:	9304      	str	r3, [sp, #16]
 800b736:	eddf 8a9a 	vldr	s17, [pc, #616]	; 800b9a0 <__kernel_rem_pio2f+0x314>
 800b73a:	ed9f 9a98 	vldr	s18, [pc, #608]	; 800b99c <__kernel_rem_pio2f+0x310>
 800b73e:	eb00 0381 	add.w	r3, r0, r1, lsl #2
 800b742:	9303      	str	r3, [sp, #12]
 800b744:	464d      	mov	r5, r9
 800b746:	ab56      	add	r3, sp, #344	; 0x158
 800b748:	f105 4780 	add.w	r7, r5, #1073741824	; 0x40000000
 800b74c:	eb03 0385 	add.w	r3, r3, r5, lsl #2
 800b750:	3f01      	subs	r7, #1
 800b752:	ed13 0a14 	vldr	s0, [r3, #-80]	; 0xffffffb0
 800b756:	00bf      	lsls	r7, r7, #2
 800b758:	ab56      	add	r3, sp, #344	; 0x158
 800b75a:	19da      	adds	r2, r3, r7
 800b75c:	3a4c      	subs	r2, #76	; 0x4c
 800b75e:	2300      	movs	r3, #0
 800b760:	1ae9      	subs	r1, r5, r3
 800b762:	2900      	cmp	r1, #0
 800b764:	dc4c      	bgt.n	800b800 <__kernel_rem_pio2f+0x174>
 800b766:	4620      	mov	r0, r4
 800b768:	f000 faa4 	bl	800bcb4 <scalbnf>
 800b76c:	eeb0 8a40 	vmov.f32	s16, s0
 800b770:	eeb4 0a00 	vmov.f32	s0, #64	; 0x3e000000  0.125
 800b774:	ee28 0a00 	vmul.f32	s0, s16, s0
 800b778:	f000 fa5a 	bl	800bc30 <floorf>
 800b77c:	eef2 7a00 	vmov.f32	s15, #32	; 0x41000000  8.0
 800b780:	eea0 8a67 	vfms.f32	s16, s0, s15
 800b784:	2c00      	cmp	r4, #0
 800b786:	eefd 7ac8 	vcvt.s32.f32	s15, s16
 800b78a:	edcd 7a01 	vstr	s15, [sp, #4]
 800b78e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800b792:	ee38 8a67 	vsub.f32	s16, s16, s15
 800b796:	dd48      	ble.n	800b82a <__kernel_rem_pio2f+0x19e>
 800b798:	1e69      	subs	r1, r5, #1
 800b79a:	ab06      	add	r3, sp, #24
 800b79c:	f1c4 0008 	rsb	r0, r4, #8
 800b7a0:	f853 c021 	ldr.w	ip, [r3, r1, lsl #2]
 800b7a4:	9a01      	ldr	r2, [sp, #4]
 800b7a6:	fa4c f300 	asr.w	r3, ip, r0
 800b7aa:	441a      	add	r2, r3
 800b7ac:	4083      	lsls	r3, r0
 800b7ae:	9201      	str	r2, [sp, #4]
 800b7b0:	ebac 0203 	sub.w	r2, ip, r3
 800b7b4:	ab06      	add	r3, sp, #24
 800b7b6:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
 800b7ba:	f1c4 0307 	rsb	r3, r4, #7
 800b7be:	fa42 f803 	asr.w	r8, r2, r3
 800b7c2:	f1b8 0f00 	cmp.w	r8, #0
 800b7c6:	dd41      	ble.n	800b84c <__kernel_rem_pio2f+0x1c0>
 800b7c8:	9b01      	ldr	r3, [sp, #4]
 800b7ca:	2000      	movs	r0, #0
 800b7cc:	3301      	adds	r3, #1
 800b7ce:	9301      	str	r3, [sp, #4]
 800b7d0:	4601      	mov	r1, r0
 800b7d2:	4285      	cmp	r5, r0
 800b7d4:	dc6d      	bgt.n	800b8b2 <__kernel_rem_pio2f+0x226>
 800b7d6:	2c00      	cmp	r4, #0
 800b7d8:	dd04      	ble.n	800b7e4 <__kernel_rem_pio2f+0x158>
 800b7da:	2c01      	cmp	r4, #1
 800b7dc:	d07e      	beq.n	800b8dc <__kernel_rem_pio2f+0x250>
 800b7de:	2c02      	cmp	r4, #2
 800b7e0:	f000 8086 	beq.w	800b8f0 <__kernel_rem_pio2f+0x264>
 800b7e4:	f1b8 0f02 	cmp.w	r8, #2
 800b7e8:	d130      	bne.n	800b84c <__kernel_rem_pio2f+0x1c0>
 800b7ea:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 800b7ee:	ee30 8a48 	vsub.f32	s16, s0, s16
 800b7f2:	b359      	cbz	r1, 800b84c <__kernel_rem_pio2f+0x1c0>
 800b7f4:	4620      	mov	r0, r4
 800b7f6:	f000 fa5d 	bl	800bcb4 <scalbnf>
 800b7fa:	ee38 8a40 	vsub.f32	s16, s16, s0
 800b7fe:	e025      	b.n	800b84c <__kernel_rem_pio2f+0x1c0>
 800b800:	ee60 7a28 	vmul.f32	s15, s0, s17
 800b804:	a806      	add	r0, sp, #24
 800b806:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800b80a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800b80e:	eea7 0ac9 	vfms.f32	s0, s15, s18
 800b812:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 800b816:	ee10 1a10 	vmov	r1, s0
 800b81a:	ed32 0a01 	vldmdb	r2!, {s0}
 800b81e:	f840 1023 	str.w	r1, [r0, r3, lsl #2]
 800b822:	ee37 0a80 	vadd.f32	s0, s15, s0
 800b826:	3301      	adds	r3, #1
 800b828:	e79a      	b.n	800b760 <__kernel_rem_pio2f+0xd4>
 800b82a:	d106      	bne.n	800b83a <__kernel_rem_pio2f+0x1ae>
 800b82c:	1e6b      	subs	r3, r5, #1
 800b82e:	aa06      	add	r2, sp, #24
 800b830:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800b834:	ea4f 2822 	mov.w	r8, r2, asr #8
 800b838:	e7c3      	b.n	800b7c2 <__kernel_rem_pio2f+0x136>
 800b83a:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 800b83e:	eeb4 8ae7 	vcmpe.f32	s16, s15
 800b842:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b846:	da31      	bge.n	800b8ac <__kernel_rem_pio2f+0x220>
 800b848:	f04f 0800 	mov.w	r8, #0
 800b84c:	eeb5 8a40 	vcmp.f32	s16, #0.0
 800b850:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b854:	f040 80a8 	bne.w	800b9a8 <__kernel_rem_pio2f+0x31c>
 800b858:	1e6b      	subs	r3, r5, #1
 800b85a:	4618      	mov	r0, r3
 800b85c:	2200      	movs	r2, #0
 800b85e:	4548      	cmp	r0, r9
 800b860:	da4d      	bge.n	800b8fe <__kernel_rem_pio2f+0x272>
 800b862:	2a00      	cmp	r2, #0
 800b864:	f000 8087 	beq.w	800b976 <__kernel_rem_pio2f+0x2ea>
 800b868:	aa06      	add	r2, sp, #24
 800b86a:	3c08      	subs	r4, #8
 800b86c:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800b870:	2900      	cmp	r1, #0
 800b872:	f000 808d 	beq.w	800b990 <__kernel_rem_pio2f+0x304>
 800b876:	4620      	mov	r0, r4
 800b878:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 800b87c:	9302      	str	r3, [sp, #8]
 800b87e:	f000 fa19 	bl	800bcb4 <scalbnf>
 800b882:	9b02      	ldr	r3, [sp, #8]
 800b884:	ed9f 7a46 	vldr	s14, [pc, #280]	; 800b9a0 <__kernel_rem_pio2f+0x314>
 800b888:	0099      	lsls	r1, r3, #2
 800b88a:	aa42      	add	r2, sp, #264	; 0x108
 800b88c:	1850      	adds	r0, r2, r1
 800b88e:	1d05      	adds	r5, r0, #4
 800b890:	461c      	mov	r4, r3
 800b892:	2c00      	cmp	r4, #0
 800b894:	f280 80b8 	bge.w	800ba08 <__kernel_rem_pio2f+0x37c>
 800b898:	2500      	movs	r5, #0
 800b89a:	1b5c      	subs	r4, r3, r5
 800b89c:	2c00      	cmp	r4, #0
 800b89e:	f2c0 80d8 	blt.w	800ba52 <__kernel_rem_pio2f+0x3c6>
 800b8a2:	4f3d      	ldr	r7, [pc, #244]	; (800b998 <__kernel_rem_pio2f+0x30c>)
 800b8a4:	eddf 7a3f 	vldr	s15, [pc, #252]	; 800b9a4 <__kernel_rem_pio2f+0x318>
 800b8a8:	2400      	movs	r4, #0
 800b8aa:	e0c6      	b.n	800ba3a <__kernel_rem_pio2f+0x3ae>
 800b8ac:	f04f 0802 	mov.w	r8, #2
 800b8b0:	e78a      	b.n	800b7c8 <__kernel_rem_pio2f+0x13c>
 800b8b2:	ab06      	add	r3, sp, #24
 800b8b4:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 800b8b8:	b949      	cbnz	r1, 800b8ce <__kernel_rem_pio2f+0x242>
 800b8ba:	b12b      	cbz	r3, 800b8c8 <__kernel_rem_pio2f+0x23c>
 800b8bc:	aa06      	add	r2, sp, #24
 800b8be:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 800b8c2:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
 800b8c6:	2301      	movs	r3, #1
 800b8c8:	3001      	adds	r0, #1
 800b8ca:	4619      	mov	r1, r3
 800b8cc:	e781      	b.n	800b7d2 <__kernel_rem_pio2f+0x146>
 800b8ce:	aa06      	add	r2, sp, #24
 800b8d0:	f1c3 03ff 	rsb	r3, r3, #255	; 0xff
 800b8d4:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
 800b8d8:	460b      	mov	r3, r1
 800b8da:	e7f5      	b.n	800b8c8 <__kernel_rem_pio2f+0x23c>
 800b8dc:	1e68      	subs	r0, r5, #1
 800b8de:	ab06      	add	r3, sp, #24
 800b8e0:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 800b8e4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b8e8:	aa06      	add	r2, sp, #24
 800b8ea:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
 800b8ee:	e779      	b.n	800b7e4 <__kernel_rem_pio2f+0x158>
 800b8f0:	1e68      	subs	r0, r5, #1
 800b8f2:	ab06      	add	r3, sp, #24
 800b8f4:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 800b8f8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800b8fc:	e7f4      	b.n	800b8e8 <__kernel_rem_pio2f+0x25c>
 800b8fe:	a906      	add	r1, sp, #24
 800b900:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
 800b904:	3801      	subs	r0, #1
 800b906:	430a      	orrs	r2, r1
 800b908:	e7a9      	b.n	800b85e <__kernel_rem_pio2f+0x1d2>
 800b90a:	f10c 0c01 	add.w	ip, ip, #1
 800b90e:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 800b912:	2a00      	cmp	r2, #0
 800b914:	d0f9      	beq.n	800b90a <__kernel_rem_pio2f+0x27e>
 800b916:	eb0b 0305 	add.w	r3, fp, r5
 800b91a:	aa1a      	add	r2, sp, #104	; 0x68
 800b91c:	009b      	lsls	r3, r3, #2
 800b91e:	1898      	adds	r0, r3, r2
 800b920:	3004      	adds	r0, #4
 800b922:	1c69      	adds	r1, r5, #1
 800b924:	3704      	adds	r7, #4
 800b926:	2200      	movs	r2, #0
 800b928:	4465      	add	r5, ip
 800b92a:	9005      	str	r0, [sp, #20]
 800b92c:	428d      	cmp	r5, r1
 800b92e:	f6ff af0a 	blt.w	800b746 <__kernel_rem_pio2f+0xba>
 800b932:	a81a      	add	r0, sp, #104	; 0x68
 800b934:	eb02 0c03 	add.w	ip, r2, r3
 800b938:	4484      	add	ip, r0
 800b93a:	9803      	ldr	r0, [sp, #12]
 800b93c:	f8dd e008 	ldr.w	lr, [sp, #8]
 800b940:	f850 0021 	ldr.w	r0, [r0, r1, lsl #2]
 800b944:	9001      	str	r0, [sp, #4]
 800b946:	ee07 0a90 	vmov	s15, r0
 800b94a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800b94e:	9805      	ldr	r0, [sp, #20]
 800b950:	edcc 7a00 	vstr	s15, [ip]
 800b954:	eddf 7a13 	vldr	s15, [pc, #76]	; 800b9a4 <__kernel_rem_pio2f+0x318>
 800b958:	eb00 0802 	add.w	r8, r0, r2
 800b95c:	f04f 0c00 	mov.w	ip, #0
 800b960:	45d4      	cmp	ip, sl
 800b962:	dd0c      	ble.n	800b97e <__kernel_rem_pio2f+0x2f2>
 800b964:	eb02 0c07 	add.w	ip, r2, r7
 800b968:	a842      	add	r0, sp, #264	; 0x108
 800b96a:	4484      	add	ip, r0
 800b96c:	edcc 7a01 	vstr	s15, [ip, #4]
 800b970:	3101      	adds	r1, #1
 800b972:	3204      	adds	r2, #4
 800b974:	e7da      	b.n	800b92c <__kernel_rem_pio2f+0x2a0>
 800b976:	9b04      	ldr	r3, [sp, #16]
 800b978:	f04f 0c01 	mov.w	ip, #1
 800b97c:	e7c7      	b.n	800b90e <__kernel_rem_pio2f+0x282>
 800b97e:	ecfe 6a01 	vldmia	lr!, {s13}
 800b982:	ed38 7a01 	vldmdb	r8!, {s14}
 800b986:	f10c 0c01 	add.w	ip, ip, #1
 800b98a:	eee6 7a87 	vfma.f32	s15, s13, s14
 800b98e:	e7e7      	b.n	800b960 <__kernel_rem_pio2f+0x2d4>
 800b990:	3b01      	subs	r3, #1
 800b992:	e769      	b.n	800b868 <__kernel_rem_pio2f+0x1dc>
 800b994:	0800d0f4 	.word	0x0800d0f4
 800b998:	0800d0c8 	.word	0x0800d0c8
 800b99c:	43800000 	.word	0x43800000
 800b9a0:	3b800000 	.word	0x3b800000
 800b9a4:	00000000 	.word	0x00000000
 800b9a8:	4260      	negs	r0, r4
 800b9aa:	eeb0 0a48 	vmov.f32	s0, s16
 800b9ae:	f000 f981 	bl	800bcb4 <scalbnf>
 800b9b2:	ed1f 7a06 	vldr	s14, [pc, #-24]	; 800b99c <__kernel_rem_pio2f+0x310>
 800b9b6:	eeb4 0ac7 	vcmpe.f32	s0, s14
 800b9ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b9be:	db1a      	blt.n	800b9f6 <__kernel_rem_pio2f+0x36a>
 800b9c0:	ed5f 7a09 	vldr	s15, [pc, #-36]	; 800b9a0 <__kernel_rem_pio2f+0x314>
 800b9c4:	ee60 7a27 	vmul.f32	s15, s0, s15
 800b9c8:	aa06      	add	r2, sp, #24
 800b9ca:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800b9ce:	a906      	add	r1, sp, #24
 800b9d0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800b9d4:	3408      	adds	r4, #8
 800b9d6:	eea7 0ac7 	vfms.f32	s0, s15, s14
 800b9da:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800b9de:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 800b9e2:	ee10 3a10 	vmov	r3, s0
 800b9e6:	f842 3025 	str.w	r3, [r2, r5, lsl #2]
 800b9ea:	1c6b      	adds	r3, r5, #1
 800b9ec:	ee17 2a90 	vmov	r2, s15
 800b9f0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 800b9f4:	e73f      	b.n	800b876 <__kernel_rem_pio2f+0x1ea>
 800b9f6:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 800b9fa:	aa06      	add	r2, sp, #24
 800b9fc:	ee10 3a10 	vmov	r3, s0
 800ba00:	f842 3025 	str.w	r3, [r2, r5, lsl #2]
 800ba04:	462b      	mov	r3, r5
 800ba06:	e736      	b.n	800b876 <__kernel_rem_pio2f+0x1ea>
 800ba08:	aa06      	add	r2, sp, #24
 800ba0a:	f852 2024 	ldr.w	r2, [r2, r4, lsl #2]
 800ba0e:	9202      	str	r2, [sp, #8]
 800ba10:	ee07 2a90 	vmov	s15, r2
 800ba14:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800ba18:	3c01      	subs	r4, #1
 800ba1a:	ee67 7a80 	vmul.f32	s15, s15, s0
 800ba1e:	ee20 0a07 	vmul.f32	s0, s0, s14
 800ba22:	ed65 7a01 	vstmdb	r5!, {s15}
 800ba26:	e734      	b.n	800b892 <__kernel_rem_pio2f+0x206>
 800ba28:	eb00 0c84 	add.w	ip, r0, r4, lsl #2
 800ba2c:	ecf7 6a01 	vldmia	r7!, {s13}
 800ba30:	ed9c 7a00 	vldr	s14, [ip]
 800ba34:	eee6 7a87 	vfma.f32	s15, s13, s14
 800ba38:	3401      	adds	r4, #1
 800ba3a:	454c      	cmp	r4, r9
 800ba3c:	dc01      	bgt.n	800ba42 <__kernel_rem_pio2f+0x3b6>
 800ba3e:	42a5      	cmp	r5, r4
 800ba40:	daf2      	bge.n	800ba28 <__kernel_rem_pio2f+0x39c>
 800ba42:	aa56      	add	r2, sp, #344	; 0x158
 800ba44:	eb02 0485 	add.w	r4, r2, r5, lsl #2
 800ba48:	ed44 7a28 	vstr	s15, [r4, #-160]	; 0xffffff60
 800ba4c:	3501      	adds	r5, #1
 800ba4e:	3804      	subs	r0, #4
 800ba50:	e723      	b.n	800b89a <__kernel_rem_pio2f+0x20e>
 800ba52:	9a64      	ldr	r2, [sp, #400]	; 0x190
 800ba54:	2a03      	cmp	r2, #3
 800ba56:	d84d      	bhi.n	800baf4 <__kernel_rem_pio2f+0x468>
 800ba58:	e8df f002 	tbb	[pc, r2]
 800ba5c:	021f1f3e 	.word	0x021f1f3e
 800ba60:	aa56      	add	r2, sp, #344	; 0x158
 800ba62:	4411      	add	r1, r2
 800ba64:	399c      	subs	r1, #156	; 0x9c
 800ba66:	4608      	mov	r0, r1
 800ba68:	461c      	mov	r4, r3
 800ba6a:	2c00      	cmp	r4, #0
 800ba6c:	dc5f      	bgt.n	800bb2e <__kernel_rem_pio2f+0x4a2>
 800ba6e:	4608      	mov	r0, r1
 800ba70:	461c      	mov	r4, r3
 800ba72:	2c01      	cmp	r4, #1
 800ba74:	dc6b      	bgt.n	800bb4e <__kernel_rem_pio2f+0x4c2>
 800ba76:	ed5f 7a35 	vldr	s15, [pc, #-212]	; 800b9a4 <__kernel_rem_pio2f+0x318>
 800ba7a:	2b01      	cmp	r3, #1
 800ba7c:	dc77      	bgt.n	800bb6e <__kernel_rem_pio2f+0x4e2>
 800ba7e:	eddd 6a2e 	vldr	s13, [sp, #184]	; 0xb8
 800ba82:	ed9d 7a2f 	vldr	s14, [sp, #188]	; 0xbc
 800ba86:	f1b8 0f00 	cmp.w	r8, #0
 800ba8a:	d176      	bne.n	800bb7a <__kernel_rem_pio2f+0x4ee>
 800ba8c:	edc6 6a00 	vstr	s13, [r6]
 800ba90:	ed86 7a01 	vstr	s14, [r6, #4]
 800ba94:	edc6 7a02 	vstr	s15, [r6, #8]
 800ba98:	e02c      	b.n	800baf4 <__kernel_rem_pio2f+0x468>
 800ba9a:	aa56      	add	r2, sp, #344	; 0x158
 800ba9c:	4411      	add	r1, r2
 800ba9e:	ed1f 7a3f 	vldr	s14, [pc, #-252]	; 800b9a4 <__kernel_rem_pio2f+0x318>
 800baa2:	399c      	subs	r1, #156	; 0x9c
 800baa4:	4618      	mov	r0, r3
 800baa6:	2800      	cmp	r0, #0
 800baa8:	da32      	bge.n	800bb10 <__kernel_rem_pio2f+0x484>
 800baaa:	f1b8 0f00 	cmp.w	r8, #0
 800baae:	d035      	beq.n	800bb1c <__kernel_rem_pio2f+0x490>
 800bab0:	eef1 7a47 	vneg.f32	s15, s14
 800bab4:	edc6 7a00 	vstr	s15, [r6]
 800bab8:	eddd 7a2e 	vldr	s15, [sp, #184]	; 0xb8
 800babc:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800bac0:	a82f      	add	r0, sp, #188	; 0xbc
 800bac2:	2101      	movs	r1, #1
 800bac4:	428b      	cmp	r3, r1
 800bac6:	da2c      	bge.n	800bb22 <__kernel_rem_pio2f+0x496>
 800bac8:	f1b8 0f00 	cmp.w	r8, #0
 800bacc:	d001      	beq.n	800bad2 <__kernel_rem_pio2f+0x446>
 800bace:	eef1 7a67 	vneg.f32	s15, s15
 800bad2:	edc6 7a01 	vstr	s15, [r6, #4]
 800bad6:	e00d      	b.n	800baf4 <__kernel_rem_pio2f+0x468>
 800bad8:	aa56      	add	r2, sp, #344	; 0x158
 800bada:	4411      	add	r1, r2
 800badc:	ed5f 7a4f 	vldr	s15, [pc, #-316]	; 800b9a4 <__kernel_rem_pio2f+0x318>
 800bae0:	399c      	subs	r1, #156	; 0x9c
 800bae2:	2b00      	cmp	r3, #0
 800bae4:	da0e      	bge.n	800bb04 <__kernel_rem_pio2f+0x478>
 800bae6:	f1b8 0f00 	cmp.w	r8, #0
 800baea:	d001      	beq.n	800baf0 <__kernel_rem_pio2f+0x464>
 800baec:	eef1 7a67 	vneg.f32	s15, s15
 800baf0:	edc6 7a00 	vstr	s15, [r6]
 800baf4:	9b01      	ldr	r3, [sp, #4]
 800baf6:	f003 0007 	and.w	r0, r3, #7
 800bafa:	b057      	add	sp, #348	; 0x15c
 800bafc:	ecbd 8b04 	vpop	{d8-d9}
 800bb00:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bb04:	ed31 7a01 	vldmdb	r1!, {s14}
 800bb08:	3b01      	subs	r3, #1
 800bb0a:	ee77 7a87 	vadd.f32	s15, s15, s14
 800bb0e:	e7e8      	b.n	800bae2 <__kernel_rem_pio2f+0x456>
 800bb10:	ed71 7a01 	vldmdb	r1!, {s15}
 800bb14:	3801      	subs	r0, #1
 800bb16:	ee37 7a27 	vadd.f32	s14, s14, s15
 800bb1a:	e7c4      	b.n	800baa6 <__kernel_rem_pio2f+0x41a>
 800bb1c:	eef0 7a47 	vmov.f32	s15, s14
 800bb20:	e7c8      	b.n	800bab4 <__kernel_rem_pio2f+0x428>
 800bb22:	ecb0 7a01 	vldmia	r0!, {s14}
 800bb26:	3101      	adds	r1, #1
 800bb28:	ee77 7a87 	vadd.f32	s15, s15, s14
 800bb2c:	e7ca      	b.n	800bac4 <__kernel_rem_pio2f+0x438>
 800bb2e:	ed50 7a02 	vldr	s15, [r0, #-8]
 800bb32:	ed70 6a01 	vldmdb	r0!, {s13}
 800bb36:	ee37 7aa6 	vadd.f32	s14, s15, s13
 800bb3a:	3c01      	subs	r4, #1
 800bb3c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800bb40:	ed00 7a01 	vstr	s14, [r0, #-4]
 800bb44:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800bb48:	edc0 7a00 	vstr	s15, [r0]
 800bb4c:	e78d      	b.n	800ba6a <__kernel_rem_pio2f+0x3de>
 800bb4e:	ed50 7a02 	vldr	s15, [r0, #-8]
 800bb52:	ed70 6a01 	vldmdb	r0!, {s13}
 800bb56:	ee37 7aa6 	vadd.f32	s14, s15, s13
 800bb5a:	3c01      	subs	r4, #1
 800bb5c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800bb60:	ed00 7a01 	vstr	s14, [r0, #-4]
 800bb64:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800bb68:	edc0 7a00 	vstr	s15, [r0]
 800bb6c:	e781      	b.n	800ba72 <__kernel_rem_pio2f+0x3e6>
 800bb6e:	ed31 7a01 	vldmdb	r1!, {s14}
 800bb72:	3b01      	subs	r3, #1
 800bb74:	ee77 7a87 	vadd.f32	s15, s15, s14
 800bb78:	e77f      	b.n	800ba7a <__kernel_rem_pio2f+0x3ee>
 800bb7a:	eef1 6a66 	vneg.f32	s13, s13
 800bb7e:	eeb1 7a47 	vneg.f32	s14, s14
 800bb82:	edc6 6a00 	vstr	s13, [r6]
 800bb86:	ed86 7a01 	vstr	s14, [r6, #4]
 800bb8a:	eef1 7a67 	vneg.f32	s15, s15
 800bb8e:	e781      	b.n	800ba94 <__kernel_rem_pio2f+0x408>

0800bb90 <__kernel_sinf>:
 800bb90:	ee10 3a10 	vmov	r3, s0
 800bb94:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800bb98:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
 800bb9c:	da04      	bge.n	800bba8 <__kernel_sinf+0x18>
 800bb9e:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 800bba2:	ee17 3a90 	vmov	r3, s15
 800bba6:	b35b      	cbz	r3, 800bc00 <__kernel_sinf+0x70>
 800bba8:	ee20 7a00 	vmul.f32	s14, s0, s0
 800bbac:	eddf 7a15 	vldr	s15, [pc, #84]	; 800bc04 <__kernel_sinf+0x74>
 800bbb0:	ed9f 6a15 	vldr	s12, [pc, #84]	; 800bc08 <__kernel_sinf+0x78>
 800bbb4:	eea7 6a27 	vfma.f32	s12, s14, s15
 800bbb8:	eddf 7a14 	vldr	s15, [pc, #80]	; 800bc0c <__kernel_sinf+0x7c>
 800bbbc:	eee6 7a07 	vfma.f32	s15, s12, s14
 800bbc0:	ed9f 6a13 	vldr	s12, [pc, #76]	; 800bc10 <__kernel_sinf+0x80>
 800bbc4:	eea7 6a87 	vfma.f32	s12, s15, s14
 800bbc8:	eddf 7a12 	vldr	s15, [pc, #72]	; 800bc14 <__kernel_sinf+0x84>
 800bbcc:	ee60 6a07 	vmul.f32	s13, s0, s14
 800bbd0:	eee6 7a07 	vfma.f32	s15, s12, s14
 800bbd4:	b930      	cbnz	r0, 800bbe4 <__kernel_sinf+0x54>
 800bbd6:	ed9f 6a10 	vldr	s12, [pc, #64]	; 800bc18 <__kernel_sinf+0x88>
 800bbda:	eea7 6a27 	vfma.f32	s12, s14, s15
 800bbde:	eea6 0a26 	vfma.f32	s0, s12, s13
 800bbe2:	4770      	bx	lr
 800bbe4:	ee67 7ae6 	vnmul.f32	s15, s15, s13
 800bbe8:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 800bbec:	eee0 7a86 	vfma.f32	s15, s1, s12
 800bbf0:	eed7 0a87 	vfnms.f32	s1, s15, s14
 800bbf4:	eddf 7a09 	vldr	s15, [pc, #36]	; 800bc1c <__kernel_sinf+0x8c>
 800bbf8:	eee6 0aa7 	vfma.f32	s1, s13, s15
 800bbfc:	ee30 0a60 	vsub.f32	s0, s0, s1
 800bc00:	4770      	bx	lr
 800bc02:	bf00      	nop
 800bc04:	2f2ec9d3 	.word	0x2f2ec9d3
 800bc08:	b2d72f34 	.word	0xb2d72f34
 800bc0c:	3638ef1b 	.word	0x3638ef1b
 800bc10:	b9500d01 	.word	0xb9500d01
 800bc14:	3c088889 	.word	0x3c088889
 800bc18:	be2aaaab 	.word	0xbe2aaaab
 800bc1c:	3e2aaaab 	.word	0x3e2aaaab

0800bc20 <fabsf>:
 800bc20:	ee10 3a10 	vmov	r3, s0
 800bc24:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800bc28:	ee00 3a10 	vmov	s0, r3
 800bc2c:	4770      	bx	lr
	...

0800bc30 <floorf>:
 800bc30:	ee10 3a10 	vmov	r3, s0
 800bc34:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800bc38:	0dca      	lsrs	r2, r1, #23
 800bc3a:	3a7f      	subs	r2, #127	; 0x7f
 800bc3c:	2a16      	cmp	r2, #22
 800bc3e:	dc2a      	bgt.n	800bc96 <floorf+0x66>
 800bc40:	2a00      	cmp	r2, #0
 800bc42:	da11      	bge.n	800bc68 <floorf+0x38>
 800bc44:	eddf 7a18 	vldr	s15, [pc, #96]	; 800bca8 <floorf+0x78>
 800bc48:	ee30 0a27 	vadd.f32	s0, s0, s15
 800bc4c:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800bc50:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bc54:	dd05      	ble.n	800bc62 <floorf+0x32>
 800bc56:	2b00      	cmp	r3, #0
 800bc58:	da23      	bge.n	800bca2 <floorf+0x72>
 800bc5a:	4a14      	ldr	r2, [pc, #80]	; (800bcac <floorf+0x7c>)
 800bc5c:	2900      	cmp	r1, #0
 800bc5e:	bf18      	it	ne
 800bc60:	4613      	movne	r3, r2
 800bc62:	ee00 3a10 	vmov	s0, r3
 800bc66:	4770      	bx	lr
 800bc68:	4911      	ldr	r1, [pc, #68]	; (800bcb0 <floorf+0x80>)
 800bc6a:	4111      	asrs	r1, r2
 800bc6c:	420b      	tst	r3, r1
 800bc6e:	d0fa      	beq.n	800bc66 <floorf+0x36>
 800bc70:	eddf 7a0d 	vldr	s15, [pc, #52]	; 800bca8 <floorf+0x78>
 800bc74:	ee30 0a27 	vadd.f32	s0, s0, s15
 800bc78:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800bc7c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bc80:	ddef      	ble.n	800bc62 <floorf+0x32>
 800bc82:	2b00      	cmp	r3, #0
 800bc84:	bfbe      	ittt	lt
 800bc86:	f44f 0000 	movlt.w	r0, #8388608	; 0x800000
 800bc8a:	fa40 f202 	asrlt.w	r2, r0, r2
 800bc8e:	189b      	addlt	r3, r3, r2
 800bc90:	ea23 0301 	bic.w	r3, r3, r1
 800bc94:	e7e5      	b.n	800bc62 <floorf+0x32>
 800bc96:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 800bc9a:	d3e4      	bcc.n	800bc66 <floorf+0x36>
 800bc9c:	ee30 0a00 	vadd.f32	s0, s0, s0
 800bca0:	4770      	bx	lr
 800bca2:	2300      	movs	r3, #0
 800bca4:	e7dd      	b.n	800bc62 <floorf+0x32>
 800bca6:	bf00      	nop
 800bca8:	7149f2ca 	.word	0x7149f2ca
 800bcac:	bf800000 	.word	0xbf800000
 800bcb0:	007fffff 	.word	0x007fffff

0800bcb4 <scalbnf>:
 800bcb4:	b508      	push	{r3, lr}
 800bcb6:	ee10 2a10 	vmov	r2, s0
 800bcba:	f032 4300 	bics.w	r3, r2, #2147483648	; 0x80000000
 800bcbe:	ed2d 8b02 	vpush	{d8}
 800bcc2:	eef0 0a40 	vmov.f32	s1, s0
 800bcc6:	d004      	beq.n	800bcd2 <scalbnf+0x1e>
 800bcc8:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 800bccc:	d306      	bcc.n	800bcdc <scalbnf+0x28>
 800bcce:	ee70 0a00 	vadd.f32	s1, s0, s0
 800bcd2:	ecbd 8b02 	vpop	{d8}
 800bcd6:	eeb0 0a60 	vmov.f32	s0, s1
 800bcda:	bd08      	pop	{r3, pc}
 800bcdc:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800bce0:	d21c      	bcs.n	800bd1c <scalbnf+0x68>
 800bce2:	4b1f      	ldr	r3, [pc, #124]	; (800bd60 <scalbnf+0xac>)
 800bce4:	eddf 7a1f 	vldr	s15, [pc, #124]	; 800bd64 <scalbnf+0xb0>
 800bce8:	4298      	cmp	r0, r3
 800bcea:	ee60 0a27 	vmul.f32	s1, s0, s15
 800bcee:	db10      	blt.n	800bd12 <scalbnf+0x5e>
 800bcf0:	ee10 2a90 	vmov	r2, s1
 800bcf4:	f3c2 53c7 	ubfx	r3, r2, #23, #8
 800bcf8:	3b19      	subs	r3, #25
 800bcfa:	4403      	add	r3, r0
 800bcfc:	2bfe      	cmp	r3, #254	; 0xfe
 800bcfe:	dd0f      	ble.n	800bd20 <scalbnf+0x6c>
 800bd00:	ed9f 8a19 	vldr	s16, [pc, #100]	; 800bd68 <scalbnf+0xb4>
 800bd04:	eeb0 0a48 	vmov.f32	s0, s16
 800bd08:	f000 f834 	bl	800bd74 <copysignf>
 800bd0c:	ee60 0a08 	vmul.f32	s1, s0, s16
 800bd10:	e7df      	b.n	800bcd2 <scalbnf+0x1e>
 800bd12:	eddf 7a16 	vldr	s15, [pc, #88]	; 800bd6c <scalbnf+0xb8>
 800bd16:	ee60 0aa7 	vmul.f32	s1, s1, s15
 800bd1a:	e7da      	b.n	800bcd2 <scalbnf+0x1e>
 800bd1c:	0ddb      	lsrs	r3, r3, #23
 800bd1e:	e7ec      	b.n	800bcfa <scalbnf+0x46>
 800bd20:	2b00      	cmp	r3, #0
 800bd22:	dd06      	ble.n	800bd32 <scalbnf+0x7e>
 800bd24:	f022 42ff 	bic.w	r2, r2, #2139095040	; 0x7f800000
 800bd28:	ea42 53c3 	orr.w	r3, r2, r3, lsl #23
 800bd2c:	ee00 3a90 	vmov	s1, r3
 800bd30:	e7cf      	b.n	800bcd2 <scalbnf+0x1e>
 800bd32:	f113 0f16 	cmn.w	r3, #22
 800bd36:	da06      	bge.n	800bd46 <scalbnf+0x92>
 800bd38:	f24c 3350 	movw	r3, #50000	; 0xc350
 800bd3c:	4298      	cmp	r0, r3
 800bd3e:	dcdf      	bgt.n	800bd00 <scalbnf+0x4c>
 800bd40:	ed9f 8a0a 	vldr	s16, [pc, #40]	; 800bd6c <scalbnf+0xb8>
 800bd44:	e7de      	b.n	800bd04 <scalbnf+0x50>
 800bd46:	3319      	adds	r3, #25
 800bd48:	f022 42ff 	bic.w	r2, r2, #2139095040	; 0x7f800000
 800bd4c:	ea42 53c3 	orr.w	r3, r2, r3, lsl #23
 800bd50:	eddf 7a07 	vldr	s15, [pc, #28]	; 800bd70 <scalbnf+0xbc>
 800bd54:	ee07 3a10 	vmov	s14, r3
 800bd58:	ee67 0a27 	vmul.f32	s1, s14, s15
 800bd5c:	e7b9      	b.n	800bcd2 <scalbnf+0x1e>
 800bd5e:	bf00      	nop
 800bd60:	ffff3cb0 	.word	0xffff3cb0
 800bd64:	4c000000 	.word	0x4c000000
 800bd68:	7149f2ca 	.word	0x7149f2ca
 800bd6c:	0da24260 	.word	0x0da24260
 800bd70:	33000000 	.word	0x33000000

0800bd74 <copysignf>:
 800bd74:	ee10 3a10 	vmov	r3, s0
 800bd78:	ee10 2a90 	vmov	r2, s1
 800bd7c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800bd80:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 800bd84:	4313      	orrs	r3, r2
 800bd86:	ee00 3a10 	vmov	s0, r3
 800bd8a:	4770      	bx	lr

0800bd8c <_init>:
 800bd8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bd8e:	bf00      	nop
 800bd90:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bd92:	bc08      	pop	{r3}
 800bd94:	469e      	mov	lr, r3
 800bd96:	4770      	bx	lr

0800bd98 <_fini>:
 800bd98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bd9a:	bf00      	nop
 800bd9c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bd9e:	bc08      	pop	{r3}
 800bda0:	469e      	mov	lr, r3
 800bda2:	4770      	bx	lr
