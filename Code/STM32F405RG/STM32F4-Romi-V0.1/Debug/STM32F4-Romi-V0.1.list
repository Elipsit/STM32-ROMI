
STM32F4-Romi-V0.1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000956c  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000f20  08009700  08009700  00019700  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a620  0800a620  000201e4  2**0
                  CONTENTS
  4 .ARM          00000008  0800a620  0800a620  0001a620  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a628  0800a628  000201e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a628  0800a628  0001a628  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a62c  0800a62c  0001a62c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e4  20000000  0800a630  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000007f8  200001e4  0800a814  000201e4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200009dc  0800a814  000209dc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201e4  2**0
                  CONTENTS, READONLY
 12 .debug_info   00017725  00000000  00000000  00020214  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002f4e  00000000  00000000  00037939  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001570  00000000  00000000  0003a888  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001428  00000000  00000000  0003bdf8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000219cb  00000000  00000000  0003d220  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   000106af  00000000  00000000  0005ebeb  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000c8d32  00000000  00000000  0006f29a  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00137fcc  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006ba4  00000000  00000000  00138048  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001e4 	.word	0x200001e4
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080096e4 	.word	0x080096e4

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001e8 	.word	0x200001e8
 80001cc:	080096e4 	.word	0x080096e4

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003be:	f1a4 0401 	sub.w	r4, r4, #1
 80003c2:	d1e9      	bne.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_uldivmod>:
 8000ba8:	b953      	cbnz	r3, 8000bc0 <__aeabi_uldivmod+0x18>
 8000baa:	b94a      	cbnz	r2, 8000bc0 <__aeabi_uldivmod+0x18>
 8000bac:	2900      	cmp	r1, #0
 8000bae:	bf08      	it	eq
 8000bb0:	2800      	cmpeq	r0, #0
 8000bb2:	bf1c      	itt	ne
 8000bb4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bb8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bbc:	f000 b972 	b.w	8000ea4 <__aeabi_idiv0>
 8000bc0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bc4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bc8:	f000 f806 	bl	8000bd8 <__udivmoddi4>
 8000bcc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bd0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bd4:	b004      	add	sp, #16
 8000bd6:	4770      	bx	lr

08000bd8 <__udivmoddi4>:
 8000bd8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bdc:	9e08      	ldr	r6, [sp, #32]
 8000bde:	4604      	mov	r4, r0
 8000be0:	4688      	mov	r8, r1
 8000be2:	2b00      	cmp	r3, #0
 8000be4:	d14b      	bne.n	8000c7e <__udivmoddi4+0xa6>
 8000be6:	428a      	cmp	r2, r1
 8000be8:	4615      	mov	r5, r2
 8000bea:	d967      	bls.n	8000cbc <__udivmoddi4+0xe4>
 8000bec:	fab2 f282 	clz	r2, r2
 8000bf0:	b14a      	cbz	r2, 8000c06 <__udivmoddi4+0x2e>
 8000bf2:	f1c2 0720 	rsb	r7, r2, #32
 8000bf6:	fa01 f302 	lsl.w	r3, r1, r2
 8000bfa:	fa20 f707 	lsr.w	r7, r0, r7
 8000bfe:	4095      	lsls	r5, r2
 8000c00:	ea47 0803 	orr.w	r8, r7, r3
 8000c04:	4094      	lsls	r4, r2
 8000c06:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000c0a:	0c23      	lsrs	r3, r4, #16
 8000c0c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000c10:	fa1f fc85 	uxth.w	ip, r5
 8000c14:	fb0e 8817 	mls	r8, lr, r7, r8
 8000c18:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000c1c:	fb07 f10c 	mul.w	r1, r7, ip
 8000c20:	4299      	cmp	r1, r3
 8000c22:	d909      	bls.n	8000c38 <__udivmoddi4+0x60>
 8000c24:	18eb      	adds	r3, r5, r3
 8000c26:	f107 30ff 	add.w	r0, r7, #4294967295
 8000c2a:	f080 811b 	bcs.w	8000e64 <__udivmoddi4+0x28c>
 8000c2e:	4299      	cmp	r1, r3
 8000c30:	f240 8118 	bls.w	8000e64 <__udivmoddi4+0x28c>
 8000c34:	3f02      	subs	r7, #2
 8000c36:	442b      	add	r3, r5
 8000c38:	1a5b      	subs	r3, r3, r1
 8000c3a:	b2a4      	uxth	r4, r4
 8000c3c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000c40:	fb0e 3310 	mls	r3, lr, r0, r3
 8000c44:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c48:	fb00 fc0c 	mul.w	ip, r0, ip
 8000c4c:	45a4      	cmp	ip, r4
 8000c4e:	d909      	bls.n	8000c64 <__udivmoddi4+0x8c>
 8000c50:	192c      	adds	r4, r5, r4
 8000c52:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c56:	f080 8107 	bcs.w	8000e68 <__udivmoddi4+0x290>
 8000c5a:	45a4      	cmp	ip, r4
 8000c5c:	f240 8104 	bls.w	8000e68 <__udivmoddi4+0x290>
 8000c60:	3802      	subs	r0, #2
 8000c62:	442c      	add	r4, r5
 8000c64:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000c68:	eba4 040c 	sub.w	r4, r4, ip
 8000c6c:	2700      	movs	r7, #0
 8000c6e:	b11e      	cbz	r6, 8000c78 <__udivmoddi4+0xa0>
 8000c70:	40d4      	lsrs	r4, r2
 8000c72:	2300      	movs	r3, #0
 8000c74:	e9c6 4300 	strd	r4, r3, [r6]
 8000c78:	4639      	mov	r1, r7
 8000c7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c7e:	428b      	cmp	r3, r1
 8000c80:	d909      	bls.n	8000c96 <__udivmoddi4+0xbe>
 8000c82:	2e00      	cmp	r6, #0
 8000c84:	f000 80eb 	beq.w	8000e5e <__udivmoddi4+0x286>
 8000c88:	2700      	movs	r7, #0
 8000c8a:	e9c6 0100 	strd	r0, r1, [r6]
 8000c8e:	4638      	mov	r0, r7
 8000c90:	4639      	mov	r1, r7
 8000c92:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c96:	fab3 f783 	clz	r7, r3
 8000c9a:	2f00      	cmp	r7, #0
 8000c9c:	d147      	bne.n	8000d2e <__udivmoddi4+0x156>
 8000c9e:	428b      	cmp	r3, r1
 8000ca0:	d302      	bcc.n	8000ca8 <__udivmoddi4+0xd0>
 8000ca2:	4282      	cmp	r2, r0
 8000ca4:	f200 80fa 	bhi.w	8000e9c <__udivmoddi4+0x2c4>
 8000ca8:	1a84      	subs	r4, r0, r2
 8000caa:	eb61 0303 	sbc.w	r3, r1, r3
 8000cae:	2001      	movs	r0, #1
 8000cb0:	4698      	mov	r8, r3
 8000cb2:	2e00      	cmp	r6, #0
 8000cb4:	d0e0      	beq.n	8000c78 <__udivmoddi4+0xa0>
 8000cb6:	e9c6 4800 	strd	r4, r8, [r6]
 8000cba:	e7dd      	b.n	8000c78 <__udivmoddi4+0xa0>
 8000cbc:	b902      	cbnz	r2, 8000cc0 <__udivmoddi4+0xe8>
 8000cbe:	deff      	udf	#255	; 0xff
 8000cc0:	fab2 f282 	clz	r2, r2
 8000cc4:	2a00      	cmp	r2, #0
 8000cc6:	f040 808f 	bne.w	8000de8 <__udivmoddi4+0x210>
 8000cca:	1b49      	subs	r1, r1, r5
 8000ccc:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000cd0:	fa1f f885 	uxth.w	r8, r5
 8000cd4:	2701      	movs	r7, #1
 8000cd6:	fbb1 fcfe 	udiv	ip, r1, lr
 8000cda:	0c23      	lsrs	r3, r4, #16
 8000cdc:	fb0e 111c 	mls	r1, lr, ip, r1
 8000ce0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000ce4:	fb08 f10c 	mul.w	r1, r8, ip
 8000ce8:	4299      	cmp	r1, r3
 8000cea:	d907      	bls.n	8000cfc <__udivmoddi4+0x124>
 8000cec:	18eb      	adds	r3, r5, r3
 8000cee:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000cf2:	d202      	bcs.n	8000cfa <__udivmoddi4+0x122>
 8000cf4:	4299      	cmp	r1, r3
 8000cf6:	f200 80cd 	bhi.w	8000e94 <__udivmoddi4+0x2bc>
 8000cfa:	4684      	mov	ip, r0
 8000cfc:	1a59      	subs	r1, r3, r1
 8000cfe:	b2a3      	uxth	r3, r4
 8000d00:	fbb1 f0fe 	udiv	r0, r1, lr
 8000d04:	fb0e 1410 	mls	r4, lr, r0, r1
 8000d08:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000d0c:	fb08 f800 	mul.w	r8, r8, r0
 8000d10:	45a0      	cmp	r8, r4
 8000d12:	d907      	bls.n	8000d24 <__udivmoddi4+0x14c>
 8000d14:	192c      	adds	r4, r5, r4
 8000d16:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d1a:	d202      	bcs.n	8000d22 <__udivmoddi4+0x14a>
 8000d1c:	45a0      	cmp	r8, r4
 8000d1e:	f200 80b6 	bhi.w	8000e8e <__udivmoddi4+0x2b6>
 8000d22:	4618      	mov	r0, r3
 8000d24:	eba4 0408 	sub.w	r4, r4, r8
 8000d28:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000d2c:	e79f      	b.n	8000c6e <__udivmoddi4+0x96>
 8000d2e:	f1c7 0c20 	rsb	ip, r7, #32
 8000d32:	40bb      	lsls	r3, r7
 8000d34:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000d38:	ea4e 0e03 	orr.w	lr, lr, r3
 8000d3c:	fa01 f407 	lsl.w	r4, r1, r7
 8000d40:	fa20 f50c 	lsr.w	r5, r0, ip
 8000d44:	fa21 f30c 	lsr.w	r3, r1, ip
 8000d48:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000d4c:	4325      	orrs	r5, r4
 8000d4e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000d52:	0c2c      	lsrs	r4, r5, #16
 8000d54:	fb08 3319 	mls	r3, r8, r9, r3
 8000d58:	fa1f fa8e 	uxth.w	sl, lr
 8000d5c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000d60:	fb09 f40a 	mul.w	r4, r9, sl
 8000d64:	429c      	cmp	r4, r3
 8000d66:	fa02 f207 	lsl.w	r2, r2, r7
 8000d6a:	fa00 f107 	lsl.w	r1, r0, r7
 8000d6e:	d90b      	bls.n	8000d88 <__udivmoddi4+0x1b0>
 8000d70:	eb1e 0303 	adds.w	r3, lr, r3
 8000d74:	f109 30ff 	add.w	r0, r9, #4294967295
 8000d78:	f080 8087 	bcs.w	8000e8a <__udivmoddi4+0x2b2>
 8000d7c:	429c      	cmp	r4, r3
 8000d7e:	f240 8084 	bls.w	8000e8a <__udivmoddi4+0x2b2>
 8000d82:	f1a9 0902 	sub.w	r9, r9, #2
 8000d86:	4473      	add	r3, lr
 8000d88:	1b1b      	subs	r3, r3, r4
 8000d8a:	b2ad      	uxth	r5, r5
 8000d8c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d90:	fb08 3310 	mls	r3, r8, r0, r3
 8000d94:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000d98:	fb00 fa0a 	mul.w	sl, r0, sl
 8000d9c:	45a2      	cmp	sl, r4
 8000d9e:	d908      	bls.n	8000db2 <__udivmoddi4+0x1da>
 8000da0:	eb1e 0404 	adds.w	r4, lr, r4
 8000da4:	f100 33ff 	add.w	r3, r0, #4294967295
 8000da8:	d26b      	bcs.n	8000e82 <__udivmoddi4+0x2aa>
 8000daa:	45a2      	cmp	sl, r4
 8000dac:	d969      	bls.n	8000e82 <__udivmoddi4+0x2aa>
 8000dae:	3802      	subs	r0, #2
 8000db0:	4474      	add	r4, lr
 8000db2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000db6:	fba0 8902 	umull	r8, r9, r0, r2
 8000dba:	eba4 040a 	sub.w	r4, r4, sl
 8000dbe:	454c      	cmp	r4, r9
 8000dc0:	46c2      	mov	sl, r8
 8000dc2:	464b      	mov	r3, r9
 8000dc4:	d354      	bcc.n	8000e70 <__udivmoddi4+0x298>
 8000dc6:	d051      	beq.n	8000e6c <__udivmoddi4+0x294>
 8000dc8:	2e00      	cmp	r6, #0
 8000dca:	d069      	beq.n	8000ea0 <__udivmoddi4+0x2c8>
 8000dcc:	ebb1 050a 	subs.w	r5, r1, sl
 8000dd0:	eb64 0403 	sbc.w	r4, r4, r3
 8000dd4:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000dd8:	40fd      	lsrs	r5, r7
 8000dda:	40fc      	lsrs	r4, r7
 8000ddc:	ea4c 0505 	orr.w	r5, ip, r5
 8000de0:	e9c6 5400 	strd	r5, r4, [r6]
 8000de4:	2700      	movs	r7, #0
 8000de6:	e747      	b.n	8000c78 <__udivmoddi4+0xa0>
 8000de8:	f1c2 0320 	rsb	r3, r2, #32
 8000dec:	fa20 f703 	lsr.w	r7, r0, r3
 8000df0:	4095      	lsls	r5, r2
 8000df2:	fa01 f002 	lsl.w	r0, r1, r2
 8000df6:	fa21 f303 	lsr.w	r3, r1, r3
 8000dfa:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000dfe:	4338      	orrs	r0, r7
 8000e00:	0c01      	lsrs	r1, r0, #16
 8000e02:	fbb3 f7fe 	udiv	r7, r3, lr
 8000e06:	fa1f f885 	uxth.w	r8, r5
 8000e0a:	fb0e 3317 	mls	r3, lr, r7, r3
 8000e0e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e12:	fb07 f308 	mul.w	r3, r7, r8
 8000e16:	428b      	cmp	r3, r1
 8000e18:	fa04 f402 	lsl.w	r4, r4, r2
 8000e1c:	d907      	bls.n	8000e2e <__udivmoddi4+0x256>
 8000e1e:	1869      	adds	r1, r5, r1
 8000e20:	f107 3cff 	add.w	ip, r7, #4294967295
 8000e24:	d22f      	bcs.n	8000e86 <__udivmoddi4+0x2ae>
 8000e26:	428b      	cmp	r3, r1
 8000e28:	d92d      	bls.n	8000e86 <__udivmoddi4+0x2ae>
 8000e2a:	3f02      	subs	r7, #2
 8000e2c:	4429      	add	r1, r5
 8000e2e:	1acb      	subs	r3, r1, r3
 8000e30:	b281      	uxth	r1, r0
 8000e32:	fbb3 f0fe 	udiv	r0, r3, lr
 8000e36:	fb0e 3310 	mls	r3, lr, r0, r3
 8000e3a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e3e:	fb00 f308 	mul.w	r3, r0, r8
 8000e42:	428b      	cmp	r3, r1
 8000e44:	d907      	bls.n	8000e56 <__udivmoddi4+0x27e>
 8000e46:	1869      	adds	r1, r5, r1
 8000e48:	f100 3cff 	add.w	ip, r0, #4294967295
 8000e4c:	d217      	bcs.n	8000e7e <__udivmoddi4+0x2a6>
 8000e4e:	428b      	cmp	r3, r1
 8000e50:	d915      	bls.n	8000e7e <__udivmoddi4+0x2a6>
 8000e52:	3802      	subs	r0, #2
 8000e54:	4429      	add	r1, r5
 8000e56:	1ac9      	subs	r1, r1, r3
 8000e58:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000e5c:	e73b      	b.n	8000cd6 <__udivmoddi4+0xfe>
 8000e5e:	4637      	mov	r7, r6
 8000e60:	4630      	mov	r0, r6
 8000e62:	e709      	b.n	8000c78 <__udivmoddi4+0xa0>
 8000e64:	4607      	mov	r7, r0
 8000e66:	e6e7      	b.n	8000c38 <__udivmoddi4+0x60>
 8000e68:	4618      	mov	r0, r3
 8000e6a:	e6fb      	b.n	8000c64 <__udivmoddi4+0x8c>
 8000e6c:	4541      	cmp	r1, r8
 8000e6e:	d2ab      	bcs.n	8000dc8 <__udivmoddi4+0x1f0>
 8000e70:	ebb8 0a02 	subs.w	sl, r8, r2
 8000e74:	eb69 020e 	sbc.w	r2, r9, lr
 8000e78:	3801      	subs	r0, #1
 8000e7a:	4613      	mov	r3, r2
 8000e7c:	e7a4      	b.n	8000dc8 <__udivmoddi4+0x1f0>
 8000e7e:	4660      	mov	r0, ip
 8000e80:	e7e9      	b.n	8000e56 <__udivmoddi4+0x27e>
 8000e82:	4618      	mov	r0, r3
 8000e84:	e795      	b.n	8000db2 <__udivmoddi4+0x1da>
 8000e86:	4667      	mov	r7, ip
 8000e88:	e7d1      	b.n	8000e2e <__udivmoddi4+0x256>
 8000e8a:	4681      	mov	r9, r0
 8000e8c:	e77c      	b.n	8000d88 <__udivmoddi4+0x1b0>
 8000e8e:	3802      	subs	r0, #2
 8000e90:	442c      	add	r4, r5
 8000e92:	e747      	b.n	8000d24 <__udivmoddi4+0x14c>
 8000e94:	f1ac 0c02 	sub.w	ip, ip, #2
 8000e98:	442b      	add	r3, r5
 8000e9a:	e72f      	b.n	8000cfc <__udivmoddi4+0x124>
 8000e9c:	4638      	mov	r0, r7
 8000e9e:	e708      	b.n	8000cb2 <__udivmoddi4+0xda>
 8000ea0:	4637      	mov	r7, r6
 8000ea2:	e6e9      	b.n	8000c78 <__udivmoddi4+0xa0>

08000ea4 <__aeabi_idiv0>:
 8000ea4:	4770      	bx	lr
 8000ea6:	bf00      	nop

08000ea8 <appMain>:
void uSec_Delay(uint32_t uSec);
void checksonar(SONAR_STATUS *sonar);
void setPWM(TIM_HandleTypeDef, uint32_t, uint16_t, uint16_t);

// main application loop
void appMain(void){
 8000ea8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000eaa:	b09b      	sub	sp, #108	; 0x6c
 8000eac:	af10      	add	r7, sp, #64	; 0x40
	/* Check Hardware Revision Bits*/
	RevBit[0] =	HAL_GPIO_ReadPin(REV_BIT0_GPIO_Port, REV_BIT0_Pin);
 8000eae:	2102      	movs	r1, #2
 8000eb0:	488f      	ldr	r0, [pc, #572]	; (80010f0 <appMain+0x248>)
 8000eb2:	f002 fcb9 	bl	8003828 <HAL_GPIO_ReadPin>
 8000eb6:	4603      	mov	r3, r0
 8000eb8:	461a      	mov	r2, r3
 8000eba:	4b8e      	ldr	r3, [pc, #568]	; (80010f4 <appMain+0x24c>)
 8000ebc:	701a      	strb	r2, [r3, #0]
	RevBit[1] =	HAL_GPIO_ReadPin(REV_BIT1_GPIO_Port, REV_BIT1_Pin);
 8000ebe:	2104      	movs	r1, #4
 8000ec0:	488b      	ldr	r0, [pc, #556]	; (80010f0 <appMain+0x248>)
 8000ec2:	f002 fcb1 	bl	8003828 <HAL_GPIO_ReadPin>
 8000ec6:	4603      	mov	r3, r0
 8000ec8:	461a      	mov	r2, r3
 8000eca:	4b8a      	ldr	r3, [pc, #552]	; (80010f4 <appMain+0x24c>)
 8000ecc:	705a      	strb	r2, [r3, #1]
	RevBit[2] =	HAL_GPIO_ReadPin(REV_BIT2_GPIO_Port, REV_BIT2_Pin);
 8000ece:	2108      	movs	r1, #8
 8000ed0:	4887      	ldr	r0, [pc, #540]	; (80010f0 <appMain+0x248>)
 8000ed2:	f002 fca9 	bl	8003828 <HAL_GPIO_ReadPin>
 8000ed6:	4603      	mov	r3, r0
 8000ed8:	461a      	mov	r2, r3
 8000eda:	4b86      	ldr	r3, [pc, #536]	; (80010f4 <appMain+0x24c>)
 8000edc:	709a      	strb	r2, [r3, #2]


	//hal pwm start
	  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_3);  //Start PWM
 8000ede:	2108      	movs	r1, #8
 8000ee0:	4885      	ldr	r0, [pc, #532]	; (80010f8 <appMain+0x250>)
 8000ee2:	f003 ff9b 	bl	8004e1c <HAL_TIM_PWM_Start>
	  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1);  //Start PWM
 8000ee6:	2100      	movs	r1, #0
 8000ee8:	4884      	ldr	r0, [pc, #528]	; (80010fc <appMain+0x254>)
 8000eea:	f003 ff97 	bl	8004e1c <HAL_TIM_PWM_Start>

	//hal encoder start

	int32_t MTR_PWM_PERIOD = 255;
 8000eee:	23ff      	movs	r3, #255	; 0xff
 8000ef0:	61fb      	str	r3, [r7, #28]
	int32_t MAX_SPEED;
	int32_t MAX_VELOCITY;

	int16_t speed_l = 20;
 8000ef2:	2314      	movs	r3, #20
 8000ef4:	84fb      	strh	r3, [r7, #38]	; 0x26
	int16_t speed_r = 20;
 8000ef6:	2314      	movs	r3, #20
 8000ef8:	84bb      	strh	r3, [r7, #36]	; 0x24

	int16_t duty_l = 0;
 8000efa:	2300      	movs	r3, #0
 8000efc:	837b      	strh	r3, [r7, #26]
	int16_t duty_r = 0;
 8000efe:	2300      	movs	r3, #0
 8000f00:	833b      	strh	r3, [r7, #24]

	uint32_t BLINK_RATE = 50;
 8000f02:	2332      	movs	r3, #50	; 0x32
 8000f04:	617b      	str	r3, [r7, #20]
	uint32_t BlinkTimer = BLINK_RATE;
 8000f06:	697b      	ldr	r3, [r7, #20]
 8000f08:	623b      	str	r3, [r7, #32]

	uint32_t PID_RATE = 50;
 8000f0a:	2332      	movs	r3, #50	; 0x32
 8000f0c:	613b      	str	r3, [r7, #16]
	uint32_t PIDTimer = PID_RATE;
 8000f0e:	693b      	ldr	r3, [r7, #16]
 8000f10:	60fb      	str	r3, [r7, #12]

	printf("Power up initiated...\r\n");
 8000f12:	487b      	ldr	r0, [pc, #492]	; (8001100 <appMain+0x258>)
 8000f14:	f006 fd18 	bl	8007948 <puts>
	printf("All systems nominal..\r\n");
 8000f18:	487a      	ldr	r0, [pc, #488]	; (8001104 <appMain+0x25c>)
 8000f1a:	f006 fd15 	bl	8007948 <puts>
	printf("Hardware Revision: %d%d%d\r\n",RevBit[2],RevBit[2],RevBit[2]);
 8000f1e:	4b75      	ldr	r3, [pc, #468]	; (80010f4 <appMain+0x24c>)
 8000f20:	789b      	ldrb	r3, [r3, #2]
 8000f22:	4619      	mov	r1, r3
 8000f24:	4b73      	ldr	r3, [pc, #460]	; (80010f4 <appMain+0x24c>)
 8000f26:	789b      	ldrb	r3, [r3, #2]
 8000f28:	461a      	mov	r2, r3
 8000f2a:	4b72      	ldr	r3, [pc, #456]	; (80010f4 <appMain+0x24c>)
 8000f2c:	789b      	ldrb	r3, [r3, #2]
 8000f2e:	4876      	ldr	r0, [pc, #472]	; (8001108 <appMain+0x260>)
 8000f30:	f006 fc82 	bl	8007838 <iprintf>

	//Initialize OLED
	SSD1306_Init();
 8000f34:	f000 f9a0 	bl	8001278 <SSD1306_Init>
	SSD1306_Clear();
 8000f38:	f000 fbc3 	bl	80016c2 <SSD1306_Clear>
	SSD1306_DrawBitmap(0, 0, ologic, 128, 64, 1);
 8000f3c:	2301      	movs	r3, #1
 8000f3e:	9301      	str	r3, [sp, #4]
 8000f40:	2340      	movs	r3, #64	; 0x40
 8000f42:	9300      	str	r3, [sp, #0]
 8000f44:	2380      	movs	r3, #128	; 0x80
 8000f46:	4a71      	ldr	r2, [pc, #452]	; (800110c <appMain+0x264>)
 8000f48:	2100      	movs	r1, #0
 8000f4a:	2000      	movs	r0, #0
 8000f4c:	f000 f92c 	bl	80011a8 <SSD1306_DrawBitmap>
	SSD1306_UpdateScreen();
 8000f50:	f000 fa56 	bl	8001400 <SSD1306_UpdateScreen>
	HAL_Delay(2000);
 8000f54:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000f58:	f001 ffae 	bl	8002eb8 <HAL_Delay>
	SSD1306_Clear();
 8000f5c:	f000 fbb1 	bl	80016c2 <SSD1306_Clear>
	SSD1306_GotoXY(30, 0);
 8000f60:	2100      	movs	r1, #0
 8000f62:	201e      	movs	r0, #30
 8000f64:	f000 faf2 	bl	800154c <SSD1306_GotoXY>
	SSD1306_Puts("STM32-ROMI", &Font_7x10, 1);
 8000f68:	2201      	movs	r2, #1
 8000f6a:	4969      	ldr	r1, [pc, #420]	; (8001110 <appMain+0x268>)
 8000f6c:	4869      	ldr	r0, [pc, #420]	; (8001114 <appMain+0x26c>)
 8000f6e:	f000 fb83 	bl	8001678 <SSD1306_Puts>
	SSD1306_UpdateScreen();
 8000f72:	f000 fa45 	bl	8001400 <SSD1306_UpdateScreen>
	HAL_Delay(100);
 8000f76:	2064      	movs	r0, #100	; 0x64
 8000f78:	f001 ff9e 	bl	8002eb8 <HAL_Delay>

	uint32_t tick = HAL_GetTick();
 8000f7c:	f001 ff90 	bl	8002ea0 <HAL_GetTick>
 8000f80:	60b8      	str	r0, [r7, #8]

	//Set Direction bits to 0 for forward
	HAL_GPIO_WritePin(ROMI_DIRL_GPIO_Port, ROMI_DIRL_Pin, RESET);
 8000f82:	2200      	movs	r2, #0
 8000f84:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000f88:	4859      	ldr	r0, [pc, #356]	; (80010f0 <appMain+0x248>)
 8000f8a:	f002 fc65 	bl	8003858 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(ROMI_DIRR_GPIO_Port, ROMI_DIRR_Pin, RESET);
 8000f8e:	2200      	movs	r2, #0
 8000f90:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000f94:	4860      	ldr	r0, [pc, #384]	; (8001118 <appMain+0x270>)
 8000f96:	f002 fc5f 	bl	8003858 <HAL_GPIO_WritePin>
	//Set Sleep bits to 1 for enable
	HAL_GPIO_WritePin(ROMI_SLPL_GPIO_Port, ROMI_SLPL_Pin, SET);
 8000f9a:	2201      	movs	r2, #1
 8000f9c:	2140      	movs	r1, #64	; 0x40
 8000f9e:	4854      	ldr	r0, [pc, #336]	; (80010f0 <appMain+0x248>)
 8000fa0:	f002 fc5a 	bl	8003858 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(ROMI_SLPR_GPIO_Port, ROMI_SLPR_Pin, SET);
 8000fa4:	2201      	movs	r2, #1
 8000fa6:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000faa:	485b      	ldr	r0, [pc, #364]	; (8001118 <appMain+0x270>)
 8000fac:	f002 fc54 	bl	8003858 <HAL_GPIO_WritePin>
	//Main program to loop forever
	while(1){
		//printf("Check Sonar\r\n");
		//checksonar(&sonar);
		//HAL_Delay(1000);
		uint32_t tock = HAL_GetTick();
 8000fb0:	f001 ff76 	bl	8002ea0 <HAL_GetTick>
 8000fb4:	6078      	str	r0, [r7, #4]

		if(tock-tick>10){
 8000fb6:	687a      	ldr	r2, [r7, #4]
 8000fb8:	68bb      	ldr	r3, [r7, #8]
 8000fba:	1ad3      	subs	r3, r2, r3
 8000fbc:	2b0a      	cmp	r3, #10
 8000fbe:	d90b      	bls.n	8000fd8 <appMain+0x130>
			BlinkTimer--;
 8000fc0:	6a3b      	ldr	r3, [r7, #32]
 8000fc2:	3b01      	subs	r3, #1
 8000fc4:	623b      	str	r3, [r7, #32]
			if(BlinkTimer==0){
 8000fc6:	6a3b      	ldr	r3, [r7, #32]
 8000fc8:	2b00      	cmp	r3, #0
 8000fca:	d105      	bne.n	8000fd8 <appMain+0x130>
				BlinkTimer = BLINK_RATE;
 8000fcc:	697b      	ldr	r3, [r7, #20]
 8000fce:	623b      	str	r3, [r7, #32]
				HAL_GPIO_TogglePin(Blinky_GPIO_Port, Blinky_Pin);
 8000fd0:	2120      	movs	r1, #32
 8000fd2:	4852      	ldr	r0, [pc, #328]	; (800111c <appMain+0x274>)
 8000fd4:	f002 fc59 	bl	800388a <HAL_GPIO_TogglePin>
			}
		}

		/// use this to adjust the pwm
		int c = getchar();
 8000fd8:	f005 ff3a 	bl	8006e50 <getchar>
 8000fdc:	6038      	str	r0, [r7, #0]
			if(c != EOF){
 8000fde:	683b      	ldr	r3, [r7, #0]
 8000fe0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000fe4:	d03c      	beq.n	8001060 <appMain+0x1b8>
				putchar(c);
 8000fe6:	6838      	ldr	r0, [r7, #0]
 8000fe8:	f006 fc3e 	bl	8007868 <putchar>

				if(c == '+'){
 8000fec:	683b      	ldr	r3, [r7, #0]
 8000fee:	2b2b      	cmp	r3, #43	; 0x2b
 8000ff0:	d108      	bne.n	8001004 <appMain+0x15c>
					if(speed_l < MTR_PWM_PERIOD){
 8000ff2:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 8000ff6:	69fa      	ldr	r2, [r7, #28]
 8000ff8:	429a      	cmp	r2, r3
 8000ffa:	dd03      	ble.n	8001004 <appMain+0x15c>
						speed_l += 10;
 8000ffc:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8000ffe:	330a      	adds	r3, #10
 8001000:	b29b      	uxth	r3, r3
 8001002:	84fb      	strh	r3, [r7, #38]	; 0x26
					}
				}
				if(c == '-'){
 8001004:	683b      	ldr	r3, [r7, #0]
 8001006:	2b2d      	cmp	r3, #45	; 0x2d
 8001008:	d109      	bne.n	800101e <appMain+0x176>
					if(speed_l > -MTR_PWM_PERIOD){
 800100a:	f9b7 2026 	ldrsh.w	r2, [r7, #38]	; 0x26
 800100e:	69fb      	ldr	r3, [r7, #28]
 8001010:	425b      	negs	r3, r3
 8001012:	429a      	cmp	r2, r3
 8001014:	dd03      	ble.n	800101e <appMain+0x176>
						speed_l -= 10;
 8001016:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8001018:	3b0a      	subs	r3, #10
 800101a:	b29b      	uxth	r3, r3
 800101c:	84fb      	strh	r3, [r7, #38]	; 0x26
					}
				}

				if(c == '>'){
 800101e:	683b      	ldr	r3, [r7, #0]
 8001020:	2b3e      	cmp	r3, #62	; 0x3e
 8001022:	d108      	bne.n	8001036 <appMain+0x18e>
					if(speed_r < MTR_PWM_PERIOD){
 8001024:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 8001028:	69fa      	ldr	r2, [r7, #28]
 800102a:	429a      	cmp	r2, r3
 800102c:	dd03      	ble.n	8001036 <appMain+0x18e>
						speed_r += 80;
 800102e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001030:	3350      	adds	r3, #80	; 0x50
 8001032:	b29b      	uxth	r3, r3
 8001034:	84bb      	strh	r3, [r7, #36]	; 0x24
					}
				}
				if(c == '<'){
 8001036:	683b      	ldr	r3, [r7, #0]
 8001038:	2b3c      	cmp	r3, #60	; 0x3c
 800103a:	d109      	bne.n	8001050 <appMain+0x1a8>
					if(speed_r > -MTR_PWM_PERIOD){
 800103c:	f9b7 2024 	ldrsh.w	r2, [r7, #36]	; 0x24
 8001040:	69fb      	ldr	r3, [r7, #28]
 8001042:	425b      	negs	r3, r3
 8001044:	429a      	cmp	r2, r3
 8001046:	dd03      	ble.n	8001050 <appMain+0x1a8>
						speed_r -= 80;
 8001048:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800104a:	3b50      	subs	r3, #80	; 0x50
 800104c:	b29b      	uxth	r3, r3
 800104e:	84bb      	strh	r3, [r7, #36]	; 0x24
					}
				}
				if(c == ' '){
 8001050:	683b      	ldr	r3, [r7, #0]
 8001052:	2b20      	cmp	r3, #32
 8001054:	d10a      	bne.n	800106c <appMain+0x1c4>
					speed_r = 0;
 8001056:	2300      	movs	r3, #0
 8001058:	84bb      	strh	r3, [r7, #36]	; 0x24
					speed_l = 0;
 800105a:	2300      	movs	r3, #0
 800105c:	84fb      	strh	r3, [r7, #38]	; 0x26
 800105e:	e005      	b.n	800106c <appMain+0x1c4>
				}
			}

			else{
				clearerr(stdin); // Reset the EOF Condition
 8001060:	4b2f      	ldr	r3, [pc, #188]	; (8001120 <appMain+0x278>)
 8001062:	681b      	ldr	r3, [r3, #0]
 8001064:	685b      	ldr	r3, [r3, #4]
 8001066:	4618      	mov	r0, r3
 8001068:	f005 fde0 	bl	8006c2c <clearerr>
				}

				setPWM(htim2, TIM_CHANNEL_3, MTR_PWM_PERIOD, speed_r);
 800106c:	69fb      	ldr	r3, [r7, #28]
 800106e:	b29b      	uxth	r3, r3
 8001070:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8001072:	4e21      	ldr	r6, [pc, #132]	; (80010f8 <appMain+0x250>)
 8001074:	920e      	str	r2, [sp, #56]	; 0x38
 8001076:	930d      	str	r3, [sp, #52]	; 0x34
 8001078:	2308      	movs	r3, #8
 800107a:	930c      	str	r3, [sp, #48]	; 0x30
 800107c:	466d      	mov	r5, sp
 800107e:	f106 0410 	add.w	r4, r6, #16
 8001082:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001084:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001086:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001088:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800108a:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800108e:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 8001092:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8001096:	f000 f857 	bl	8001148 <setPWM>
				setPWM(htim4, TIM_CHANNEL_1, MTR_PWM_PERIOD, speed_l);
 800109a:	69fb      	ldr	r3, [r7, #28]
 800109c:	b29b      	uxth	r3, r3
 800109e:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80010a0:	4e16      	ldr	r6, [pc, #88]	; (80010fc <appMain+0x254>)
 80010a2:	920e      	str	r2, [sp, #56]	; 0x38
 80010a4:	930d      	str	r3, [sp, #52]	; 0x34
 80010a6:	2300      	movs	r3, #0
 80010a8:	930c      	str	r3, [sp, #48]	; 0x30
 80010aa:	466d      	mov	r5, sp
 80010ac:	f106 0410 	add.w	r4, r6, #16
 80010b0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80010b2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80010b4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80010b6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80010b8:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80010bc:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 80010c0:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 80010c4:	f000 f840 	bl	8001148 <setPWM>
				printf("Left Motor = %d\t Right Motor =%d\n\r",speed_l,speed_r);
 80010c8:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 80010cc:	f9b7 2024 	ldrsh.w	r2, [r7, #36]	; 0x24
 80010d0:	4619      	mov	r1, r3
 80010d2:	4814      	ldr	r0, [pc, #80]	; (8001124 <appMain+0x27c>)
 80010d4:	f006 fbb0 	bl	8007838 <iprintf>
				SSD1306_GotoXY(0, 30);
 80010d8:	211e      	movs	r1, #30
 80010da:	2000      	movs	r0, #0
 80010dc:	f000 fa36 	bl	800154c <SSD1306_GotoXY>
				SSD1306_Puts("MOTR Pulse", &Font_7x10, 1);
 80010e0:	2201      	movs	r2, #1
 80010e2:	490b      	ldr	r1, [pc, #44]	; (8001110 <appMain+0x268>)
 80010e4:	4810      	ldr	r0, [pc, #64]	; (8001128 <appMain+0x280>)
 80010e6:	f000 fac7 	bl	8001678 <SSD1306_Puts>
				//SSD1306_GotoXY(60, 30);
				//SSD1306_Puts((char)MTR_PWM_PERIOD, &Font_7x10, 1);
				SSD1306_UpdateScreen();
 80010ea:	f000 f989 	bl	8001400 <SSD1306_UpdateScreen>
	while(1){
 80010ee:	e75f      	b.n	8000fb0 <appMain+0x108>
 80010f0:	40020800 	.word	0x40020800
 80010f4:	20000614 	.word	0x20000614
 80010f8:	200008ec 	.word	0x200008ec
 80010fc:	2000066c 	.word	0x2000066c
 8001100:	08009700 	.word	0x08009700
 8001104:	08009718 	.word	0x08009718
 8001108:	08009730 	.word	0x08009730
 800110c:	080097d8 	.word	0x080097d8
 8001110:	20000000 	.word	0x20000000
 8001114:	0800974c 	.word	0x0800974c
 8001118:	40020400 	.word	0x40020400
 800111c:	40020000 	.word	0x40020000
 8001120:	20000014 	.word	0x20000014
 8001124:	08009758 	.word	0x08009758
 8001128:	0800977c 	.word	0x0800977c

0800112c <HAL_TIM_PeriodElapsedCallback>:
};


/* This function uses interrupts to toggle Blinky*/
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim6)
{
 800112c:	b580      	push	{r7, lr}
 800112e:	b082      	sub	sp, #8
 8001130:	af00      	add	r7, sp, #0
 8001132:	6078      	str	r0, [r7, #4]
	 HAL_GPIO_TogglePin(Blinky_GPIO_Port, Blinky_Pin);
 8001134:	2120      	movs	r1, #32
 8001136:	4803      	ldr	r0, [pc, #12]	; (8001144 <HAL_TIM_PeriodElapsedCallback+0x18>)
 8001138:	f002 fba7 	bl	800388a <HAL_GPIO_TogglePin>
}
 800113c:	bf00      	nop
 800113e:	3708      	adds	r7, #8
 8001140:	46bd      	mov	sp, r7
 8001142:	bd80      	pop	{r7, pc}
 8001144:	40020000 	.word	0x40020000

08001148 <setPWM>:


//PID pid_right = {KP, KI, 0.0, 0.0};
//PID pid_left = {KP, KI, 0.0, 0.0};

void setPWM(TIM_HandleTypeDef timer,uint32_t channel, uint16_t period, uint16_t pulse){
 8001148:	b084      	sub	sp, #16
 800114a:	b580      	push	{r7, lr}
 800114c:	b088      	sub	sp, #32
 800114e:	af00      	add	r7, sp, #0
 8001150:	f107 0c28 	add.w	ip, r7, #40	; 0x28
 8001154:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	HAL_TIM_PWM_Stop(&timer, channel); // stop the current timer
 8001158:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800115a:	f107 0028 	add.w	r0, r7, #40	; 0x28
 800115e:	f003 fe9b 	bl	8004e98 <HAL_TIM_PWM_Stop>
	TIM_OC_InitTypeDef sConfigOC;
	timer.Init.Period = period;   //load period duration
 8001162:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8001166:	637b      	str	r3, [r7, #52]	; 0x34
	HAL_TIM_PWM_Init(&timer); //reinit the timer
 8001168:	f107 0028 	add.w	r0, r7, #40	; 0x28
 800116c:	f003 fe2b 	bl	8004dc6 <HAL_TIM_PWM_Init>

	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001170:	2360      	movs	r3, #96	; 0x60
 8001172:	607b      	str	r3, [r7, #4]
	sConfigOC.Pulse = pulse;
 8001174:	f8b7 3070 	ldrh.w	r3, [r7, #112]	; 0x70
 8001178:	60bb      	str	r3, [r7, #8]
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800117a:	2300      	movs	r3, #0
 800117c:	60fb      	str	r3, [r7, #12]
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800117e:	2300      	movs	r3, #0
 8001180:	617b      	str	r3, [r7, #20]
	HAL_TIM_PWM_ConfigChannel(&timer, &sConfigOC, channel);
 8001182:	1d3b      	adds	r3, r7, #4
 8001184:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8001186:	4619      	mov	r1, r3
 8001188:	f107 0028 	add.w	r0, r7, #40	; 0x28
 800118c:	f004 f876 	bl	800527c <HAL_TIM_PWM_ConfigChannel>

	HAL_TIM_PWM_Start(&timer,channel);  //start PWM
 8001190:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8001192:	f107 0028 	add.w	r0, r7, #40	; 0x28
 8001196:	f003 fe41 	bl	8004e1c <HAL_TIM_PWM_Start>


}
 800119a:	bf00      	nop
 800119c:	3720      	adds	r7, #32
 800119e:	46bd      	mov	sp, r7
 80011a0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80011a4:	b004      	add	sp, #16
 80011a6:	4770      	bx	lr

080011a8 <SSD1306_DrawBitmap>:

}


void SSD1306_DrawBitmap(int16_t x, int16_t y, const unsigned char* bitmap, int16_t w, int16_t h, uint16_t color)
{
 80011a8:	b580      	push	{r7, lr}
 80011aa:	b086      	sub	sp, #24
 80011ac:	af00      	add	r7, sp, #0
 80011ae:	60ba      	str	r2, [r7, #8]
 80011b0:	461a      	mov	r2, r3
 80011b2:	4603      	mov	r3, r0
 80011b4:	81fb      	strh	r3, [r7, #14]
 80011b6:	460b      	mov	r3, r1
 80011b8:	81bb      	strh	r3, [r7, #12]
 80011ba:	4613      	mov	r3, r2
 80011bc:	80fb      	strh	r3, [r7, #6]

    int16_t byteWidth = (w + 7) / 8; // Bitmap scanline pad = whole byte
 80011be:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80011c2:	3307      	adds	r3, #7
 80011c4:	2b00      	cmp	r3, #0
 80011c6:	da00      	bge.n	80011ca <SSD1306_DrawBitmap+0x22>
 80011c8:	3307      	adds	r3, #7
 80011ca:	10db      	asrs	r3, r3, #3
 80011cc:	823b      	strh	r3, [r7, #16]
    uint8_t byte = 0;
 80011ce:	2300      	movs	r3, #0
 80011d0:	75fb      	strb	r3, [r7, #23]

    for(int16_t j=0; j<h; j++, y++)
 80011d2:	2300      	movs	r3, #0
 80011d4:	82bb      	strh	r3, [r7, #20]
 80011d6:	e044      	b.n	8001262 <SSD1306_DrawBitmap+0xba>
    {
        for(int16_t i=0; i<w; i++)
 80011d8:	2300      	movs	r3, #0
 80011da:	827b      	strh	r3, [r7, #18]
 80011dc:	e02f      	b.n	800123e <SSD1306_DrawBitmap+0x96>
        {
            if(i & 7)
 80011de:	8a7b      	ldrh	r3, [r7, #18]
 80011e0:	f003 0307 	and.w	r3, r3, #7
 80011e4:	2b00      	cmp	r3, #0
 80011e6:	d003      	beq.n	80011f0 <SSD1306_DrawBitmap+0x48>
            {
               byte <<= 1;
 80011e8:	7dfb      	ldrb	r3, [r7, #23]
 80011ea:	005b      	lsls	r3, r3, #1
 80011ec:	75fb      	strb	r3, [r7, #23]
 80011ee:	e012      	b.n	8001216 <SSD1306_DrawBitmap+0x6e>
            }
            else
            {
               byte = (*(const unsigned char *)(&bitmap[j * byteWidth + i / 8]));
 80011f0:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80011f4:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 80011f8:	fb02 f203 	mul.w	r2, r2, r3
 80011fc:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8001200:	2b00      	cmp	r3, #0
 8001202:	da00      	bge.n	8001206 <SSD1306_DrawBitmap+0x5e>
 8001204:	3307      	adds	r3, #7
 8001206:	10db      	asrs	r3, r3, #3
 8001208:	b21b      	sxth	r3, r3
 800120a:	4413      	add	r3, r2
 800120c:	461a      	mov	r2, r3
 800120e:	68bb      	ldr	r3, [r7, #8]
 8001210:	4413      	add	r3, r2
 8001212:	781b      	ldrb	r3, [r3, #0]
 8001214:	75fb      	strb	r3, [r7, #23]
            }
            if(byte & 0x80) SSD1306_DrawPixel(x+i, y, color);
 8001216:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800121a:	2b00      	cmp	r3, #0
 800121c:	da09      	bge.n	8001232 <SSD1306_DrawBitmap+0x8a>
 800121e:	89fa      	ldrh	r2, [r7, #14]
 8001220:	8a7b      	ldrh	r3, [r7, #18]
 8001222:	4413      	add	r3, r2
 8001224:	b29b      	uxth	r3, r3
 8001226:	89b9      	ldrh	r1, [r7, #12]
 8001228:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800122a:	b2d2      	uxtb	r2, r2
 800122c:	4618      	mov	r0, r3
 800122e:	f000 f92d 	bl	800148c <SSD1306_DrawPixel>
        for(int16_t i=0; i<w; i++)
 8001232:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8001236:	b29b      	uxth	r3, r3
 8001238:	3301      	adds	r3, #1
 800123a:	b29b      	uxth	r3, r3
 800123c:	827b      	strh	r3, [r7, #18]
 800123e:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 8001242:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001246:	429a      	cmp	r2, r3
 8001248:	dbc9      	blt.n	80011de <SSD1306_DrawBitmap+0x36>
    for(int16_t j=0; j<h; j++, y++)
 800124a:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800124e:	b29b      	uxth	r3, r3
 8001250:	3301      	adds	r3, #1
 8001252:	b29b      	uxth	r3, r3
 8001254:	82bb      	strh	r3, [r7, #20]
 8001256:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800125a:	b29b      	uxth	r3, r3
 800125c:	3301      	adds	r3, #1
 800125e:	b29b      	uxth	r3, r3
 8001260:	81bb      	strh	r3, [r7, #12]
 8001262:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 8001266:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800126a:	429a      	cmp	r2, r3
 800126c:	dbb4      	blt.n	80011d8 <SSD1306_DrawBitmap+0x30>
        }
    }
}
 800126e:	bf00      	nop
 8001270:	3718      	adds	r7, #24
 8001272:	46bd      	mov	sp, r7
 8001274:	bd80      	pop	{r7, pc}
	...

08001278 <SSD1306_Init>:





uint8_t SSD1306_Init(void) {
 8001278:	b580      	push	{r7, lr}
 800127a:	b082      	sub	sp, #8
 800127c:	af00      	add	r7, sp, #0

	/* Init I2C */
	ssd1306_I2C_Init();
 800127e:	f000 fa29 	bl	80016d4 <ssd1306_I2C_Init>
	
	/* Check if LCD connected to I2C */
	if (HAL_I2C_IsDeviceReady(&hi2c1, SSD1306_I2C_ADDR, 1, 20000) != HAL_OK) {
 8001282:	f644 6320 	movw	r3, #20000	; 0x4e20
 8001286:	2201      	movs	r2, #1
 8001288:	2178      	movs	r1, #120	; 0x78
 800128a:	485b      	ldr	r0, [pc, #364]	; (80013f8 <SSD1306_Init+0x180>)
 800128c:	f002 fd4e 	bl	8003d2c <HAL_I2C_IsDeviceReady>
 8001290:	4603      	mov	r3, r0
 8001292:	2b00      	cmp	r3, #0
 8001294:	d001      	beq.n	800129a <SSD1306_Init+0x22>
		/* Return false */
		return 0;
 8001296:	2300      	movs	r3, #0
 8001298:	e0a9      	b.n	80013ee <SSD1306_Init+0x176>
	}
	
	/* A little delay */
	uint32_t p = 2500;
 800129a:	f640 13c4 	movw	r3, #2500	; 0x9c4
 800129e:	607b      	str	r3, [r7, #4]
	while(p>0)
 80012a0:	e002      	b.n	80012a8 <SSD1306_Init+0x30>
		p--;
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	3b01      	subs	r3, #1
 80012a6:	607b      	str	r3, [r7, #4]
	while(p>0)
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	2b00      	cmp	r3, #0
 80012ac:	d1f9      	bne.n	80012a2 <SSD1306_Init+0x2a>
	
	/* Init LCD */
	SSD1306_WRITECOMMAND(0xAE); //display off
 80012ae:	22ae      	movs	r2, #174	; 0xae
 80012b0:	2100      	movs	r1, #0
 80012b2:	2078      	movs	r0, #120	; 0x78
 80012b4:	f000 fa6a 	bl	800178c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //Set Memory Addressing Mode   
 80012b8:	2220      	movs	r2, #32
 80012ba:	2100      	movs	r1, #0
 80012bc:	2078      	movs	r0, #120	; 0x78
 80012be:	f000 fa65 	bl	800178c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //00,Horizontal Addressing Mode;01,Vertical Addressing Mode;10,Page Addressing Mode (RESET);11,Invalid
 80012c2:	2210      	movs	r2, #16
 80012c4:	2100      	movs	r1, #0
 80012c6:	2078      	movs	r0, #120	; 0x78
 80012c8:	f000 fa60 	bl	800178c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 80012cc:	22b0      	movs	r2, #176	; 0xb0
 80012ce:	2100      	movs	r1, #0
 80012d0:	2078      	movs	r0, #120	; 0x78
 80012d2:	f000 fa5b 	bl	800178c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xC8); //Set COM Output Scan Direction
 80012d6:	22c8      	movs	r2, #200	; 0xc8
 80012d8:	2100      	movs	r1, #0
 80012da:	2078      	movs	r0, #120	; 0x78
 80012dc:	f000 fa56 	bl	800178c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //---set low column address
 80012e0:	2200      	movs	r2, #0
 80012e2:	2100      	movs	r1, #0
 80012e4:	2078      	movs	r0, #120	; 0x78
 80012e6:	f000 fa51 	bl	800178c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //---set high column address
 80012ea:	2210      	movs	r2, #16
 80012ec:	2100      	movs	r1, #0
 80012ee:	2078      	movs	r0, #120	; 0x78
 80012f0:	f000 fa4c 	bl	800178c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x40); //--set start line address
 80012f4:	2240      	movs	r2, #64	; 0x40
 80012f6:	2100      	movs	r1, #0
 80012f8:	2078      	movs	r0, #120	; 0x78
 80012fa:	f000 fa47 	bl	800178c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x81); //--set contrast control register
 80012fe:	2281      	movs	r2, #129	; 0x81
 8001300:	2100      	movs	r1, #0
 8001302:	2078      	movs	r0, #120	; 0x78
 8001304:	f000 fa42 	bl	800178c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xFF);
 8001308:	22ff      	movs	r2, #255	; 0xff
 800130a:	2100      	movs	r1, #0
 800130c:	2078      	movs	r0, #120	; 0x78
 800130e:	f000 fa3d 	bl	800178c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA1); //--set segment re-map 0 to 127
 8001312:	22a1      	movs	r2, #161	; 0xa1
 8001314:	2100      	movs	r1, #0
 8001316:	2078      	movs	r0, #120	; 0x78
 8001318:	f000 fa38 	bl	800178c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA6); //--set normal display
 800131c:	22a6      	movs	r2, #166	; 0xa6
 800131e:	2100      	movs	r1, #0
 8001320:	2078      	movs	r0, #120	; 0x78
 8001322:	f000 fa33 	bl	800178c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA8); //--set multiplex ratio(1 to 64)
 8001326:	22a8      	movs	r2, #168	; 0xa8
 8001328:	2100      	movs	r1, #0
 800132a:	2078      	movs	r0, #120	; 0x78
 800132c:	f000 fa2e 	bl	800178c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x3F); //
 8001330:	223f      	movs	r2, #63	; 0x3f
 8001332:	2100      	movs	r1, #0
 8001334:	2078      	movs	r0, #120	; 0x78
 8001336:	f000 fa29 	bl	800178c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 800133a:	22a4      	movs	r2, #164	; 0xa4
 800133c:	2100      	movs	r1, #0
 800133e:	2078      	movs	r0, #120	; 0x78
 8001340:	f000 fa24 	bl	800178c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD3); //-set display offset
 8001344:	22d3      	movs	r2, #211	; 0xd3
 8001346:	2100      	movs	r1, #0
 8001348:	2078      	movs	r0, #120	; 0x78
 800134a:	f000 fa1f 	bl	800178c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //-not offset
 800134e:	2200      	movs	r2, #0
 8001350:	2100      	movs	r1, #0
 8001352:	2078      	movs	r0, #120	; 0x78
 8001354:	f000 fa1a 	bl	800178c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD5); //--set display clock divide ratio/oscillator frequency
 8001358:	22d5      	movs	r2, #213	; 0xd5
 800135a:	2100      	movs	r1, #0
 800135c:	2078      	movs	r0, #120	; 0x78
 800135e:	f000 fa15 	bl	800178c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xF0); //--set divide ratio
 8001362:	22f0      	movs	r2, #240	; 0xf0
 8001364:	2100      	movs	r1, #0
 8001366:	2078      	movs	r0, #120	; 0x78
 8001368:	f000 fa10 	bl	800178c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD9); //--set pre-charge period
 800136c:	22d9      	movs	r2, #217	; 0xd9
 800136e:	2100      	movs	r1, #0
 8001370:	2078      	movs	r0, #120	; 0x78
 8001372:	f000 fa0b 	bl	800178c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x22); //
 8001376:	2222      	movs	r2, #34	; 0x22
 8001378:	2100      	movs	r1, #0
 800137a:	2078      	movs	r0, #120	; 0x78
 800137c:	f000 fa06 	bl	800178c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDA); //--set com pins hardware configuration
 8001380:	22da      	movs	r2, #218	; 0xda
 8001382:	2100      	movs	r1, #0
 8001384:	2078      	movs	r0, #120	; 0x78
 8001386:	f000 fa01 	bl	800178c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x12);
 800138a:	2212      	movs	r2, #18
 800138c:	2100      	movs	r1, #0
 800138e:	2078      	movs	r0, #120	; 0x78
 8001390:	f000 f9fc 	bl	800178c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDB); //--set vcomh
 8001394:	22db      	movs	r2, #219	; 0xdb
 8001396:	2100      	movs	r1, #0
 8001398:	2078      	movs	r0, #120	; 0x78
 800139a:	f000 f9f7 	bl	800178c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //0x20,0.77xVcc
 800139e:	2220      	movs	r2, #32
 80013a0:	2100      	movs	r1, #0
 80013a2:	2078      	movs	r0, #120	; 0x78
 80013a4:	f000 f9f2 	bl	800178c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x8D); //--set DC-DC enable
 80013a8:	228d      	movs	r2, #141	; 0x8d
 80013aa:	2100      	movs	r1, #0
 80013ac:	2078      	movs	r0, #120	; 0x78
 80013ae:	f000 f9ed 	bl	800178c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x14); //
 80013b2:	2214      	movs	r2, #20
 80013b4:	2100      	movs	r1, #0
 80013b6:	2078      	movs	r0, #120	; 0x78
 80013b8:	f000 f9e8 	bl	800178c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xAF); //--turn on SSD1306 panel
 80013bc:	22af      	movs	r2, #175	; 0xaf
 80013be:	2100      	movs	r1, #0
 80013c0:	2078      	movs	r0, #120	; 0x78
 80013c2:	f000 f9e3 	bl	800178c <ssd1306_I2C_Write>
	

	SSD1306_WRITECOMMAND(SSD1306_DEACTIVATE_SCROLL);
 80013c6:	222e      	movs	r2, #46	; 0x2e
 80013c8:	2100      	movs	r1, #0
 80013ca:	2078      	movs	r0, #120	; 0x78
 80013cc:	f000 f9de 	bl	800178c <ssd1306_I2C_Write>

	/* Clear screen */
	SSD1306_Fill(SSD1306_COLOR_BLACK);
 80013d0:	2000      	movs	r0, #0
 80013d2:	f000 f843 	bl	800145c <SSD1306_Fill>
	
	/* Update screen */
	SSD1306_UpdateScreen();
 80013d6:	f000 f813 	bl	8001400 <SSD1306_UpdateScreen>
	
	/* Set default values */
	SSD1306.CurrentX = 0;
 80013da:	4b08      	ldr	r3, [pc, #32]	; (80013fc <SSD1306_Init+0x184>)
 80013dc:	2200      	movs	r2, #0
 80013de:	801a      	strh	r2, [r3, #0]
	SSD1306.CurrentY = 0;
 80013e0:	4b06      	ldr	r3, [pc, #24]	; (80013fc <SSD1306_Init+0x184>)
 80013e2:	2200      	movs	r2, #0
 80013e4:	805a      	strh	r2, [r3, #2]
	
	/* Initialized OK */
	SSD1306.Initialized = 1;
 80013e6:	4b05      	ldr	r3, [pc, #20]	; (80013fc <SSD1306_Init+0x184>)
 80013e8:	2201      	movs	r2, #1
 80013ea:	715a      	strb	r2, [r3, #5]
	
	/* Return OK */
	return 1;
 80013ec:	2301      	movs	r3, #1
}
 80013ee:	4618      	mov	r0, r3
 80013f0:	3708      	adds	r7, #8
 80013f2:	46bd      	mov	sp, r7
 80013f4:	bd80      	pop	{r7, pc}
 80013f6:	bf00      	nop
 80013f8:	200006ec 	.word	0x200006ec
 80013fc:	20000600 	.word	0x20000600

08001400 <SSD1306_UpdateScreen>:

void SSD1306_UpdateScreen(void) {
 8001400:	b580      	push	{r7, lr}
 8001402:	b082      	sub	sp, #8
 8001404:	af00      	add	r7, sp, #0
	uint8_t m;
	
	for (m = 0; m < 8; m++) {
 8001406:	2300      	movs	r3, #0
 8001408:	71fb      	strb	r3, [r7, #7]
 800140a:	e01d      	b.n	8001448 <SSD1306_UpdateScreen+0x48>
		SSD1306_WRITECOMMAND(0xB0 + m);
 800140c:	79fb      	ldrb	r3, [r7, #7]
 800140e:	3b50      	subs	r3, #80	; 0x50
 8001410:	b2db      	uxtb	r3, r3
 8001412:	461a      	mov	r2, r3
 8001414:	2100      	movs	r1, #0
 8001416:	2078      	movs	r0, #120	; 0x78
 8001418:	f000 f9b8 	bl	800178c <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x00);
 800141c:	2200      	movs	r2, #0
 800141e:	2100      	movs	r1, #0
 8001420:	2078      	movs	r0, #120	; 0x78
 8001422:	f000 f9b3 	bl	800178c <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x10);
 8001426:	2210      	movs	r2, #16
 8001428:	2100      	movs	r1, #0
 800142a:	2078      	movs	r0, #120	; 0x78
 800142c:	f000 f9ae 	bl	800178c <ssd1306_I2C_Write>
		
		/* Write multi data */
		ssd1306_I2C_WriteMulti(SSD1306_I2C_ADDR, 0x40, &SSD1306_Buffer[SSD1306_WIDTH * m], SSD1306_WIDTH);
 8001430:	79fb      	ldrb	r3, [r7, #7]
 8001432:	01db      	lsls	r3, r3, #7
 8001434:	4a08      	ldr	r2, [pc, #32]	; (8001458 <SSD1306_UpdateScreen+0x58>)
 8001436:	441a      	add	r2, r3
 8001438:	2380      	movs	r3, #128	; 0x80
 800143a:	2140      	movs	r1, #64	; 0x40
 800143c:	2078      	movs	r0, #120	; 0x78
 800143e:	f000 f95d 	bl	80016fc <ssd1306_I2C_WriteMulti>
	for (m = 0; m < 8; m++) {
 8001442:	79fb      	ldrb	r3, [r7, #7]
 8001444:	3301      	adds	r3, #1
 8001446:	71fb      	strb	r3, [r7, #7]
 8001448:	79fb      	ldrb	r3, [r7, #7]
 800144a:	2b07      	cmp	r3, #7
 800144c:	d9de      	bls.n	800140c <SSD1306_UpdateScreen+0xc>
	}
}
 800144e:	bf00      	nop
 8001450:	3708      	adds	r7, #8
 8001452:	46bd      	mov	sp, r7
 8001454:	bd80      	pop	{r7, pc}
 8001456:	bf00      	nop
 8001458:	20000200 	.word	0x20000200

0800145c <SSD1306_Fill>:
	for (i = 0; i < sizeof(SSD1306_Buffer); i++) {
		SSD1306_Buffer[i] = ~SSD1306_Buffer[i];
	}
}

void SSD1306_Fill(SSD1306_COLOR_t color) {
 800145c:	b580      	push	{r7, lr}
 800145e:	b082      	sub	sp, #8
 8001460:	af00      	add	r7, sp, #0
 8001462:	4603      	mov	r3, r0
 8001464:	71fb      	strb	r3, [r7, #7]
	/* Set memory */
	memset(SSD1306_Buffer, (color == SSD1306_COLOR_BLACK) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 8001466:	79fb      	ldrb	r3, [r7, #7]
 8001468:	2b00      	cmp	r3, #0
 800146a:	d101      	bne.n	8001470 <SSD1306_Fill+0x14>
 800146c:	2300      	movs	r3, #0
 800146e:	e000      	b.n	8001472 <SSD1306_Fill+0x16>
 8001470:	23ff      	movs	r3, #255	; 0xff
 8001472:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001476:	4619      	mov	r1, r3
 8001478:	4803      	ldr	r0, [pc, #12]	; (8001488 <SSD1306_Fill+0x2c>)
 800147a:	f005 fd1f 	bl	8006ebc <memset>
}
 800147e:	bf00      	nop
 8001480:	3708      	adds	r7, #8
 8001482:	46bd      	mov	sp, r7
 8001484:	bd80      	pop	{r7, pc}
 8001486:	bf00      	nop
 8001488:	20000200 	.word	0x20000200

0800148c <SSD1306_DrawPixel>:

void SSD1306_DrawPixel(uint16_t x, uint16_t y, SSD1306_COLOR_t color) {
 800148c:	b480      	push	{r7}
 800148e:	b083      	sub	sp, #12
 8001490:	af00      	add	r7, sp, #0
 8001492:	4603      	mov	r3, r0
 8001494:	80fb      	strh	r3, [r7, #6]
 8001496:	460b      	mov	r3, r1
 8001498:	80bb      	strh	r3, [r7, #4]
 800149a:	4613      	mov	r3, r2
 800149c:	70fb      	strb	r3, [r7, #3]
	if (
 800149e:	88fb      	ldrh	r3, [r7, #6]
 80014a0:	2b7f      	cmp	r3, #127	; 0x7f
 80014a2:	d848      	bhi.n	8001536 <SSD1306_DrawPixel+0xaa>
		x >= SSD1306_WIDTH ||
 80014a4:	88bb      	ldrh	r3, [r7, #4]
 80014a6:	2b3f      	cmp	r3, #63	; 0x3f
 80014a8:	d845      	bhi.n	8001536 <SSD1306_DrawPixel+0xaa>
		/* Error */
		return;
	}
	
	/* Check if pixels are inverted */
	if (SSD1306.Inverted) {
 80014aa:	4b26      	ldr	r3, [pc, #152]	; (8001544 <SSD1306_DrawPixel+0xb8>)
 80014ac:	791b      	ldrb	r3, [r3, #4]
 80014ae:	2b00      	cmp	r3, #0
 80014b0:	d006      	beq.n	80014c0 <SSD1306_DrawPixel+0x34>
		color = (SSD1306_COLOR_t)!color;
 80014b2:	78fb      	ldrb	r3, [r7, #3]
 80014b4:	2b00      	cmp	r3, #0
 80014b6:	bf0c      	ite	eq
 80014b8:	2301      	moveq	r3, #1
 80014ba:	2300      	movne	r3, #0
 80014bc:	b2db      	uxtb	r3, r3
 80014be:	70fb      	strb	r3, [r7, #3]
	}
	
	/* Set color */
	if (color == SSD1306_COLOR_WHITE) {
 80014c0:	78fb      	ldrb	r3, [r7, #3]
 80014c2:	2b01      	cmp	r3, #1
 80014c4:	d11a      	bne.n	80014fc <SSD1306_DrawPixel+0x70>
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 80014c6:	88fa      	ldrh	r2, [r7, #6]
 80014c8:	88bb      	ldrh	r3, [r7, #4]
 80014ca:	08db      	lsrs	r3, r3, #3
 80014cc:	b298      	uxth	r0, r3
 80014ce:	4603      	mov	r3, r0
 80014d0:	01db      	lsls	r3, r3, #7
 80014d2:	4413      	add	r3, r2
 80014d4:	4a1c      	ldr	r2, [pc, #112]	; (8001548 <SSD1306_DrawPixel+0xbc>)
 80014d6:	5cd3      	ldrb	r3, [r2, r3]
 80014d8:	b25a      	sxtb	r2, r3
 80014da:	88bb      	ldrh	r3, [r7, #4]
 80014dc:	f003 0307 	and.w	r3, r3, #7
 80014e0:	2101      	movs	r1, #1
 80014e2:	fa01 f303 	lsl.w	r3, r1, r3
 80014e6:	b25b      	sxtb	r3, r3
 80014e8:	4313      	orrs	r3, r2
 80014ea:	b259      	sxtb	r1, r3
 80014ec:	88fa      	ldrh	r2, [r7, #6]
 80014ee:	4603      	mov	r3, r0
 80014f0:	01db      	lsls	r3, r3, #7
 80014f2:	4413      	add	r3, r2
 80014f4:	b2c9      	uxtb	r1, r1
 80014f6:	4a14      	ldr	r2, [pc, #80]	; (8001548 <SSD1306_DrawPixel+0xbc>)
 80014f8:	54d1      	strb	r1, [r2, r3]
 80014fa:	e01d      	b.n	8001538 <SSD1306_DrawPixel+0xac>
	} else {
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 80014fc:	88fa      	ldrh	r2, [r7, #6]
 80014fe:	88bb      	ldrh	r3, [r7, #4]
 8001500:	08db      	lsrs	r3, r3, #3
 8001502:	b298      	uxth	r0, r3
 8001504:	4603      	mov	r3, r0
 8001506:	01db      	lsls	r3, r3, #7
 8001508:	4413      	add	r3, r2
 800150a:	4a0f      	ldr	r2, [pc, #60]	; (8001548 <SSD1306_DrawPixel+0xbc>)
 800150c:	5cd3      	ldrb	r3, [r2, r3]
 800150e:	b25a      	sxtb	r2, r3
 8001510:	88bb      	ldrh	r3, [r7, #4]
 8001512:	f003 0307 	and.w	r3, r3, #7
 8001516:	2101      	movs	r1, #1
 8001518:	fa01 f303 	lsl.w	r3, r1, r3
 800151c:	b25b      	sxtb	r3, r3
 800151e:	43db      	mvns	r3, r3
 8001520:	b25b      	sxtb	r3, r3
 8001522:	4013      	ands	r3, r2
 8001524:	b259      	sxtb	r1, r3
 8001526:	88fa      	ldrh	r2, [r7, #6]
 8001528:	4603      	mov	r3, r0
 800152a:	01db      	lsls	r3, r3, #7
 800152c:	4413      	add	r3, r2
 800152e:	b2c9      	uxtb	r1, r1
 8001530:	4a05      	ldr	r2, [pc, #20]	; (8001548 <SSD1306_DrawPixel+0xbc>)
 8001532:	54d1      	strb	r1, [r2, r3]
 8001534:	e000      	b.n	8001538 <SSD1306_DrawPixel+0xac>
		return;
 8001536:	bf00      	nop
	}
}
 8001538:	370c      	adds	r7, #12
 800153a:	46bd      	mov	sp, r7
 800153c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001540:	4770      	bx	lr
 8001542:	bf00      	nop
 8001544:	20000600 	.word	0x20000600
 8001548:	20000200 	.word	0x20000200

0800154c <SSD1306_GotoXY>:

void SSD1306_GotoXY(uint16_t x, uint16_t y) {
 800154c:	b480      	push	{r7}
 800154e:	b083      	sub	sp, #12
 8001550:	af00      	add	r7, sp, #0
 8001552:	4603      	mov	r3, r0
 8001554:	460a      	mov	r2, r1
 8001556:	80fb      	strh	r3, [r7, #6]
 8001558:	4613      	mov	r3, r2
 800155a:	80bb      	strh	r3, [r7, #4]
	/* Set write pointers */
	SSD1306.CurrentX = x;
 800155c:	4a05      	ldr	r2, [pc, #20]	; (8001574 <SSD1306_GotoXY+0x28>)
 800155e:	88fb      	ldrh	r3, [r7, #6]
 8001560:	8013      	strh	r3, [r2, #0]
	SSD1306.CurrentY = y;
 8001562:	4a04      	ldr	r2, [pc, #16]	; (8001574 <SSD1306_GotoXY+0x28>)
 8001564:	88bb      	ldrh	r3, [r7, #4]
 8001566:	8053      	strh	r3, [r2, #2]
}
 8001568:	bf00      	nop
 800156a:	370c      	adds	r7, #12
 800156c:	46bd      	mov	sp, r7
 800156e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001572:	4770      	bx	lr
 8001574:	20000600 	.word	0x20000600

08001578 <SSD1306_Putc>:

char SSD1306_Putc(char ch, FontDef_t* Font, SSD1306_COLOR_t color) {
 8001578:	b580      	push	{r7, lr}
 800157a:	b086      	sub	sp, #24
 800157c:	af00      	add	r7, sp, #0
 800157e:	4603      	mov	r3, r0
 8001580:	6039      	str	r1, [r7, #0]
 8001582:	71fb      	strb	r3, [r7, #7]
 8001584:	4613      	mov	r3, r2
 8001586:	71bb      	strb	r3, [r7, #6]
	uint32_t i, b, j;
	
	/* Check available space in LCD */
	if (
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 8001588:	4b3a      	ldr	r3, [pc, #232]	; (8001674 <SSD1306_Putc+0xfc>)
 800158a:	881b      	ldrh	r3, [r3, #0]
 800158c:	461a      	mov	r2, r3
 800158e:	683b      	ldr	r3, [r7, #0]
 8001590:	781b      	ldrb	r3, [r3, #0]
 8001592:	4413      	add	r3, r2
	if (
 8001594:	2b7f      	cmp	r3, #127	; 0x7f
 8001596:	dc07      	bgt.n	80015a8 <SSD1306_Putc+0x30>
		SSD1306_HEIGHT <= (SSD1306.CurrentY + Font->FontHeight)
 8001598:	4b36      	ldr	r3, [pc, #216]	; (8001674 <SSD1306_Putc+0xfc>)
 800159a:	885b      	ldrh	r3, [r3, #2]
 800159c:	461a      	mov	r2, r3
 800159e:	683b      	ldr	r3, [r7, #0]
 80015a0:	785b      	ldrb	r3, [r3, #1]
 80015a2:	4413      	add	r3, r2
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 80015a4:	2b3f      	cmp	r3, #63	; 0x3f
 80015a6:	dd01      	ble.n	80015ac <SSD1306_Putc+0x34>
	) {
		/* Error */
		return 0;
 80015a8:	2300      	movs	r3, #0
 80015aa:	e05e      	b.n	800166a <SSD1306_Putc+0xf2>
	}
	
	/* Go through font */
	for (i = 0; i < Font->FontHeight; i++) {
 80015ac:	2300      	movs	r3, #0
 80015ae:	617b      	str	r3, [r7, #20]
 80015b0:	e04b      	b.n	800164a <SSD1306_Putc+0xd2>
		b = Font->data[(ch - 32) * Font->FontHeight + i];
 80015b2:	683b      	ldr	r3, [r7, #0]
 80015b4:	685a      	ldr	r2, [r3, #4]
 80015b6:	79fb      	ldrb	r3, [r7, #7]
 80015b8:	3b20      	subs	r3, #32
 80015ba:	6839      	ldr	r1, [r7, #0]
 80015bc:	7849      	ldrb	r1, [r1, #1]
 80015be:	fb01 f303 	mul.w	r3, r1, r3
 80015c2:	4619      	mov	r1, r3
 80015c4:	697b      	ldr	r3, [r7, #20]
 80015c6:	440b      	add	r3, r1
 80015c8:	005b      	lsls	r3, r3, #1
 80015ca:	4413      	add	r3, r2
 80015cc:	881b      	ldrh	r3, [r3, #0]
 80015ce:	60fb      	str	r3, [r7, #12]
		for (j = 0; j < Font->FontWidth; j++) {
 80015d0:	2300      	movs	r3, #0
 80015d2:	613b      	str	r3, [r7, #16]
 80015d4:	e030      	b.n	8001638 <SSD1306_Putc+0xc0>
			if ((b << j) & 0x8000) {
 80015d6:	68fa      	ldr	r2, [r7, #12]
 80015d8:	693b      	ldr	r3, [r7, #16]
 80015da:	fa02 f303 	lsl.w	r3, r2, r3
 80015de:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80015e2:	2b00      	cmp	r3, #0
 80015e4:	d010      	beq.n	8001608 <SSD1306_Putc+0x90>
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t) color);
 80015e6:	4b23      	ldr	r3, [pc, #140]	; (8001674 <SSD1306_Putc+0xfc>)
 80015e8:	881a      	ldrh	r2, [r3, #0]
 80015ea:	693b      	ldr	r3, [r7, #16]
 80015ec:	b29b      	uxth	r3, r3
 80015ee:	4413      	add	r3, r2
 80015f0:	b298      	uxth	r0, r3
 80015f2:	4b20      	ldr	r3, [pc, #128]	; (8001674 <SSD1306_Putc+0xfc>)
 80015f4:	885a      	ldrh	r2, [r3, #2]
 80015f6:	697b      	ldr	r3, [r7, #20]
 80015f8:	b29b      	uxth	r3, r3
 80015fa:	4413      	add	r3, r2
 80015fc:	b29b      	uxth	r3, r3
 80015fe:	79ba      	ldrb	r2, [r7, #6]
 8001600:	4619      	mov	r1, r3
 8001602:	f7ff ff43 	bl	800148c <SSD1306_DrawPixel>
 8001606:	e014      	b.n	8001632 <SSD1306_Putc+0xba>
			} else {
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t)!color);
 8001608:	4b1a      	ldr	r3, [pc, #104]	; (8001674 <SSD1306_Putc+0xfc>)
 800160a:	881a      	ldrh	r2, [r3, #0]
 800160c:	693b      	ldr	r3, [r7, #16]
 800160e:	b29b      	uxth	r3, r3
 8001610:	4413      	add	r3, r2
 8001612:	b298      	uxth	r0, r3
 8001614:	4b17      	ldr	r3, [pc, #92]	; (8001674 <SSD1306_Putc+0xfc>)
 8001616:	885a      	ldrh	r2, [r3, #2]
 8001618:	697b      	ldr	r3, [r7, #20]
 800161a:	b29b      	uxth	r3, r3
 800161c:	4413      	add	r3, r2
 800161e:	b299      	uxth	r1, r3
 8001620:	79bb      	ldrb	r3, [r7, #6]
 8001622:	2b00      	cmp	r3, #0
 8001624:	bf0c      	ite	eq
 8001626:	2301      	moveq	r3, #1
 8001628:	2300      	movne	r3, #0
 800162a:	b2db      	uxtb	r3, r3
 800162c:	461a      	mov	r2, r3
 800162e:	f7ff ff2d 	bl	800148c <SSD1306_DrawPixel>
		for (j = 0; j < Font->FontWidth; j++) {
 8001632:	693b      	ldr	r3, [r7, #16]
 8001634:	3301      	adds	r3, #1
 8001636:	613b      	str	r3, [r7, #16]
 8001638:	683b      	ldr	r3, [r7, #0]
 800163a:	781b      	ldrb	r3, [r3, #0]
 800163c:	461a      	mov	r2, r3
 800163e:	693b      	ldr	r3, [r7, #16]
 8001640:	4293      	cmp	r3, r2
 8001642:	d3c8      	bcc.n	80015d6 <SSD1306_Putc+0x5e>
	for (i = 0; i < Font->FontHeight; i++) {
 8001644:	697b      	ldr	r3, [r7, #20]
 8001646:	3301      	adds	r3, #1
 8001648:	617b      	str	r3, [r7, #20]
 800164a:	683b      	ldr	r3, [r7, #0]
 800164c:	785b      	ldrb	r3, [r3, #1]
 800164e:	461a      	mov	r2, r3
 8001650:	697b      	ldr	r3, [r7, #20]
 8001652:	4293      	cmp	r3, r2
 8001654:	d3ad      	bcc.n	80015b2 <SSD1306_Putc+0x3a>
			}
		}
	}
	
	/* Increase pointer */
	SSD1306.CurrentX += Font->FontWidth;
 8001656:	4b07      	ldr	r3, [pc, #28]	; (8001674 <SSD1306_Putc+0xfc>)
 8001658:	881a      	ldrh	r2, [r3, #0]
 800165a:	683b      	ldr	r3, [r7, #0]
 800165c:	781b      	ldrb	r3, [r3, #0]
 800165e:	b29b      	uxth	r3, r3
 8001660:	4413      	add	r3, r2
 8001662:	b29a      	uxth	r2, r3
 8001664:	4b03      	ldr	r3, [pc, #12]	; (8001674 <SSD1306_Putc+0xfc>)
 8001666:	801a      	strh	r2, [r3, #0]
	
	/* Return character written */
	return ch;
 8001668:	79fb      	ldrb	r3, [r7, #7]
}
 800166a:	4618      	mov	r0, r3
 800166c:	3718      	adds	r7, #24
 800166e:	46bd      	mov	sp, r7
 8001670:	bd80      	pop	{r7, pc}
 8001672:	bf00      	nop
 8001674:	20000600 	.word	0x20000600

08001678 <SSD1306_Puts>:

char SSD1306_Puts(char* str, FontDef_t* Font, SSD1306_COLOR_t color) {
 8001678:	b580      	push	{r7, lr}
 800167a:	b084      	sub	sp, #16
 800167c:	af00      	add	r7, sp, #0
 800167e:	60f8      	str	r0, [r7, #12]
 8001680:	60b9      	str	r1, [r7, #8]
 8001682:	4613      	mov	r3, r2
 8001684:	71fb      	strb	r3, [r7, #7]
	/* Write characters */
	while (*str) {
 8001686:	e012      	b.n	80016ae <SSD1306_Puts+0x36>
		/* Write character by character */
		if (SSD1306_Putc(*str, Font, color) != *str) {
 8001688:	68fb      	ldr	r3, [r7, #12]
 800168a:	781b      	ldrb	r3, [r3, #0]
 800168c:	79fa      	ldrb	r2, [r7, #7]
 800168e:	68b9      	ldr	r1, [r7, #8]
 8001690:	4618      	mov	r0, r3
 8001692:	f7ff ff71 	bl	8001578 <SSD1306_Putc>
 8001696:	4603      	mov	r3, r0
 8001698:	461a      	mov	r2, r3
 800169a:	68fb      	ldr	r3, [r7, #12]
 800169c:	781b      	ldrb	r3, [r3, #0]
 800169e:	429a      	cmp	r2, r3
 80016a0:	d002      	beq.n	80016a8 <SSD1306_Puts+0x30>
			/* Return error */
			return *str;
 80016a2:	68fb      	ldr	r3, [r7, #12]
 80016a4:	781b      	ldrb	r3, [r3, #0]
 80016a6:	e008      	b.n	80016ba <SSD1306_Puts+0x42>
		}
		
		/* Increase string pointer */
		str++;
 80016a8:	68fb      	ldr	r3, [r7, #12]
 80016aa:	3301      	adds	r3, #1
 80016ac:	60fb      	str	r3, [r7, #12]
	while (*str) {
 80016ae:	68fb      	ldr	r3, [r7, #12]
 80016b0:	781b      	ldrb	r3, [r3, #0]
 80016b2:	2b00      	cmp	r3, #0
 80016b4:	d1e8      	bne.n	8001688 <SSD1306_Puts+0x10>
	}
	
	/* Everything OK, zero should be returned */
	return *str;
 80016b6:	68fb      	ldr	r3, [r7, #12]
 80016b8:	781b      	ldrb	r3, [r3, #0]
}
 80016ba:	4618      	mov	r0, r3
 80016bc:	3710      	adds	r7, #16
 80016be:	46bd      	mov	sp, r7
 80016c0:	bd80      	pop	{r7, pc}

080016c2 <SSD1306_Clear>:
}
 


void SSD1306_Clear (void)
{
 80016c2:	b580      	push	{r7, lr}
 80016c4:	af00      	add	r7, sp, #0
	SSD1306_Fill (0);
 80016c6:	2000      	movs	r0, #0
 80016c8:	f7ff fec8 	bl	800145c <SSD1306_Fill>
    SSD1306_UpdateScreen();
 80016cc:	f7ff fe98 	bl	8001400 <SSD1306_UpdateScreen>
}
 80016d0:	bf00      	nop
 80016d2:	bd80      	pop	{r7, pc}

080016d4 <ssd1306_I2C_Init>:
//  _| |_ / /_| |____ 
// |_____|____|\_____|
//
/////////////////////////////////////////////////////////////////////////////////////////////////////////

void ssd1306_I2C_Init() {
 80016d4:	b480      	push	{r7}
 80016d6:	b083      	sub	sp, #12
 80016d8:	af00      	add	r7, sp, #0
	//MX_I2C1_Init();
	uint32_t p = 250000;
 80016da:	4b07      	ldr	r3, [pc, #28]	; (80016f8 <ssd1306_I2C_Init+0x24>)
 80016dc:	607b      	str	r3, [r7, #4]
	while(p>0)
 80016de:	e002      	b.n	80016e6 <ssd1306_I2C_Init+0x12>
		p--;
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	3b01      	subs	r3, #1
 80016e4:	607b      	str	r3, [r7, #4]
	while(p>0)
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	2b00      	cmp	r3, #0
 80016ea:	d1f9      	bne.n	80016e0 <ssd1306_I2C_Init+0xc>
	//HAL_I2C_DeInit(&hi2c1);
	//p = 250000;
	//while(p>0)
	//	p--;
	//MX_I2C1_Init();
}
 80016ec:	bf00      	nop
 80016ee:	370c      	adds	r7, #12
 80016f0:	46bd      	mov	sp, r7
 80016f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016f6:	4770      	bx	lr
 80016f8:	0003d090 	.word	0x0003d090

080016fc <ssd1306_I2C_WriteMulti>:

void ssd1306_I2C_WriteMulti(uint8_t address, uint8_t reg, uint8_t* data, uint16_t count) {
 80016fc:	b590      	push	{r4, r7, lr}
 80016fe:	b0c7      	sub	sp, #284	; 0x11c
 8001700:	af02      	add	r7, sp, #8
 8001702:	4604      	mov	r4, r0
 8001704:	4608      	mov	r0, r1
 8001706:	4639      	mov	r1, r7
 8001708:	600a      	str	r2, [r1, #0]
 800170a:	4619      	mov	r1, r3
 800170c:	1dfb      	adds	r3, r7, #7
 800170e:	4622      	mov	r2, r4
 8001710:	701a      	strb	r2, [r3, #0]
 8001712:	1dbb      	adds	r3, r7, #6
 8001714:	4602      	mov	r2, r0
 8001716:	701a      	strb	r2, [r3, #0]
 8001718:	1d3b      	adds	r3, r7, #4
 800171a:	460a      	mov	r2, r1
 800171c:	801a      	strh	r2, [r3, #0]
uint8_t dt[256];
dt[0] = reg;
 800171e:	f107 030c 	add.w	r3, r7, #12
 8001722:	1dba      	adds	r2, r7, #6
 8001724:	7812      	ldrb	r2, [r2, #0]
 8001726:	701a      	strb	r2, [r3, #0]
uint8_t i;
for(i = 0; i < count; i++)
 8001728:	2300      	movs	r3, #0
 800172a:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
 800172e:	e010      	b.n	8001752 <ssd1306_I2C_WriteMulti+0x56>
dt[i+1] = data[i];
 8001730:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8001734:	463a      	mov	r2, r7
 8001736:	6812      	ldr	r2, [r2, #0]
 8001738:	441a      	add	r2, r3
 800173a:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 800173e:	3301      	adds	r3, #1
 8001740:	7811      	ldrb	r1, [r2, #0]
 8001742:	f107 020c 	add.w	r2, r7, #12
 8001746:	54d1      	strb	r1, [r2, r3]
for(i = 0; i < count; i++)
 8001748:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 800174c:	3301      	adds	r3, #1
 800174e:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
 8001752:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8001756:	b29b      	uxth	r3, r3
 8001758:	1d3a      	adds	r2, r7, #4
 800175a:	8812      	ldrh	r2, [r2, #0]
 800175c:	429a      	cmp	r2, r3
 800175e:	d8e7      	bhi.n	8001730 <ssd1306_I2C_WriteMulti+0x34>
HAL_I2C_Master_Transmit(&hi2c1, address, dt, count+1, 10);
 8001760:	1dfb      	adds	r3, r7, #7
 8001762:	781b      	ldrb	r3, [r3, #0]
 8001764:	b299      	uxth	r1, r3
 8001766:	1d3b      	adds	r3, r7, #4
 8001768:	881b      	ldrh	r3, [r3, #0]
 800176a:	3301      	adds	r3, #1
 800176c:	b298      	uxth	r0, r3
 800176e:	f107 020c 	add.w	r2, r7, #12
 8001772:	230a      	movs	r3, #10
 8001774:	9300      	str	r3, [sp, #0]
 8001776:	4603      	mov	r3, r0
 8001778:	4803      	ldr	r0, [pc, #12]	; (8001788 <ssd1306_I2C_WriteMulti+0x8c>)
 800177a:	f002 f9d9 	bl	8003b30 <HAL_I2C_Master_Transmit>
}
 800177e:	bf00      	nop
 8001780:	f507 778a 	add.w	r7, r7, #276	; 0x114
 8001784:	46bd      	mov	sp, r7
 8001786:	bd90      	pop	{r4, r7, pc}
 8001788:	200006ec 	.word	0x200006ec

0800178c <ssd1306_I2C_Write>:


void ssd1306_I2C_Write(uint8_t address, uint8_t reg, uint8_t data) {
 800178c:	b580      	push	{r7, lr}
 800178e:	b086      	sub	sp, #24
 8001790:	af02      	add	r7, sp, #8
 8001792:	4603      	mov	r3, r0
 8001794:	71fb      	strb	r3, [r7, #7]
 8001796:	460b      	mov	r3, r1
 8001798:	71bb      	strb	r3, [r7, #6]
 800179a:	4613      	mov	r3, r2
 800179c:	717b      	strb	r3, [r7, #5]
	uint8_t dt[2];
	dt[0] = reg;
 800179e:	79bb      	ldrb	r3, [r7, #6]
 80017a0:	733b      	strb	r3, [r7, #12]
	dt[1] = data;
 80017a2:	797b      	ldrb	r3, [r7, #5]
 80017a4:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(&hi2c1, address, dt, 2, 10);
 80017a6:	79fb      	ldrb	r3, [r7, #7]
 80017a8:	b299      	uxth	r1, r3
 80017aa:	f107 020c 	add.w	r2, r7, #12
 80017ae:	230a      	movs	r3, #10
 80017b0:	9300      	str	r3, [sp, #0]
 80017b2:	2302      	movs	r3, #2
 80017b4:	4803      	ldr	r0, [pc, #12]	; (80017c4 <ssd1306_I2C_Write+0x38>)
 80017b6:	f002 f9bb 	bl	8003b30 <HAL_I2C_Master_Transmit>
}
 80017ba:	bf00      	nop
 80017bc:	3710      	adds	r7, #16
 80017be:	46bd      	mov	sp, r7
 80017c0:	bd80      	pop	{r7, pc}
 80017c2:	bf00      	nop
 80017c4:	200006ec 	.word	0x200006ec

080017c8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80017c8:	b580      	push	{r7, lr}
 80017ca:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80017cc:	f001 fb02 	bl	8002dd4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80017d0:	f000 f828 	bl	8001824 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80017d4:	f000 fc66 	bl	80020a4 <MX_GPIO_Init>
  MX_TIM2_Init();
 80017d8:	f000 f97e 	bl	8001ad8 <MX_TIM2_Init>
  MX_TIM3_Init();
 80017dc:	f000 f9f0 	bl	8001bc0 <MX_TIM3_Init>
  MX_USART2_UART_Init();
 80017e0:	f000 fc0c 	bl	8001ffc <MX_USART2_UART_Init>
  MX_DAC_Init();
 80017e4:	f000 f8bc 	bl	8001960 <MX_DAC_Init>
  MX_I2C1_Init();
 80017e8:	f000 f8e4 	bl	80019b4 <MX_I2C1_Init>
  MX_I2C3_Init();
 80017ec:	f000 f910 	bl	8001a10 <MX_I2C3_Init>
  MX_SPI1_Init();
 80017f0:	f000 f93c 	bl	8001a6c <MX_SPI1_Init>
  MX_TIM4_Init();
 80017f4:	f000 fa38 	bl	8001c68 <MX_TIM4_Init>
  MX_TIM5_Init();
 80017f8:	f000 faac 	bl	8001d54 <MX_TIM5_Init>
  MX_TIM6_Init();
 80017fc:	f000 fafe 	bl	8001dfc <MX_TIM6_Init>
  MX_TIM9_Init();
 8001800:	f000 fb32 	bl	8001e68 <MX_TIM9_Init>
  MX_TIM12_Init();
 8001804:	f000 fbb6 	bl	8001f74 <MX_TIM12_Init>
  MX_TIM11_Init();
 8001808:	f000 fb68 	bl	8001edc <MX_TIM11_Init>
  MX_USART3_UART_Init();
 800180c:	f000 fc20 	bl	8002050 <MX_USART3_UART_Init>
  MX_CAN1_Init();
 8001810:	f000 f872 	bl	80018f8 <MX_CAN1_Init>
  /* USER CODE BEGIN 2 */
  //Start the timer
  HAL_TIM_Base_Start_IT(&htim6);
 8001814:	4802      	ldr	r0, [pc, #8]	; (8001820 <main+0x58>)
 8001816:	f003 fab2 	bl	8004d7e <HAL_TIM_Base_Start_IT>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	  appMain(); // will not return from here
 800181a:	f7ff fb45 	bl	8000ea8 <appMain>
 800181e:	e7fc      	b.n	800181a <main+0x52>
 8001820:	20000814 	.word	0x20000814

08001824 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001824:	b580      	push	{r7, lr}
 8001826:	b094      	sub	sp, #80	; 0x50
 8001828:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800182a:	f107 0320 	add.w	r3, r7, #32
 800182e:	2230      	movs	r2, #48	; 0x30
 8001830:	2100      	movs	r1, #0
 8001832:	4618      	mov	r0, r3
 8001834:	f005 fb42 	bl	8006ebc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001838:	f107 030c 	add.w	r3, r7, #12
 800183c:	2200      	movs	r2, #0
 800183e:	601a      	str	r2, [r3, #0]
 8001840:	605a      	str	r2, [r3, #4]
 8001842:	609a      	str	r2, [r3, #8]
 8001844:	60da      	str	r2, [r3, #12]
 8001846:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001848:	2300      	movs	r3, #0
 800184a:	60bb      	str	r3, [r7, #8]
 800184c:	4b28      	ldr	r3, [pc, #160]	; (80018f0 <SystemClock_Config+0xcc>)
 800184e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001850:	4a27      	ldr	r2, [pc, #156]	; (80018f0 <SystemClock_Config+0xcc>)
 8001852:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001856:	6413      	str	r3, [r2, #64]	; 0x40
 8001858:	4b25      	ldr	r3, [pc, #148]	; (80018f0 <SystemClock_Config+0xcc>)
 800185a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800185c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001860:	60bb      	str	r3, [r7, #8]
 8001862:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001864:	2300      	movs	r3, #0
 8001866:	607b      	str	r3, [r7, #4]
 8001868:	4b22      	ldr	r3, [pc, #136]	; (80018f4 <SystemClock_Config+0xd0>)
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	4a21      	ldr	r2, [pc, #132]	; (80018f4 <SystemClock_Config+0xd0>)
 800186e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001872:	6013      	str	r3, [r2, #0]
 8001874:	4b1f      	ldr	r3, [pc, #124]	; (80018f4 <SystemClock_Config+0xd0>)
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800187c:	607b      	str	r3, [r7, #4]
 800187e:	687b      	ldr	r3, [r7, #4]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001880:	2302      	movs	r3, #2
 8001882:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001884:	2301      	movs	r3, #1
 8001886:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001888:	2310      	movs	r3, #16
 800188a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800188c:	2302      	movs	r3, #2
 800188e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001890:	2300      	movs	r3, #0
 8001892:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001894:	2308      	movs	r3, #8
 8001896:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 100;
 8001898:	2364      	movs	r3, #100	; 0x64
 800189a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800189c:	2302      	movs	r3, #2
 800189e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80018a0:	2304      	movs	r3, #4
 80018a2:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80018a4:	f107 0320 	add.w	r3, r7, #32
 80018a8:	4618      	mov	r0, r3
 80018aa:	f002 fd77 	bl	800439c <HAL_RCC_OscConfig>
 80018ae:	4603      	mov	r3, r0
 80018b0:	2b00      	cmp	r3, #0
 80018b2:	d001      	beq.n	80018b8 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80018b4:	f000 fd5f 	bl	8002376 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80018b8:	230f      	movs	r3, #15
 80018ba:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80018bc:	2302      	movs	r3, #2
 80018be:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80018c0:	2300      	movs	r3, #0
 80018c2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80018c4:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80018c8:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80018ca:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80018ce:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80018d0:	f107 030c 	add.w	r3, r7, #12
 80018d4:	2103      	movs	r1, #3
 80018d6:	4618      	mov	r0, r3
 80018d8:	f002 ffd0 	bl	800487c <HAL_RCC_ClockConfig>
 80018dc:	4603      	mov	r3, r0
 80018de:	2b00      	cmp	r3, #0
 80018e0:	d001      	beq.n	80018e6 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80018e2:	f000 fd48 	bl	8002376 <Error_Handler>
  }
}
 80018e6:	bf00      	nop
 80018e8:	3750      	adds	r7, #80	; 0x50
 80018ea:	46bd      	mov	sp, r7
 80018ec:	bd80      	pop	{r7, pc}
 80018ee:	bf00      	nop
 80018f0:	40023800 	.word	0x40023800
 80018f4:	40007000 	.word	0x40007000

080018f8 <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 80018f8:	b580      	push	{r7, lr}
 80018fa:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 80018fc:	4b16      	ldr	r3, [pc, #88]	; (8001958 <MX_CAN1_Init+0x60>)
 80018fe:	4a17      	ldr	r2, [pc, #92]	; (800195c <MX_CAN1_Init+0x64>)
 8001900:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 16;
 8001902:	4b15      	ldr	r3, [pc, #84]	; (8001958 <MX_CAN1_Init+0x60>)
 8001904:	2210      	movs	r2, #16
 8001906:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8001908:	4b13      	ldr	r3, [pc, #76]	; (8001958 <MX_CAN1_Init+0x60>)
 800190a:	2200      	movs	r2, #0
 800190c:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 800190e:	4b12      	ldr	r3, [pc, #72]	; (8001958 <MX_CAN1_Init+0x60>)
 8001910:	2200      	movs	r2, #0
 8001912:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_1TQ;
 8001914:	4b10      	ldr	r3, [pc, #64]	; (8001958 <MX_CAN1_Init+0x60>)
 8001916:	2200      	movs	r2, #0
 8001918:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_1TQ;
 800191a:	4b0f      	ldr	r3, [pc, #60]	; (8001958 <MX_CAN1_Init+0x60>)
 800191c:	2200      	movs	r2, #0
 800191e:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8001920:	4b0d      	ldr	r3, [pc, #52]	; (8001958 <MX_CAN1_Init+0x60>)
 8001922:	2200      	movs	r2, #0
 8001924:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 8001926:	4b0c      	ldr	r3, [pc, #48]	; (8001958 <MX_CAN1_Init+0x60>)
 8001928:	2200      	movs	r2, #0
 800192a:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 800192c:	4b0a      	ldr	r3, [pc, #40]	; (8001958 <MX_CAN1_Init+0x60>)
 800192e:	2200      	movs	r2, #0
 8001930:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 8001932:	4b09      	ldr	r3, [pc, #36]	; (8001958 <MX_CAN1_Init+0x60>)
 8001934:	2200      	movs	r2, #0
 8001936:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8001938:	4b07      	ldr	r3, [pc, #28]	; (8001958 <MX_CAN1_Init+0x60>)
 800193a:	2200      	movs	r2, #0
 800193c:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 800193e:	4b06      	ldr	r3, [pc, #24]	; (8001958 <MX_CAN1_Init+0x60>)
 8001940:	2200      	movs	r2, #0
 8001942:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8001944:	4804      	ldr	r0, [pc, #16]	; (8001958 <MX_CAN1_Init+0x60>)
 8001946:	f001 fad9 	bl	8002efc <HAL_CAN_Init>
 800194a:	4603      	mov	r3, r0
 800194c:	2b00      	cmp	r3, #0
 800194e:	d001      	beq.n	8001954 <MX_CAN1_Init+0x5c>
  {
    Error_Handler();
 8001950:	f000 fd11 	bl	8002376 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 8001954:	bf00      	nop
 8001956:	bd80      	pop	{r7, pc}
 8001958:	2000096c 	.word	0x2000096c
 800195c:	40006400 	.word	0x40006400

08001960 <MX_DAC_Init>:
  * @brief DAC Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC_Init(void)
{
 8001960:	b580      	push	{r7, lr}
 8001962:	b082      	sub	sp, #8
 8001964:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC_Init 0 */

  /* USER CODE END DAC_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8001966:	463b      	mov	r3, r7
 8001968:	2200      	movs	r2, #0
 800196a:	601a      	str	r2, [r3, #0]
 800196c:	605a      	str	r2, [r3, #4]
  /* USER CODE BEGIN DAC_Init 1 */

  /* USER CODE END DAC_Init 1 */
  /** DAC Initialization 
  */
  hdac.Instance = DAC;
 800196e:	4b0f      	ldr	r3, [pc, #60]	; (80019ac <MX_DAC_Init+0x4c>)
 8001970:	4a0f      	ldr	r2, [pc, #60]	; (80019b0 <MX_DAC_Init+0x50>)
 8001972:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac) != HAL_OK)
 8001974:	480d      	ldr	r0, [pc, #52]	; (80019ac <MX_DAC_Init+0x4c>)
 8001976:	f001 fcce 	bl	8003316 <HAL_DAC_Init>
 800197a:	4603      	mov	r3, r0
 800197c:	2b00      	cmp	r3, #0
 800197e:	d001      	beq.n	8001984 <MX_DAC_Init+0x24>
  {
    Error_Handler();
 8001980:	f000 fcf9 	bl	8002376 <Error_Handler>
  }
  /** DAC channel OUT1 config 
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 8001984:	2300      	movs	r3, #0
 8001986:	603b      	str	r3, [r7, #0]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8001988:	2300      	movs	r3, #0
 800198a:	607b      	str	r3, [r7, #4]
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 800198c:	463b      	mov	r3, r7
 800198e:	2200      	movs	r2, #0
 8001990:	4619      	mov	r1, r3
 8001992:	4806      	ldr	r0, [pc, #24]	; (80019ac <MX_DAC_Init+0x4c>)
 8001994:	f001 fd35 	bl	8003402 <HAL_DAC_ConfigChannel>
 8001998:	4603      	mov	r3, r0
 800199a:	2b00      	cmp	r3, #0
 800199c:	d001      	beq.n	80019a2 <MX_DAC_Init+0x42>
  {
    Error_Handler();
 800199e:	f000 fcea 	bl	8002376 <Error_Handler>
  }
  /* USER CODE BEGIN DAC_Init 2 */

  /* USER CODE END DAC_Init 2 */

}
 80019a2:	bf00      	nop
 80019a4:	3708      	adds	r7, #8
 80019a6:	46bd      	mov	sp, r7
 80019a8:	bd80      	pop	{r7, pc}
 80019aa:	bf00      	nop
 80019ac:	20000800 	.word	0x20000800
 80019b0:	40007400 	.word	0x40007400

080019b4 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80019b4:	b580      	push	{r7, lr}
 80019b6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80019b8:	4b12      	ldr	r3, [pc, #72]	; (8001a04 <MX_I2C1_Init+0x50>)
 80019ba:	4a13      	ldr	r2, [pc, #76]	; (8001a08 <MX_I2C1_Init+0x54>)
 80019bc:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 80019be:	4b11      	ldr	r3, [pc, #68]	; (8001a04 <MX_I2C1_Init+0x50>)
 80019c0:	4a12      	ldr	r2, [pc, #72]	; (8001a0c <MX_I2C1_Init+0x58>)
 80019c2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80019c4:	4b0f      	ldr	r3, [pc, #60]	; (8001a04 <MX_I2C1_Init+0x50>)
 80019c6:	2200      	movs	r2, #0
 80019c8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80019ca:	4b0e      	ldr	r3, [pc, #56]	; (8001a04 <MX_I2C1_Init+0x50>)
 80019cc:	2200      	movs	r2, #0
 80019ce:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80019d0:	4b0c      	ldr	r3, [pc, #48]	; (8001a04 <MX_I2C1_Init+0x50>)
 80019d2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80019d6:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80019d8:	4b0a      	ldr	r3, [pc, #40]	; (8001a04 <MX_I2C1_Init+0x50>)
 80019da:	2200      	movs	r2, #0
 80019dc:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80019de:	4b09      	ldr	r3, [pc, #36]	; (8001a04 <MX_I2C1_Init+0x50>)
 80019e0:	2200      	movs	r2, #0
 80019e2:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80019e4:	4b07      	ldr	r3, [pc, #28]	; (8001a04 <MX_I2C1_Init+0x50>)
 80019e6:	2200      	movs	r2, #0
 80019e8:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80019ea:	4b06      	ldr	r3, [pc, #24]	; (8001a04 <MX_I2C1_Init+0x50>)
 80019ec:	2200      	movs	r2, #0
 80019ee:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80019f0:	4804      	ldr	r0, [pc, #16]	; (8001a04 <MX_I2C1_Init+0x50>)
 80019f2:	f001 ff65 	bl	80038c0 <HAL_I2C_Init>
 80019f6:	4603      	mov	r3, r0
 80019f8:	2b00      	cmp	r3, #0
 80019fa:	d001      	beq.n	8001a00 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80019fc:	f000 fcbb 	bl	8002376 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001a00:	bf00      	nop
 8001a02:	bd80      	pop	{r7, pc}
 8001a04:	200006ec 	.word	0x200006ec
 8001a08:	40005400 	.word	0x40005400
 8001a0c:	00061a80 	.word	0x00061a80

08001a10 <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 8001a10:	b580      	push	{r7, lr}
 8001a12:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8001a14:	4b12      	ldr	r3, [pc, #72]	; (8001a60 <MX_I2C3_Init+0x50>)
 8001a16:	4a13      	ldr	r2, [pc, #76]	; (8001a64 <MX_I2C3_Init+0x54>)
 8001a18:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 100000;
 8001a1a:	4b11      	ldr	r3, [pc, #68]	; (8001a60 <MX_I2C3_Init+0x50>)
 8001a1c:	4a12      	ldr	r2, [pc, #72]	; (8001a68 <MX_I2C3_Init+0x58>)
 8001a1e:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001a20:	4b0f      	ldr	r3, [pc, #60]	; (8001a60 <MX_I2C3_Init+0x50>)
 8001a22:	2200      	movs	r2, #0
 8001a24:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 8001a26:	4b0e      	ldr	r3, [pc, #56]	; (8001a60 <MX_I2C3_Init+0x50>)
 8001a28:	2200      	movs	r2, #0
 8001a2a:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001a2c:	4b0c      	ldr	r3, [pc, #48]	; (8001a60 <MX_I2C3_Init+0x50>)
 8001a2e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001a32:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001a34:	4b0a      	ldr	r3, [pc, #40]	; (8001a60 <MX_I2C3_Init+0x50>)
 8001a36:	2200      	movs	r2, #0
 8001a38:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 8001a3a:	4b09      	ldr	r3, [pc, #36]	; (8001a60 <MX_I2C3_Init+0x50>)
 8001a3c:	2200      	movs	r2, #0
 8001a3e:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001a40:	4b07      	ldr	r3, [pc, #28]	; (8001a60 <MX_I2C3_Init+0x50>)
 8001a42:	2200      	movs	r2, #0
 8001a44:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001a46:	4b06      	ldr	r3, [pc, #24]	; (8001a60 <MX_I2C3_Init+0x50>)
 8001a48:	2200      	movs	r2, #0
 8001a4a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8001a4c:	4804      	ldr	r0, [pc, #16]	; (8001a60 <MX_I2C3_Init+0x50>)
 8001a4e:	f001 ff37 	bl	80038c0 <HAL_I2C_Init>
 8001a52:	4603      	mov	r3, r0
 8001a54:	2b00      	cmp	r3, #0
 8001a56:	d001      	beq.n	8001a5c <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 8001a58:	f000 fc8d 	bl	8002376 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8001a5c:	bf00      	nop
 8001a5e:	bd80      	pop	{r7, pc}
 8001a60:	20000618 	.word	0x20000618
 8001a64:	40005c00 	.word	0x40005c00
 8001a68:	000186a0 	.word	0x000186a0

08001a6c <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001a6c:	b580      	push	{r7, lr}
 8001a6e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001a70:	4b17      	ldr	r3, [pc, #92]	; (8001ad0 <MX_SPI1_Init+0x64>)
 8001a72:	4a18      	ldr	r2, [pc, #96]	; (8001ad4 <MX_SPI1_Init+0x68>)
 8001a74:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001a76:	4b16      	ldr	r3, [pc, #88]	; (8001ad0 <MX_SPI1_Init+0x64>)
 8001a78:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001a7c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001a7e:	4b14      	ldr	r3, [pc, #80]	; (8001ad0 <MX_SPI1_Init+0x64>)
 8001a80:	2200      	movs	r2, #0
 8001a82:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001a84:	4b12      	ldr	r3, [pc, #72]	; (8001ad0 <MX_SPI1_Init+0x64>)
 8001a86:	2200      	movs	r2, #0
 8001a88:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001a8a:	4b11      	ldr	r3, [pc, #68]	; (8001ad0 <MX_SPI1_Init+0x64>)
 8001a8c:	2200      	movs	r2, #0
 8001a8e:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001a90:	4b0f      	ldr	r3, [pc, #60]	; (8001ad0 <MX_SPI1_Init+0x64>)
 8001a92:	2200      	movs	r2, #0
 8001a94:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001a96:	4b0e      	ldr	r3, [pc, #56]	; (8001ad0 <MX_SPI1_Init+0x64>)
 8001a98:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001a9c:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001a9e:	4b0c      	ldr	r3, [pc, #48]	; (8001ad0 <MX_SPI1_Init+0x64>)
 8001aa0:	2200      	movs	r2, #0
 8001aa2:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001aa4:	4b0a      	ldr	r3, [pc, #40]	; (8001ad0 <MX_SPI1_Init+0x64>)
 8001aa6:	2200      	movs	r2, #0
 8001aa8:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001aaa:	4b09      	ldr	r3, [pc, #36]	; (8001ad0 <MX_SPI1_Init+0x64>)
 8001aac:	2200      	movs	r2, #0
 8001aae:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001ab0:	4b07      	ldr	r3, [pc, #28]	; (8001ad0 <MX_SPI1_Init+0x64>)
 8001ab2:	2200      	movs	r2, #0
 8001ab4:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8001ab6:	4b06      	ldr	r3, [pc, #24]	; (8001ad0 <MX_SPI1_Init+0x64>)
 8001ab8:	220a      	movs	r2, #10
 8001aba:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001abc:	4804      	ldr	r0, [pc, #16]	; (8001ad0 <MX_SPI1_Init+0x64>)
 8001abe:	f003 f8cf 	bl	8004c60 <HAL_SPI_Init>
 8001ac2:	4603      	mov	r3, r0
 8001ac4:	2b00      	cmp	r3, #0
 8001ac6:	d001      	beq.n	8001acc <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8001ac8:	f000 fc55 	bl	8002376 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001acc:	bf00      	nop
 8001ace:	bd80      	pop	{r7, pc}
 8001ad0:	20000894 	.word	0x20000894
 8001ad4:	40013000 	.word	0x40013000

08001ad8 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001ad8:	b580      	push	{r7, lr}
 8001ada:	b08e      	sub	sp, #56	; 0x38
 8001adc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001ade:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001ae2:	2200      	movs	r2, #0
 8001ae4:	601a      	str	r2, [r3, #0]
 8001ae6:	605a      	str	r2, [r3, #4]
 8001ae8:	609a      	str	r2, [r3, #8]
 8001aea:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001aec:	f107 0320 	add.w	r3, r7, #32
 8001af0:	2200      	movs	r2, #0
 8001af2:	601a      	str	r2, [r3, #0]
 8001af4:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001af6:	1d3b      	adds	r3, r7, #4
 8001af8:	2200      	movs	r2, #0
 8001afa:	601a      	str	r2, [r3, #0]
 8001afc:	605a      	str	r2, [r3, #4]
 8001afe:	609a      	str	r2, [r3, #8]
 8001b00:	60da      	str	r2, [r3, #12]
 8001b02:	611a      	str	r2, [r3, #16]
 8001b04:	615a      	str	r2, [r3, #20]
 8001b06:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001b08:	4b2c      	ldr	r3, [pc, #176]	; (8001bbc <MX_TIM2_Init+0xe4>)
 8001b0a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001b0e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 9;
 8001b10:	4b2a      	ldr	r3, [pc, #168]	; (8001bbc <MX_TIM2_Init+0xe4>)
 8001b12:	2209      	movs	r2, #9
 8001b14:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001b16:	4b29      	ldr	r3, [pc, #164]	; (8001bbc <MX_TIM2_Init+0xe4>)
 8001b18:	2200      	movs	r2, #0
 8001b1a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 19-1;
 8001b1c:	4b27      	ldr	r3, [pc, #156]	; (8001bbc <MX_TIM2_Init+0xe4>)
 8001b1e:	2212      	movs	r2, #18
 8001b20:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001b22:	4b26      	ldr	r3, [pc, #152]	; (8001bbc <MX_TIM2_Init+0xe4>)
 8001b24:	2200      	movs	r2, #0
 8001b26:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001b28:	4b24      	ldr	r3, [pc, #144]	; (8001bbc <MX_TIM2_Init+0xe4>)
 8001b2a:	2200      	movs	r2, #0
 8001b2c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001b2e:	4823      	ldr	r0, [pc, #140]	; (8001bbc <MX_TIM2_Init+0xe4>)
 8001b30:	f003 f8fa 	bl	8004d28 <HAL_TIM_Base_Init>
 8001b34:	4603      	mov	r3, r0
 8001b36:	2b00      	cmp	r3, #0
 8001b38:	d001      	beq.n	8001b3e <MX_TIM2_Init+0x66>
  {
    Error_Handler();
 8001b3a:	f000 fc1c 	bl	8002376 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001b3e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001b42:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001b44:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001b48:	4619      	mov	r1, r3
 8001b4a:	481c      	ldr	r0, [pc, #112]	; (8001bbc <MX_TIM2_Init+0xe4>)
 8001b4c:	f003 fc5c 	bl	8005408 <HAL_TIM_ConfigClockSource>
 8001b50:	4603      	mov	r3, r0
 8001b52:	2b00      	cmp	r3, #0
 8001b54:	d001      	beq.n	8001b5a <MX_TIM2_Init+0x82>
  {
    Error_Handler();
 8001b56:	f000 fc0e 	bl	8002376 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8001b5a:	4818      	ldr	r0, [pc, #96]	; (8001bbc <MX_TIM2_Init+0xe4>)
 8001b5c:	f003 f933 	bl	8004dc6 <HAL_TIM_PWM_Init>
 8001b60:	4603      	mov	r3, r0
 8001b62:	2b00      	cmp	r3, #0
 8001b64:	d001      	beq.n	8001b6a <MX_TIM2_Init+0x92>
  {
    Error_Handler();
 8001b66:	f000 fc06 	bl	8002376 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001b6a:	2300      	movs	r3, #0
 8001b6c:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001b6e:	2300      	movs	r3, #0
 8001b70:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001b72:	f107 0320 	add.w	r3, r7, #32
 8001b76:	4619      	mov	r1, r3
 8001b78:	4810      	ldr	r0, [pc, #64]	; (8001bbc <MX_TIM2_Init+0xe4>)
 8001b7a:	f004 f835 	bl	8005be8 <HAL_TIMEx_MasterConfigSynchronization>
 8001b7e:	4603      	mov	r3, r0
 8001b80:	2b00      	cmp	r3, #0
 8001b82:	d001      	beq.n	8001b88 <MX_TIM2_Init+0xb0>
  {
    Error_Handler();
 8001b84:	f000 fbf7 	bl	8002376 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001b88:	2360      	movs	r3, #96	; 0x60
 8001b8a:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001b8c:	2300      	movs	r3, #0
 8001b8e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001b90:	2300      	movs	r3, #0
 8001b92:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001b94:	2300      	movs	r3, #0
 8001b96:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001b98:	1d3b      	adds	r3, r7, #4
 8001b9a:	2208      	movs	r2, #8
 8001b9c:	4619      	mov	r1, r3
 8001b9e:	4807      	ldr	r0, [pc, #28]	; (8001bbc <MX_TIM2_Init+0xe4>)
 8001ba0:	f003 fb6c 	bl	800527c <HAL_TIM_PWM_ConfigChannel>
 8001ba4:	4603      	mov	r3, r0
 8001ba6:	2b00      	cmp	r3, #0
 8001ba8:	d001      	beq.n	8001bae <MX_TIM2_Init+0xd6>
  {
    Error_Handler();
 8001baa:	f000 fbe4 	bl	8002376 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8001bae:	4803      	ldr	r0, [pc, #12]	; (8001bbc <MX_TIM2_Init+0xe4>)
 8001bb0:	f000 fed2 	bl	8002958 <HAL_TIM_MspPostInit>

}
 8001bb4:	bf00      	nop
 8001bb6:	3738      	adds	r7, #56	; 0x38
 8001bb8:	46bd      	mov	sp, r7
 8001bba:	bd80      	pop	{r7, pc}
 8001bbc:	200008ec 	.word	0x200008ec

08001bc0 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001bc0:	b580      	push	{r7, lr}
 8001bc2:	b08c      	sub	sp, #48	; 0x30
 8001bc4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001bc6:	f107 030c 	add.w	r3, r7, #12
 8001bca:	2224      	movs	r2, #36	; 0x24
 8001bcc:	2100      	movs	r1, #0
 8001bce:	4618      	mov	r0, r3
 8001bd0:	f005 f974 	bl	8006ebc <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001bd4:	1d3b      	adds	r3, r7, #4
 8001bd6:	2200      	movs	r2, #0
 8001bd8:	601a      	str	r2, [r3, #0]
 8001bda:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001bdc:	4b20      	ldr	r3, [pc, #128]	; (8001c60 <MX_TIM3_Init+0xa0>)
 8001bde:	4a21      	ldr	r2, [pc, #132]	; (8001c64 <MX_TIM3_Init+0xa4>)
 8001be0:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8001be2:	4b1f      	ldr	r3, [pc, #124]	; (8001c60 <MX_TIM3_Init+0xa0>)
 8001be4:	2200      	movs	r2, #0
 8001be6:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001be8:	4b1d      	ldr	r3, [pc, #116]	; (8001c60 <MX_TIM3_Init+0xa0>)
 8001bea:	2200      	movs	r2, #0
 8001bec:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 0;
 8001bee:	4b1c      	ldr	r3, [pc, #112]	; (8001c60 <MX_TIM3_Init+0xa0>)
 8001bf0:	2200      	movs	r2, #0
 8001bf2:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001bf4:	4b1a      	ldr	r3, [pc, #104]	; (8001c60 <MX_TIM3_Init+0xa0>)
 8001bf6:	2200      	movs	r2, #0
 8001bf8:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001bfa:	4b19      	ldr	r3, [pc, #100]	; (8001c60 <MX_TIM3_Init+0xa0>)
 8001bfc:	2200      	movs	r2, #0
 8001bfe:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8001c00:	2301      	movs	r3, #1
 8001c02:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001c04:	2300      	movs	r3, #0
 8001c06:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001c08:	2301      	movs	r3, #1
 8001c0a:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001c0c:	2300      	movs	r3, #0
 8001c0e:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8001c10:	2300      	movs	r3, #0
 8001c12:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001c14:	2300      	movs	r3, #0
 8001c16:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001c18:	2301      	movs	r3, #1
 8001c1a:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001c1c:	2300      	movs	r3, #0
 8001c1e:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8001c20:	2300      	movs	r3, #0
 8001c22:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8001c24:	f107 030c 	add.w	r3, r7, #12
 8001c28:	4619      	mov	r1, r3
 8001c2a:	480d      	ldr	r0, [pc, #52]	; (8001c60 <MX_TIM3_Init+0xa0>)
 8001c2c:	f003 f98c 	bl	8004f48 <HAL_TIM_Encoder_Init>
 8001c30:	4603      	mov	r3, r0
 8001c32:	2b00      	cmp	r3, #0
 8001c34:	d001      	beq.n	8001c3a <MX_TIM3_Init+0x7a>
  {
    Error_Handler();
 8001c36:	f000 fb9e 	bl	8002376 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001c3a:	2300      	movs	r3, #0
 8001c3c:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001c3e:	2300      	movs	r3, #0
 8001c40:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001c42:	1d3b      	adds	r3, r7, #4
 8001c44:	4619      	mov	r1, r3
 8001c46:	4806      	ldr	r0, [pc, #24]	; (8001c60 <MX_TIM3_Init+0xa0>)
 8001c48:	f003 ffce 	bl	8005be8 <HAL_TIMEx_MasterConfigSynchronization>
 8001c4c:	4603      	mov	r3, r0
 8001c4e:	2b00      	cmp	r3, #0
 8001c50:	d001      	beq.n	8001c56 <MX_TIM3_Init+0x96>
  {
    Error_Handler();
 8001c52:	f000 fb90 	bl	8002376 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001c56:	bf00      	nop
 8001c58:	3730      	adds	r7, #48	; 0x30
 8001c5a:	46bd      	mov	sp, r7
 8001c5c:	bd80      	pop	{r7, pc}
 8001c5e:	bf00      	nop
 8001c60:	20000780 	.word	0x20000780
 8001c64:	40000400 	.word	0x40000400

08001c68 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8001c68:	b580      	push	{r7, lr}
 8001c6a:	b08e      	sub	sp, #56	; 0x38
 8001c6c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001c6e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001c72:	2200      	movs	r2, #0
 8001c74:	601a      	str	r2, [r3, #0]
 8001c76:	605a      	str	r2, [r3, #4]
 8001c78:	609a      	str	r2, [r3, #8]
 8001c7a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001c7c:	f107 0320 	add.w	r3, r7, #32
 8001c80:	2200      	movs	r2, #0
 8001c82:	601a      	str	r2, [r3, #0]
 8001c84:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001c86:	1d3b      	adds	r3, r7, #4
 8001c88:	2200      	movs	r2, #0
 8001c8a:	601a      	str	r2, [r3, #0]
 8001c8c:	605a      	str	r2, [r3, #4]
 8001c8e:	609a      	str	r2, [r3, #8]
 8001c90:	60da      	str	r2, [r3, #12]
 8001c92:	611a      	str	r2, [r3, #16]
 8001c94:	615a      	str	r2, [r3, #20]
 8001c96:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001c98:	4b2c      	ldr	r3, [pc, #176]	; (8001d4c <MX_TIM4_Init+0xe4>)
 8001c9a:	4a2d      	ldr	r2, [pc, #180]	; (8001d50 <MX_TIM4_Init+0xe8>)
 8001c9c:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 9;
 8001c9e:	4b2b      	ldr	r3, [pc, #172]	; (8001d4c <MX_TIM4_Init+0xe4>)
 8001ca0:	2209      	movs	r2, #9
 8001ca2:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001ca4:	4b29      	ldr	r3, [pc, #164]	; (8001d4c <MX_TIM4_Init+0xe4>)
 8001ca6:	2200      	movs	r2, #0
 8001ca8:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 19-1;
 8001caa:	4b28      	ldr	r3, [pc, #160]	; (8001d4c <MX_TIM4_Init+0xe4>)
 8001cac:	2212      	movs	r2, #18
 8001cae:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001cb0:	4b26      	ldr	r3, [pc, #152]	; (8001d4c <MX_TIM4_Init+0xe4>)
 8001cb2:	2200      	movs	r2, #0
 8001cb4:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001cb6:	4b25      	ldr	r3, [pc, #148]	; (8001d4c <MX_TIM4_Init+0xe4>)
 8001cb8:	2200      	movs	r2, #0
 8001cba:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8001cbc:	4823      	ldr	r0, [pc, #140]	; (8001d4c <MX_TIM4_Init+0xe4>)
 8001cbe:	f003 f833 	bl	8004d28 <HAL_TIM_Base_Init>
 8001cc2:	4603      	mov	r3, r0
 8001cc4:	2b00      	cmp	r3, #0
 8001cc6:	d001      	beq.n	8001ccc <MX_TIM4_Init+0x64>
  {
    Error_Handler();
 8001cc8:	f000 fb55 	bl	8002376 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001ccc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001cd0:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8001cd2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001cd6:	4619      	mov	r1, r3
 8001cd8:	481c      	ldr	r0, [pc, #112]	; (8001d4c <MX_TIM4_Init+0xe4>)
 8001cda:	f003 fb95 	bl	8005408 <HAL_TIM_ConfigClockSource>
 8001cde:	4603      	mov	r3, r0
 8001ce0:	2b00      	cmp	r3, #0
 8001ce2:	d001      	beq.n	8001ce8 <MX_TIM4_Init+0x80>
  {
    Error_Handler();
 8001ce4:	f000 fb47 	bl	8002376 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8001ce8:	4818      	ldr	r0, [pc, #96]	; (8001d4c <MX_TIM4_Init+0xe4>)
 8001cea:	f003 f86c 	bl	8004dc6 <HAL_TIM_PWM_Init>
 8001cee:	4603      	mov	r3, r0
 8001cf0:	2b00      	cmp	r3, #0
 8001cf2:	d001      	beq.n	8001cf8 <MX_TIM4_Init+0x90>
  {
    Error_Handler();
 8001cf4:	f000 fb3f 	bl	8002376 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001cf8:	2300      	movs	r3, #0
 8001cfa:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001cfc:	2300      	movs	r3, #0
 8001cfe:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001d00:	f107 0320 	add.w	r3, r7, #32
 8001d04:	4619      	mov	r1, r3
 8001d06:	4811      	ldr	r0, [pc, #68]	; (8001d4c <MX_TIM4_Init+0xe4>)
 8001d08:	f003 ff6e 	bl	8005be8 <HAL_TIMEx_MasterConfigSynchronization>
 8001d0c:	4603      	mov	r3, r0
 8001d0e:	2b00      	cmp	r3, #0
 8001d10:	d001      	beq.n	8001d16 <MX_TIM4_Init+0xae>
  {
    Error_Handler();
 8001d12:	f000 fb30 	bl	8002376 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001d16:	2360      	movs	r3, #96	; 0x60
 8001d18:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001d1a:	2300      	movs	r3, #0
 8001d1c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001d1e:	2300      	movs	r3, #0
 8001d20:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001d22:	2300      	movs	r3, #0
 8001d24:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001d26:	1d3b      	adds	r3, r7, #4
 8001d28:	2200      	movs	r2, #0
 8001d2a:	4619      	mov	r1, r3
 8001d2c:	4807      	ldr	r0, [pc, #28]	; (8001d4c <MX_TIM4_Init+0xe4>)
 8001d2e:	f003 faa5 	bl	800527c <HAL_TIM_PWM_ConfigChannel>
 8001d32:	4603      	mov	r3, r0
 8001d34:	2b00      	cmp	r3, #0
 8001d36:	d001      	beq.n	8001d3c <MX_TIM4_Init+0xd4>
  {
    Error_Handler();
 8001d38:	f000 fb1d 	bl	8002376 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8001d3c:	4803      	ldr	r0, [pc, #12]	; (8001d4c <MX_TIM4_Init+0xe4>)
 8001d3e:	f000 fe0b 	bl	8002958 <HAL_TIM_MspPostInit>

}
 8001d42:	bf00      	nop
 8001d44:	3738      	adds	r7, #56	; 0x38
 8001d46:	46bd      	mov	sp, r7
 8001d48:	bd80      	pop	{r7, pc}
 8001d4a:	bf00      	nop
 8001d4c:	2000066c 	.word	0x2000066c
 8001d50:	40000800 	.word	0x40000800

08001d54 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8001d54:	b580      	push	{r7, lr}
 8001d56:	b08c      	sub	sp, #48	; 0x30
 8001d58:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001d5a:	f107 030c 	add.w	r3, r7, #12
 8001d5e:	2224      	movs	r2, #36	; 0x24
 8001d60:	2100      	movs	r1, #0
 8001d62:	4618      	mov	r0, r3
 8001d64:	f005 f8aa 	bl	8006ebc <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001d68:	1d3b      	adds	r3, r7, #4
 8001d6a:	2200      	movs	r2, #0
 8001d6c:	601a      	str	r2, [r3, #0]
 8001d6e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8001d70:	4b20      	ldr	r3, [pc, #128]	; (8001df4 <MX_TIM5_Init+0xa0>)
 8001d72:	4a21      	ldr	r2, [pc, #132]	; (8001df8 <MX_TIM5_Init+0xa4>)
 8001d74:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 8001d76:	4b1f      	ldr	r3, [pc, #124]	; (8001df4 <MX_TIM5_Init+0xa0>)
 8001d78:	2200      	movs	r2, #0
 8001d7a:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001d7c:	4b1d      	ldr	r3, [pc, #116]	; (8001df4 <MX_TIM5_Init+0xa0>)
 8001d7e:	2200      	movs	r2, #0
 8001d80:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 0;
 8001d82:	4b1c      	ldr	r3, [pc, #112]	; (8001df4 <MX_TIM5_Init+0xa0>)
 8001d84:	2200      	movs	r2, #0
 8001d86:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001d88:	4b1a      	ldr	r3, [pc, #104]	; (8001df4 <MX_TIM5_Init+0xa0>)
 8001d8a:	2200      	movs	r2, #0
 8001d8c:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001d8e:	4b19      	ldr	r3, [pc, #100]	; (8001df4 <MX_TIM5_Init+0xa0>)
 8001d90:	2200      	movs	r2, #0
 8001d92:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8001d94:	2301      	movs	r3, #1
 8001d96:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001d98:	2300      	movs	r3, #0
 8001d9a:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001d9c:	2301      	movs	r3, #1
 8001d9e:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001da0:	2300      	movs	r3, #0
 8001da2:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8001da4:	2300      	movs	r3, #0
 8001da6:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001da8:	2300      	movs	r3, #0
 8001daa:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001dac:	2301      	movs	r3, #1
 8001dae:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001db0:	2300      	movs	r3, #0
 8001db2:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8001db4:	2300      	movs	r3, #0
 8001db6:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim5, &sConfig) != HAL_OK)
 8001db8:	f107 030c 	add.w	r3, r7, #12
 8001dbc:	4619      	mov	r1, r3
 8001dbe:	480d      	ldr	r0, [pc, #52]	; (8001df4 <MX_TIM5_Init+0xa0>)
 8001dc0:	f003 f8c2 	bl	8004f48 <HAL_TIM_Encoder_Init>
 8001dc4:	4603      	mov	r3, r0
 8001dc6:	2b00      	cmp	r3, #0
 8001dc8:	d001      	beq.n	8001dce <MX_TIM5_Init+0x7a>
  {
    Error_Handler();
 8001dca:	f000 fad4 	bl	8002376 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001dce:	2300      	movs	r3, #0
 8001dd0:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001dd2:	2300      	movs	r3, #0
 8001dd4:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8001dd6:	1d3b      	adds	r3, r7, #4
 8001dd8:	4619      	mov	r1, r3
 8001dda:	4806      	ldr	r0, [pc, #24]	; (8001df4 <MX_TIM5_Init+0xa0>)
 8001ddc:	f003 ff04 	bl	8005be8 <HAL_TIMEx_MasterConfigSynchronization>
 8001de0:	4603      	mov	r3, r0
 8001de2:	2b00      	cmp	r3, #0
 8001de4:	d001      	beq.n	8001dea <MX_TIM5_Init+0x96>
  {
    Error_Handler();
 8001de6:	f000 fac6 	bl	8002376 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8001dea:	bf00      	nop
 8001dec:	3730      	adds	r7, #48	; 0x30
 8001dee:	46bd      	mov	sp, r7
 8001df0:	bd80      	pop	{r7, pc}
 8001df2:	bf00      	nop
 8001df4:	20000740 	.word	0x20000740
 8001df8:	40000c00 	.word	0x40000c00

08001dfc <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8001dfc:	b580      	push	{r7, lr}
 8001dfe:	b082      	sub	sp, #8
 8001e00:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001e02:	463b      	mov	r3, r7
 8001e04:	2200      	movs	r2, #0
 8001e06:	601a      	str	r2, [r3, #0]
 8001e08:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8001e0a:	4b15      	ldr	r3, [pc, #84]	; (8001e60 <MX_TIM6_Init+0x64>)
 8001e0c:	4a15      	ldr	r2, [pc, #84]	; (8001e64 <MX_TIM6_Init+0x68>)
 8001e0e:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 800;
 8001e10:	4b13      	ldr	r3, [pc, #76]	; (8001e60 <MX_TIM6_Init+0x64>)
 8001e12:	f44f 7248 	mov.w	r2, #800	; 0x320
 8001e16:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001e18:	4b11      	ldr	r3, [pc, #68]	; (8001e60 <MX_TIM6_Init+0x64>)
 8001e1a:	2200      	movs	r2, #0
 8001e1c:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 6241;
 8001e1e:	4b10      	ldr	r3, [pc, #64]	; (8001e60 <MX_TIM6_Init+0x64>)
 8001e20:	f641 0261 	movw	r2, #6241	; 0x1861
 8001e24:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001e26:	4b0e      	ldr	r3, [pc, #56]	; (8001e60 <MX_TIM6_Init+0x64>)
 8001e28:	2200      	movs	r2, #0
 8001e2a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8001e2c:	480c      	ldr	r0, [pc, #48]	; (8001e60 <MX_TIM6_Init+0x64>)
 8001e2e:	f002 ff7b 	bl	8004d28 <HAL_TIM_Base_Init>
 8001e32:	4603      	mov	r3, r0
 8001e34:	2b00      	cmp	r3, #0
 8001e36:	d001      	beq.n	8001e3c <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 8001e38:	f000 fa9d 	bl	8002376 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001e3c:	2300      	movs	r3, #0
 8001e3e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001e40:	2300      	movs	r3, #0
 8001e42:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8001e44:	463b      	mov	r3, r7
 8001e46:	4619      	mov	r1, r3
 8001e48:	4805      	ldr	r0, [pc, #20]	; (8001e60 <MX_TIM6_Init+0x64>)
 8001e4a:	f003 fecd 	bl	8005be8 <HAL_TIMEx_MasterConfigSynchronization>
 8001e4e:	4603      	mov	r3, r0
 8001e50:	2b00      	cmp	r3, #0
 8001e52:	d001      	beq.n	8001e58 <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 8001e54:	f000 fa8f 	bl	8002376 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8001e58:	bf00      	nop
 8001e5a:	3708      	adds	r7, #8
 8001e5c:	46bd      	mov	sp, r7
 8001e5e:	bd80      	pop	{r7, pc}
 8001e60:	20000814 	.word	0x20000814
 8001e64:	40001000 	.word	0x40001000

08001e68 <MX_TIM9_Init>:
  * @brief TIM9 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM9_Init(void)
{
 8001e68:	b580      	push	{r7, lr}
 8001e6a:	b084      	sub	sp, #16
 8001e6c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM9_Init 0 */

  /* USER CODE END TIM9_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001e6e:	463b      	mov	r3, r7
 8001e70:	2200      	movs	r2, #0
 8001e72:	601a      	str	r2, [r3, #0]
 8001e74:	605a      	str	r2, [r3, #4]
 8001e76:	609a      	str	r2, [r3, #8]
 8001e78:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM9_Init 1 */

  /* USER CODE END TIM9_Init 1 */
  htim9.Instance = TIM9;
 8001e7a:	4b16      	ldr	r3, [pc, #88]	; (8001ed4 <MX_TIM9_Init+0x6c>)
 8001e7c:	4a16      	ldr	r2, [pc, #88]	; (8001ed8 <MX_TIM9_Init+0x70>)
 8001e7e:	601a      	str	r2, [r3, #0]
  htim9.Init.Prescaler = 623;
 8001e80:	4b14      	ldr	r3, [pc, #80]	; (8001ed4 <MX_TIM9_Init+0x6c>)
 8001e82:	f240 226f 	movw	r2, #623	; 0x26f
 8001e86:	605a      	str	r2, [r3, #4]
  htim9.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001e88:	4b12      	ldr	r3, [pc, #72]	; (8001ed4 <MX_TIM9_Init+0x6c>)
 8001e8a:	2200      	movs	r2, #0
 8001e8c:	609a      	str	r2, [r3, #8]
  htim9.Init.Period = 64913;
 8001e8e:	4b11      	ldr	r3, [pc, #68]	; (8001ed4 <MX_TIM9_Init+0x6c>)
 8001e90:	f64f 5291 	movw	r2, #64913	; 0xfd91
 8001e94:	60da      	str	r2, [r3, #12]
  htim9.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001e96:	4b0f      	ldr	r3, [pc, #60]	; (8001ed4 <MX_TIM9_Init+0x6c>)
 8001e98:	2200      	movs	r2, #0
 8001e9a:	611a      	str	r2, [r3, #16]
  htim9.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001e9c:	4b0d      	ldr	r3, [pc, #52]	; (8001ed4 <MX_TIM9_Init+0x6c>)
 8001e9e:	2200      	movs	r2, #0
 8001ea0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim9) != HAL_OK)
 8001ea2:	480c      	ldr	r0, [pc, #48]	; (8001ed4 <MX_TIM9_Init+0x6c>)
 8001ea4:	f002 ff40 	bl	8004d28 <HAL_TIM_Base_Init>
 8001ea8:	4603      	mov	r3, r0
 8001eaa:	2b00      	cmp	r3, #0
 8001eac:	d001      	beq.n	8001eb2 <MX_TIM9_Init+0x4a>
  {
    Error_Handler();
 8001eae:	f000 fa62 	bl	8002376 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001eb2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001eb6:	603b      	str	r3, [r7, #0]
  if (HAL_TIM_ConfigClockSource(&htim9, &sClockSourceConfig) != HAL_OK)
 8001eb8:	463b      	mov	r3, r7
 8001eba:	4619      	mov	r1, r3
 8001ebc:	4805      	ldr	r0, [pc, #20]	; (8001ed4 <MX_TIM9_Init+0x6c>)
 8001ebe:	f003 faa3 	bl	8005408 <HAL_TIM_ConfigClockSource>
 8001ec2:	4603      	mov	r3, r0
 8001ec4:	2b00      	cmp	r3, #0
 8001ec6:	d001      	beq.n	8001ecc <MX_TIM9_Init+0x64>
  {
    Error_Handler();
 8001ec8:	f000 fa55 	bl	8002376 <Error_Handler>
  }
  /* USER CODE BEGIN TIM9_Init 2 */

  /* USER CODE END TIM9_Init 2 */

}
 8001ecc:	bf00      	nop
 8001ece:	3710      	adds	r7, #16
 8001ed0:	46bd      	mov	sp, r7
 8001ed2:	bd80      	pop	{r7, pc}
 8001ed4:	20000854 	.word	0x20000854
 8001ed8:	40014000 	.word	0x40014000

08001edc <MX_TIM11_Init>:
  * @brief TIM11 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM11_Init(void)
{
 8001edc:	b580      	push	{r7, lr}
 8001ede:	b088      	sub	sp, #32
 8001ee0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM11_Init 0 */

  /* USER CODE END TIM11_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8001ee2:	1d3b      	adds	r3, r7, #4
 8001ee4:	2200      	movs	r2, #0
 8001ee6:	601a      	str	r2, [r3, #0]
 8001ee8:	605a      	str	r2, [r3, #4]
 8001eea:	609a      	str	r2, [r3, #8]
 8001eec:	60da      	str	r2, [r3, #12]
 8001eee:	611a      	str	r2, [r3, #16]
 8001ef0:	615a      	str	r2, [r3, #20]
 8001ef2:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM11_Init 1 */

  /* USER CODE END TIM11_Init 1 */
  htim11.Instance = TIM11;
 8001ef4:	4b1d      	ldr	r3, [pc, #116]	; (8001f6c <MX_TIM11_Init+0x90>)
 8001ef6:	4a1e      	ldr	r2, [pc, #120]	; (8001f70 <MX_TIM11_Init+0x94>)
 8001ef8:	601a      	str	r2, [r3, #0]
  htim11.Init.Prescaler = 0;
 8001efa:	4b1c      	ldr	r3, [pc, #112]	; (8001f6c <MX_TIM11_Init+0x90>)
 8001efc:	2200      	movs	r2, #0
 8001efe:	605a      	str	r2, [r3, #4]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001f00:	4b1a      	ldr	r3, [pc, #104]	; (8001f6c <MX_TIM11_Init+0x90>)
 8001f02:	2200      	movs	r2, #0
 8001f04:	609a      	str	r2, [r3, #8]
  htim11.Init.Period = 0;
 8001f06:	4b19      	ldr	r3, [pc, #100]	; (8001f6c <MX_TIM11_Init+0x90>)
 8001f08:	2200      	movs	r2, #0
 8001f0a:	60da      	str	r2, [r3, #12]
  htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001f0c:	4b17      	ldr	r3, [pc, #92]	; (8001f6c <MX_TIM11_Init+0x90>)
 8001f0e:	2200      	movs	r2, #0
 8001f10:	611a      	str	r2, [r3, #16]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001f12:	4b16      	ldr	r3, [pc, #88]	; (8001f6c <MX_TIM11_Init+0x90>)
 8001f14:	2200      	movs	r2, #0
 8001f16:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim11) != HAL_OK)
 8001f18:	4814      	ldr	r0, [pc, #80]	; (8001f6c <MX_TIM11_Init+0x90>)
 8001f1a:	f002 ff05 	bl	8004d28 <HAL_TIM_Base_Init>
 8001f1e:	4603      	mov	r3, r0
 8001f20:	2b00      	cmp	r3, #0
 8001f22:	d001      	beq.n	8001f28 <MX_TIM11_Init+0x4c>
  {
    Error_Handler();
 8001f24:	f000 fa27 	bl	8002376 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim11) != HAL_OK)
 8001f28:	4810      	ldr	r0, [pc, #64]	; (8001f6c <MX_TIM11_Init+0x90>)
 8001f2a:	f002 ff4c 	bl	8004dc6 <HAL_TIM_PWM_Init>
 8001f2e:	4603      	mov	r3, r0
 8001f30:	2b00      	cmp	r3, #0
 8001f32:	d001      	beq.n	8001f38 <MX_TIM11_Init+0x5c>
  {
    Error_Handler();
 8001f34:	f000 fa1f 	bl	8002376 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001f38:	2360      	movs	r3, #96	; 0x60
 8001f3a:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001f3c:	2300      	movs	r3, #0
 8001f3e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001f40:	2300      	movs	r3, #0
 8001f42:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001f44:	2300      	movs	r3, #0
 8001f46:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim11, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001f48:	1d3b      	adds	r3, r7, #4
 8001f4a:	2200      	movs	r2, #0
 8001f4c:	4619      	mov	r1, r3
 8001f4e:	4807      	ldr	r0, [pc, #28]	; (8001f6c <MX_TIM11_Init+0x90>)
 8001f50:	f003 f994 	bl	800527c <HAL_TIM_PWM_ConfigChannel>
 8001f54:	4603      	mov	r3, r0
 8001f56:	2b00      	cmp	r3, #0
 8001f58:	d001      	beq.n	8001f5e <MX_TIM11_Init+0x82>
  {
    Error_Handler();
 8001f5a:	f000 fa0c 	bl	8002376 <Error_Handler>
  }
  /* USER CODE BEGIN TIM11_Init 2 */

  /* USER CODE END TIM11_Init 2 */
  HAL_TIM_MspPostInit(&htim11);
 8001f5e:	4803      	ldr	r0, [pc, #12]	; (8001f6c <MX_TIM11_Init+0x90>)
 8001f60:	f000 fcfa 	bl	8002958 <HAL_TIM_MspPostInit>

}
 8001f64:	bf00      	nop
 8001f66:	3720      	adds	r7, #32
 8001f68:	46bd      	mov	sp, r7
 8001f6a:	bd80      	pop	{r7, pc}
 8001f6c:	200007c0 	.word	0x200007c0
 8001f70:	40014800 	.word	0x40014800

08001f74 <MX_TIM12_Init>:
  * @brief TIM12 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM12_Init(void)
{
 8001f74:	b580      	push	{r7, lr}
 8001f76:	b088      	sub	sp, #32
 8001f78:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM12_Init 0 */

  /* USER CODE END TIM12_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8001f7a:	1d3b      	adds	r3, r7, #4
 8001f7c:	2200      	movs	r2, #0
 8001f7e:	601a      	str	r2, [r3, #0]
 8001f80:	605a      	str	r2, [r3, #4]
 8001f82:	609a      	str	r2, [r3, #8]
 8001f84:	60da      	str	r2, [r3, #12]
 8001f86:	611a      	str	r2, [r3, #16]
 8001f88:	615a      	str	r2, [r3, #20]
 8001f8a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM12_Init 1 */

  /* USER CODE END TIM12_Init 1 */
  htim12.Instance = TIM12;
 8001f8c:	4b19      	ldr	r3, [pc, #100]	; (8001ff4 <MX_TIM12_Init+0x80>)
 8001f8e:	4a1a      	ldr	r2, [pc, #104]	; (8001ff8 <MX_TIM12_Init+0x84>)
 8001f90:	601a      	str	r2, [r3, #0]
  htim12.Init.Prescaler = 0;
 8001f92:	4b18      	ldr	r3, [pc, #96]	; (8001ff4 <MX_TIM12_Init+0x80>)
 8001f94:	2200      	movs	r2, #0
 8001f96:	605a      	str	r2, [r3, #4]
  htim12.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001f98:	4b16      	ldr	r3, [pc, #88]	; (8001ff4 <MX_TIM12_Init+0x80>)
 8001f9a:	2200      	movs	r2, #0
 8001f9c:	609a      	str	r2, [r3, #8]
  htim12.Init.Period = 0;
 8001f9e:	4b15      	ldr	r3, [pc, #84]	; (8001ff4 <MX_TIM12_Init+0x80>)
 8001fa0:	2200      	movs	r2, #0
 8001fa2:	60da      	str	r2, [r3, #12]
  htim12.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001fa4:	4b13      	ldr	r3, [pc, #76]	; (8001ff4 <MX_TIM12_Init+0x80>)
 8001fa6:	2200      	movs	r2, #0
 8001fa8:	611a      	str	r2, [r3, #16]
  htim12.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001faa:	4b12      	ldr	r3, [pc, #72]	; (8001ff4 <MX_TIM12_Init+0x80>)
 8001fac:	2200      	movs	r2, #0
 8001fae:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim12) != HAL_OK)
 8001fb0:	4810      	ldr	r0, [pc, #64]	; (8001ff4 <MX_TIM12_Init+0x80>)
 8001fb2:	f002 ff08 	bl	8004dc6 <HAL_TIM_PWM_Init>
 8001fb6:	4603      	mov	r3, r0
 8001fb8:	2b00      	cmp	r3, #0
 8001fba:	d001      	beq.n	8001fc0 <MX_TIM12_Init+0x4c>
  {
    Error_Handler();
 8001fbc:	f000 f9db 	bl	8002376 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001fc0:	2360      	movs	r3, #96	; 0x60
 8001fc2:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001fc4:	2300      	movs	r3, #0
 8001fc6:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001fc8:	2300      	movs	r3, #0
 8001fca:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001fcc:	2300      	movs	r3, #0
 8001fce:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim12, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001fd0:	1d3b      	adds	r3, r7, #4
 8001fd2:	2204      	movs	r2, #4
 8001fd4:	4619      	mov	r1, r3
 8001fd6:	4807      	ldr	r0, [pc, #28]	; (8001ff4 <MX_TIM12_Init+0x80>)
 8001fd8:	f003 f950 	bl	800527c <HAL_TIM_PWM_ConfigChannel>
 8001fdc:	4603      	mov	r3, r0
 8001fde:	2b00      	cmp	r3, #0
 8001fe0:	d001      	beq.n	8001fe6 <MX_TIM12_Init+0x72>
  {
    Error_Handler();
 8001fe2:	f000 f9c8 	bl	8002376 <Error_Handler>
  }
  /* USER CODE BEGIN TIM12_Init 2 */

  /* USER CODE END TIM12_Init 2 */
  HAL_TIM_MspPostInit(&htim12);
 8001fe6:	4803      	ldr	r0, [pc, #12]	; (8001ff4 <MX_TIM12_Init+0x80>)
 8001fe8:	f000 fcb6 	bl	8002958 <HAL_TIM_MspPostInit>

}
 8001fec:	bf00      	nop
 8001fee:	3720      	adds	r7, #32
 8001ff0:	46bd      	mov	sp, r7
 8001ff2:	bd80      	pop	{r7, pc}
 8001ff4:	20000994 	.word	0x20000994
 8001ff8:	40001800 	.word	0x40001800

08001ffc <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001ffc:	b580      	push	{r7, lr}
 8001ffe:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002000:	4b11      	ldr	r3, [pc, #68]	; (8002048 <MX_USART2_UART_Init+0x4c>)
 8002002:	4a12      	ldr	r2, [pc, #72]	; (800204c <MX_USART2_UART_Init+0x50>)
 8002004:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8002006:	4b10      	ldr	r3, [pc, #64]	; (8002048 <MX_USART2_UART_Init+0x4c>)
 8002008:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800200c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800200e:	4b0e      	ldr	r3, [pc, #56]	; (8002048 <MX_USART2_UART_Init+0x4c>)
 8002010:	2200      	movs	r2, #0
 8002012:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002014:	4b0c      	ldr	r3, [pc, #48]	; (8002048 <MX_USART2_UART_Init+0x4c>)
 8002016:	2200      	movs	r2, #0
 8002018:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800201a:	4b0b      	ldr	r3, [pc, #44]	; (8002048 <MX_USART2_UART_Init+0x4c>)
 800201c:	2200      	movs	r2, #0
 800201e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002020:	4b09      	ldr	r3, [pc, #36]	; (8002048 <MX_USART2_UART_Init+0x4c>)
 8002022:	220c      	movs	r2, #12
 8002024:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002026:	4b08      	ldr	r3, [pc, #32]	; (8002048 <MX_USART2_UART_Init+0x4c>)
 8002028:	2200      	movs	r2, #0
 800202a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800202c:	4b06      	ldr	r3, [pc, #24]	; (8002048 <MX_USART2_UART_Init+0x4c>)
 800202e:	2200      	movs	r2, #0
 8002030:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002032:	4805      	ldr	r0, [pc, #20]	; (8002048 <MX_USART2_UART_Init+0x4c>)
 8002034:	f003 fe68 	bl	8005d08 <HAL_UART_Init>
 8002038:	4603      	mov	r3, r0
 800203a:	2b00      	cmp	r3, #0
 800203c:	d001      	beq.n	8002042 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800203e:	f000 f99a 	bl	8002376 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002042:	bf00      	nop
 8002044:	bd80      	pop	{r7, pc}
 8002046:	bf00      	nop
 8002048:	2000092c 	.word	0x2000092c
 800204c:	40004400 	.word	0x40004400

08002050 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8002050:	b580      	push	{r7, lr}
 8002052:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8002054:	4b11      	ldr	r3, [pc, #68]	; (800209c <MX_USART3_UART_Init+0x4c>)
 8002056:	4a12      	ldr	r2, [pc, #72]	; (80020a0 <MX_USART3_UART_Init+0x50>)
 8002058:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800205a:	4b10      	ldr	r3, [pc, #64]	; (800209c <MX_USART3_UART_Init+0x4c>)
 800205c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002060:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8002062:	4b0e      	ldr	r3, [pc, #56]	; (800209c <MX_USART3_UART_Init+0x4c>)
 8002064:	2200      	movs	r2, #0
 8002066:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8002068:	4b0c      	ldr	r3, [pc, #48]	; (800209c <MX_USART3_UART_Init+0x4c>)
 800206a:	2200      	movs	r2, #0
 800206c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800206e:	4b0b      	ldr	r3, [pc, #44]	; (800209c <MX_USART3_UART_Init+0x4c>)
 8002070:	2200      	movs	r2, #0
 8002072:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8002074:	4b09      	ldr	r3, [pc, #36]	; (800209c <MX_USART3_UART_Init+0x4c>)
 8002076:	220c      	movs	r2, #12
 8002078:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800207a:	4b08      	ldr	r3, [pc, #32]	; (800209c <MX_USART3_UART_Init+0x4c>)
 800207c:	2200      	movs	r2, #0
 800207e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8002080:	4b06      	ldr	r3, [pc, #24]	; (800209c <MX_USART3_UART_Init+0x4c>)
 8002082:	2200      	movs	r2, #0
 8002084:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8002086:	4805      	ldr	r0, [pc, #20]	; (800209c <MX_USART3_UART_Init+0x4c>)
 8002088:	f003 fe3e 	bl	8005d08 <HAL_UART_Init>
 800208c:	4603      	mov	r3, r0
 800208e:	2b00      	cmp	r3, #0
 8002090:	d001      	beq.n	8002096 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8002092:	f000 f970 	bl	8002376 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8002096:	bf00      	nop
 8002098:	bd80      	pop	{r7, pc}
 800209a:	bf00      	nop
 800209c:	200006ac 	.word	0x200006ac
 80020a0:	40004800 	.word	0x40004800

080020a4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80020a4:	b580      	push	{r7, lr}
 80020a6:	b08a      	sub	sp, #40	; 0x28
 80020a8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80020aa:	f107 0314 	add.w	r3, r7, #20
 80020ae:	2200      	movs	r2, #0
 80020b0:	601a      	str	r2, [r3, #0]
 80020b2:	605a      	str	r2, [r3, #4]
 80020b4:	609a      	str	r2, [r3, #8]
 80020b6:	60da      	str	r2, [r3, #12]
 80020b8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80020ba:	2300      	movs	r3, #0
 80020bc:	613b      	str	r3, [r7, #16]
 80020be:	4b66      	ldr	r3, [pc, #408]	; (8002258 <MX_GPIO_Init+0x1b4>)
 80020c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020c2:	4a65      	ldr	r2, [pc, #404]	; (8002258 <MX_GPIO_Init+0x1b4>)
 80020c4:	f043 0304 	orr.w	r3, r3, #4
 80020c8:	6313      	str	r3, [r2, #48]	; 0x30
 80020ca:	4b63      	ldr	r3, [pc, #396]	; (8002258 <MX_GPIO_Init+0x1b4>)
 80020cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020ce:	f003 0304 	and.w	r3, r3, #4
 80020d2:	613b      	str	r3, [r7, #16]
 80020d4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80020d6:	2300      	movs	r3, #0
 80020d8:	60fb      	str	r3, [r7, #12]
 80020da:	4b5f      	ldr	r3, [pc, #380]	; (8002258 <MX_GPIO_Init+0x1b4>)
 80020dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020de:	4a5e      	ldr	r2, [pc, #376]	; (8002258 <MX_GPIO_Init+0x1b4>)
 80020e0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80020e4:	6313      	str	r3, [r2, #48]	; 0x30
 80020e6:	4b5c      	ldr	r3, [pc, #368]	; (8002258 <MX_GPIO_Init+0x1b4>)
 80020e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020ea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80020ee:	60fb      	str	r3, [r7, #12]
 80020f0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80020f2:	2300      	movs	r3, #0
 80020f4:	60bb      	str	r3, [r7, #8]
 80020f6:	4b58      	ldr	r3, [pc, #352]	; (8002258 <MX_GPIO_Init+0x1b4>)
 80020f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020fa:	4a57      	ldr	r2, [pc, #348]	; (8002258 <MX_GPIO_Init+0x1b4>)
 80020fc:	f043 0301 	orr.w	r3, r3, #1
 8002100:	6313      	str	r3, [r2, #48]	; 0x30
 8002102:	4b55      	ldr	r3, [pc, #340]	; (8002258 <MX_GPIO_Init+0x1b4>)
 8002104:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002106:	f003 0301 	and.w	r3, r3, #1
 800210a:	60bb      	str	r3, [r7, #8]
 800210c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800210e:	2300      	movs	r3, #0
 8002110:	607b      	str	r3, [r7, #4]
 8002112:	4b51      	ldr	r3, [pc, #324]	; (8002258 <MX_GPIO_Init+0x1b4>)
 8002114:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002116:	4a50      	ldr	r2, [pc, #320]	; (8002258 <MX_GPIO_Init+0x1b4>)
 8002118:	f043 0302 	orr.w	r3, r3, #2
 800211c:	6313      	str	r3, [r2, #48]	; 0x30
 800211e:	4b4e      	ldr	r3, [pc, #312]	; (8002258 <MX_GPIO_Init+0x1b4>)
 8002120:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002122:	f003 0302 	and.w	r3, r3, #2
 8002126:	607b      	str	r3, [r7, #4]
 8002128:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800212a:	2300      	movs	r3, #0
 800212c:	603b      	str	r3, [r7, #0]
 800212e:	4b4a      	ldr	r3, [pc, #296]	; (8002258 <MX_GPIO_Init+0x1b4>)
 8002130:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002132:	4a49      	ldr	r2, [pc, #292]	; (8002258 <MX_GPIO_Init+0x1b4>)
 8002134:	f043 0308 	orr.w	r3, r3, #8
 8002138:	6313      	str	r3, [r2, #48]	; 0x30
 800213a:	4b47      	ldr	r3, [pc, #284]	; (8002258 <MX_GPIO_Init+0x1b4>)
 800213c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800213e:	f003 0308 	and.w	r3, r3, #8
 8002142:	603b      	str	r3, [r7, #0]
 8002144:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, IMU_RST_Pin|REV_BIT0_Pin|RGB_INT1_Pin|RGB_INT2_Pin 
 8002146:	2200      	movs	r2, #0
 8002148:	f241 1173 	movw	r1, #4467	; 0x1173
 800214c:	4843      	ldr	r0, [pc, #268]	; (800225c <MX_GPIO_Init+0x1b8>)
 800214e:	f001 fb83 	bl	8003858 <HAL_GPIO_WritePin>
                          |ROMI_SLPL_Pin|TRIG_CTR_Pin|ROMI_DIRL_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, Blinky_Pin|TRIGR_Pin|SPI_CS_AUX_Pin, GPIO_PIN_RESET);
 8002152:	2200      	movs	r2, #0
 8002154:	f248 4120 	movw	r1, #33824	; 0x8420
 8002158:	4841      	ldr	r0, [pc, #260]	; (8002260 <MX_GPIO_Init+0x1bc>)
 800215a:	f001 fb7d 	bl	8003858 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, TRIGL_Pin|ROMI_DIRR_Pin|ROMI_SLPR_Pin, GPIO_PIN_RESET);
 800215e:	2200      	movs	r2, #0
 8002160:	f246 0101 	movw	r1, #24577	; 0x6001
 8002164:	483f      	ldr	r0, [pc, #252]	; (8002264 <MX_GPIO_Init+0x1c0>)
 8002166:	f001 fb77 	bl	8003858 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI_CS_FLASH_GPIO_Port, SPI_CS_FLASH_Pin, GPIO_PIN_RESET);
 800216a:	2200      	movs	r2, #0
 800216c:	2104      	movs	r1, #4
 800216e:	483e      	ldr	r0, [pc, #248]	; (8002268 <MX_GPIO_Init+0x1c4>)
 8002170:	f001 fb72 	bl	8003858 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : OLED_BTN_Pin REV_BIT1_Pin REV_BIT2_Pin */
  GPIO_InitStruct.Pin = OLED_BTN_Pin|REV_BIT1_Pin|REV_BIT2_Pin;
 8002174:	f242 030c 	movw	r3, #8204	; 0x200c
 8002178:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800217a:	2300      	movs	r3, #0
 800217c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800217e:	2300      	movs	r3, #0
 8002180:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002182:	f107 0314 	add.w	r3, r7, #20
 8002186:	4619      	mov	r1, r3
 8002188:	4834      	ldr	r0, [pc, #208]	; (800225c <MX_GPIO_Init+0x1b8>)
 800218a:	f001 f9b3 	bl	80034f4 <HAL_GPIO_Init>

  /*Configure GPIO pins : IMU_RST_Pin REV_BIT0_Pin RGB_INT1_Pin RGB_INT2_Pin 
                           ROMI_SLPL_Pin TRIG_CTR_Pin ROMI_DIRL_Pin */
  GPIO_InitStruct.Pin = IMU_RST_Pin|REV_BIT0_Pin|RGB_INT1_Pin|RGB_INT2_Pin 
 800218e:	f241 1373 	movw	r3, #4467	; 0x1173
 8002192:	617b      	str	r3, [r7, #20]
                          |ROMI_SLPL_Pin|TRIG_CTR_Pin|ROMI_DIRL_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002194:	2301      	movs	r3, #1
 8002196:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002198:	2300      	movs	r3, #0
 800219a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800219c:	2300      	movs	r3, #0
 800219e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80021a0:	f107 0314 	add.w	r3, r7, #20
 80021a4:	4619      	mov	r1, r3
 80021a6:	482d      	ldr	r0, [pc, #180]	; (800225c <MX_GPIO_Init+0x1b8>)
 80021a8:	f001 f9a4 	bl	80034f4 <HAL_GPIO_Init>

  /*Configure GPIO pins : Blinky_Pin TRIGR_Pin SPI_CS_AUX_Pin */
  GPIO_InitStruct.Pin = Blinky_Pin|TRIGR_Pin|SPI_CS_AUX_Pin;
 80021ac:	f248 4320 	movw	r3, #33824	; 0x8420
 80021b0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80021b2:	2301      	movs	r3, #1
 80021b4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021b6:	2300      	movs	r3, #0
 80021b8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80021ba:	2300      	movs	r3, #0
 80021bc:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80021be:	f107 0314 	add.w	r3, r7, #20
 80021c2:	4619      	mov	r1, r3
 80021c4:	4826      	ldr	r0, [pc, #152]	; (8002260 <MX_GPIO_Init+0x1bc>)
 80021c6:	f001 f995 	bl	80034f4 <HAL_GPIO_Init>

  /*Configure GPIO pins : TRIGL_Pin ROMI_DIRR_Pin ROMI_SLPR_Pin */
  GPIO_InitStruct.Pin = TRIGL_Pin|ROMI_DIRR_Pin|ROMI_SLPR_Pin;
 80021ca:	f246 0301 	movw	r3, #24577	; 0x6001
 80021ce:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80021d0:	2301      	movs	r3, #1
 80021d2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021d4:	2300      	movs	r3, #0
 80021d6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80021d8:	2300      	movs	r3, #0
 80021da:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80021dc:	f107 0314 	add.w	r3, r7, #20
 80021e0:	4619      	mov	r1, r3
 80021e2:	4820      	ldr	r0, [pc, #128]	; (8002264 <MX_GPIO_Init+0x1c0>)
 80021e4:	f001 f986 	bl	80034f4 <HAL_GPIO_Init>

  /*Configure GPIO pins : ECHOL_Pin QTRR_OUT_Pin QTRL_OUT_Pin */
  GPIO_InitStruct.Pin = ECHOL_Pin|QTRR_OUT_Pin|QTRL_OUT_Pin;
 80021e8:	f241 0306 	movw	r3, #4102	; 0x1006
 80021ec:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80021ee:	4b1f      	ldr	r3, [pc, #124]	; (800226c <MX_GPIO_Init+0x1c8>)
 80021f0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021f2:	2300      	movs	r3, #0
 80021f4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80021f6:	f107 0314 	add.w	r3, r7, #20
 80021fa:	4619      	mov	r1, r3
 80021fc:	4819      	ldr	r0, [pc, #100]	; (8002264 <MX_GPIO_Init+0x1c0>)
 80021fe:	f001 f979 	bl	80034f4 <HAL_GPIO_Init>

  /*Configure GPIO pin : ECHO_CTR_Pin */
  GPIO_InitStruct.Pin = ECHO_CTR_Pin;
 8002202:	2380      	movs	r3, #128	; 0x80
 8002204:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002206:	4b19      	ldr	r3, [pc, #100]	; (800226c <MX_GPIO_Init+0x1c8>)
 8002208:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800220a:	2300      	movs	r3, #0
 800220c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ECHO_CTR_GPIO_Port, &GPIO_InitStruct);
 800220e:	f107 0314 	add.w	r3, r7, #20
 8002212:	4619      	mov	r1, r3
 8002214:	4811      	ldr	r0, [pc, #68]	; (800225c <MX_GPIO_Init+0x1b8>)
 8002216:	f001 f96d 	bl	80034f4 <HAL_GPIO_Init>

  /*Configure GPIO pin : ECHOR_Pin */
  GPIO_InitStruct.Pin = ECHOR_Pin;
 800221a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800221e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002220:	4b12      	ldr	r3, [pc, #72]	; (800226c <MX_GPIO_Init+0x1c8>)
 8002222:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002224:	2300      	movs	r3, #0
 8002226:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ECHOR_GPIO_Port, &GPIO_InitStruct);
 8002228:	f107 0314 	add.w	r3, r7, #20
 800222c:	4619      	mov	r1, r3
 800222e:	480c      	ldr	r0, [pc, #48]	; (8002260 <MX_GPIO_Init+0x1bc>)
 8002230:	f001 f960 	bl	80034f4 <HAL_GPIO_Init>

  /*Configure GPIO pin : SPI_CS_FLASH_Pin */
  GPIO_InitStruct.Pin = SPI_CS_FLASH_Pin;
 8002234:	2304      	movs	r3, #4
 8002236:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002238:	2301      	movs	r3, #1
 800223a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800223c:	2300      	movs	r3, #0
 800223e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002240:	2300      	movs	r3, #0
 8002242:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SPI_CS_FLASH_GPIO_Port, &GPIO_InitStruct);
 8002244:	f107 0314 	add.w	r3, r7, #20
 8002248:	4619      	mov	r1, r3
 800224a:	4807      	ldr	r0, [pc, #28]	; (8002268 <MX_GPIO_Init+0x1c4>)
 800224c:	f001 f952 	bl	80034f4 <HAL_GPIO_Init>

}
 8002250:	bf00      	nop
 8002252:	3728      	adds	r7, #40	; 0x28
 8002254:	46bd      	mov	sp, r7
 8002256:	bd80      	pop	{r7, pc}
 8002258:	40023800 	.word	0x40023800
 800225c:	40020800 	.word	0x40020800
 8002260:	40020000 	.word	0x40020000
 8002264:	40020400 	.word	0x40020400
 8002268:	40020c00 	.word	0x40020c00
 800226c:	10110000 	.word	0x10110000

08002270 <__io_putchar>:

/* USER CODE BEGIN 4 */

/* This function sets up the serial printf*/
int __io_putchar(int ch) {
 8002270:	b580      	push	{r7, lr}
 8002272:	b084      	sub	sp, #16
 8002274:	af00      	add	r7, sp, #0
 8002276:	6078      	str	r0, [r7, #4]
    HAL_StatusTypeDef sts = HAL_UART_Transmit(&IO_UART ,(uint8_t*)&ch,1,10);
 8002278:	1d39      	adds	r1, r7, #4
 800227a:	230a      	movs	r3, #10
 800227c:	2201      	movs	r2, #1
 800227e:	4808      	ldr	r0, [pc, #32]	; (80022a0 <__io_putchar+0x30>)
 8002280:	f003 fd8f 	bl	8005da2 <HAL_UART_Transmit>
 8002284:	4603      	mov	r3, r0
 8002286:	73fb      	strb	r3, [r7, #15]
    if(sts == HAL_OK) {
 8002288:	7bfb      	ldrb	r3, [r7, #15]
 800228a:	2b00      	cmp	r3, #0
 800228c:	d101      	bne.n	8002292 <__io_putchar+0x22>
        return ch;
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	e001      	b.n	8002296 <__io_putchar+0x26>
    }
    return EOF;
 8002292:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002296:	4618      	mov	r0, r3
 8002298:	3710      	adds	r7, #16
 800229a:	46bd      	mov	sp, r7
 800229c:	bd80      	pop	{r7, pc}
 800229e:	bf00      	nop
 80022a0:	2000092c 	.word	0x2000092c

080022a4 <__io_getchar>:
int __io_getchar(void) {
 80022a4:	b580      	push	{r7, lr}
 80022a6:	b084      	sub	sp, #16
 80022a8:	af00      	add	r7, sp, #0
    if(__HAL_UART_GET_FLAG(&IO_UART , UART_FLAG_RXNE)) {
 80022aa:	4b1f      	ldr	r3, [pc, #124]	; (8002328 <__io_getchar+0x84>)
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	f003 0320 	and.w	r3, r3, #32
 80022b4:	2b20      	cmp	r3, #32
 80022b6:	d130      	bne.n	800231a <__io_getchar+0x76>
        uint8_t ch=0;
 80022b8:	2300      	movs	r3, #0
 80022ba:	73bb      	strb	r3, [r7, #14]
        __HAL_UART_CLEAR_FEFLAG(&IO_UART );
 80022bc:	2300      	movs	r3, #0
 80022be:	60bb      	str	r3, [r7, #8]
 80022c0:	4b19      	ldr	r3, [pc, #100]	; (8002328 <__io_getchar+0x84>)
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	60bb      	str	r3, [r7, #8]
 80022c8:	4b17      	ldr	r3, [pc, #92]	; (8002328 <__io_getchar+0x84>)
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	685b      	ldr	r3, [r3, #4]
 80022ce:	60bb      	str	r3, [r7, #8]
 80022d0:	68bb      	ldr	r3, [r7, #8]
        __HAL_UART_CLEAR_OREFLAG(&IO_UART );
 80022d2:	2300      	movs	r3, #0
 80022d4:	607b      	str	r3, [r7, #4]
 80022d6:	4b14      	ldr	r3, [pc, #80]	; (8002328 <__io_getchar+0x84>)
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	607b      	str	r3, [r7, #4]
 80022de:	4b12      	ldr	r3, [pc, #72]	; (8002328 <__io_getchar+0x84>)
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	685b      	ldr	r3, [r3, #4]
 80022e4:	607b      	str	r3, [r7, #4]
 80022e6:	687b      	ldr	r3, [r7, #4]
        __HAL_UART_CLEAR_PEFLAG(&IO_UART );
 80022e8:	2300      	movs	r3, #0
 80022ea:	603b      	str	r3, [r7, #0]
 80022ec:	4b0e      	ldr	r3, [pc, #56]	; (8002328 <__io_getchar+0x84>)
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	603b      	str	r3, [r7, #0]
 80022f4:	4b0c      	ldr	r3, [pc, #48]	; (8002328 <__io_getchar+0x84>)
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	685b      	ldr	r3, [r3, #4]
 80022fa:	603b      	str	r3, [r7, #0]
 80022fc:	683b      	ldr	r3, [r7, #0]
        HAL_StatusTypeDef sts = HAL_UART_Receive(&IO_UART ,&ch,1,1);
 80022fe:	f107 010e 	add.w	r1, r7, #14
 8002302:	2301      	movs	r3, #1
 8002304:	2201      	movs	r2, #1
 8002306:	4808      	ldr	r0, [pc, #32]	; (8002328 <__io_getchar+0x84>)
 8002308:	f003 fde4 	bl	8005ed4 <HAL_UART_Receive>
 800230c:	4603      	mov	r3, r0
 800230e:	73fb      	strb	r3, [r7, #15]
        if(sts == HAL_OK) {
 8002310:	7bfb      	ldrb	r3, [r7, #15]
 8002312:	2b00      	cmp	r3, #0
 8002314:	d101      	bne.n	800231a <__io_getchar+0x76>
            return (int)ch;
 8002316:	7bbb      	ldrb	r3, [r7, #14]
 8002318:	e001      	b.n	800231e <__io_getchar+0x7a>
        }
    }
    return EOF;
 800231a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800231e:	4618      	mov	r0, r3
 8002320:	3710      	adds	r7, #16
 8002322:	46bd      	mov	sp, r7
 8002324:	bd80      	pop	{r7, pc}
 8002326:	bf00      	nop
 8002328:	2000092c 	.word	0x2000092c

0800232c <_read>:
int _read(int file, char *ptr, int len){
 800232c:	b580      	push	{r7, lr}
 800232e:	b086      	sub	sp, #24
 8002330:	af00      	add	r7, sp, #0
 8002332:	60f8      	str	r0, [r7, #12]
 8002334:	60b9      	str	r1, [r7, #8]
 8002336:	607a      	str	r2, [r7, #4]
int DataIdx;
    for (DataIdx = 0; DataIdx < len; DataIdx++) {
 8002338:	2300      	movs	r3, #0
 800233a:	617b      	str	r3, [r7, #20]
 800233c:	e012      	b.n	8002364 <_read+0x38>
        int ch =  __io_getchar();
 800233e:	f7ff ffb1 	bl	80022a4 <__io_getchar>
 8002342:	6138      	str	r0, [r7, #16]
        if(ch != EOF) {
 8002344:	693b      	ldr	r3, [r7, #16]
 8002346:	f1b3 3fff 	cmp.w	r3, #4294967295
 800234a:	d006      	beq.n	800235a <_read+0x2e>
             *ptr++ = ch;
 800234c:	68bb      	ldr	r3, [r7, #8]
 800234e:	1c5a      	adds	r2, r3, #1
 8002350:	60ba      	str	r2, [r7, #8]
 8002352:	693a      	ldr	r2, [r7, #16]
 8002354:	b2d2      	uxtb	r2, r2
 8002356:	701a      	strb	r2, [r3, #0]
 8002358:	e001      	b.n	800235e <_read+0x32>
        }
        else {
            return DataIdx;
 800235a:	697b      	ldr	r3, [r7, #20]
 800235c:	e007      	b.n	800236e <_read+0x42>
    for (DataIdx = 0; DataIdx < len; DataIdx++) {
 800235e:	697b      	ldr	r3, [r7, #20]
 8002360:	3301      	adds	r3, #1
 8002362:	617b      	str	r3, [r7, #20]
 8002364:	697a      	ldr	r2, [r7, #20]
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	429a      	cmp	r2, r3
 800236a:	dbe8      	blt.n	800233e <_read+0x12>
        }
    }
    return len;
 800236c:	687b      	ldr	r3, [r7, #4]
}
 800236e:	4618      	mov	r0, r3
 8002370:	3718      	adds	r7, #24
 8002372:	46bd      	mov	sp, r7
 8002374:	bd80      	pop	{r7, pc}

08002376 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002376:	b480      	push	{r7}
 8002378:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 800237a:	bf00      	nop
 800237c:	46bd      	mov	sp, r7
 800237e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002382:	4770      	bx	lr

08002384 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                                                /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002384:	b480      	push	{r7}
 8002386:	b083      	sub	sp, #12
 8002388:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800238a:	2300      	movs	r3, #0
 800238c:	607b      	str	r3, [r7, #4]
 800238e:	4b10      	ldr	r3, [pc, #64]	; (80023d0 <HAL_MspInit+0x4c>)
 8002390:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002392:	4a0f      	ldr	r2, [pc, #60]	; (80023d0 <HAL_MspInit+0x4c>)
 8002394:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002398:	6453      	str	r3, [r2, #68]	; 0x44
 800239a:	4b0d      	ldr	r3, [pc, #52]	; (80023d0 <HAL_MspInit+0x4c>)
 800239c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800239e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80023a2:	607b      	str	r3, [r7, #4]
 80023a4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80023a6:	2300      	movs	r3, #0
 80023a8:	603b      	str	r3, [r7, #0]
 80023aa:	4b09      	ldr	r3, [pc, #36]	; (80023d0 <HAL_MspInit+0x4c>)
 80023ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023ae:	4a08      	ldr	r2, [pc, #32]	; (80023d0 <HAL_MspInit+0x4c>)
 80023b0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80023b4:	6413      	str	r3, [r2, #64]	; 0x40
 80023b6:	4b06      	ldr	r3, [pc, #24]	; (80023d0 <HAL_MspInit+0x4c>)
 80023b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023ba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80023be:	603b      	str	r3, [r7, #0]
 80023c0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80023c2:	bf00      	nop
 80023c4:	370c      	adds	r7, #12
 80023c6:	46bd      	mov	sp, r7
 80023c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023cc:	4770      	bx	lr
 80023ce:	bf00      	nop
 80023d0:	40023800 	.word	0x40023800

080023d4 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 80023d4:	b580      	push	{r7, lr}
 80023d6:	b08a      	sub	sp, #40	; 0x28
 80023d8:	af00      	add	r7, sp, #0
 80023da:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80023dc:	f107 0314 	add.w	r3, r7, #20
 80023e0:	2200      	movs	r2, #0
 80023e2:	601a      	str	r2, [r3, #0]
 80023e4:	605a      	str	r2, [r3, #4]
 80023e6:	609a      	str	r2, [r3, #8]
 80023e8:	60da      	str	r2, [r3, #12]
 80023ea:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	4a19      	ldr	r2, [pc, #100]	; (8002458 <HAL_CAN_MspInit+0x84>)
 80023f2:	4293      	cmp	r3, r2
 80023f4:	d12c      	bne.n	8002450 <HAL_CAN_MspInit+0x7c>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 80023f6:	2300      	movs	r3, #0
 80023f8:	613b      	str	r3, [r7, #16]
 80023fa:	4b18      	ldr	r3, [pc, #96]	; (800245c <HAL_CAN_MspInit+0x88>)
 80023fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023fe:	4a17      	ldr	r2, [pc, #92]	; (800245c <HAL_CAN_MspInit+0x88>)
 8002400:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002404:	6413      	str	r3, [r2, #64]	; 0x40
 8002406:	4b15      	ldr	r3, [pc, #84]	; (800245c <HAL_CAN_MspInit+0x88>)
 8002408:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800240a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800240e:	613b      	str	r3, [r7, #16]
 8002410:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002412:	2300      	movs	r3, #0
 8002414:	60fb      	str	r3, [r7, #12]
 8002416:	4b11      	ldr	r3, [pc, #68]	; (800245c <HAL_CAN_MspInit+0x88>)
 8002418:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800241a:	4a10      	ldr	r2, [pc, #64]	; (800245c <HAL_CAN_MspInit+0x88>)
 800241c:	f043 0301 	orr.w	r3, r3, #1
 8002420:	6313      	str	r3, [r2, #48]	; 0x30
 8002422:	4b0e      	ldr	r3, [pc, #56]	; (800245c <HAL_CAN_MspInit+0x88>)
 8002424:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002426:	f003 0301 	and.w	r3, r3, #1
 800242a:	60fb      	str	r3, [r7, #12]
 800242c:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration    
    PA11     ------> CAN1_RX
    PA12     ------> CAN1_TX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800242e:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8002432:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002434:	2302      	movs	r3, #2
 8002436:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002438:	2300      	movs	r3, #0
 800243a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800243c:	2303      	movs	r3, #3
 800243e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8002440:	2309      	movs	r3, #9
 8002442:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002444:	f107 0314 	add.w	r3, r7, #20
 8002448:	4619      	mov	r1, r3
 800244a:	4805      	ldr	r0, [pc, #20]	; (8002460 <HAL_CAN_MspInit+0x8c>)
 800244c:	f001 f852 	bl	80034f4 <HAL_GPIO_Init>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 8002450:	bf00      	nop
 8002452:	3728      	adds	r7, #40	; 0x28
 8002454:	46bd      	mov	sp, r7
 8002456:	bd80      	pop	{r7, pc}
 8002458:	40006400 	.word	0x40006400
 800245c:	40023800 	.word	0x40023800
 8002460:	40020000 	.word	0x40020000

08002464 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8002464:	b580      	push	{r7, lr}
 8002466:	b08a      	sub	sp, #40	; 0x28
 8002468:	af00      	add	r7, sp, #0
 800246a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800246c:	f107 0314 	add.w	r3, r7, #20
 8002470:	2200      	movs	r2, #0
 8002472:	601a      	str	r2, [r3, #0]
 8002474:	605a      	str	r2, [r3, #4]
 8002476:	609a      	str	r2, [r3, #8]
 8002478:	60da      	str	r2, [r3, #12]
 800247a:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC)
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	4a1b      	ldr	r2, [pc, #108]	; (80024f0 <HAL_DAC_MspInit+0x8c>)
 8002482:	4293      	cmp	r3, r2
 8002484:	d12f      	bne.n	80024e6 <HAL_DAC_MspInit+0x82>
  {
  /* USER CODE BEGIN DAC_MspInit 0 */

  /* USER CODE END DAC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC_CLK_ENABLE();
 8002486:	2300      	movs	r3, #0
 8002488:	613b      	str	r3, [r7, #16]
 800248a:	4b1a      	ldr	r3, [pc, #104]	; (80024f4 <HAL_DAC_MspInit+0x90>)
 800248c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800248e:	4a19      	ldr	r2, [pc, #100]	; (80024f4 <HAL_DAC_MspInit+0x90>)
 8002490:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8002494:	6413      	str	r3, [r2, #64]	; 0x40
 8002496:	4b17      	ldr	r3, [pc, #92]	; (80024f4 <HAL_DAC_MspInit+0x90>)
 8002498:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800249a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800249e:	613b      	str	r3, [r7, #16]
 80024a0:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80024a2:	2300      	movs	r3, #0
 80024a4:	60fb      	str	r3, [r7, #12]
 80024a6:	4b13      	ldr	r3, [pc, #76]	; (80024f4 <HAL_DAC_MspInit+0x90>)
 80024a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024aa:	4a12      	ldr	r2, [pc, #72]	; (80024f4 <HAL_DAC_MspInit+0x90>)
 80024ac:	f043 0301 	orr.w	r3, r3, #1
 80024b0:	6313      	str	r3, [r2, #48]	; 0x30
 80024b2:	4b10      	ldr	r3, [pc, #64]	; (80024f4 <HAL_DAC_MspInit+0x90>)
 80024b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024b6:	f003 0301 	and.w	r3, r3, #1
 80024ba:	60fb      	str	r3, [r7, #12]
 80024bc:	68fb      	ldr	r3, [r7, #12]
    /**DAC GPIO Configuration    
    PA4     ------> DAC_OUT1 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 80024be:	2310      	movs	r3, #16
 80024c0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80024c2:	2303      	movs	r3, #3
 80024c4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024c6:	2300      	movs	r3, #0
 80024c8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80024ca:	f107 0314 	add.w	r3, r7, #20
 80024ce:	4619      	mov	r1, r3
 80024d0:	4809      	ldr	r0, [pc, #36]	; (80024f8 <HAL_DAC_MspInit+0x94>)
 80024d2:	f001 f80f 	bl	80034f4 <HAL_GPIO_Init>

    /* DAC interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 80024d6:	2200      	movs	r2, #0
 80024d8:	2100      	movs	r1, #0
 80024da:	2036      	movs	r0, #54	; 0x36
 80024dc:	f000 fee5 	bl	80032aa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80024e0:	2036      	movs	r0, #54	; 0x36
 80024e2:	f000 fefe 	bl	80032e2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DAC_MspInit 1 */

  /* USER CODE END DAC_MspInit 1 */
  }

}
 80024e6:	bf00      	nop
 80024e8:	3728      	adds	r7, #40	; 0x28
 80024ea:	46bd      	mov	sp, r7
 80024ec:	bd80      	pop	{r7, pc}
 80024ee:	bf00      	nop
 80024f0:	40007400 	.word	0x40007400
 80024f4:	40023800 	.word	0x40023800
 80024f8:	40020000 	.word	0x40020000

080024fc <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80024fc:	b580      	push	{r7, lr}
 80024fe:	b08c      	sub	sp, #48	; 0x30
 8002500:	af00      	add	r7, sp, #0
 8002502:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002504:	f107 031c 	add.w	r3, r7, #28
 8002508:	2200      	movs	r2, #0
 800250a:	601a      	str	r2, [r3, #0]
 800250c:	605a      	str	r2, [r3, #4]
 800250e:	609a      	str	r2, [r3, #8]
 8002510:	60da      	str	r2, [r3, #12]
 8002512:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	4a42      	ldr	r2, [pc, #264]	; (8002624 <HAL_I2C_MspInit+0x128>)
 800251a:	4293      	cmp	r3, r2
 800251c:	d12d      	bne.n	800257a <HAL_I2C_MspInit+0x7e>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800251e:	2300      	movs	r3, #0
 8002520:	61bb      	str	r3, [r7, #24]
 8002522:	4b41      	ldr	r3, [pc, #260]	; (8002628 <HAL_I2C_MspInit+0x12c>)
 8002524:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002526:	4a40      	ldr	r2, [pc, #256]	; (8002628 <HAL_I2C_MspInit+0x12c>)
 8002528:	f043 0302 	orr.w	r3, r3, #2
 800252c:	6313      	str	r3, [r2, #48]	; 0x30
 800252e:	4b3e      	ldr	r3, [pc, #248]	; (8002628 <HAL_I2C_MspInit+0x12c>)
 8002530:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002532:	f003 0302 	and.w	r3, r3, #2
 8002536:	61bb      	str	r3, [r7, #24]
 8002538:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration    
    PB7     ------> I2C1_SDA
    PB8     ------> I2C1_SCL 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 800253a:	f44f 73c0 	mov.w	r3, #384	; 0x180
 800253e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002540:	2312      	movs	r3, #18
 8002542:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002544:	2301      	movs	r3, #1
 8002546:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002548:	2303      	movs	r3, #3
 800254a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800254c:	2304      	movs	r3, #4
 800254e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002550:	f107 031c 	add.w	r3, r7, #28
 8002554:	4619      	mov	r1, r3
 8002556:	4835      	ldr	r0, [pc, #212]	; (800262c <HAL_I2C_MspInit+0x130>)
 8002558:	f000 ffcc 	bl	80034f4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800255c:	2300      	movs	r3, #0
 800255e:	617b      	str	r3, [r7, #20]
 8002560:	4b31      	ldr	r3, [pc, #196]	; (8002628 <HAL_I2C_MspInit+0x12c>)
 8002562:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002564:	4a30      	ldr	r2, [pc, #192]	; (8002628 <HAL_I2C_MspInit+0x12c>)
 8002566:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800256a:	6413      	str	r3, [r2, #64]	; 0x40
 800256c:	4b2e      	ldr	r3, [pc, #184]	; (8002628 <HAL_I2C_MspInit+0x12c>)
 800256e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002570:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002574:	617b      	str	r3, [r7, #20]
 8002576:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 8002578:	e050      	b.n	800261c <HAL_I2C_MspInit+0x120>
  else if(hi2c->Instance==I2C3)
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	4a2c      	ldr	r2, [pc, #176]	; (8002630 <HAL_I2C_MspInit+0x134>)
 8002580:	4293      	cmp	r3, r2
 8002582:	d14b      	bne.n	800261c <HAL_I2C_MspInit+0x120>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002584:	2300      	movs	r3, #0
 8002586:	613b      	str	r3, [r7, #16]
 8002588:	4b27      	ldr	r3, [pc, #156]	; (8002628 <HAL_I2C_MspInit+0x12c>)
 800258a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800258c:	4a26      	ldr	r2, [pc, #152]	; (8002628 <HAL_I2C_MspInit+0x12c>)
 800258e:	f043 0304 	orr.w	r3, r3, #4
 8002592:	6313      	str	r3, [r2, #48]	; 0x30
 8002594:	4b24      	ldr	r3, [pc, #144]	; (8002628 <HAL_I2C_MspInit+0x12c>)
 8002596:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002598:	f003 0304 	and.w	r3, r3, #4
 800259c:	613b      	str	r3, [r7, #16]
 800259e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80025a0:	2300      	movs	r3, #0
 80025a2:	60fb      	str	r3, [r7, #12]
 80025a4:	4b20      	ldr	r3, [pc, #128]	; (8002628 <HAL_I2C_MspInit+0x12c>)
 80025a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025a8:	4a1f      	ldr	r2, [pc, #124]	; (8002628 <HAL_I2C_MspInit+0x12c>)
 80025aa:	f043 0301 	orr.w	r3, r3, #1
 80025ae:	6313      	str	r3, [r2, #48]	; 0x30
 80025b0:	4b1d      	ldr	r3, [pc, #116]	; (8002628 <HAL_I2C_MspInit+0x12c>)
 80025b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025b4:	f003 0301 	and.w	r3, r3, #1
 80025b8:	60fb      	str	r3, [r7, #12]
 80025ba:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80025bc:	f44f 7300 	mov.w	r3, #512	; 0x200
 80025c0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80025c2:	2312      	movs	r3, #18
 80025c4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80025c6:	2301      	movs	r3, #1
 80025c8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80025ca:	2303      	movs	r3, #3
 80025cc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 80025ce:	2304      	movs	r3, #4
 80025d0:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80025d2:	f107 031c 	add.w	r3, r7, #28
 80025d6:	4619      	mov	r1, r3
 80025d8:	4816      	ldr	r0, [pc, #88]	; (8002634 <HAL_I2C_MspInit+0x138>)
 80025da:	f000 ff8b 	bl	80034f4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 80025de:	f44f 7380 	mov.w	r3, #256	; 0x100
 80025e2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80025e4:	2312      	movs	r3, #18
 80025e6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80025e8:	2301      	movs	r3, #1
 80025ea:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80025ec:	2303      	movs	r3, #3
 80025ee:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 80025f0:	2304      	movs	r3, #4
 80025f2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80025f4:	f107 031c 	add.w	r3, r7, #28
 80025f8:	4619      	mov	r1, r3
 80025fa:	480f      	ldr	r0, [pc, #60]	; (8002638 <HAL_I2C_MspInit+0x13c>)
 80025fc:	f000 ff7a 	bl	80034f4 <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 8002600:	2300      	movs	r3, #0
 8002602:	60bb      	str	r3, [r7, #8]
 8002604:	4b08      	ldr	r3, [pc, #32]	; (8002628 <HAL_I2C_MspInit+0x12c>)
 8002606:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002608:	4a07      	ldr	r2, [pc, #28]	; (8002628 <HAL_I2C_MspInit+0x12c>)
 800260a:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800260e:	6413      	str	r3, [r2, #64]	; 0x40
 8002610:	4b05      	ldr	r3, [pc, #20]	; (8002628 <HAL_I2C_MspInit+0x12c>)
 8002612:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002614:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002618:	60bb      	str	r3, [r7, #8]
 800261a:	68bb      	ldr	r3, [r7, #8]
}
 800261c:	bf00      	nop
 800261e:	3730      	adds	r7, #48	; 0x30
 8002620:	46bd      	mov	sp, r7
 8002622:	bd80      	pop	{r7, pc}
 8002624:	40005400 	.word	0x40005400
 8002628:	40023800 	.word	0x40023800
 800262c:	40020400 	.word	0x40020400
 8002630:	40005c00 	.word	0x40005c00
 8002634:	40020800 	.word	0x40020800
 8002638:	40020000 	.word	0x40020000

0800263c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800263c:	b580      	push	{r7, lr}
 800263e:	b08a      	sub	sp, #40	; 0x28
 8002640:	af00      	add	r7, sp, #0
 8002642:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002644:	f107 0314 	add.w	r3, r7, #20
 8002648:	2200      	movs	r2, #0
 800264a:	601a      	str	r2, [r3, #0]
 800264c:	605a      	str	r2, [r3, #4]
 800264e:	609a      	str	r2, [r3, #8]
 8002650:	60da      	str	r2, [r3, #12]
 8002652:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	4a28      	ldr	r2, [pc, #160]	; (80026fc <HAL_SPI_MspInit+0xc0>)
 800265a:	4293      	cmp	r3, r2
 800265c:	d149      	bne.n	80026f2 <HAL_SPI_MspInit+0xb6>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800265e:	2300      	movs	r3, #0
 8002660:	613b      	str	r3, [r7, #16]
 8002662:	4b27      	ldr	r3, [pc, #156]	; (8002700 <HAL_SPI_MspInit+0xc4>)
 8002664:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002666:	4a26      	ldr	r2, [pc, #152]	; (8002700 <HAL_SPI_MspInit+0xc4>)
 8002668:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800266c:	6453      	str	r3, [r2, #68]	; 0x44
 800266e:	4b24      	ldr	r3, [pc, #144]	; (8002700 <HAL_SPI_MspInit+0xc4>)
 8002670:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002672:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002676:	613b      	str	r3, [r7, #16]
 8002678:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800267a:	2300      	movs	r3, #0
 800267c:	60fb      	str	r3, [r7, #12]
 800267e:	4b20      	ldr	r3, [pc, #128]	; (8002700 <HAL_SPI_MspInit+0xc4>)
 8002680:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002682:	4a1f      	ldr	r2, [pc, #124]	; (8002700 <HAL_SPI_MspInit+0xc4>)
 8002684:	f043 0301 	orr.w	r3, r3, #1
 8002688:	6313      	str	r3, [r2, #48]	; 0x30
 800268a:	4b1d      	ldr	r3, [pc, #116]	; (8002700 <HAL_SPI_MspInit+0xc4>)
 800268c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800268e:	f003 0301 	and.w	r3, r3, #1
 8002692:	60fb      	str	r3, [r7, #12]
 8002694:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002696:	2300      	movs	r3, #0
 8002698:	60bb      	str	r3, [r7, #8]
 800269a:	4b19      	ldr	r3, [pc, #100]	; (8002700 <HAL_SPI_MspInit+0xc4>)
 800269c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800269e:	4a18      	ldr	r2, [pc, #96]	; (8002700 <HAL_SPI_MspInit+0xc4>)
 80026a0:	f043 0302 	orr.w	r3, r3, #2
 80026a4:	6313      	str	r3, [r2, #48]	; 0x30
 80026a6:	4b16      	ldr	r3, [pc, #88]	; (8002700 <HAL_SPI_MspInit+0xc4>)
 80026a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026aa:	f003 0302 	and.w	r3, r3, #2
 80026ae:	60bb      	str	r3, [r7, #8]
 80026b0:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration    
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    PB3     ------> SPI1_SCK 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80026b2:	23c0      	movs	r3, #192	; 0xc0
 80026b4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80026b6:	2302      	movs	r3, #2
 80026b8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026ba:	2300      	movs	r3, #0
 80026bc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80026be:	2303      	movs	r3, #3
 80026c0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80026c2:	2305      	movs	r3, #5
 80026c4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80026c6:	f107 0314 	add.w	r3, r7, #20
 80026ca:	4619      	mov	r1, r3
 80026cc:	480d      	ldr	r0, [pc, #52]	; (8002704 <HAL_SPI_MspInit+0xc8>)
 80026ce:	f000 ff11 	bl	80034f4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80026d2:	2308      	movs	r3, #8
 80026d4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80026d6:	2302      	movs	r3, #2
 80026d8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026da:	2300      	movs	r3, #0
 80026dc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80026de:	2303      	movs	r3, #3
 80026e0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80026e2:	2305      	movs	r3, #5
 80026e4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80026e6:	f107 0314 	add.w	r3, r7, #20
 80026ea:	4619      	mov	r1, r3
 80026ec:	4806      	ldr	r0, [pc, #24]	; (8002708 <HAL_SPI_MspInit+0xcc>)
 80026ee:	f000 ff01 	bl	80034f4 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80026f2:	bf00      	nop
 80026f4:	3728      	adds	r7, #40	; 0x28
 80026f6:	46bd      	mov	sp, r7
 80026f8:	bd80      	pop	{r7, pc}
 80026fa:	bf00      	nop
 80026fc:	40013000 	.word	0x40013000
 8002700:	40023800 	.word	0x40023800
 8002704:	40020000 	.word	0x40020000
 8002708:	40020400 	.word	0x40020400

0800270c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800270c:	b580      	push	{r7, lr}
 800270e:	b088      	sub	sp, #32
 8002710:	af00      	add	r7, sp, #0
 8002712:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800271c:	d116      	bne.n	800274c <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800271e:	2300      	movs	r3, #0
 8002720:	61fb      	str	r3, [r7, #28]
 8002722:	4b38      	ldr	r3, [pc, #224]	; (8002804 <HAL_TIM_Base_MspInit+0xf8>)
 8002724:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002726:	4a37      	ldr	r2, [pc, #220]	; (8002804 <HAL_TIM_Base_MspInit+0xf8>)
 8002728:	f043 0301 	orr.w	r3, r3, #1
 800272c:	6413      	str	r3, [r2, #64]	; 0x40
 800272e:	4b35      	ldr	r3, [pc, #212]	; (8002804 <HAL_TIM_Base_MspInit+0xf8>)
 8002730:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002732:	f003 0301 	and.w	r3, r3, #1
 8002736:	61fb      	str	r3, [r7, #28]
 8002738:	69fb      	ldr	r3, [r7, #28]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800273a:	2200      	movs	r2, #0
 800273c:	2100      	movs	r1, #0
 800273e:	201c      	movs	r0, #28
 8002740:	f000 fdb3 	bl	80032aa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8002744:	201c      	movs	r0, #28
 8002746:	f000 fdcc 	bl	80032e2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM11_MspInit 1 */

  /* USER CODE END TIM11_MspInit 1 */
  }

}
 800274a:	e056      	b.n	80027fa <HAL_TIM_Base_MspInit+0xee>
  else if(htim_base->Instance==TIM4)
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	4a2d      	ldr	r2, [pc, #180]	; (8002808 <HAL_TIM_Base_MspInit+0xfc>)
 8002752:	4293      	cmp	r3, r2
 8002754:	d10e      	bne.n	8002774 <HAL_TIM_Base_MspInit+0x68>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8002756:	2300      	movs	r3, #0
 8002758:	61bb      	str	r3, [r7, #24]
 800275a:	4b2a      	ldr	r3, [pc, #168]	; (8002804 <HAL_TIM_Base_MspInit+0xf8>)
 800275c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800275e:	4a29      	ldr	r2, [pc, #164]	; (8002804 <HAL_TIM_Base_MspInit+0xf8>)
 8002760:	f043 0304 	orr.w	r3, r3, #4
 8002764:	6413      	str	r3, [r2, #64]	; 0x40
 8002766:	4b27      	ldr	r3, [pc, #156]	; (8002804 <HAL_TIM_Base_MspInit+0xf8>)
 8002768:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800276a:	f003 0304 	and.w	r3, r3, #4
 800276e:	61bb      	str	r3, [r7, #24]
 8002770:	69bb      	ldr	r3, [r7, #24]
}
 8002772:	e042      	b.n	80027fa <HAL_TIM_Base_MspInit+0xee>
  else if(htim_base->Instance==TIM6)
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	4a24      	ldr	r2, [pc, #144]	; (800280c <HAL_TIM_Base_MspInit+0x100>)
 800277a:	4293      	cmp	r3, r2
 800277c:	d116      	bne.n	80027ac <HAL_TIM_Base_MspInit+0xa0>
    __HAL_RCC_TIM6_CLK_ENABLE();
 800277e:	2300      	movs	r3, #0
 8002780:	617b      	str	r3, [r7, #20]
 8002782:	4b20      	ldr	r3, [pc, #128]	; (8002804 <HAL_TIM_Base_MspInit+0xf8>)
 8002784:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002786:	4a1f      	ldr	r2, [pc, #124]	; (8002804 <HAL_TIM_Base_MspInit+0xf8>)
 8002788:	f043 0310 	orr.w	r3, r3, #16
 800278c:	6413      	str	r3, [r2, #64]	; 0x40
 800278e:	4b1d      	ldr	r3, [pc, #116]	; (8002804 <HAL_TIM_Base_MspInit+0xf8>)
 8002790:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002792:	f003 0310 	and.w	r3, r3, #16
 8002796:	617b      	str	r3, [r7, #20]
 8002798:	697b      	ldr	r3, [r7, #20]
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 800279a:	2200      	movs	r2, #0
 800279c:	2100      	movs	r1, #0
 800279e:	2036      	movs	r0, #54	; 0x36
 80027a0:	f000 fd83 	bl	80032aa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80027a4:	2036      	movs	r0, #54	; 0x36
 80027a6:	f000 fd9c 	bl	80032e2 <HAL_NVIC_EnableIRQ>
}
 80027aa:	e026      	b.n	80027fa <HAL_TIM_Base_MspInit+0xee>
  else if(htim_base->Instance==TIM9)
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	4a17      	ldr	r2, [pc, #92]	; (8002810 <HAL_TIM_Base_MspInit+0x104>)
 80027b2:	4293      	cmp	r3, r2
 80027b4:	d10e      	bne.n	80027d4 <HAL_TIM_Base_MspInit+0xc8>
    __HAL_RCC_TIM9_CLK_ENABLE();
 80027b6:	2300      	movs	r3, #0
 80027b8:	613b      	str	r3, [r7, #16]
 80027ba:	4b12      	ldr	r3, [pc, #72]	; (8002804 <HAL_TIM_Base_MspInit+0xf8>)
 80027bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027be:	4a11      	ldr	r2, [pc, #68]	; (8002804 <HAL_TIM_Base_MspInit+0xf8>)
 80027c0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80027c4:	6453      	str	r3, [r2, #68]	; 0x44
 80027c6:	4b0f      	ldr	r3, [pc, #60]	; (8002804 <HAL_TIM_Base_MspInit+0xf8>)
 80027c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027ca:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80027ce:	613b      	str	r3, [r7, #16]
 80027d0:	693b      	ldr	r3, [r7, #16]
}
 80027d2:	e012      	b.n	80027fa <HAL_TIM_Base_MspInit+0xee>
  else if(htim_base->Instance==TIM11)
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	4a0e      	ldr	r2, [pc, #56]	; (8002814 <HAL_TIM_Base_MspInit+0x108>)
 80027da:	4293      	cmp	r3, r2
 80027dc:	d10d      	bne.n	80027fa <HAL_TIM_Base_MspInit+0xee>
    __HAL_RCC_TIM11_CLK_ENABLE();
 80027de:	2300      	movs	r3, #0
 80027e0:	60fb      	str	r3, [r7, #12]
 80027e2:	4b08      	ldr	r3, [pc, #32]	; (8002804 <HAL_TIM_Base_MspInit+0xf8>)
 80027e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027e6:	4a07      	ldr	r2, [pc, #28]	; (8002804 <HAL_TIM_Base_MspInit+0xf8>)
 80027e8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80027ec:	6453      	str	r3, [r2, #68]	; 0x44
 80027ee:	4b05      	ldr	r3, [pc, #20]	; (8002804 <HAL_TIM_Base_MspInit+0xf8>)
 80027f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027f2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80027f6:	60fb      	str	r3, [r7, #12]
 80027f8:	68fb      	ldr	r3, [r7, #12]
}
 80027fa:	bf00      	nop
 80027fc:	3720      	adds	r7, #32
 80027fe:	46bd      	mov	sp, r7
 8002800:	bd80      	pop	{r7, pc}
 8002802:	bf00      	nop
 8002804:	40023800 	.word	0x40023800
 8002808:	40000800 	.word	0x40000800
 800280c:	40001000 	.word	0x40001000
 8002810:	40014000 	.word	0x40014000
 8002814:	40014800 	.word	0x40014800

08002818 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8002818:	b580      	push	{r7, lr}
 800281a:	b08c      	sub	sp, #48	; 0x30
 800281c:	af00      	add	r7, sp, #0
 800281e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002820:	f107 031c 	add.w	r3, r7, #28
 8002824:	2200      	movs	r2, #0
 8002826:	601a      	str	r2, [r3, #0]
 8002828:	605a      	str	r2, [r3, #4]
 800282a:	609a      	str	r2, [r3, #8]
 800282c:	60da      	str	r2, [r3, #12]
 800282e:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM3)
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	4a32      	ldr	r2, [pc, #200]	; (8002900 <HAL_TIM_Encoder_MspInit+0xe8>)
 8002836:	4293      	cmp	r3, r2
 8002838:	d12c      	bne.n	8002894 <HAL_TIM_Encoder_MspInit+0x7c>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 800283a:	2300      	movs	r3, #0
 800283c:	61bb      	str	r3, [r7, #24]
 800283e:	4b31      	ldr	r3, [pc, #196]	; (8002904 <HAL_TIM_Encoder_MspInit+0xec>)
 8002840:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002842:	4a30      	ldr	r2, [pc, #192]	; (8002904 <HAL_TIM_Encoder_MspInit+0xec>)
 8002844:	f043 0302 	orr.w	r3, r3, #2
 8002848:	6413      	str	r3, [r2, #64]	; 0x40
 800284a:	4b2e      	ldr	r3, [pc, #184]	; (8002904 <HAL_TIM_Encoder_MspInit+0xec>)
 800284c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800284e:	f003 0302 	and.w	r3, r3, #2
 8002852:	61bb      	str	r3, [r7, #24]
 8002854:	69bb      	ldr	r3, [r7, #24]
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002856:	2300      	movs	r3, #0
 8002858:	617b      	str	r3, [r7, #20]
 800285a:	4b2a      	ldr	r3, [pc, #168]	; (8002904 <HAL_TIM_Encoder_MspInit+0xec>)
 800285c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800285e:	4a29      	ldr	r2, [pc, #164]	; (8002904 <HAL_TIM_Encoder_MspInit+0xec>)
 8002860:	f043 0302 	orr.w	r3, r3, #2
 8002864:	6313      	str	r3, [r2, #48]	; 0x30
 8002866:	4b27      	ldr	r3, [pc, #156]	; (8002904 <HAL_TIM_Encoder_MspInit+0xec>)
 8002868:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800286a:	f003 0302 	and.w	r3, r3, #2
 800286e:	617b      	str	r3, [r7, #20]
 8002870:	697b      	ldr	r3, [r7, #20]
    /**TIM3 GPIO Configuration    
    PB4     ------> TIM3_CH1
    PB5     ------> TIM3_CH2 
    */
    GPIO_InitStruct.Pin = ENCR_CHA_Pin|ENCR_CHB_Pin;
 8002872:	2330      	movs	r3, #48	; 0x30
 8002874:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002876:	2302      	movs	r3, #2
 8002878:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800287a:	2300      	movs	r3, #0
 800287c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800287e:	2300      	movs	r3, #0
 8002880:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002882:	2302      	movs	r3, #2
 8002884:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002886:	f107 031c 	add.w	r3, r7, #28
 800288a:	4619      	mov	r1, r3
 800288c:	481e      	ldr	r0, [pc, #120]	; (8002908 <HAL_TIM_Encoder_MspInit+0xf0>)
 800288e:	f000 fe31 	bl	80034f4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }

}
 8002892:	e030      	b.n	80028f6 <HAL_TIM_Encoder_MspInit+0xde>
  else if(htim_encoder->Instance==TIM5)
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	4a1c      	ldr	r2, [pc, #112]	; (800290c <HAL_TIM_Encoder_MspInit+0xf4>)
 800289a:	4293      	cmp	r3, r2
 800289c:	d12b      	bne.n	80028f6 <HAL_TIM_Encoder_MspInit+0xde>
    __HAL_RCC_TIM5_CLK_ENABLE();
 800289e:	2300      	movs	r3, #0
 80028a0:	613b      	str	r3, [r7, #16]
 80028a2:	4b18      	ldr	r3, [pc, #96]	; (8002904 <HAL_TIM_Encoder_MspInit+0xec>)
 80028a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028a6:	4a17      	ldr	r2, [pc, #92]	; (8002904 <HAL_TIM_Encoder_MspInit+0xec>)
 80028a8:	f043 0308 	orr.w	r3, r3, #8
 80028ac:	6413      	str	r3, [r2, #64]	; 0x40
 80028ae:	4b15      	ldr	r3, [pc, #84]	; (8002904 <HAL_TIM_Encoder_MspInit+0xec>)
 80028b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028b2:	f003 0308 	and.w	r3, r3, #8
 80028b6:	613b      	str	r3, [r7, #16]
 80028b8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80028ba:	2300      	movs	r3, #0
 80028bc:	60fb      	str	r3, [r7, #12]
 80028be:	4b11      	ldr	r3, [pc, #68]	; (8002904 <HAL_TIM_Encoder_MspInit+0xec>)
 80028c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028c2:	4a10      	ldr	r2, [pc, #64]	; (8002904 <HAL_TIM_Encoder_MspInit+0xec>)
 80028c4:	f043 0301 	orr.w	r3, r3, #1
 80028c8:	6313      	str	r3, [r2, #48]	; 0x30
 80028ca:	4b0e      	ldr	r3, [pc, #56]	; (8002904 <HAL_TIM_Encoder_MspInit+0xec>)
 80028cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028ce:	f003 0301 	and.w	r3, r3, #1
 80028d2:	60fb      	str	r3, [r7, #12]
 80028d4:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = ENCL_CHA_Pin|ENCL_CHB_Pin;
 80028d6:	2303      	movs	r3, #3
 80028d8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80028da:	2302      	movs	r3, #2
 80028dc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028de:	2300      	movs	r3, #0
 80028e0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80028e2:	2300      	movs	r3, #0
 80028e4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 80028e6:	2302      	movs	r3, #2
 80028e8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80028ea:	f107 031c 	add.w	r3, r7, #28
 80028ee:	4619      	mov	r1, r3
 80028f0:	4807      	ldr	r0, [pc, #28]	; (8002910 <HAL_TIM_Encoder_MspInit+0xf8>)
 80028f2:	f000 fdff 	bl	80034f4 <HAL_GPIO_Init>
}
 80028f6:	bf00      	nop
 80028f8:	3730      	adds	r7, #48	; 0x30
 80028fa:	46bd      	mov	sp, r7
 80028fc:	bd80      	pop	{r7, pc}
 80028fe:	bf00      	nop
 8002900:	40000400 	.word	0x40000400
 8002904:	40023800 	.word	0x40023800
 8002908:	40020400 	.word	0x40020400
 800290c:	40000c00 	.word	0x40000c00
 8002910:	40020000 	.word	0x40020000

08002914 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8002914:	b480      	push	{r7}
 8002916:	b085      	sub	sp, #20
 8002918:	af00      	add	r7, sp, #0
 800291a:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM12)
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	4a0b      	ldr	r2, [pc, #44]	; (8002950 <HAL_TIM_PWM_MspInit+0x3c>)
 8002922:	4293      	cmp	r3, r2
 8002924:	d10d      	bne.n	8002942 <HAL_TIM_PWM_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM12_MspInit 0 */

  /* USER CODE END TIM12_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM12_CLK_ENABLE();
 8002926:	2300      	movs	r3, #0
 8002928:	60fb      	str	r3, [r7, #12]
 800292a:	4b0a      	ldr	r3, [pc, #40]	; (8002954 <HAL_TIM_PWM_MspInit+0x40>)
 800292c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800292e:	4a09      	ldr	r2, [pc, #36]	; (8002954 <HAL_TIM_PWM_MspInit+0x40>)
 8002930:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002934:	6413      	str	r3, [r2, #64]	; 0x40
 8002936:	4b07      	ldr	r3, [pc, #28]	; (8002954 <HAL_TIM_PWM_MspInit+0x40>)
 8002938:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800293a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800293e:	60fb      	str	r3, [r7, #12]
 8002940:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM12_MspInit 1 */

  /* USER CODE END TIM12_MspInit 1 */
  }

}
 8002942:	bf00      	nop
 8002944:	3714      	adds	r7, #20
 8002946:	46bd      	mov	sp, r7
 8002948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800294c:	4770      	bx	lr
 800294e:	bf00      	nop
 8002950:	40001800 	.word	0x40001800
 8002954:	40023800 	.word	0x40023800

08002958 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002958:	b580      	push	{r7, lr}
 800295a:	b08c      	sub	sp, #48	; 0x30
 800295c:	af00      	add	r7, sp, #0
 800295e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002960:	f107 031c 	add.w	r3, r7, #28
 8002964:	2200      	movs	r2, #0
 8002966:	601a      	str	r2, [r3, #0]
 8002968:	605a      	str	r2, [r3, #4]
 800296a:	609a      	str	r2, [r3, #8]
 800296c:	60da      	str	r2, [r3, #12]
 800296e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002978:	d11f      	bne.n	80029ba <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800297a:	2300      	movs	r3, #0
 800297c:	61bb      	str	r3, [r7, #24]
 800297e:	4b47      	ldr	r3, [pc, #284]	; (8002a9c <HAL_TIM_MspPostInit+0x144>)
 8002980:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002982:	4a46      	ldr	r2, [pc, #280]	; (8002a9c <HAL_TIM_MspPostInit+0x144>)
 8002984:	f043 0302 	orr.w	r3, r3, #2
 8002988:	6313      	str	r3, [r2, #48]	; 0x30
 800298a:	4b44      	ldr	r3, [pc, #272]	; (8002a9c <HAL_TIM_MspPostInit+0x144>)
 800298c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800298e:	f003 0302 	and.w	r3, r3, #2
 8002992:	61bb      	str	r3, [r7, #24]
 8002994:	69bb      	ldr	r3, [r7, #24]
    /**TIM2 GPIO Configuration    
    PB10     ------> TIM2_CH3 
    */
    GPIO_InitStruct.Pin = ROMI_PWMR_Pin;
 8002996:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800299a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800299c:	2302      	movs	r3, #2
 800299e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029a0:	2300      	movs	r3, #0
 80029a2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80029a4:	2300      	movs	r3, #0
 80029a6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80029a8:	2301      	movs	r3, #1
 80029aa:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(ROMI_PWMR_GPIO_Port, &GPIO_InitStruct);
 80029ac:	f107 031c 	add.w	r3, r7, #28
 80029b0:	4619      	mov	r1, r3
 80029b2:	483b      	ldr	r0, [pc, #236]	; (8002aa0 <HAL_TIM_MspPostInit+0x148>)
 80029b4:	f000 fd9e 	bl	80034f4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM12_MspPostInit 1 */

  /* USER CODE END TIM12_MspPostInit 1 */
  }

}
 80029b8:	e06c      	b.n	8002a94 <HAL_TIM_MspPostInit+0x13c>
  else if(htim->Instance==TIM4)
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	4a39      	ldr	r2, [pc, #228]	; (8002aa4 <HAL_TIM_MspPostInit+0x14c>)
 80029c0:	4293      	cmp	r3, r2
 80029c2:	d11e      	bne.n	8002a02 <HAL_TIM_MspPostInit+0xaa>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80029c4:	2300      	movs	r3, #0
 80029c6:	617b      	str	r3, [r7, #20]
 80029c8:	4b34      	ldr	r3, [pc, #208]	; (8002a9c <HAL_TIM_MspPostInit+0x144>)
 80029ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029cc:	4a33      	ldr	r2, [pc, #204]	; (8002a9c <HAL_TIM_MspPostInit+0x144>)
 80029ce:	f043 0302 	orr.w	r3, r3, #2
 80029d2:	6313      	str	r3, [r2, #48]	; 0x30
 80029d4:	4b31      	ldr	r3, [pc, #196]	; (8002a9c <HAL_TIM_MspPostInit+0x144>)
 80029d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029d8:	f003 0302 	and.w	r3, r3, #2
 80029dc:	617b      	str	r3, [r7, #20]
 80029de:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = ROMI_PWML_Pin;
 80029e0:	2340      	movs	r3, #64	; 0x40
 80029e2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80029e4:	2302      	movs	r3, #2
 80029e6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029e8:	2300      	movs	r3, #0
 80029ea:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80029ec:	2300      	movs	r3, #0
 80029ee:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 80029f0:	2302      	movs	r3, #2
 80029f2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(ROMI_PWML_GPIO_Port, &GPIO_InitStruct);
 80029f4:	f107 031c 	add.w	r3, r7, #28
 80029f8:	4619      	mov	r1, r3
 80029fa:	4829      	ldr	r0, [pc, #164]	; (8002aa0 <HAL_TIM_MspPostInit+0x148>)
 80029fc:	f000 fd7a 	bl	80034f4 <HAL_GPIO_Init>
}
 8002a00:	e048      	b.n	8002a94 <HAL_TIM_MspPostInit+0x13c>
  else if(htim->Instance==TIM11)
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	4a28      	ldr	r2, [pc, #160]	; (8002aa8 <HAL_TIM_MspPostInit+0x150>)
 8002a08:	4293      	cmp	r3, r2
 8002a0a:	d11f      	bne.n	8002a4c <HAL_TIM_MspPostInit+0xf4>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002a0c:	2300      	movs	r3, #0
 8002a0e:	613b      	str	r3, [r7, #16]
 8002a10:	4b22      	ldr	r3, [pc, #136]	; (8002a9c <HAL_TIM_MspPostInit+0x144>)
 8002a12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a14:	4a21      	ldr	r2, [pc, #132]	; (8002a9c <HAL_TIM_MspPostInit+0x144>)
 8002a16:	f043 0302 	orr.w	r3, r3, #2
 8002a1a:	6313      	str	r3, [r2, #48]	; 0x30
 8002a1c:	4b1f      	ldr	r3, [pc, #124]	; (8002a9c <HAL_TIM_MspPostInit+0x144>)
 8002a1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a20:	f003 0302 	and.w	r3, r3, #2
 8002a24:	613b      	str	r3, [r7, #16]
 8002a26:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = SERVO2_PWM_Pin;
 8002a28:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002a2c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a2e:	2302      	movs	r3, #2
 8002a30:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a32:	2300      	movs	r3, #0
 8002a34:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a36:	2300      	movs	r3, #0
 8002a38:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM11;
 8002a3a:	2303      	movs	r3, #3
 8002a3c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(SERVO2_PWM_GPIO_Port, &GPIO_InitStruct);
 8002a3e:	f107 031c 	add.w	r3, r7, #28
 8002a42:	4619      	mov	r1, r3
 8002a44:	4816      	ldr	r0, [pc, #88]	; (8002aa0 <HAL_TIM_MspPostInit+0x148>)
 8002a46:	f000 fd55 	bl	80034f4 <HAL_GPIO_Init>
}
 8002a4a:	e023      	b.n	8002a94 <HAL_TIM_MspPostInit+0x13c>
  else if(htim->Instance==TIM12)
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	4a16      	ldr	r2, [pc, #88]	; (8002aac <HAL_TIM_MspPostInit+0x154>)
 8002a52:	4293      	cmp	r3, r2
 8002a54:	d11e      	bne.n	8002a94 <HAL_TIM_MspPostInit+0x13c>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002a56:	2300      	movs	r3, #0
 8002a58:	60fb      	str	r3, [r7, #12]
 8002a5a:	4b10      	ldr	r3, [pc, #64]	; (8002a9c <HAL_TIM_MspPostInit+0x144>)
 8002a5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a5e:	4a0f      	ldr	r2, [pc, #60]	; (8002a9c <HAL_TIM_MspPostInit+0x144>)
 8002a60:	f043 0302 	orr.w	r3, r3, #2
 8002a64:	6313      	str	r3, [r2, #48]	; 0x30
 8002a66:	4b0d      	ldr	r3, [pc, #52]	; (8002a9c <HAL_TIM_MspPostInit+0x144>)
 8002a68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a6a:	f003 0302 	and.w	r3, r3, #2
 8002a6e:	60fb      	str	r3, [r7, #12]
 8002a70:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = SERVO1_PWM_Pin;
 8002a72:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002a76:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a78:	2302      	movs	r3, #2
 8002a7a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a7c:	2300      	movs	r3, #0
 8002a7e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a80:	2300      	movs	r3, #0
 8002a82:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM12;
 8002a84:	2309      	movs	r3, #9
 8002a86:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(SERVO1_PWM_GPIO_Port, &GPIO_InitStruct);
 8002a88:	f107 031c 	add.w	r3, r7, #28
 8002a8c:	4619      	mov	r1, r3
 8002a8e:	4804      	ldr	r0, [pc, #16]	; (8002aa0 <HAL_TIM_MspPostInit+0x148>)
 8002a90:	f000 fd30 	bl	80034f4 <HAL_GPIO_Init>
}
 8002a94:	bf00      	nop
 8002a96:	3730      	adds	r7, #48	; 0x30
 8002a98:	46bd      	mov	sp, r7
 8002a9a:	bd80      	pop	{r7, pc}
 8002a9c:	40023800 	.word	0x40023800
 8002aa0:	40020400 	.word	0x40020400
 8002aa4:	40000800 	.word	0x40000800
 8002aa8:	40014800 	.word	0x40014800
 8002aac:	40001800 	.word	0x40001800

08002ab0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002ab0:	b580      	push	{r7, lr}
 8002ab2:	b08c      	sub	sp, #48	; 0x30
 8002ab4:	af00      	add	r7, sp, #0
 8002ab6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002ab8:	f107 031c 	add.w	r3, r7, #28
 8002abc:	2200      	movs	r2, #0
 8002abe:	601a      	str	r2, [r3, #0]
 8002ac0:	605a      	str	r2, [r3, #4]
 8002ac2:	609a      	str	r2, [r3, #8]
 8002ac4:	60da      	str	r2, [r3, #12]
 8002ac6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	4a36      	ldr	r2, [pc, #216]	; (8002ba8 <HAL_UART_MspInit+0xf8>)
 8002ace:	4293      	cmp	r3, r2
 8002ad0:	d134      	bne.n	8002b3c <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002ad2:	2300      	movs	r3, #0
 8002ad4:	61bb      	str	r3, [r7, #24]
 8002ad6:	4b35      	ldr	r3, [pc, #212]	; (8002bac <HAL_UART_MspInit+0xfc>)
 8002ad8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ada:	4a34      	ldr	r2, [pc, #208]	; (8002bac <HAL_UART_MspInit+0xfc>)
 8002adc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002ae0:	6413      	str	r3, [r2, #64]	; 0x40
 8002ae2:	4b32      	ldr	r3, [pc, #200]	; (8002bac <HAL_UART_MspInit+0xfc>)
 8002ae4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ae6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002aea:	61bb      	str	r3, [r7, #24]
 8002aec:	69bb      	ldr	r3, [r7, #24]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002aee:	2300      	movs	r3, #0
 8002af0:	617b      	str	r3, [r7, #20]
 8002af2:	4b2e      	ldr	r3, [pc, #184]	; (8002bac <HAL_UART_MspInit+0xfc>)
 8002af4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002af6:	4a2d      	ldr	r2, [pc, #180]	; (8002bac <HAL_UART_MspInit+0xfc>)
 8002af8:	f043 0301 	orr.w	r3, r3, #1
 8002afc:	6313      	str	r3, [r2, #48]	; 0x30
 8002afe:	4b2b      	ldr	r3, [pc, #172]	; (8002bac <HAL_UART_MspInit+0xfc>)
 8002b00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b02:	f003 0301 	and.w	r3, r3, #1
 8002b06:	617b      	str	r3, [r7, #20]
 8002b08:	697b      	ldr	r3, [r7, #20]
    /**USART2 GPIO Configuration    
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8002b0a:	230c      	movs	r3, #12
 8002b0c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b0e:	2302      	movs	r3, #2
 8002b10:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b12:	2300      	movs	r3, #0
 8002b14:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002b16:	2303      	movs	r3, #3
 8002b18:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002b1a:	2307      	movs	r3, #7
 8002b1c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002b1e:	f107 031c 	add.w	r3, r7, #28
 8002b22:	4619      	mov	r1, r3
 8002b24:	4822      	ldr	r0, [pc, #136]	; (8002bb0 <HAL_UART_MspInit+0x100>)
 8002b26:	f000 fce5 	bl	80034f4 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8002b2a:	2200      	movs	r2, #0
 8002b2c:	2100      	movs	r1, #0
 8002b2e:	2026      	movs	r0, #38	; 0x26
 8002b30:	f000 fbbb 	bl	80032aa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8002b34:	2026      	movs	r0, #38	; 0x26
 8002b36:	f000 fbd4 	bl	80032e2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8002b3a:	e031      	b.n	8002ba0 <HAL_UART_MspInit+0xf0>
  else if(huart->Instance==USART3)
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	4a1c      	ldr	r2, [pc, #112]	; (8002bb4 <HAL_UART_MspInit+0x104>)
 8002b42:	4293      	cmp	r3, r2
 8002b44:	d12c      	bne.n	8002ba0 <HAL_UART_MspInit+0xf0>
    __HAL_RCC_USART3_CLK_ENABLE();
 8002b46:	2300      	movs	r3, #0
 8002b48:	613b      	str	r3, [r7, #16]
 8002b4a:	4b18      	ldr	r3, [pc, #96]	; (8002bac <HAL_UART_MspInit+0xfc>)
 8002b4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b4e:	4a17      	ldr	r2, [pc, #92]	; (8002bac <HAL_UART_MspInit+0xfc>)
 8002b50:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002b54:	6413      	str	r3, [r2, #64]	; 0x40
 8002b56:	4b15      	ldr	r3, [pc, #84]	; (8002bac <HAL_UART_MspInit+0xfc>)
 8002b58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b5a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002b5e:	613b      	str	r3, [r7, #16]
 8002b60:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002b62:	2300      	movs	r3, #0
 8002b64:	60fb      	str	r3, [r7, #12]
 8002b66:	4b11      	ldr	r3, [pc, #68]	; (8002bac <HAL_UART_MspInit+0xfc>)
 8002b68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b6a:	4a10      	ldr	r2, [pc, #64]	; (8002bac <HAL_UART_MspInit+0xfc>)
 8002b6c:	f043 0304 	orr.w	r3, r3, #4
 8002b70:	6313      	str	r3, [r2, #48]	; 0x30
 8002b72:	4b0e      	ldr	r3, [pc, #56]	; (8002bac <HAL_UART_MspInit+0xfc>)
 8002b74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b76:	f003 0304 	and.w	r3, r3, #4
 8002b7a:	60fb      	str	r3, [r7, #12]
 8002b7c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8002b7e:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8002b82:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b84:	2302      	movs	r3, #2
 8002b86:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b88:	2300      	movs	r3, #0
 8002b8a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002b8c:	2303      	movs	r3, #3
 8002b8e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8002b90:	2307      	movs	r3, #7
 8002b92:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002b94:	f107 031c 	add.w	r3, r7, #28
 8002b98:	4619      	mov	r1, r3
 8002b9a:	4807      	ldr	r0, [pc, #28]	; (8002bb8 <HAL_UART_MspInit+0x108>)
 8002b9c:	f000 fcaa 	bl	80034f4 <HAL_GPIO_Init>
}
 8002ba0:	bf00      	nop
 8002ba2:	3730      	adds	r7, #48	; 0x30
 8002ba4:	46bd      	mov	sp, r7
 8002ba6:	bd80      	pop	{r7, pc}
 8002ba8:	40004400 	.word	0x40004400
 8002bac:	40023800 	.word	0x40023800
 8002bb0:	40020000 	.word	0x40020000
 8002bb4:	40004800 	.word	0x40004800
 8002bb8:	40020800 	.word	0x40020800

08002bbc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002bbc:	b480      	push	{r7}
 8002bbe:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8002bc0:	bf00      	nop
 8002bc2:	46bd      	mov	sp, r7
 8002bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bc8:	4770      	bx	lr

08002bca <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002bca:	b480      	push	{r7}
 8002bcc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002bce:	e7fe      	b.n	8002bce <HardFault_Handler+0x4>

08002bd0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002bd0:	b480      	push	{r7}
 8002bd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002bd4:	e7fe      	b.n	8002bd4 <MemManage_Handler+0x4>

08002bd6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002bd6:	b480      	push	{r7}
 8002bd8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002bda:	e7fe      	b.n	8002bda <BusFault_Handler+0x4>

08002bdc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002bdc:	b480      	push	{r7}
 8002bde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002be0:	e7fe      	b.n	8002be0 <UsageFault_Handler+0x4>

08002be2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002be2:	b480      	push	{r7}
 8002be4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002be6:	bf00      	nop
 8002be8:	46bd      	mov	sp, r7
 8002bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bee:	4770      	bx	lr

08002bf0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002bf0:	b480      	push	{r7}
 8002bf2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002bf4:	bf00      	nop
 8002bf6:	46bd      	mov	sp, r7
 8002bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bfc:	4770      	bx	lr

08002bfe <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002bfe:	b480      	push	{r7}
 8002c00:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002c02:	bf00      	nop
 8002c04:	46bd      	mov	sp, r7
 8002c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c0a:	4770      	bx	lr

08002c0c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002c0c:	b580      	push	{r7, lr}
 8002c0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002c10:	f000 f932 	bl	8002e78 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002c14:	bf00      	nop
 8002c16:	bd80      	pop	{r7, pc}

08002c18 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8002c18:	b580      	push	{r7, lr}
 8002c1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8002c1c:	4802      	ldr	r0, [pc, #8]	; (8002c28 <TIM2_IRQHandler+0x10>)
 8002c1e:	f002 fa25 	bl	800506c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8002c22:	bf00      	nop
 8002c24:	bd80      	pop	{r7, pc}
 8002c26:	bf00      	nop
 8002c28:	200008ec 	.word	0x200008ec

08002c2c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8002c2c:	b580      	push	{r7, lr}
 8002c2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8002c30:	4802      	ldr	r0, [pc, #8]	; (8002c3c <USART2_IRQHandler+0x10>)
 8002c32:	f003 f9f5 	bl	8006020 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8002c36:	bf00      	nop
 8002c38:	bd80      	pop	{r7, pc}
 8002c3a:	bf00      	nop
 8002c3c:	2000092c 	.word	0x2000092c

08002c40 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8002c40:	b580      	push	{r7, lr}
 8002c42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_DAC_IRQHandler(&hdac);
 8002c44:	4803      	ldr	r0, [pc, #12]	; (8002c54 <TIM6_DAC_IRQHandler+0x14>)
 8002c46:	f000 fb88 	bl	800335a <HAL_DAC_IRQHandler>
  HAL_TIM_IRQHandler(&htim6);
 8002c4a:	4803      	ldr	r0, [pc, #12]	; (8002c58 <TIM6_DAC_IRQHandler+0x18>)
 8002c4c:	f002 fa0e 	bl	800506c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8002c50:	bf00      	nop
 8002c52:	bd80      	pop	{r7, pc}
 8002c54:	20000800 	.word	0x20000800
 8002c58:	20000814 	.word	0x20000814

08002c5c <_write>:

return len;
}

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002c5c:	b580      	push	{r7, lr}
 8002c5e:	b086      	sub	sp, #24
 8002c60:	af00      	add	r7, sp, #0
 8002c62:	60f8      	str	r0, [r7, #12]
 8002c64:	60b9      	str	r1, [r7, #8]
 8002c66:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002c68:	2300      	movs	r3, #0
 8002c6a:	617b      	str	r3, [r7, #20]
 8002c6c:	e009      	b.n	8002c82 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8002c6e:	68bb      	ldr	r3, [r7, #8]
 8002c70:	1c5a      	adds	r2, r3, #1
 8002c72:	60ba      	str	r2, [r7, #8]
 8002c74:	781b      	ldrb	r3, [r3, #0]
 8002c76:	4618      	mov	r0, r3
 8002c78:	f7ff fafa 	bl	8002270 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002c7c:	697b      	ldr	r3, [r7, #20]
 8002c7e:	3301      	adds	r3, #1
 8002c80:	617b      	str	r3, [r7, #20]
 8002c82:	697a      	ldr	r2, [r7, #20]
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	429a      	cmp	r2, r3
 8002c88:	dbf1      	blt.n	8002c6e <_write+0x12>
	}
	return len;
 8002c8a:	687b      	ldr	r3, [r7, #4]
}
 8002c8c:	4618      	mov	r0, r3
 8002c8e:	3718      	adds	r7, #24
 8002c90:	46bd      	mov	sp, r7
 8002c92:	bd80      	pop	{r7, pc}

08002c94 <_close>:

int _close(int file)
{
 8002c94:	b480      	push	{r7}
 8002c96:	b083      	sub	sp, #12
 8002c98:	af00      	add	r7, sp, #0
 8002c9a:	6078      	str	r0, [r7, #4]
	return -1;
 8002c9c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002ca0:	4618      	mov	r0, r3
 8002ca2:	370c      	adds	r7, #12
 8002ca4:	46bd      	mov	sp, r7
 8002ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002caa:	4770      	bx	lr

08002cac <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002cac:	b480      	push	{r7}
 8002cae:	b083      	sub	sp, #12
 8002cb0:	af00      	add	r7, sp, #0
 8002cb2:	6078      	str	r0, [r7, #4]
 8002cb4:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8002cb6:	683b      	ldr	r3, [r7, #0]
 8002cb8:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002cbc:	605a      	str	r2, [r3, #4]
	return 0;
 8002cbe:	2300      	movs	r3, #0
}
 8002cc0:	4618      	mov	r0, r3
 8002cc2:	370c      	adds	r7, #12
 8002cc4:	46bd      	mov	sp, r7
 8002cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cca:	4770      	bx	lr

08002ccc <_isatty>:

int _isatty(int file)
{
 8002ccc:	b480      	push	{r7}
 8002cce:	b083      	sub	sp, #12
 8002cd0:	af00      	add	r7, sp, #0
 8002cd2:	6078      	str	r0, [r7, #4]
	return 1;
 8002cd4:	2301      	movs	r3, #1
}
 8002cd6:	4618      	mov	r0, r3
 8002cd8:	370c      	adds	r7, #12
 8002cda:	46bd      	mov	sp, r7
 8002cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ce0:	4770      	bx	lr

08002ce2 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002ce2:	b480      	push	{r7}
 8002ce4:	b085      	sub	sp, #20
 8002ce6:	af00      	add	r7, sp, #0
 8002ce8:	60f8      	str	r0, [r7, #12]
 8002cea:	60b9      	str	r1, [r7, #8]
 8002cec:	607a      	str	r2, [r7, #4]
	return 0;
 8002cee:	2300      	movs	r3, #0
}
 8002cf0:	4618      	mov	r0, r3
 8002cf2:	3714      	adds	r7, #20
 8002cf4:	46bd      	mov	sp, r7
 8002cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cfa:	4770      	bx	lr

08002cfc <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8002cfc:	b580      	push	{r7, lr}
 8002cfe:	b084      	sub	sp, #16
 8002d00:	af00      	add	r7, sp, #0
 8002d02:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8002d04:	4b11      	ldr	r3, [pc, #68]	; (8002d4c <_sbrk+0x50>)
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	2b00      	cmp	r3, #0
 8002d0a:	d102      	bne.n	8002d12 <_sbrk+0x16>
		heap_end = &end;
 8002d0c:	4b0f      	ldr	r3, [pc, #60]	; (8002d4c <_sbrk+0x50>)
 8002d0e:	4a10      	ldr	r2, [pc, #64]	; (8002d50 <_sbrk+0x54>)
 8002d10:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8002d12:	4b0e      	ldr	r3, [pc, #56]	; (8002d4c <_sbrk+0x50>)
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8002d18:	4b0c      	ldr	r3, [pc, #48]	; (8002d4c <_sbrk+0x50>)
 8002d1a:	681a      	ldr	r2, [r3, #0]
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	4413      	add	r3, r2
 8002d20:	466a      	mov	r2, sp
 8002d22:	4293      	cmp	r3, r2
 8002d24:	d907      	bls.n	8002d36 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8002d26:	f003 ffa7 	bl	8006c78 <__errno>
 8002d2a:	4602      	mov	r2, r0
 8002d2c:	230c      	movs	r3, #12
 8002d2e:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8002d30:	f04f 33ff 	mov.w	r3, #4294967295
 8002d34:	e006      	b.n	8002d44 <_sbrk+0x48>
	}

	heap_end += incr;
 8002d36:	4b05      	ldr	r3, [pc, #20]	; (8002d4c <_sbrk+0x50>)
 8002d38:	681a      	ldr	r2, [r3, #0]
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	4413      	add	r3, r2
 8002d3e:	4a03      	ldr	r2, [pc, #12]	; (8002d4c <_sbrk+0x50>)
 8002d40:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8002d42:	68fb      	ldr	r3, [r7, #12]
}
 8002d44:	4618      	mov	r0, r3
 8002d46:	3710      	adds	r7, #16
 8002d48:	46bd      	mov	sp, r7
 8002d4a:	bd80      	pop	{r7, pc}
 8002d4c:	20000608 	.word	0x20000608
 8002d50:	200009e0 	.word	0x200009e0

08002d54 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002d54:	b480      	push	{r7}
 8002d56:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002d58:	4b08      	ldr	r3, [pc, #32]	; (8002d7c <SystemInit+0x28>)
 8002d5a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d5e:	4a07      	ldr	r2, [pc, #28]	; (8002d7c <SystemInit+0x28>)
 8002d60:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002d64:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8002d68:	4b04      	ldr	r3, [pc, #16]	; (8002d7c <SystemInit+0x28>)
 8002d6a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002d6e:	609a      	str	r2, [r3, #8]
#endif
}
 8002d70:	bf00      	nop
 8002d72:	46bd      	mov	sp, r7
 8002d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d78:	4770      	bx	lr
 8002d7a:	bf00      	nop
 8002d7c:	e000ed00 	.word	0xe000ed00

08002d80 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8002d80:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002db8 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8002d84:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8002d86:	e003      	b.n	8002d90 <LoopCopyDataInit>

08002d88 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8002d88:	4b0c      	ldr	r3, [pc, #48]	; (8002dbc <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8002d8a:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8002d8c:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8002d8e:	3104      	adds	r1, #4

08002d90 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8002d90:	480b      	ldr	r0, [pc, #44]	; (8002dc0 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8002d92:	4b0c      	ldr	r3, [pc, #48]	; (8002dc4 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8002d94:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8002d96:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8002d98:	d3f6      	bcc.n	8002d88 <CopyDataInit>
  ldr  r2, =_sbss
 8002d9a:	4a0b      	ldr	r2, [pc, #44]	; (8002dc8 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8002d9c:	e002      	b.n	8002da4 <LoopFillZerobss>

08002d9e <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8002d9e:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8002da0:	f842 3b04 	str.w	r3, [r2], #4

08002da4 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8002da4:	4b09      	ldr	r3, [pc, #36]	; (8002dcc <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8002da6:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8002da8:	d3f9      	bcc.n	8002d9e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8002daa:	f7ff ffd3 	bl	8002d54 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002dae:	f004 f861 	bl	8006e74 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002db2:	f7fe fd09 	bl	80017c8 <main>
  bx  lr    
 8002db6:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8002db8:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8002dbc:	0800a630 	.word	0x0800a630
  ldr  r0, =_sdata
 8002dc0:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8002dc4:	200001e4 	.word	0x200001e4
  ldr  r2, =_sbss
 8002dc8:	200001e4 	.word	0x200001e4
  ldr  r3, = _ebss
 8002dcc:	200009dc 	.word	0x200009dc

08002dd0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002dd0:	e7fe      	b.n	8002dd0 <ADC_IRQHandler>
	...

08002dd4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002dd4:	b580      	push	{r7, lr}
 8002dd6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002dd8:	4b0e      	ldr	r3, [pc, #56]	; (8002e14 <HAL_Init+0x40>)
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	4a0d      	ldr	r2, [pc, #52]	; (8002e14 <HAL_Init+0x40>)
 8002dde:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002de2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002de4:	4b0b      	ldr	r3, [pc, #44]	; (8002e14 <HAL_Init+0x40>)
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	4a0a      	ldr	r2, [pc, #40]	; (8002e14 <HAL_Init+0x40>)
 8002dea:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002dee:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002df0:	4b08      	ldr	r3, [pc, #32]	; (8002e14 <HAL_Init+0x40>)
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	4a07      	ldr	r2, [pc, #28]	; (8002e14 <HAL_Init+0x40>)
 8002df6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002dfa:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002dfc:	2003      	movs	r0, #3
 8002dfe:	f000 fa49 	bl	8003294 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002e02:	2000      	movs	r0, #0
 8002e04:	f000 f808 	bl	8002e18 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002e08:	f7ff fabc 	bl	8002384 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002e0c:	2300      	movs	r3, #0
}
 8002e0e:	4618      	mov	r0, r3
 8002e10:	bd80      	pop	{r7, pc}
 8002e12:	bf00      	nop
 8002e14:	40023c00 	.word	0x40023c00

08002e18 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002e18:	b580      	push	{r7, lr}
 8002e1a:	b082      	sub	sp, #8
 8002e1c:	af00      	add	r7, sp, #0
 8002e1e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002e20:	4b12      	ldr	r3, [pc, #72]	; (8002e6c <HAL_InitTick+0x54>)
 8002e22:	681a      	ldr	r2, [r3, #0]
 8002e24:	4b12      	ldr	r3, [pc, #72]	; (8002e70 <HAL_InitTick+0x58>)
 8002e26:	781b      	ldrb	r3, [r3, #0]
 8002e28:	4619      	mov	r1, r3
 8002e2a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002e2e:	fbb3 f3f1 	udiv	r3, r3, r1
 8002e32:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e36:	4618      	mov	r0, r3
 8002e38:	f000 fa61 	bl	80032fe <HAL_SYSTICK_Config>
 8002e3c:	4603      	mov	r3, r0
 8002e3e:	2b00      	cmp	r3, #0
 8002e40:	d001      	beq.n	8002e46 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002e42:	2301      	movs	r3, #1
 8002e44:	e00e      	b.n	8002e64 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	2b0f      	cmp	r3, #15
 8002e4a:	d80a      	bhi.n	8002e62 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002e4c:	2200      	movs	r2, #0
 8002e4e:	6879      	ldr	r1, [r7, #4]
 8002e50:	f04f 30ff 	mov.w	r0, #4294967295
 8002e54:	f000 fa29 	bl	80032aa <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002e58:	4a06      	ldr	r2, [pc, #24]	; (8002e74 <HAL_InitTick+0x5c>)
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002e5e:	2300      	movs	r3, #0
 8002e60:	e000      	b.n	8002e64 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002e62:	2301      	movs	r3, #1
}
 8002e64:	4618      	mov	r0, r3
 8002e66:	3708      	adds	r7, #8
 8002e68:	46bd      	mov	sp, r7
 8002e6a:	bd80      	pop	{r7, pc}
 8002e6c:	20000008 	.word	0x20000008
 8002e70:	20000010 	.word	0x20000010
 8002e74:	2000000c 	.word	0x2000000c

08002e78 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002e78:	b480      	push	{r7}
 8002e7a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002e7c:	4b06      	ldr	r3, [pc, #24]	; (8002e98 <HAL_IncTick+0x20>)
 8002e7e:	781b      	ldrb	r3, [r3, #0]
 8002e80:	461a      	mov	r2, r3
 8002e82:	4b06      	ldr	r3, [pc, #24]	; (8002e9c <HAL_IncTick+0x24>)
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	4413      	add	r3, r2
 8002e88:	4a04      	ldr	r2, [pc, #16]	; (8002e9c <HAL_IncTick+0x24>)
 8002e8a:	6013      	str	r3, [r2, #0]
}
 8002e8c:	bf00      	nop
 8002e8e:	46bd      	mov	sp, r7
 8002e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e94:	4770      	bx	lr
 8002e96:	bf00      	nop
 8002e98:	20000010 	.word	0x20000010
 8002e9c:	200009d4 	.word	0x200009d4

08002ea0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002ea0:	b480      	push	{r7}
 8002ea2:	af00      	add	r7, sp, #0
  return uwTick;
 8002ea4:	4b03      	ldr	r3, [pc, #12]	; (8002eb4 <HAL_GetTick+0x14>)
 8002ea6:	681b      	ldr	r3, [r3, #0]
}
 8002ea8:	4618      	mov	r0, r3
 8002eaa:	46bd      	mov	sp, r7
 8002eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eb0:	4770      	bx	lr
 8002eb2:	bf00      	nop
 8002eb4:	200009d4 	.word	0x200009d4

08002eb8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002eb8:	b580      	push	{r7, lr}
 8002eba:	b084      	sub	sp, #16
 8002ebc:	af00      	add	r7, sp, #0
 8002ebe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002ec0:	f7ff ffee 	bl	8002ea0 <HAL_GetTick>
 8002ec4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002eca:	68fb      	ldr	r3, [r7, #12]
 8002ecc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ed0:	d005      	beq.n	8002ede <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002ed2:	4b09      	ldr	r3, [pc, #36]	; (8002ef8 <HAL_Delay+0x40>)
 8002ed4:	781b      	ldrb	r3, [r3, #0]
 8002ed6:	461a      	mov	r2, r3
 8002ed8:	68fb      	ldr	r3, [r7, #12]
 8002eda:	4413      	add	r3, r2
 8002edc:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002ede:	bf00      	nop
 8002ee0:	f7ff ffde 	bl	8002ea0 <HAL_GetTick>
 8002ee4:	4602      	mov	r2, r0
 8002ee6:	68bb      	ldr	r3, [r7, #8]
 8002ee8:	1ad3      	subs	r3, r2, r3
 8002eea:	68fa      	ldr	r2, [r7, #12]
 8002eec:	429a      	cmp	r2, r3
 8002eee:	d8f7      	bhi.n	8002ee0 <HAL_Delay+0x28>
  {
  }
}
 8002ef0:	bf00      	nop
 8002ef2:	3710      	adds	r7, #16
 8002ef4:	46bd      	mov	sp, r7
 8002ef6:	bd80      	pop	{r7, pc}
 8002ef8:	20000010 	.word	0x20000010

08002efc <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8002efc:	b580      	push	{r7, lr}
 8002efe:	b084      	sub	sp, #16
 8002f00:	af00      	add	r7, sp, #0
 8002f02:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	2b00      	cmp	r3, #0
 8002f08:	d101      	bne.n	8002f0e <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8002f0a:	2301      	movs	r3, #1
 8002f0c:	e0ed      	b.n	80030ea <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002f14:	b2db      	uxtb	r3, r3
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	d102      	bne.n	8002f20 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8002f1a:	6878      	ldr	r0, [r7, #4]
 8002f1c:	f7ff fa5a 	bl	80023d4 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	681a      	ldr	r2, [r3, #0]
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	f022 0202 	bic.w	r2, r2, #2
 8002f2e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002f30:	f7ff ffb6 	bl	8002ea0 <HAL_GetTick>
 8002f34:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8002f36:	e012      	b.n	8002f5e <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002f38:	f7ff ffb2 	bl	8002ea0 <HAL_GetTick>
 8002f3c:	4602      	mov	r2, r0
 8002f3e:	68fb      	ldr	r3, [r7, #12]
 8002f40:	1ad3      	subs	r3, r2, r3
 8002f42:	2b0a      	cmp	r3, #10
 8002f44:	d90b      	bls.n	8002f5e <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f4a:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	2205      	movs	r2, #5
 8002f56:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8002f5a:	2301      	movs	r3, #1
 8002f5c:	e0c5      	b.n	80030ea <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	685b      	ldr	r3, [r3, #4]
 8002f64:	f003 0302 	and.w	r3, r3, #2
 8002f68:	2b00      	cmp	r3, #0
 8002f6a:	d1e5      	bne.n	8002f38 <HAL_CAN_Init+0x3c>
    }
  }

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	681a      	ldr	r2, [r3, #0]
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	f042 0201 	orr.w	r2, r2, #1
 8002f7a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002f7c:	f7ff ff90 	bl	8002ea0 <HAL_GetTick>
 8002f80:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8002f82:	e012      	b.n	8002faa <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002f84:	f7ff ff8c 	bl	8002ea0 <HAL_GetTick>
 8002f88:	4602      	mov	r2, r0
 8002f8a:	68fb      	ldr	r3, [r7, #12]
 8002f8c:	1ad3      	subs	r3, r2, r3
 8002f8e:	2b0a      	cmp	r3, #10
 8002f90:	d90b      	bls.n	8002faa <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f96:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	2205      	movs	r2, #5
 8002fa2:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8002fa6:	2301      	movs	r3, #1
 8002fa8:	e09f      	b.n	80030ea <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	685b      	ldr	r3, [r3, #4]
 8002fb0:	f003 0301 	and.w	r3, r3, #1
 8002fb4:	2b00      	cmp	r3, #0
 8002fb6:	d0e5      	beq.n	8002f84 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	7e1b      	ldrb	r3, [r3, #24]
 8002fbc:	2b01      	cmp	r3, #1
 8002fbe:	d108      	bne.n	8002fd2 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	681a      	ldr	r2, [r3, #0]
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002fce:	601a      	str	r2, [r3, #0]
 8002fd0:	e007      	b.n	8002fe2 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	681a      	ldr	r2, [r3, #0]
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002fe0:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	7e5b      	ldrb	r3, [r3, #25]
 8002fe6:	2b01      	cmp	r3, #1
 8002fe8:	d108      	bne.n	8002ffc <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	681a      	ldr	r2, [r3, #0]
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002ff8:	601a      	str	r2, [r3, #0]
 8002ffa:	e007      	b.n	800300c <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	681a      	ldr	r2, [r3, #0]
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800300a:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	7e9b      	ldrb	r3, [r3, #26]
 8003010:	2b01      	cmp	r3, #1
 8003012:	d108      	bne.n	8003026 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	681a      	ldr	r2, [r3, #0]
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	f042 0220 	orr.w	r2, r2, #32
 8003022:	601a      	str	r2, [r3, #0]
 8003024:	e007      	b.n	8003036 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	681a      	ldr	r2, [r3, #0]
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	f022 0220 	bic.w	r2, r2, #32
 8003034:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	7edb      	ldrb	r3, [r3, #27]
 800303a:	2b01      	cmp	r3, #1
 800303c:	d108      	bne.n	8003050 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	681a      	ldr	r2, [r3, #0]
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	f022 0210 	bic.w	r2, r2, #16
 800304c:	601a      	str	r2, [r3, #0]
 800304e:	e007      	b.n	8003060 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	681a      	ldr	r2, [r3, #0]
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	f042 0210 	orr.w	r2, r2, #16
 800305e:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	7f1b      	ldrb	r3, [r3, #28]
 8003064:	2b01      	cmp	r3, #1
 8003066:	d108      	bne.n	800307a <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	681a      	ldr	r2, [r3, #0]
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	f042 0208 	orr.w	r2, r2, #8
 8003076:	601a      	str	r2, [r3, #0]
 8003078:	e007      	b.n	800308a <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	681a      	ldr	r2, [r3, #0]
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	f022 0208 	bic.w	r2, r2, #8
 8003088:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	7f5b      	ldrb	r3, [r3, #29]
 800308e:	2b01      	cmp	r3, #1
 8003090:	d108      	bne.n	80030a4 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	681a      	ldr	r2, [r3, #0]
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	f042 0204 	orr.w	r2, r2, #4
 80030a0:	601a      	str	r2, [r3, #0]
 80030a2:	e007      	b.n	80030b4 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	681a      	ldr	r2, [r3, #0]
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	f022 0204 	bic.w	r2, r2, #4
 80030b2:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	689a      	ldr	r2, [r3, #8]
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	68db      	ldr	r3, [r3, #12]
 80030bc:	431a      	orrs	r2, r3
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	691b      	ldr	r3, [r3, #16]
 80030c2:	431a      	orrs	r2, r3
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	695b      	ldr	r3, [r3, #20]
 80030c8:	ea42 0103 	orr.w	r1, r2, r3
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	685b      	ldr	r3, [r3, #4]
 80030d0:	1e5a      	subs	r2, r3, #1
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	430a      	orrs	r2, r1
 80030d8:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	2200      	movs	r2, #0
 80030de:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	2201      	movs	r2, #1
 80030e4:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 80030e8:	2300      	movs	r3, #0
}
 80030ea:	4618      	mov	r0, r3
 80030ec:	3710      	adds	r7, #16
 80030ee:	46bd      	mov	sp, r7
 80030f0:	bd80      	pop	{r7, pc}
	...

080030f4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80030f4:	b480      	push	{r7}
 80030f6:	b085      	sub	sp, #20
 80030f8:	af00      	add	r7, sp, #0
 80030fa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	f003 0307 	and.w	r3, r3, #7
 8003102:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003104:	4b0c      	ldr	r3, [pc, #48]	; (8003138 <__NVIC_SetPriorityGrouping+0x44>)
 8003106:	68db      	ldr	r3, [r3, #12]
 8003108:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800310a:	68ba      	ldr	r2, [r7, #8]
 800310c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003110:	4013      	ands	r3, r2
 8003112:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003114:	68fb      	ldr	r3, [r7, #12]
 8003116:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003118:	68bb      	ldr	r3, [r7, #8]
 800311a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800311c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003120:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003124:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003126:	4a04      	ldr	r2, [pc, #16]	; (8003138 <__NVIC_SetPriorityGrouping+0x44>)
 8003128:	68bb      	ldr	r3, [r7, #8]
 800312a:	60d3      	str	r3, [r2, #12]
}
 800312c:	bf00      	nop
 800312e:	3714      	adds	r7, #20
 8003130:	46bd      	mov	sp, r7
 8003132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003136:	4770      	bx	lr
 8003138:	e000ed00 	.word	0xe000ed00

0800313c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800313c:	b480      	push	{r7}
 800313e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003140:	4b04      	ldr	r3, [pc, #16]	; (8003154 <__NVIC_GetPriorityGrouping+0x18>)
 8003142:	68db      	ldr	r3, [r3, #12]
 8003144:	0a1b      	lsrs	r3, r3, #8
 8003146:	f003 0307 	and.w	r3, r3, #7
}
 800314a:	4618      	mov	r0, r3
 800314c:	46bd      	mov	sp, r7
 800314e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003152:	4770      	bx	lr
 8003154:	e000ed00 	.word	0xe000ed00

08003158 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003158:	b480      	push	{r7}
 800315a:	b083      	sub	sp, #12
 800315c:	af00      	add	r7, sp, #0
 800315e:	4603      	mov	r3, r0
 8003160:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003162:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003166:	2b00      	cmp	r3, #0
 8003168:	db0b      	blt.n	8003182 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800316a:	79fb      	ldrb	r3, [r7, #7]
 800316c:	f003 021f 	and.w	r2, r3, #31
 8003170:	4907      	ldr	r1, [pc, #28]	; (8003190 <__NVIC_EnableIRQ+0x38>)
 8003172:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003176:	095b      	lsrs	r3, r3, #5
 8003178:	2001      	movs	r0, #1
 800317a:	fa00 f202 	lsl.w	r2, r0, r2
 800317e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003182:	bf00      	nop
 8003184:	370c      	adds	r7, #12
 8003186:	46bd      	mov	sp, r7
 8003188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800318c:	4770      	bx	lr
 800318e:	bf00      	nop
 8003190:	e000e100 	.word	0xe000e100

08003194 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003194:	b480      	push	{r7}
 8003196:	b083      	sub	sp, #12
 8003198:	af00      	add	r7, sp, #0
 800319a:	4603      	mov	r3, r0
 800319c:	6039      	str	r1, [r7, #0]
 800319e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80031a0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80031a4:	2b00      	cmp	r3, #0
 80031a6:	db0a      	blt.n	80031be <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80031a8:	683b      	ldr	r3, [r7, #0]
 80031aa:	b2da      	uxtb	r2, r3
 80031ac:	490c      	ldr	r1, [pc, #48]	; (80031e0 <__NVIC_SetPriority+0x4c>)
 80031ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80031b2:	0112      	lsls	r2, r2, #4
 80031b4:	b2d2      	uxtb	r2, r2
 80031b6:	440b      	add	r3, r1
 80031b8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80031bc:	e00a      	b.n	80031d4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80031be:	683b      	ldr	r3, [r7, #0]
 80031c0:	b2da      	uxtb	r2, r3
 80031c2:	4908      	ldr	r1, [pc, #32]	; (80031e4 <__NVIC_SetPriority+0x50>)
 80031c4:	79fb      	ldrb	r3, [r7, #7]
 80031c6:	f003 030f 	and.w	r3, r3, #15
 80031ca:	3b04      	subs	r3, #4
 80031cc:	0112      	lsls	r2, r2, #4
 80031ce:	b2d2      	uxtb	r2, r2
 80031d0:	440b      	add	r3, r1
 80031d2:	761a      	strb	r2, [r3, #24]
}
 80031d4:	bf00      	nop
 80031d6:	370c      	adds	r7, #12
 80031d8:	46bd      	mov	sp, r7
 80031da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031de:	4770      	bx	lr
 80031e0:	e000e100 	.word	0xe000e100
 80031e4:	e000ed00 	.word	0xe000ed00

080031e8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80031e8:	b480      	push	{r7}
 80031ea:	b089      	sub	sp, #36	; 0x24
 80031ec:	af00      	add	r7, sp, #0
 80031ee:	60f8      	str	r0, [r7, #12]
 80031f0:	60b9      	str	r1, [r7, #8]
 80031f2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80031f4:	68fb      	ldr	r3, [r7, #12]
 80031f6:	f003 0307 	and.w	r3, r3, #7
 80031fa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80031fc:	69fb      	ldr	r3, [r7, #28]
 80031fe:	f1c3 0307 	rsb	r3, r3, #7
 8003202:	2b04      	cmp	r3, #4
 8003204:	bf28      	it	cs
 8003206:	2304      	movcs	r3, #4
 8003208:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800320a:	69fb      	ldr	r3, [r7, #28]
 800320c:	3304      	adds	r3, #4
 800320e:	2b06      	cmp	r3, #6
 8003210:	d902      	bls.n	8003218 <NVIC_EncodePriority+0x30>
 8003212:	69fb      	ldr	r3, [r7, #28]
 8003214:	3b03      	subs	r3, #3
 8003216:	e000      	b.n	800321a <NVIC_EncodePriority+0x32>
 8003218:	2300      	movs	r3, #0
 800321a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800321c:	f04f 32ff 	mov.w	r2, #4294967295
 8003220:	69bb      	ldr	r3, [r7, #24]
 8003222:	fa02 f303 	lsl.w	r3, r2, r3
 8003226:	43da      	mvns	r2, r3
 8003228:	68bb      	ldr	r3, [r7, #8]
 800322a:	401a      	ands	r2, r3
 800322c:	697b      	ldr	r3, [r7, #20]
 800322e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003230:	f04f 31ff 	mov.w	r1, #4294967295
 8003234:	697b      	ldr	r3, [r7, #20]
 8003236:	fa01 f303 	lsl.w	r3, r1, r3
 800323a:	43d9      	mvns	r1, r3
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003240:	4313      	orrs	r3, r2
         );
}
 8003242:	4618      	mov	r0, r3
 8003244:	3724      	adds	r7, #36	; 0x24
 8003246:	46bd      	mov	sp, r7
 8003248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800324c:	4770      	bx	lr
	...

08003250 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003250:	b580      	push	{r7, lr}
 8003252:	b082      	sub	sp, #8
 8003254:	af00      	add	r7, sp, #0
 8003256:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	3b01      	subs	r3, #1
 800325c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003260:	d301      	bcc.n	8003266 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003262:	2301      	movs	r3, #1
 8003264:	e00f      	b.n	8003286 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003266:	4a0a      	ldr	r2, [pc, #40]	; (8003290 <SysTick_Config+0x40>)
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	3b01      	subs	r3, #1
 800326c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800326e:	210f      	movs	r1, #15
 8003270:	f04f 30ff 	mov.w	r0, #4294967295
 8003274:	f7ff ff8e 	bl	8003194 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003278:	4b05      	ldr	r3, [pc, #20]	; (8003290 <SysTick_Config+0x40>)
 800327a:	2200      	movs	r2, #0
 800327c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800327e:	4b04      	ldr	r3, [pc, #16]	; (8003290 <SysTick_Config+0x40>)
 8003280:	2207      	movs	r2, #7
 8003282:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003284:	2300      	movs	r3, #0
}
 8003286:	4618      	mov	r0, r3
 8003288:	3708      	adds	r7, #8
 800328a:	46bd      	mov	sp, r7
 800328c:	bd80      	pop	{r7, pc}
 800328e:	bf00      	nop
 8003290:	e000e010 	.word	0xe000e010

08003294 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003294:	b580      	push	{r7, lr}
 8003296:	b082      	sub	sp, #8
 8003298:	af00      	add	r7, sp, #0
 800329a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800329c:	6878      	ldr	r0, [r7, #4]
 800329e:	f7ff ff29 	bl	80030f4 <__NVIC_SetPriorityGrouping>
}
 80032a2:	bf00      	nop
 80032a4:	3708      	adds	r7, #8
 80032a6:	46bd      	mov	sp, r7
 80032a8:	bd80      	pop	{r7, pc}

080032aa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80032aa:	b580      	push	{r7, lr}
 80032ac:	b086      	sub	sp, #24
 80032ae:	af00      	add	r7, sp, #0
 80032b0:	4603      	mov	r3, r0
 80032b2:	60b9      	str	r1, [r7, #8]
 80032b4:	607a      	str	r2, [r7, #4]
 80032b6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80032b8:	2300      	movs	r3, #0
 80032ba:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80032bc:	f7ff ff3e 	bl	800313c <__NVIC_GetPriorityGrouping>
 80032c0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80032c2:	687a      	ldr	r2, [r7, #4]
 80032c4:	68b9      	ldr	r1, [r7, #8]
 80032c6:	6978      	ldr	r0, [r7, #20]
 80032c8:	f7ff ff8e 	bl	80031e8 <NVIC_EncodePriority>
 80032cc:	4602      	mov	r2, r0
 80032ce:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80032d2:	4611      	mov	r1, r2
 80032d4:	4618      	mov	r0, r3
 80032d6:	f7ff ff5d 	bl	8003194 <__NVIC_SetPriority>
}
 80032da:	bf00      	nop
 80032dc:	3718      	adds	r7, #24
 80032de:	46bd      	mov	sp, r7
 80032e0:	bd80      	pop	{r7, pc}

080032e2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80032e2:	b580      	push	{r7, lr}
 80032e4:	b082      	sub	sp, #8
 80032e6:	af00      	add	r7, sp, #0
 80032e8:	4603      	mov	r3, r0
 80032ea:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80032ec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80032f0:	4618      	mov	r0, r3
 80032f2:	f7ff ff31 	bl	8003158 <__NVIC_EnableIRQ>
}
 80032f6:	bf00      	nop
 80032f8:	3708      	adds	r7, #8
 80032fa:	46bd      	mov	sp, r7
 80032fc:	bd80      	pop	{r7, pc}

080032fe <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80032fe:	b580      	push	{r7, lr}
 8003300:	b082      	sub	sp, #8
 8003302:	af00      	add	r7, sp, #0
 8003304:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003306:	6878      	ldr	r0, [r7, #4]
 8003308:	f7ff ffa2 	bl	8003250 <SysTick_Config>
 800330c:	4603      	mov	r3, r0
}
 800330e:	4618      	mov	r0, r3
 8003310:	3708      	adds	r7, #8
 8003312:	46bd      	mov	sp, r7
 8003314:	bd80      	pop	{r7, pc}

08003316 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef* hdac)
{ 
 8003316:	b580      	push	{r7, lr}
 8003318:	b082      	sub	sp, #8
 800331a:	af00      	add	r7, sp, #0
 800331c:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if(hdac == NULL)
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	2b00      	cmp	r3, #0
 8003322:	d101      	bne.n	8003328 <HAL_DAC_Init+0x12>
  {
     return HAL_ERROR;
 8003324:	2301      	movs	r3, #1
 8003326:	e014      	b.n	8003352 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));
  
  if(hdac->State == HAL_DAC_STATE_RESET)
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	791b      	ldrb	r3, [r3, #4]
 800332c:	b2db      	uxtb	r3, r3
 800332e:	2b00      	cmp	r3, #0
 8003330:	d105      	bne.n	800333e <HAL_DAC_Init+0x28>
    {
      hdac->MspInitCallback               = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	2200      	movs	r2, #0
 8003336:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8003338:	6878      	ldr	r0, [r7, #4]
 800333a:	f7ff f893 	bl	8002464 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }
  
  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	2202      	movs	r2, #2
 8003342:	711a      	strb	r2, [r3, #4]
  
  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	2200      	movs	r2, #0
 8003348:	611a      	str	r2, [r3, #16]
  
  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	2201      	movs	r2, #1
 800334e:	711a      	strb	r2, [r3, #4]
  
  /* Return function status */
  return HAL_OK;
 8003350:	2300      	movs	r3, #0
}
 8003352:	4618      	mov	r0, r3
 8003354:	3708      	adds	r7, #8
 8003356:	46bd      	mov	sp, r7
 8003358:	bd80      	pop	{r7, pc}

0800335a <HAL_DAC_IRQHandler>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
void HAL_DAC_IRQHandler(DAC_HandleTypeDef* hdac)
{
 800335a:	b580      	push	{r7, lr}
 800335c:	b082      	sub	sp, #8
 800335e:	af00      	add	r7, sp, #0
 8003360:	6078      	str	r0, [r7, #4]
  /* Check underrun channel 1 flag */
  if(__HAL_DAC_GET_FLAG(hdac, DAC_FLAG_DMAUDR1))
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003368:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800336c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003370:	d118      	bne.n	80033a4 <HAL_DAC_IRQHandler+0x4a>
  {
    /* Change DAC state to error state */
    hdac->State = HAL_DAC_STATE_ERROR;
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	2204      	movs	r2, #4
 8003376:	711a      	strb	r2, [r3, #4]
    
    /* Set DAC error code to channel1 DMA underrun error */
    hdac->ErrorCode |= HAL_DAC_ERROR_DMAUNDERRUNCH1;
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	691b      	ldr	r3, [r3, #16]
 800337c:	f043 0201 	orr.w	r2, r3, #1
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	611a      	str	r2, [r3, #16]
    
    /* Clear the underrun flag */
    __HAL_DAC_CLEAR_FLAG(hdac,DAC_FLAG_DMAUDR1);
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800338c:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Disable the selected DAC channel1 DMA request */
    hdac->Instance->CR &= ~DAC_CR_DMAEN1;
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	681a      	ldr	r2, [r3, #0]
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800339c:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh1(hdac);
#else
    HAL_DAC_DMAUnderrunCallbackCh1(hdac);
 800339e:	6878      	ldr	r0, [r7, #4]
 80033a0:	f000 f825 	bl	80033ee <HAL_DAC_DMAUnderrunCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }
  /* Check underrun channel 2 flag */
  if(__HAL_DAC_GET_FLAG(hdac, DAC_FLAG_DMAUDR2))
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80033aa:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80033ae:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80033b2:	d118      	bne.n	80033e6 <HAL_DAC_IRQHandler+0x8c>
  {
    /* Change DAC state to error state */
    hdac->State = HAL_DAC_STATE_ERROR;
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	2204      	movs	r2, #4
 80033b8:	711a      	strb	r2, [r3, #4]
    
    /* Set DAC error code to channel2 DMA underrun error */
    hdac->ErrorCode |= HAL_DAC_ERROR_DMAUNDERRUNCH2;
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	691b      	ldr	r3, [r3, #16]
 80033be:	f043 0202 	orr.w	r2, r3, #2
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	611a      	str	r2, [r3, #16]
    
    /* Clear the underrun flag */
    __HAL_DAC_CLEAR_FLAG(hdac,DAC_FLAG_DMAUDR2);
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 80033ce:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Disable the selected DAC channel1 DMA request */
    hdac->Instance->CR &= ~DAC_CR_DMAEN2;
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	681a      	ldr	r2, [r3, #0]
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 80033de:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh2(hdac);
#else
    HAL_DACEx_DMAUnderrunCallbackCh2(hdac);
 80033e0:	6878      	ldr	r0, [r7, #4]
 80033e2:	f000 f85b 	bl	800349c <HAL_DACEx_DMAUnderrunCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }
}
 80033e6:	bf00      	nop
 80033e8:	3708      	adds	r7, #8
 80033ea:	46bd      	mov	sp, r7
 80033ec:	bd80      	pop	{r7, pc}

080033ee <HAL_DAC_DMAUnderrunCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_DMAUnderrunCallbackCh1(DAC_HandleTypeDef *hdac)
{
 80033ee:	b480      	push	{r7}
 80033f0:	b083      	sub	sp, #12
 80033f2:	af00      	add	r7, sp, #0
 80033f4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hdac);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DAC_DMAUnderrunCallbackCh1 could be implemented in the user file
   */
}
 80033f6:	bf00      	nop
 80033f8:	370c      	adds	r7, #12
 80033fa:	46bd      	mov	sp, r7
 80033fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003400:	4770      	bx	lr

08003402 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef* hdac, DAC_ChannelConfTypeDef* sConfig, uint32_t Channel)
{
 8003402:	b480      	push	{r7}
 8003404:	b087      	sub	sp, #28
 8003406:	af00      	add	r7, sp, #0
 8003408:	60f8      	str	r0, [r7, #12]
 800340a:	60b9      	str	r1, [r7, #8]
 800340c:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg1 = 0U, tmpreg2 = 0U;
 800340e:	2300      	movs	r3, #0
 8003410:	617b      	str	r3, [r7, #20]
 8003412:	2300      	movs	r3, #0
 8003414:	613b      	str	r3, [r7, #16]
  assert_param(IS_DAC_TRIGGER(sConfig->DAC_Trigger));
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));
  assert_param(IS_DAC_CHANNEL(Channel));
  
  /* Process locked */
  __HAL_LOCK(hdac);
 8003416:	68fb      	ldr	r3, [r7, #12]
 8003418:	795b      	ldrb	r3, [r3, #5]
 800341a:	2b01      	cmp	r3, #1
 800341c:	d101      	bne.n	8003422 <HAL_DAC_ConfigChannel+0x20>
 800341e:	2302      	movs	r3, #2
 8003420:	e036      	b.n	8003490 <HAL_DAC_ConfigChannel+0x8e>
 8003422:	68fb      	ldr	r3, [r7, #12]
 8003424:	2201      	movs	r2, #1
 8003426:	715a      	strb	r2, [r3, #5]
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8003428:	68fb      	ldr	r3, [r7, #12]
 800342a:	2202      	movs	r2, #2
 800342c:	711a      	strb	r2, [r3, #4]
  
  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 800342e:	68fb      	ldr	r3, [r7, #12]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	617b      	str	r3, [r7, #20]
  /* Clear BOFFx, TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << Channel);
 8003436:	f640 72fe 	movw	r2, #4094	; 0xffe
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	fa02 f303 	lsl.w	r3, r2, r3
 8003440:	43db      	mvns	r3, r3
 8003442:	697a      	ldr	r2, [r7, #20]
 8003444:	4013      	ands	r3, r2
 8003446:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: buffer output, trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set BOFFx bit according to DAC_OutputBuffer value */   
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 8003448:	68bb      	ldr	r3, [r7, #8]
 800344a:	681a      	ldr	r2, [r3, #0]
 800344c:	68bb      	ldr	r3, [r7, #8]
 800344e:	685b      	ldr	r3, [r3, #4]
 8003450:	4313      	orrs	r3, r2
 8003452:	613b      	str	r3, [r7, #16]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << Channel;
 8003454:	693a      	ldr	r2, [r7, #16]
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	fa02 f303 	lsl.w	r3, r2, r3
 800345c:	697a      	ldr	r2, [r7, #20]
 800345e:	4313      	orrs	r3, r2
 8003460:	617b      	str	r3, [r7, #20]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8003462:	68fb      	ldr	r3, [r7, #12]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	697a      	ldr	r2, [r7, #20]
 8003468:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << Channel);
 800346a:	68fb      	ldr	r3, [r7, #12]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	6819      	ldr	r1, [r3, #0]
 8003470:	22c0      	movs	r2, #192	; 0xc0
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	fa02 f303 	lsl.w	r3, r2, r3
 8003478:	43da      	mvns	r2, r3
 800347a:	68fb      	ldr	r3, [r7, #12]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	400a      	ands	r2, r1
 8003480:	601a      	str	r2, [r3, #0]
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8003482:	68fb      	ldr	r3, [r7, #12]
 8003484:	2201      	movs	r2, #1
 8003486:	711a      	strb	r2, [r3, #4]
  
  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8003488:	68fb      	ldr	r3, [r7, #12]
 800348a:	2200      	movs	r2, #0
 800348c:	715a      	strb	r2, [r3, #5]
  
  /* Return function status */
  return HAL_OK;
 800348e:	2300      	movs	r3, #0
}
 8003490:	4618      	mov	r0, r3
 8003492:	371c      	adds	r7, #28
 8003494:	46bd      	mov	sp, r7
 8003496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800349a:	4770      	bx	lr

0800349c <HAL_DACEx_DMAUnderrunCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_DMAUnderrunCallbackCh2(DAC_HandleTypeDef *hdac)
{
 800349c:	b480      	push	{r7}
 800349e:	b083      	sub	sp, #12
 80034a0:	af00      	add	r7, sp, #0
 80034a2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hdac);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DAC_DMAUnderrunCallbackCh2 could be implemented in the user file
   */
}
 80034a4:	bf00      	nop
 80034a6:	370c      	adds	r7, #12
 80034a8:	46bd      	mov	sp, r7
 80034aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ae:	4770      	bx	lr

080034b0 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80034b0:	b480      	push	{r7}
 80034b2:	b083      	sub	sp, #12
 80034b4:	af00      	add	r7, sp, #0
 80034b6:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80034be:	b2db      	uxtb	r3, r3
 80034c0:	2b02      	cmp	r3, #2
 80034c2:	d004      	beq.n	80034ce <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	2280      	movs	r2, #128	; 0x80
 80034c8:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80034ca:	2301      	movs	r3, #1
 80034cc:	e00c      	b.n	80034e8 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	2205      	movs	r2, #5
 80034d2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	681a      	ldr	r2, [r3, #0]
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	f022 0201 	bic.w	r2, r2, #1
 80034e4:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80034e6:	2300      	movs	r3, #0
}
 80034e8:	4618      	mov	r0, r3
 80034ea:	370c      	adds	r7, #12
 80034ec:	46bd      	mov	sp, r7
 80034ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034f2:	4770      	bx	lr

080034f4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80034f4:	b480      	push	{r7}
 80034f6:	b089      	sub	sp, #36	; 0x24
 80034f8:	af00      	add	r7, sp, #0
 80034fa:	6078      	str	r0, [r7, #4]
 80034fc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80034fe:	2300      	movs	r3, #0
 8003500:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003502:	2300      	movs	r3, #0
 8003504:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003506:	2300      	movs	r3, #0
 8003508:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800350a:	2300      	movs	r3, #0
 800350c:	61fb      	str	r3, [r7, #28]
 800350e:	e16b      	b.n	80037e8 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003510:	2201      	movs	r2, #1
 8003512:	69fb      	ldr	r3, [r7, #28]
 8003514:	fa02 f303 	lsl.w	r3, r2, r3
 8003518:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800351a:	683b      	ldr	r3, [r7, #0]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	697a      	ldr	r2, [r7, #20]
 8003520:	4013      	ands	r3, r2
 8003522:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003524:	693a      	ldr	r2, [r7, #16]
 8003526:	697b      	ldr	r3, [r7, #20]
 8003528:	429a      	cmp	r2, r3
 800352a:	f040 815a 	bne.w	80037e2 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800352e:	683b      	ldr	r3, [r7, #0]
 8003530:	685b      	ldr	r3, [r3, #4]
 8003532:	2b01      	cmp	r3, #1
 8003534:	d00b      	beq.n	800354e <HAL_GPIO_Init+0x5a>
 8003536:	683b      	ldr	r3, [r7, #0]
 8003538:	685b      	ldr	r3, [r3, #4]
 800353a:	2b02      	cmp	r3, #2
 800353c:	d007      	beq.n	800354e <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800353e:	683b      	ldr	r3, [r7, #0]
 8003540:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003542:	2b11      	cmp	r3, #17
 8003544:	d003      	beq.n	800354e <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003546:	683b      	ldr	r3, [r7, #0]
 8003548:	685b      	ldr	r3, [r3, #4]
 800354a:	2b12      	cmp	r3, #18
 800354c:	d130      	bne.n	80035b0 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	689b      	ldr	r3, [r3, #8]
 8003552:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003554:	69fb      	ldr	r3, [r7, #28]
 8003556:	005b      	lsls	r3, r3, #1
 8003558:	2203      	movs	r2, #3
 800355a:	fa02 f303 	lsl.w	r3, r2, r3
 800355e:	43db      	mvns	r3, r3
 8003560:	69ba      	ldr	r2, [r7, #24]
 8003562:	4013      	ands	r3, r2
 8003564:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003566:	683b      	ldr	r3, [r7, #0]
 8003568:	68da      	ldr	r2, [r3, #12]
 800356a:	69fb      	ldr	r3, [r7, #28]
 800356c:	005b      	lsls	r3, r3, #1
 800356e:	fa02 f303 	lsl.w	r3, r2, r3
 8003572:	69ba      	ldr	r2, [r7, #24]
 8003574:	4313      	orrs	r3, r2
 8003576:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	69ba      	ldr	r2, [r7, #24]
 800357c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	685b      	ldr	r3, [r3, #4]
 8003582:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003584:	2201      	movs	r2, #1
 8003586:	69fb      	ldr	r3, [r7, #28]
 8003588:	fa02 f303 	lsl.w	r3, r2, r3
 800358c:	43db      	mvns	r3, r3
 800358e:	69ba      	ldr	r2, [r7, #24]
 8003590:	4013      	ands	r3, r2
 8003592:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8003594:	683b      	ldr	r3, [r7, #0]
 8003596:	685b      	ldr	r3, [r3, #4]
 8003598:	091b      	lsrs	r3, r3, #4
 800359a:	f003 0201 	and.w	r2, r3, #1
 800359e:	69fb      	ldr	r3, [r7, #28]
 80035a0:	fa02 f303 	lsl.w	r3, r2, r3
 80035a4:	69ba      	ldr	r2, [r7, #24]
 80035a6:	4313      	orrs	r3, r2
 80035a8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	69ba      	ldr	r2, [r7, #24]
 80035ae:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	68db      	ldr	r3, [r3, #12]
 80035b4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80035b6:	69fb      	ldr	r3, [r7, #28]
 80035b8:	005b      	lsls	r3, r3, #1
 80035ba:	2203      	movs	r2, #3
 80035bc:	fa02 f303 	lsl.w	r3, r2, r3
 80035c0:	43db      	mvns	r3, r3
 80035c2:	69ba      	ldr	r2, [r7, #24]
 80035c4:	4013      	ands	r3, r2
 80035c6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80035c8:	683b      	ldr	r3, [r7, #0]
 80035ca:	689a      	ldr	r2, [r3, #8]
 80035cc:	69fb      	ldr	r3, [r7, #28]
 80035ce:	005b      	lsls	r3, r3, #1
 80035d0:	fa02 f303 	lsl.w	r3, r2, r3
 80035d4:	69ba      	ldr	r2, [r7, #24]
 80035d6:	4313      	orrs	r3, r2
 80035d8:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	69ba      	ldr	r2, [r7, #24]
 80035de:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80035e0:	683b      	ldr	r3, [r7, #0]
 80035e2:	685b      	ldr	r3, [r3, #4]
 80035e4:	2b02      	cmp	r3, #2
 80035e6:	d003      	beq.n	80035f0 <HAL_GPIO_Init+0xfc>
 80035e8:	683b      	ldr	r3, [r7, #0]
 80035ea:	685b      	ldr	r3, [r3, #4]
 80035ec:	2b12      	cmp	r3, #18
 80035ee:	d123      	bne.n	8003638 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80035f0:	69fb      	ldr	r3, [r7, #28]
 80035f2:	08da      	lsrs	r2, r3, #3
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	3208      	adds	r2, #8
 80035f8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80035fc:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80035fe:	69fb      	ldr	r3, [r7, #28]
 8003600:	f003 0307 	and.w	r3, r3, #7
 8003604:	009b      	lsls	r3, r3, #2
 8003606:	220f      	movs	r2, #15
 8003608:	fa02 f303 	lsl.w	r3, r2, r3
 800360c:	43db      	mvns	r3, r3
 800360e:	69ba      	ldr	r2, [r7, #24]
 8003610:	4013      	ands	r3, r2
 8003612:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003614:	683b      	ldr	r3, [r7, #0]
 8003616:	691a      	ldr	r2, [r3, #16]
 8003618:	69fb      	ldr	r3, [r7, #28]
 800361a:	f003 0307 	and.w	r3, r3, #7
 800361e:	009b      	lsls	r3, r3, #2
 8003620:	fa02 f303 	lsl.w	r3, r2, r3
 8003624:	69ba      	ldr	r2, [r7, #24]
 8003626:	4313      	orrs	r3, r2
 8003628:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800362a:	69fb      	ldr	r3, [r7, #28]
 800362c:	08da      	lsrs	r2, r3, #3
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	3208      	adds	r2, #8
 8003632:	69b9      	ldr	r1, [r7, #24]
 8003634:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800363e:	69fb      	ldr	r3, [r7, #28]
 8003640:	005b      	lsls	r3, r3, #1
 8003642:	2203      	movs	r2, #3
 8003644:	fa02 f303 	lsl.w	r3, r2, r3
 8003648:	43db      	mvns	r3, r3
 800364a:	69ba      	ldr	r2, [r7, #24]
 800364c:	4013      	ands	r3, r2
 800364e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003650:	683b      	ldr	r3, [r7, #0]
 8003652:	685b      	ldr	r3, [r3, #4]
 8003654:	f003 0203 	and.w	r2, r3, #3
 8003658:	69fb      	ldr	r3, [r7, #28]
 800365a:	005b      	lsls	r3, r3, #1
 800365c:	fa02 f303 	lsl.w	r3, r2, r3
 8003660:	69ba      	ldr	r2, [r7, #24]
 8003662:	4313      	orrs	r3, r2
 8003664:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	69ba      	ldr	r2, [r7, #24]
 800366a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800366c:	683b      	ldr	r3, [r7, #0]
 800366e:	685b      	ldr	r3, [r3, #4]
 8003670:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003674:	2b00      	cmp	r3, #0
 8003676:	f000 80b4 	beq.w	80037e2 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800367a:	2300      	movs	r3, #0
 800367c:	60fb      	str	r3, [r7, #12]
 800367e:	4b5f      	ldr	r3, [pc, #380]	; (80037fc <HAL_GPIO_Init+0x308>)
 8003680:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003682:	4a5e      	ldr	r2, [pc, #376]	; (80037fc <HAL_GPIO_Init+0x308>)
 8003684:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003688:	6453      	str	r3, [r2, #68]	; 0x44
 800368a:	4b5c      	ldr	r3, [pc, #368]	; (80037fc <HAL_GPIO_Init+0x308>)
 800368c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800368e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003692:	60fb      	str	r3, [r7, #12]
 8003694:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003696:	4a5a      	ldr	r2, [pc, #360]	; (8003800 <HAL_GPIO_Init+0x30c>)
 8003698:	69fb      	ldr	r3, [r7, #28]
 800369a:	089b      	lsrs	r3, r3, #2
 800369c:	3302      	adds	r3, #2
 800369e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80036a2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80036a4:	69fb      	ldr	r3, [r7, #28]
 80036a6:	f003 0303 	and.w	r3, r3, #3
 80036aa:	009b      	lsls	r3, r3, #2
 80036ac:	220f      	movs	r2, #15
 80036ae:	fa02 f303 	lsl.w	r3, r2, r3
 80036b2:	43db      	mvns	r3, r3
 80036b4:	69ba      	ldr	r2, [r7, #24]
 80036b6:	4013      	ands	r3, r2
 80036b8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	4a51      	ldr	r2, [pc, #324]	; (8003804 <HAL_GPIO_Init+0x310>)
 80036be:	4293      	cmp	r3, r2
 80036c0:	d02b      	beq.n	800371a <HAL_GPIO_Init+0x226>
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	4a50      	ldr	r2, [pc, #320]	; (8003808 <HAL_GPIO_Init+0x314>)
 80036c6:	4293      	cmp	r3, r2
 80036c8:	d025      	beq.n	8003716 <HAL_GPIO_Init+0x222>
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	4a4f      	ldr	r2, [pc, #316]	; (800380c <HAL_GPIO_Init+0x318>)
 80036ce:	4293      	cmp	r3, r2
 80036d0:	d01f      	beq.n	8003712 <HAL_GPIO_Init+0x21e>
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	4a4e      	ldr	r2, [pc, #312]	; (8003810 <HAL_GPIO_Init+0x31c>)
 80036d6:	4293      	cmp	r3, r2
 80036d8:	d019      	beq.n	800370e <HAL_GPIO_Init+0x21a>
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	4a4d      	ldr	r2, [pc, #308]	; (8003814 <HAL_GPIO_Init+0x320>)
 80036de:	4293      	cmp	r3, r2
 80036e0:	d013      	beq.n	800370a <HAL_GPIO_Init+0x216>
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	4a4c      	ldr	r2, [pc, #304]	; (8003818 <HAL_GPIO_Init+0x324>)
 80036e6:	4293      	cmp	r3, r2
 80036e8:	d00d      	beq.n	8003706 <HAL_GPIO_Init+0x212>
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	4a4b      	ldr	r2, [pc, #300]	; (800381c <HAL_GPIO_Init+0x328>)
 80036ee:	4293      	cmp	r3, r2
 80036f0:	d007      	beq.n	8003702 <HAL_GPIO_Init+0x20e>
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	4a4a      	ldr	r2, [pc, #296]	; (8003820 <HAL_GPIO_Init+0x32c>)
 80036f6:	4293      	cmp	r3, r2
 80036f8:	d101      	bne.n	80036fe <HAL_GPIO_Init+0x20a>
 80036fa:	2307      	movs	r3, #7
 80036fc:	e00e      	b.n	800371c <HAL_GPIO_Init+0x228>
 80036fe:	2308      	movs	r3, #8
 8003700:	e00c      	b.n	800371c <HAL_GPIO_Init+0x228>
 8003702:	2306      	movs	r3, #6
 8003704:	e00a      	b.n	800371c <HAL_GPIO_Init+0x228>
 8003706:	2305      	movs	r3, #5
 8003708:	e008      	b.n	800371c <HAL_GPIO_Init+0x228>
 800370a:	2304      	movs	r3, #4
 800370c:	e006      	b.n	800371c <HAL_GPIO_Init+0x228>
 800370e:	2303      	movs	r3, #3
 8003710:	e004      	b.n	800371c <HAL_GPIO_Init+0x228>
 8003712:	2302      	movs	r3, #2
 8003714:	e002      	b.n	800371c <HAL_GPIO_Init+0x228>
 8003716:	2301      	movs	r3, #1
 8003718:	e000      	b.n	800371c <HAL_GPIO_Init+0x228>
 800371a:	2300      	movs	r3, #0
 800371c:	69fa      	ldr	r2, [r7, #28]
 800371e:	f002 0203 	and.w	r2, r2, #3
 8003722:	0092      	lsls	r2, r2, #2
 8003724:	4093      	lsls	r3, r2
 8003726:	69ba      	ldr	r2, [r7, #24]
 8003728:	4313      	orrs	r3, r2
 800372a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800372c:	4934      	ldr	r1, [pc, #208]	; (8003800 <HAL_GPIO_Init+0x30c>)
 800372e:	69fb      	ldr	r3, [r7, #28]
 8003730:	089b      	lsrs	r3, r3, #2
 8003732:	3302      	adds	r3, #2
 8003734:	69ba      	ldr	r2, [r7, #24]
 8003736:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800373a:	4b3a      	ldr	r3, [pc, #232]	; (8003824 <HAL_GPIO_Init+0x330>)
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003740:	693b      	ldr	r3, [r7, #16]
 8003742:	43db      	mvns	r3, r3
 8003744:	69ba      	ldr	r2, [r7, #24]
 8003746:	4013      	ands	r3, r2
 8003748:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800374a:	683b      	ldr	r3, [r7, #0]
 800374c:	685b      	ldr	r3, [r3, #4]
 800374e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003752:	2b00      	cmp	r3, #0
 8003754:	d003      	beq.n	800375e <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8003756:	69ba      	ldr	r2, [r7, #24]
 8003758:	693b      	ldr	r3, [r7, #16]
 800375a:	4313      	orrs	r3, r2
 800375c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800375e:	4a31      	ldr	r2, [pc, #196]	; (8003824 <HAL_GPIO_Init+0x330>)
 8003760:	69bb      	ldr	r3, [r7, #24]
 8003762:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8003764:	4b2f      	ldr	r3, [pc, #188]	; (8003824 <HAL_GPIO_Init+0x330>)
 8003766:	685b      	ldr	r3, [r3, #4]
 8003768:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800376a:	693b      	ldr	r3, [r7, #16]
 800376c:	43db      	mvns	r3, r3
 800376e:	69ba      	ldr	r2, [r7, #24]
 8003770:	4013      	ands	r3, r2
 8003772:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003774:	683b      	ldr	r3, [r7, #0]
 8003776:	685b      	ldr	r3, [r3, #4]
 8003778:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800377c:	2b00      	cmp	r3, #0
 800377e:	d003      	beq.n	8003788 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8003780:	69ba      	ldr	r2, [r7, #24]
 8003782:	693b      	ldr	r3, [r7, #16]
 8003784:	4313      	orrs	r3, r2
 8003786:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003788:	4a26      	ldr	r2, [pc, #152]	; (8003824 <HAL_GPIO_Init+0x330>)
 800378a:	69bb      	ldr	r3, [r7, #24]
 800378c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800378e:	4b25      	ldr	r3, [pc, #148]	; (8003824 <HAL_GPIO_Init+0x330>)
 8003790:	689b      	ldr	r3, [r3, #8]
 8003792:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003794:	693b      	ldr	r3, [r7, #16]
 8003796:	43db      	mvns	r3, r3
 8003798:	69ba      	ldr	r2, [r7, #24]
 800379a:	4013      	ands	r3, r2
 800379c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800379e:	683b      	ldr	r3, [r7, #0]
 80037a0:	685b      	ldr	r3, [r3, #4]
 80037a2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80037a6:	2b00      	cmp	r3, #0
 80037a8:	d003      	beq.n	80037b2 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80037aa:	69ba      	ldr	r2, [r7, #24]
 80037ac:	693b      	ldr	r3, [r7, #16]
 80037ae:	4313      	orrs	r3, r2
 80037b0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80037b2:	4a1c      	ldr	r2, [pc, #112]	; (8003824 <HAL_GPIO_Init+0x330>)
 80037b4:	69bb      	ldr	r3, [r7, #24]
 80037b6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80037b8:	4b1a      	ldr	r3, [pc, #104]	; (8003824 <HAL_GPIO_Init+0x330>)
 80037ba:	68db      	ldr	r3, [r3, #12]
 80037bc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80037be:	693b      	ldr	r3, [r7, #16]
 80037c0:	43db      	mvns	r3, r3
 80037c2:	69ba      	ldr	r2, [r7, #24]
 80037c4:	4013      	ands	r3, r2
 80037c6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80037c8:	683b      	ldr	r3, [r7, #0]
 80037ca:	685b      	ldr	r3, [r3, #4]
 80037cc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80037d0:	2b00      	cmp	r3, #0
 80037d2:	d003      	beq.n	80037dc <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80037d4:	69ba      	ldr	r2, [r7, #24]
 80037d6:	693b      	ldr	r3, [r7, #16]
 80037d8:	4313      	orrs	r3, r2
 80037da:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80037dc:	4a11      	ldr	r2, [pc, #68]	; (8003824 <HAL_GPIO_Init+0x330>)
 80037de:	69bb      	ldr	r3, [r7, #24]
 80037e0:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80037e2:	69fb      	ldr	r3, [r7, #28]
 80037e4:	3301      	adds	r3, #1
 80037e6:	61fb      	str	r3, [r7, #28]
 80037e8:	69fb      	ldr	r3, [r7, #28]
 80037ea:	2b0f      	cmp	r3, #15
 80037ec:	f67f ae90 	bls.w	8003510 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80037f0:	bf00      	nop
 80037f2:	3724      	adds	r7, #36	; 0x24
 80037f4:	46bd      	mov	sp, r7
 80037f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037fa:	4770      	bx	lr
 80037fc:	40023800 	.word	0x40023800
 8003800:	40013800 	.word	0x40013800
 8003804:	40020000 	.word	0x40020000
 8003808:	40020400 	.word	0x40020400
 800380c:	40020800 	.word	0x40020800
 8003810:	40020c00 	.word	0x40020c00
 8003814:	40021000 	.word	0x40021000
 8003818:	40021400 	.word	0x40021400
 800381c:	40021800 	.word	0x40021800
 8003820:	40021c00 	.word	0x40021c00
 8003824:	40013c00 	.word	0x40013c00

08003828 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003828:	b480      	push	{r7}
 800382a:	b085      	sub	sp, #20
 800382c:	af00      	add	r7, sp, #0
 800382e:	6078      	str	r0, [r7, #4]
 8003830:	460b      	mov	r3, r1
 8003832:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	691a      	ldr	r2, [r3, #16]
 8003838:	887b      	ldrh	r3, [r7, #2]
 800383a:	4013      	ands	r3, r2
 800383c:	2b00      	cmp	r3, #0
 800383e:	d002      	beq.n	8003846 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003840:	2301      	movs	r3, #1
 8003842:	73fb      	strb	r3, [r7, #15]
 8003844:	e001      	b.n	800384a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003846:	2300      	movs	r3, #0
 8003848:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800384a:	7bfb      	ldrb	r3, [r7, #15]
}
 800384c:	4618      	mov	r0, r3
 800384e:	3714      	adds	r7, #20
 8003850:	46bd      	mov	sp, r7
 8003852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003856:	4770      	bx	lr

08003858 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003858:	b480      	push	{r7}
 800385a:	b083      	sub	sp, #12
 800385c:	af00      	add	r7, sp, #0
 800385e:	6078      	str	r0, [r7, #4]
 8003860:	460b      	mov	r3, r1
 8003862:	807b      	strh	r3, [r7, #2]
 8003864:	4613      	mov	r3, r2
 8003866:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003868:	787b      	ldrb	r3, [r7, #1]
 800386a:	2b00      	cmp	r3, #0
 800386c:	d003      	beq.n	8003876 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800386e:	887a      	ldrh	r2, [r7, #2]
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003874:	e003      	b.n	800387e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003876:	887b      	ldrh	r3, [r7, #2]
 8003878:	041a      	lsls	r2, r3, #16
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	619a      	str	r2, [r3, #24]
}
 800387e:	bf00      	nop
 8003880:	370c      	adds	r7, #12
 8003882:	46bd      	mov	sp, r7
 8003884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003888:	4770      	bx	lr

0800388a <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800388a:	b480      	push	{r7}
 800388c:	b083      	sub	sp, #12
 800388e:	af00      	add	r7, sp, #0
 8003890:	6078      	str	r0, [r7, #4]
 8003892:	460b      	mov	r3, r1
 8003894:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	695a      	ldr	r2, [r3, #20]
 800389a:	887b      	ldrh	r3, [r7, #2]
 800389c:	401a      	ands	r2, r3
 800389e:	887b      	ldrh	r3, [r7, #2]
 80038a0:	429a      	cmp	r2, r3
 80038a2:	d104      	bne.n	80038ae <HAL_GPIO_TogglePin+0x24>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 80038a4:	887b      	ldrh	r3, [r7, #2]
 80038a6:	041a      	lsls	r2, r3, #16
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
  }
}
 80038ac:	e002      	b.n	80038b4 <HAL_GPIO_TogglePin+0x2a>
    GPIOx->BSRR = GPIO_Pin;
 80038ae:	887a      	ldrh	r2, [r7, #2]
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	619a      	str	r2, [r3, #24]
}
 80038b4:	bf00      	nop
 80038b6:	370c      	adds	r7, #12
 80038b8:	46bd      	mov	sp, r7
 80038ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038be:	4770      	bx	lr

080038c0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80038c0:	b580      	push	{r7, lr}
 80038c2:	b084      	sub	sp, #16
 80038c4:	af00      	add	r7, sp, #0
 80038c6:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	2b00      	cmp	r3, #0
 80038cc:	d101      	bne.n	80038d2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80038ce:	2301      	movs	r3, #1
 80038d0:	e11f      	b.n	8003b12 <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80038d8:	b2db      	uxtb	r3, r3
 80038da:	2b00      	cmp	r3, #0
 80038dc:	d106      	bne.n	80038ec <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	2200      	movs	r2, #0
 80038e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80038e6:	6878      	ldr	r0, [r7, #4]
 80038e8:	f7fe fe08 	bl	80024fc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	2224      	movs	r2, #36	; 0x24
 80038f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	681a      	ldr	r2, [r3, #0]
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	f022 0201 	bic.w	r2, r2, #1
 8003902:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	681a      	ldr	r2, [r3, #0]
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003912:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	681a      	ldr	r2, [r3, #0]
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003922:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003924:	f001 f974 	bl	8004c10 <HAL_RCC_GetPCLK1Freq>
 8003928:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	685b      	ldr	r3, [r3, #4]
 800392e:	4a7b      	ldr	r2, [pc, #492]	; (8003b1c <HAL_I2C_Init+0x25c>)
 8003930:	4293      	cmp	r3, r2
 8003932:	d807      	bhi.n	8003944 <HAL_I2C_Init+0x84>
 8003934:	68fb      	ldr	r3, [r7, #12]
 8003936:	4a7a      	ldr	r2, [pc, #488]	; (8003b20 <HAL_I2C_Init+0x260>)
 8003938:	4293      	cmp	r3, r2
 800393a:	bf94      	ite	ls
 800393c:	2301      	movls	r3, #1
 800393e:	2300      	movhi	r3, #0
 8003940:	b2db      	uxtb	r3, r3
 8003942:	e006      	b.n	8003952 <HAL_I2C_Init+0x92>
 8003944:	68fb      	ldr	r3, [r7, #12]
 8003946:	4a77      	ldr	r2, [pc, #476]	; (8003b24 <HAL_I2C_Init+0x264>)
 8003948:	4293      	cmp	r3, r2
 800394a:	bf94      	ite	ls
 800394c:	2301      	movls	r3, #1
 800394e:	2300      	movhi	r3, #0
 8003950:	b2db      	uxtb	r3, r3
 8003952:	2b00      	cmp	r3, #0
 8003954:	d001      	beq.n	800395a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003956:	2301      	movs	r3, #1
 8003958:	e0db      	b.n	8003b12 <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800395a:	68fb      	ldr	r3, [r7, #12]
 800395c:	4a72      	ldr	r2, [pc, #456]	; (8003b28 <HAL_I2C_Init+0x268>)
 800395e:	fba2 2303 	umull	r2, r3, r2, r3
 8003962:	0c9b      	lsrs	r3, r3, #18
 8003964:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	685b      	ldr	r3, [r3, #4]
 800396c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	68ba      	ldr	r2, [r7, #8]
 8003976:	430a      	orrs	r2, r1
 8003978:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	6a1b      	ldr	r3, [r3, #32]
 8003980:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	685b      	ldr	r3, [r3, #4]
 8003988:	4a64      	ldr	r2, [pc, #400]	; (8003b1c <HAL_I2C_Init+0x25c>)
 800398a:	4293      	cmp	r3, r2
 800398c:	d802      	bhi.n	8003994 <HAL_I2C_Init+0xd4>
 800398e:	68bb      	ldr	r3, [r7, #8]
 8003990:	3301      	adds	r3, #1
 8003992:	e009      	b.n	80039a8 <HAL_I2C_Init+0xe8>
 8003994:	68bb      	ldr	r3, [r7, #8]
 8003996:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800399a:	fb02 f303 	mul.w	r3, r2, r3
 800399e:	4a63      	ldr	r2, [pc, #396]	; (8003b2c <HAL_I2C_Init+0x26c>)
 80039a0:	fba2 2303 	umull	r2, r3, r2, r3
 80039a4:	099b      	lsrs	r3, r3, #6
 80039a6:	3301      	adds	r3, #1
 80039a8:	687a      	ldr	r2, [r7, #4]
 80039aa:	6812      	ldr	r2, [r2, #0]
 80039ac:	430b      	orrs	r3, r1
 80039ae:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	69db      	ldr	r3, [r3, #28]
 80039b6:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80039ba:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	685b      	ldr	r3, [r3, #4]
 80039c2:	4956      	ldr	r1, [pc, #344]	; (8003b1c <HAL_I2C_Init+0x25c>)
 80039c4:	428b      	cmp	r3, r1
 80039c6:	d80d      	bhi.n	80039e4 <HAL_I2C_Init+0x124>
 80039c8:	68fb      	ldr	r3, [r7, #12]
 80039ca:	1e59      	subs	r1, r3, #1
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	685b      	ldr	r3, [r3, #4]
 80039d0:	005b      	lsls	r3, r3, #1
 80039d2:	fbb1 f3f3 	udiv	r3, r1, r3
 80039d6:	3301      	adds	r3, #1
 80039d8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80039dc:	2b04      	cmp	r3, #4
 80039de:	bf38      	it	cc
 80039e0:	2304      	movcc	r3, #4
 80039e2:	e04f      	b.n	8003a84 <HAL_I2C_Init+0x1c4>
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	689b      	ldr	r3, [r3, #8]
 80039e8:	2b00      	cmp	r3, #0
 80039ea:	d111      	bne.n	8003a10 <HAL_I2C_Init+0x150>
 80039ec:	68fb      	ldr	r3, [r7, #12]
 80039ee:	1e58      	subs	r0, r3, #1
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	6859      	ldr	r1, [r3, #4]
 80039f4:	460b      	mov	r3, r1
 80039f6:	005b      	lsls	r3, r3, #1
 80039f8:	440b      	add	r3, r1
 80039fa:	fbb0 f3f3 	udiv	r3, r0, r3
 80039fe:	3301      	adds	r3, #1
 8003a00:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003a04:	2b00      	cmp	r3, #0
 8003a06:	bf0c      	ite	eq
 8003a08:	2301      	moveq	r3, #1
 8003a0a:	2300      	movne	r3, #0
 8003a0c:	b2db      	uxtb	r3, r3
 8003a0e:	e012      	b.n	8003a36 <HAL_I2C_Init+0x176>
 8003a10:	68fb      	ldr	r3, [r7, #12]
 8003a12:	1e58      	subs	r0, r3, #1
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	6859      	ldr	r1, [r3, #4]
 8003a18:	460b      	mov	r3, r1
 8003a1a:	009b      	lsls	r3, r3, #2
 8003a1c:	440b      	add	r3, r1
 8003a1e:	0099      	lsls	r1, r3, #2
 8003a20:	440b      	add	r3, r1
 8003a22:	fbb0 f3f3 	udiv	r3, r0, r3
 8003a26:	3301      	adds	r3, #1
 8003a28:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003a2c:	2b00      	cmp	r3, #0
 8003a2e:	bf0c      	ite	eq
 8003a30:	2301      	moveq	r3, #1
 8003a32:	2300      	movne	r3, #0
 8003a34:	b2db      	uxtb	r3, r3
 8003a36:	2b00      	cmp	r3, #0
 8003a38:	d001      	beq.n	8003a3e <HAL_I2C_Init+0x17e>
 8003a3a:	2301      	movs	r3, #1
 8003a3c:	e022      	b.n	8003a84 <HAL_I2C_Init+0x1c4>
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	689b      	ldr	r3, [r3, #8]
 8003a42:	2b00      	cmp	r3, #0
 8003a44:	d10e      	bne.n	8003a64 <HAL_I2C_Init+0x1a4>
 8003a46:	68fb      	ldr	r3, [r7, #12]
 8003a48:	1e58      	subs	r0, r3, #1
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	6859      	ldr	r1, [r3, #4]
 8003a4e:	460b      	mov	r3, r1
 8003a50:	005b      	lsls	r3, r3, #1
 8003a52:	440b      	add	r3, r1
 8003a54:	fbb0 f3f3 	udiv	r3, r0, r3
 8003a58:	3301      	adds	r3, #1
 8003a5a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003a5e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003a62:	e00f      	b.n	8003a84 <HAL_I2C_Init+0x1c4>
 8003a64:	68fb      	ldr	r3, [r7, #12]
 8003a66:	1e58      	subs	r0, r3, #1
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	6859      	ldr	r1, [r3, #4]
 8003a6c:	460b      	mov	r3, r1
 8003a6e:	009b      	lsls	r3, r3, #2
 8003a70:	440b      	add	r3, r1
 8003a72:	0099      	lsls	r1, r3, #2
 8003a74:	440b      	add	r3, r1
 8003a76:	fbb0 f3f3 	udiv	r3, r0, r3
 8003a7a:	3301      	adds	r3, #1
 8003a7c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003a80:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003a84:	6879      	ldr	r1, [r7, #4]
 8003a86:	6809      	ldr	r1, [r1, #0]
 8003a88:	4313      	orrs	r3, r2
 8003a8a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	69da      	ldr	r2, [r3, #28]
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	6a1b      	ldr	r3, [r3, #32]
 8003a9e:	431a      	orrs	r2, r3
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	430a      	orrs	r2, r1
 8003aa6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	689b      	ldr	r3, [r3, #8]
 8003aae:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8003ab2:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003ab6:	687a      	ldr	r2, [r7, #4]
 8003ab8:	6911      	ldr	r1, [r2, #16]
 8003aba:	687a      	ldr	r2, [r7, #4]
 8003abc:	68d2      	ldr	r2, [r2, #12]
 8003abe:	4311      	orrs	r1, r2
 8003ac0:	687a      	ldr	r2, [r7, #4]
 8003ac2:	6812      	ldr	r2, [r2, #0]
 8003ac4:	430b      	orrs	r3, r1
 8003ac6:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	68db      	ldr	r3, [r3, #12]
 8003ace:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	695a      	ldr	r2, [r3, #20]
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	699b      	ldr	r3, [r3, #24]
 8003ada:	431a      	orrs	r2, r3
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	430a      	orrs	r2, r1
 8003ae2:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	681a      	ldr	r2, [r3, #0]
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	f042 0201 	orr.w	r2, r2, #1
 8003af2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	2200      	movs	r2, #0
 8003af8:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	2220      	movs	r2, #32
 8003afe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	2200      	movs	r2, #0
 8003b06:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	2200      	movs	r2, #0
 8003b0c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003b10:	2300      	movs	r3, #0
}
 8003b12:	4618      	mov	r0, r3
 8003b14:	3710      	adds	r7, #16
 8003b16:	46bd      	mov	sp, r7
 8003b18:	bd80      	pop	{r7, pc}
 8003b1a:	bf00      	nop
 8003b1c:	000186a0 	.word	0x000186a0
 8003b20:	001e847f 	.word	0x001e847f
 8003b24:	003d08ff 	.word	0x003d08ff
 8003b28:	431bde83 	.word	0x431bde83
 8003b2c:	10624dd3 	.word	0x10624dd3

08003b30 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003b30:	b580      	push	{r7, lr}
 8003b32:	b088      	sub	sp, #32
 8003b34:	af02      	add	r7, sp, #8
 8003b36:	60f8      	str	r0, [r7, #12]
 8003b38:	607a      	str	r2, [r7, #4]
 8003b3a:	461a      	mov	r2, r3
 8003b3c:	460b      	mov	r3, r1
 8003b3e:	817b      	strh	r3, [r7, #10]
 8003b40:	4613      	mov	r3, r2
 8003b42:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003b44:	f7ff f9ac 	bl	8002ea0 <HAL_GetTick>
 8003b48:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003b4a:	68fb      	ldr	r3, [r7, #12]
 8003b4c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003b50:	b2db      	uxtb	r3, r3
 8003b52:	2b20      	cmp	r3, #32
 8003b54:	f040 80e0 	bne.w	8003d18 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003b58:	697b      	ldr	r3, [r7, #20]
 8003b5a:	9300      	str	r3, [sp, #0]
 8003b5c:	2319      	movs	r3, #25
 8003b5e:	2201      	movs	r2, #1
 8003b60:	4970      	ldr	r1, [pc, #448]	; (8003d24 <HAL_I2C_Master_Transmit+0x1f4>)
 8003b62:	68f8      	ldr	r0, [r7, #12]
 8003b64:	f000 fa92 	bl	800408c <I2C_WaitOnFlagUntilTimeout>
 8003b68:	4603      	mov	r3, r0
 8003b6a:	2b00      	cmp	r3, #0
 8003b6c:	d001      	beq.n	8003b72 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8003b6e:	2302      	movs	r3, #2
 8003b70:	e0d3      	b.n	8003d1a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003b72:	68fb      	ldr	r3, [r7, #12]
 8003b74:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003b78:	2b01      	cmp	r3, #1
 8003b7a:	d101      	bne.n	8003b80 <HAL_I2C_Master_Transmit+0x50>
 8003b7c:	2302      	movs	r3, #2
 8003b7e:	e0cc      	b.n	8003d1a <HAL_I2C_Master_Transmit+0x1ea>
 8003b80:	68fb      	ldr	r3, [r7, #12]
 8003b82:	2201      	movs	r2, #1
 8003b84:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003b88:	68fb      	ldr	r3, [r7, #12]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	f003 0301 	and.w	r3, r3, #1
 8003b92:	2b01      	cmp	r3, #1
 8003b94:	d007      	beq.n	8003ba6 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003b96:	68fb      	ldr	r3, [r7, #12]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	681a      	ldr	r2, [r3, #0]
 8003b9c:	68fb      	ldr	r3, [r7, #12]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	f042 0201 	orr.w	r2, r2, #1
 8003ba4:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003ba6:	68fb      	ldr	r3, [r7, #12]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	681a      	ldr	r2, [r3, #0]
 8003bac:	68fb      	ldr	r3, [r7, #12]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003bb4:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8003bb6:	68fb      	ldr	r3, [r7, #12]
 8003bb8:	2221      	movs	r2, #33	; 0x21
 8003bba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8003bbe:	68fb      	ldr	r3, [r7, #12]
 8003bc0:	2210      	movs	r2, #16
 8003bc2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8003bc6:	68fb      	ldr	r3, [r7, #12]
 8003bc8:	2200      	movs	r2, #0
 8003bca:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003bcc:	68fb      	ldr	r3, [r7, #12]
 8003bce:	687a      	ldr	r2, [r7, #4]
 8003bd0:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003bd2:	68fb      	ldr	r3, [r7, #12]
 8003bd4:	893a      	ldrh	r2, [r7, #8]
 8003bd6:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003bd8:	68fb      	ldr	r3, [r7, #12]
 8003bda:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003bdc:	b29a      	uxth	r2, r3
 8003bde:	68fb      	ldr	r3, [r7, #12]
 8003be0:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003be2:	68fb      	ldr	r3, [r7, #12]
 8003be4:	4a50      	ldr	r2, [pc, #320]	; (8003d28 <HAL_I2C_Master_Transmit+0x1f8>)
 8003be6:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8003be8:	8979      	ldrh	r1, [r7, #10]
 8003bea:	697b      	ldr	r3, [r7, #20]
 8003bec:	6a3a      	ldr	r2, [r7, #32]
 8003bee:	68f8      	ldr	r0, [r7, #12]
 8003bf0:	f000 f9ca 	bl	8003f88 <I2C_MasterRequestWrite>
 8003bf4:	4603      	mov	r3, r0
 8003bf6:	2b00      	cmp	r3, #0
 8003bf8:	d001      	beq.n	8003bfe <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8003bfa:	2301      	movs	r3, #1
 8003bfc:	e08d      	b.n	8003d1a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003bfe:	2300      	movs	r3, #0
 8003c00:	613b      	str	r3, [r7, #16]
 8003c02:	68fb      	ldr	r3, [r7, #12]
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	695b      	ldr	r3, [r3, #20]
 8003c08:	613b      	str	r3, [r7, #16]
 8003c0a:	68fb      	ldr	r3, [r7, #12]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	699b      	ldr	r3, [r3, #24]
 8003c10:	613b      	str	r3, [r7, #16]
 8003c12:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8003c14:	e066      	b.n	8003ce4 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003c16:	697a      	ldr	r2, [r7, #20]
 8003c18:	6a39      	ldr	r1, [r7, #32]
 8003c1a:	68f8      	ldr	r0, [r7, #12]
 8003c1c:	f000 fb0c 	bl	8004238 <I2C_WaitOnTXEFlagUntilTimeout>
 8003c20:	4603      	mov	r3, r0
 8003c22:	2b00      	cmp	r3, #0
 8003c24:	d00d      	beq.n	8003c42 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003c26:	68fb      	ldr	r3, [r7, #12]
 8003c28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c2a:	2b04      	cmp	r3, #4
 8003c2c:	d107      	bne.n	8003c3e <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003c2e:	68fb      	ldr	r3, [r7, #12]
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	681a      	ldr	r2, [r3, #0]
 8003c34:	68fb      	ldr	r3, [r7, #12]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003c3c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003c3e:	2301      	movs	r3, #1
 8003c40:	e06b      	b.n	8003d1a <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003c42:	68fb      	ldr	r3, [r7, #12]
 8003c44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c46:	781a      	ldrb	r2, [r3, #0]
 8003c48:	68fb      	ldr	r3, [r7, #12]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003c4e:	68fb      	ldr	r3, [r7, #12]
 8003c50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c52:	1c5a      	adds	r2, r3, #1
 8003c54:	68fb      	ldr	r3, [r7, #12]
 8003c56:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003c58:	68fb      	ldr	r3, [r7, #12]
 8003c5a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c5c:	b29b      	uxth	r3, r3
 8003c5e:	3b01      	subs	r3, #1
 8003c60:	b29a      	uxth	r2, r3
 8003c62:	68fb      	ldr	r3, [r7, #12]
 8003c64:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8003c66:	68fb      	ldr	r3, [r7, #12]
 8003c68:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003c6a:	3b01      	subs	r3, #1
 8003c6c:	b29a      	uxth	r2, r3
 8003c6e:	68fb      	ldr	r3, [r7, #12]
 8003c70:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003c72:	68fb      	ldr	r3, [r7, #12]
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	695b      	ldr	r3, [r3, #20]
 8003c78:	f003 0304 	and.w	r3, r3, #4
 8003c7c:	2b04      	cmp	r3, #4
 8003c7e:	d11b      	bne.n	8003cb8 <HAL_I2C_Master_Transmit+0x188>
 8003c80:	68fb      	ldr	r3, [r7, #12]
 8003c82:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003c84:	2b00      	cmp	r3, #0
 8003c86:	d017      	beq.n	8003cb8 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003c88:	68fb      	ldr	r3, [r7, #12]
 8003c8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c8c:	781a      	ldrb	r2, [r3, #0]
 8003c8e:	68fb      	ldr	r3, [r7, #12]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003c94:	68fb      	ldr	r3, [r7, #12]
 8003c96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c98:	1c5a      	adds	r2, r3, #1
 8003c9a:	68fb      	ldr	r3, [r7, #12]
 8003c9c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8003c9e:	68fb      	ldr	r3, [r7, #12]
 8003ca0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ca2:	b29b      	uxth	r3, r3
 8003ca4:	3b01      	subs	r3, #1
 8003ca6:	b29a      	uxth	r2, r3
 8003ca8:	68fb      	ldr	r3, [r7, #12]
 8003caa:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8003cac:	68fb      	ldr	r3, [r7, #12]
 8003cae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003cb0:	3b01      	subs	r3, #1
 8003cb2:	b29a      	uxth	r2, r3
 8003cb4:	68fb      	ldr	r3, [r7, #12]
 8003cb6:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003cb8:	697a      	ldr	r2, [r7, #20]
 8003cba:	6a39      	ldr	r1, [r7, #32]
 8003cbc:	68f8      	ldr	r0, [r7, #12]
 8003cbe:	f000 fafc 	bl	80042ba <I2C_WaitOnBTFFlagUntilTimeout>
 8003cc2:	4603      	mov	r3, r0
 8003cc4:	2b00      	cmp	r3, #0
 8003cc6:	d00d      	beq.n	8003ce4 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003cc8:	68fb      	ldr	r3, [r7, #12]
 8003cca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ccc:	2b04      	cmp	r3, #4
 8003cce:	d107      	bne.n	8003ce0 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003cd0:	68fb      	ldr	r3, [r7, #12]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	681a      	ldr	r2, [r3, #0]
 8003cd6:	68fb      	ldr	r3, [r7, #12]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003cde:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003ce0:	2301      	movs	r3, #1
 8003ce2:	e01a      	b.n	8003d1a <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8003ce4:	68fb      	ldr	r3, [r7, #12]
 8003ce6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003ce8:	2b00      	cmp	r3, #0
 8003cea:	d194      	bne.n	8003c16 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003cec:	68fb      	ldr	r3, [r7, #12]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	681a      	ldr	r2, [r3, #0]
 8003cf2:	68fb      	ldr	r3, [r7, #12]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003cfa:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003cfc:	68fb      	ldr	r3, [r7, #12]
 8003cfe:	2220      	movs	r2, #32
 8003d00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003d04:	68fb      	ldr	r3, [r7, #12]
 8003d06:	2200      	movs	r2, #0
 8003d08:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003d0c:	68fb      	ldr	r3, [r7, #12]
 8003d0e:	2200      	movs	r2, #0
 8003d10:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003d14:	2300      	movs	r3, #0
 8003d16:	e000      	b.n	8003d1a <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8003d18:	2302      	movs	r3, #2
  }
}
 8003d1a:	4618      	mov	r0, r3
 8003d1c:	3718      	adds	r7, #24
 8003d1e:	46bd      	mov	sp, r7
 8003d20:	bd80      	pop	{r7, pc}
 8003d22:	bf00      	nop
 8003d24:	00100002 	.word	0x00100002
 8003d28:	ffff0000 	.word	0xffff0000

08003d2c <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8003d2c:	b580      	push	{r7, lr}
 8003d2e:	b08a      	sub	sp, #40	; 0x28
 8003d30:	af02      	add	r7, sp, #8
 8003d32:	60f8      	str	r0, [r7, #12]
 8003d34:	607a      	str	r2, [r7, #4]
 8003d36:	603b      	str	r3, [r7, #0]
 8003d38:	460b      	mov	r3, r1
 8003d3a:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8003d3c:	f7ff f8b0 	bl	8002ea0 <HAL_GetTick>
 8003d40:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 1U;
 8003d42:	2301      	movs	r3, #1
 8003d44:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003d46:	68fb      	ldr	r3, [r7, #12]
 8003d48:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003d4c:	b2db      	uxtb	r3, r3
 8003d4e:	2b20      	cmp	r3, #32
 8003d50:	f040 8110 	bne.w	8003f74 <HAL_I2C_IsDeviceReady+0x248>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003d54:	69fb      	ldr	r3, [r7, #28]
 8003d56:	9300      	str	r3, [sp, #0]
 8003d58:	2319      	movs	r3, #25
 8003d5a:	2201      	movs	r2, #1
 8003d5c:	4988      	ldr	r1, [pc, #544]	; (8003f80 <HAL_I2C_IsDeviceReady+0x254>)
 8003d5e:	68f8      	ldr	r0, [r7, #12]
 8003d60:	f000 f994 	bl	800408c <I2C_WaitOnFlagUntilTimeout>
 8003d64:	4603      	mov	r3, r0
 8003d66:	2b00      	cmp	r3, #0
 8003d68:	d001      	beq.n	8003d6e <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 8003d6a:	2302      	movs	r3, #2
 8003d6c:	e103      	b.n	8003f76 <HAL_I2C_IsDeviceReady+0x24a>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003d6e:	68fb      	ldr	r3, [r7, #12]
 8003d70:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003d74:	2b01      	cmp	r3, #1
 8003d76:	d101      	bne.n	8003d7c <HAL_I2C_IsDeviceReady+0x50>
 8003d78:	2302      	movs	r3, #2
 8003d7a:	e0fc      	b.n	8003f76 <HAL_I2C_IsDeviceReady+0x24a>
 8003d7c:	68fb      	ldr	r3, [r7, #12]
 8003d7e:	2201      	movs	r2, #1
 8003d80:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003d84:	68fb      	ldr	r3, [r7, #12]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	f003 0301 	and.w	r3, r3, #1
 8003d8e:	2b01      	cmp	r3, #1
 8003d90:	d007      	beq.n	8003da2 <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003d92:	68fb      	ldr	r3, [r7, #12]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	681a      	ldr	r2, [r3, #0]
 8003d98:	68fb      	ldr	r3, [r7, #12]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	f042 0201 	orr.w	r2, r2, #1
 8003da0:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003da2:	68fb      	ldr	r3, [r7, #12]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	681a      	ldr	r2, [r3, #0]
 8003da8:	68fb      	ldr	r3, [r7, #12]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003db0:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003db2:	68fb      	ldr	r3, [r7, #12]
 8003db4:	2224      	movs	r2, #36	; 0x24
 8003db6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003dba:	68fb      	ldr	r3, [r7, #12]
 8003dbc:	2200      	movs	r2, #0
 8003dbe:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003dc0:	68fb      	ldr	r3, [r7, #12]
 8003dc2:	4a70      	ldr	r2, [pc, #448]	; (8003f84 <HAL_I2C_IsDeviceReady+0x258>)
 8003dc4:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003dc6:	68fb      	ldr	r3, [r7, #12]
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	681a      	ldr	r2, [r3, #0]
 8003dcc:	68fb      	ldr	r3, [r7, #12]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003dd4:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 8003dd6:	69fb      	ldr	r3, [r7, #28]
 8003dd8:	9300      	str	r3, [sp, #0]
 8003dda:	683b      	ldr	r3, [r7, #0]
 8003ddc:	2200      	movs	r2, #0
 8003dde:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003de2:	68f8      	ldr	r0, [r7, #12]
 8003de4:	f000 f952 	bl	800408c <I2C_WaitOnFlagUntilTimeout>
 8003de8:	4603      	mov	r3, r0
 8003dea:	2b00      	cmp	r3, #0
 8003dec:	d00c      	beq.n	8003e08 <HAL_I2C_IsDeviceReady+0xdc>
      {
        if (hi2c->Instance->CR1 & I2C_CR1_START)
 8003dee:	68fb      	ldr	r3, [r7, #12]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003df8:	2b00      	cmp	r3, #0
 8003dfa:	d003      	beq.n	8003e04 <HAL_I2C_IsDeviceReady+0xd8>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003dfc:	68fb      	ldr	r3, [r7, #12]
 8003dfe:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003e02:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 8003e04:	2303      	movs	r3, #3
 8003e06:	e0b6      	b.n	8003f76 <HAL_I2C_IsDeviceReady+0x24a>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003e08:	897b      	ldrh	r3, [r7, #10]
 8003e0a:	b2db      	uxtb	r3, r3
 8003e0c:	461a      	mov	r2, r3
 8003e0e:	68fb      	ldr	r3, [r7, #12]
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003e16:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 8003e18:	f7ff f842 	bl	8002ea0 <HAL_GetTick>
 8003e1c:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8003e1e:	68fb      	ldr	r3, [r7, #12]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	695b      	ldr	r3, [r3, #20]
 8003e24:	f003 0302 	and.w	r3, r3, #2
 8003e28:	2b02      	cmp	r3, #2
 8003e2a:	bf0c      	ite	eq
 8003e2c:	2301      	moveq	r3, #1
 8003e2e:	2300      	movne	r3, #0
 8003e30:	b2db      	uxtb	r3, r3
 8003e32:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8003e34:	68fb      	ldr	r3, [r7, #12]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	695b      	ldr	r3, [r3, #20]
 8003e3a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003e3e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003e42:	bf0c      	ite	eq
 8003e44:	2301      	moveq	r3, #1
 8003e46:	2300      	movne	r3, #0
 8003e48:	b2db      	uxtb	r3, r3
 8003e4a:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8003e4c:	e025      	b.n	8003e9a <HAL_I2C_IsDeviceReady+0x16e>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8003e4e:	f7ff f827 	bl	8002ea0 <HAL_GetTick>
 8003e52:	4602      	mov	r2, r0
 8003e54:	69fb      	ldr	r3, [r7, #28]
 8003e56:	1ad3      	subs	r3, r2, r3
 8003e58:	683a      	ldr	r2, [r7, #0]
 8003e5a:	429a      	cmp	r2, r3
 8003e5c:	d302      	bcc.n	8003e64 <HAL_I2C_IsDeviceReady+0x138>
 8003e5e:	683b      	ldr	r3, [r7, #0]
 8003e60:	2b00      	cmp	r3, #0
 8003e62:	d103      	bne.n	8003e6c <HAL_I2C_IsDeviceReady+0x140>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 8003e64:	68fb      	ldr	r3, [r7, #12]
 8003e66:	22a0      	movs	r2, #160	; 0xa0
 8003e68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8003e6c:	68fb      	ldr	r3, [r7, #12]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	695b      	ldr	r3, [r3, #20]
 8003e72:	f003 0302 	and.w	r3, r3, #2
 8003e76:	2b02      	cmp	r3, #2
 8003e78:	bf0c      	ite	eq
 8003e7a:	2301      	moveq	r3, #1
 8003e7c:	2300      	movne	r3, #0
 8003e7e:	b2db      	uxtb	r3, r3
 8003e80:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8003e82:	68fb      	ldr	r3, [r7, #12]
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	695b      	ldr	r3, [r3, #20]
 8003e88:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003e8c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003e90:	bf0c      	ite	eq
 8003e92:	2301      	moveq	r3, #1
 8003e94:	2300      	movne	r3, #0
 8003e96:	b2db      	uxtb	r3, r3
 8003e98:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8003e9a:	68fb      	ldr	r3, [r7, #12]
 8003e9c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003ea0:	b2db      	uxtb	r3, r3
 8003ea2:	2ba0      	cmp	r3, #160	; 0xa0
 8003ea4:	d005      	beq.n	8003eb2 <HAL_I2C_IsDeviceReady+0x186>
 8003ea6:	7dfb      	ldrb	r3, [r7, #23]
 8003ea8:	2b00      	cmp	r3, #0
 8003eaa:	d102      	bne.n	8003eb2 <HAL_I2C_IsDeviceReady+0x186>
 8003eac:	7dbb      	ldrb	r3, [r7, #22]
 8003eae:	2b00      	cmp	r3, #0
 8003eb0:	d0cd      	beq.n	8003e4e <HAL_I2C_IsDeviceReady+0x122>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8003eb2:	68fb      	ldr	r3, [r7, #12]
 8003eb4:	2220      	movs	r2, #32
 8003eb6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8003eba:	68fb      	ldr	r3, [r7, #12]
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	695b      	ldr	r3, [r3, #20]
 8003ec0:	f003 0302 	and.w	r3, r3, #2
 8003ec4:	2b02      	cmp	r3, #2
 8003ec6:	d129      	bne.n	8003f1c <HAL_I2C_IsDeviceReady+0x1f0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003ec8:	68fb      	ldr	r3, [r7, #12]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	681a      	ldr	r2, [r3, #0]
 8003ece:	68fb      	ldr	r3, [r7, #12]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003ed6:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003ed8:	2300      	movs	r3, #0
 8003eda:	613b      	str	r3, [r7, #16]
 8003edc:	68fb      	ldr	r3, [r7, #12]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	695b      	ldr	r3, [r3, #20]
 8003ee2:	613b      	str	r3, [r7, #16]
 8003ee4:	68fb      	ldr	r3, [r7, #12]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	699b      	ldr	r3, [r3, #24]
 8003eea:	613b      	str	r3, [r7, #16]
 8003eec:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003eee:	69fb      	ldr	r3, [r7, #28]
 8003ef0:	9300      	str	r3, [sp, #0]
 8003ef2:	2319      	movs	r3, #25
 8003ef4:	2201      	movs	r2, #1
 8003ef6:	4922      	ldr	r1, [pc, #136]	; (8003f80 <HAL_I2C_IsDeviceReady+0x254>)
 8003ef8:	68f8      	ldr	r0, [r7, #12]
 8003efa:	f000 f8c7 	bl	800408c <I2C_WaitOnFlagUntilTimeout>
 8003efe:	4603      	mov	r3, r0
 8003f00:	2b00      	cmp	r3, #0
 8003f02:	d001      	beq.n	8003f08 <HAL_I2C_IsDeviceReady+0x1dc>
        {
          return HAL_ERROR;
 8003f04:	2301      	movs	r3, #1
 8003f06:	e036      	b.n	8003f76 <HAL_I2C_IsDeviceReady+0x24a>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 8003f08:	68fb      	ldr	r3, [r7, #12]
 8003f0a:	2220      	movs	r2, #32
 8003f0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003f10:	68fb      	ldr	r3, [r7, #12]
 8003f12:	2200      	movs	r2, #0
 8003f14:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 8003f18:	2300      	movs	r3, #0
 8003f1a:	e02c      	b.n	8003f76 <HAL_I2C_IsDeviceReady+0x24a>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003f1c:	68fb      	ldr	r3, [r7, #12]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	681a      	ldr	r2, [r3, #0]
 8003f22:	68fb      	ldr	r3, [r7, #12]
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003f2a:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003f2c:	68fb      	ldr	r3, [r7, #12]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003f34:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003f36:	69fb      	ldr	r3, [r7, #28]
 8003f38:	9300      	str	r3, [sp, #0]
 8003f3a:	2319      	movs	r3, #25
 8003f3c:	2201      	movs	r2, #1
 8003f3e:	4910      	ldr	r1, [pc, #64]	; (8003f80 <HAL_I2C_IsDeviceReady+0x254>)
 8003f40:	68f8      	ldr	r0, [r7, #12]
 8003f42:	f000 f8a3 	bl	800408c <I2C_WaitOnFlagUntilTimeout>
 8003f46:	4603      	mov	r3, r0
 8003f48:	2b00      	cmp	r3, #0
 8003f4a:	d001      	beq.n	8003f50 <HAL_I2C_IsDeviceReady+0x224>
        {
          return HAL_ERROR;
 8003f4c:	2301      	movs	r3, #1
 8003f4e:	e012      	b.n	8003f76 <HAL_I2C_IsDeviceReady+0x24a>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 8003f50:	69bb      	ldr	r3, [r7, #24]
 8003f52:	3301      	adds	r3, #1
 8003f54:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 8003f56:	69ba      	ldr	r2, [r7, #24]
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	429a      	cmp	r2, r3
 8003f5c:	f4ff af33 	bcc.w	8003dc6 <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 8003f60:	68fb      	ldr	r3, [r7, #12]
 8003f62:	2220      	movs	r2, #32
 8003f64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003f68:	68fb      	ldr	r3, [r7, #12]
 8003f6a:	2200      	movs	r2, #0
 8003f6c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8003f70:	2301      	movs	r3, #1
 8003f72:	e000      	b.n	8003f76 <HAL_I2C_IsDeviceReady+0x24a>
  }
  else
  {
    return HAL_BUSY;
 8003f74:	2302      	movs	r3, #2
  }
}
 8003f76:	4618      	mov	r0, r3
 8003f78:	3720      	adds	r7, #32
 8003f7a:	46bd      	mov	sp, r7
 8003f7c:	bd80      	pop	{r7, pc}
 8003f7e:	bf00      	nop
 8003f80:	00100002 	.word	0x00100002
 8003f84:	ffff0000 	.word	0xffff0000

08003f88 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8003f88:	b580      	push	{r7, lr}
 8003f8a:	b088      	sub	sp, #32
 8003f8c:	af02      	add	r7, sp, #8
 8003f8e:	60f8      	str	r0, [r7, #12]
 8003f90:	607a      	str	r2, [r7, #4]
 8003f92:	603b      	str	r3, [r7, #0]
 8003f94:	460b      	mov	r3, r1
 8003f96:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003f98:	68fb      	ldr	r3, [r7, #12]
 8003f9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f9c:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8003f9e:	697b      	ldr	r3, [r7, #20]
 8003fa0:	2b08      	cmp	r3, #8
 8003fa2:	d006      	beq.n	8003fb2 <I2C_MasterRequestWrite+0x2a>
 8003fa4:	697b      	ldr	r3, [r7, #20]
 8003fa6:	2b01      	cmp	r3, #1
 8003fa8:	d003      	beq.n	8003fb2 <I2C_MasterRequestWrite+0x2a>
 8003faa:	697b      	ldr	r3, [r7, #20]
 8003fac:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003fb0:	d108      	bne.n	8003fc4 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003fb2:	68fb      	ldr	r3, [r7, #12]
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	681a      	ldr	r2, [r3, #0]
 8003fb8:	68fb      	ldr	r3, [r7, #12]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003fc0:	601a      	str	r2, [r3, #0]
 8003fc2:	e00b      	b.n	8003fdc <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8003fc4:	68fb      	ldr	r3, [r7, #12]
 8003fc6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003fc8:	2b12      	cmp	r3, #18
 8003fca:	d107      	bne.n	8003fdc <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003fcc:	68fb      	ldr	r3, [r7, #12]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	681a      	ldr	r2, [r3, #0]
 8003fd2:	68fb      	ldr	r3, [r7, #12]
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003fda:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003fdc:	683b      	ldr	r3, [r7, #0]
 8003fde:	9300      	str	r3, [sp, #0]
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	2200      	movs	r2, #0
 8003fe4:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003fe8:	68f8      	ldr	r0, [r7, #12]
 8003fea:	f000 f84f 	bl	800408c <I2C_WaitOnFlagUntilTimeout>
 8003fee:	4603      	mov	r3, r0
 8003ff0:	2b00      	cmp	r3, #0
 8003ff2:	d00c      	beq.n	800400e <I2C_MasterRequestWrite+0x86>
  {
    if (hi2c->Instance->CR1 & I2C_CR1_START)
 8003ff4:	68fb      	ldr	r3, [r7, #12]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ffe:	2b00      	cmp	r3, #0
 8004000:	d003      	beq.n	800400a <I2C_MasterRequestWrite+0x82>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004002:	68fb      	ldr	r3, [r7, #12]
 8004004:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004008:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800400a:	2303      	movs	r3, #3
 800400c:	e035      	b.n	800407a <I2C_MasterRequestWrite+0xf2>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800400e:	68fb      	ldr	r3, [r7, #12]
 8004010:	691b      	ldr	r3, [r3, #16]
 8004012:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004016:	d108      	bne.n	800402a <I2C_MasterRequestWrite+0xa2>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004018:	897b      	ldrh	r3, [r7, #10]
 800401a:	b2db      	uxtb	r3, r3
 800401c:	461a      	mov	r2, r3
 800401e:	68fb      	ldr	r3, [r7, #12]
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004026:	611a      	str	r2, [r3, #16]
 8004028:	e01b      	b.n	8004062 <I2C_MasterRequestWrite+0xda>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 800402a:	897b      	ldrh	r3, [r7, #10]
 800402c:	11db      	asrs	r3, r3, #7
 800402e:	b2db      	uxtb	r3, r3
 8004030:	f003 0306 	and.w	r3, r3, #6
 8004034:	b2db      	uxtb	r3, r3
 8004036:	f063 030f 	orn	r3, r3, #15
 800403a:	b2da      	uxtb	r2, r3
 800403c:	68fb      	ldr	r3, [r7, #12]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8004042:	683b      	ldr	r3, [r7, #0]
 8004044:	687a      	ldr	r2, [r7, #4]
 8004046:	490f      	ldr	r1, [pc, #60]	; (8004084 <I2C_MasterRequestWrite+0xfc>)
 8004048:	68f8      	ldr	r0, [r7, #12]
 800404a:	f000 f876 	bl	800413a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800404e:	4603      	mov	r3, r0
 8004050:	2b00      	cmp	r3, #0
 8004052:	d001      	beq.n	8004058 <I2C_MasterRequestWrite+0xd0>
    {
      return HAL_ERROR;
 8004054:	2301      	movs	r3, #1
 8004056:	e010      	b.n	800407a <I2C_MasterRequestWrite+0xf2>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8004058:	897b      	ldrh	r3, [r7, #10]
 800405a:	b2da      	uxtb	r2, r3
 800405c:	68fb      	ldr	r3, [r7, #12]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004062:	683b      	ldr	r3, [r7, #0]
 8004064:	687a      	ldr	r2, [r7, #4]
 8004066:	4908      	ldr	r1, [pc, #32]	; (8004088 <I2C_MasterRequestWrite+0x100>)
 8004068:	68f8      	ldr	r0, [r7, #12]
 800406a:	f000 f866 	bl	800413a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800406e:	4603      	mov	r3, r0
 8004070:	2b00      	cmp	r3, #0
 8004072:	d001      	beq.n	8004078 <I2C_MasterRequestWrite+0xf0>
  {
    return HAL_ERROR;
 8004074:	2301      	movs	r3, #1
 8004076:	e000      	b.n	800407a <I2C_MasterRequestWrite+0xf2>
  }

  return HAL_OK;
 8004078:	2300      	movs	r3, #0
}
 800407a:	4618      	mov	r0, r3
 800407c:	3718      	adds	r7, #24
 800407e:	46bd      	mov	sp, r7
 8004080:	bd80      	pop	{r7, pc}
 8004082:	bf00      	nop
 8004084:	00010008 	.word	0x00010008
 8004088:	00010002 	.word	0x00010002

0800408c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800408c:	b580      	push	{r7, lr}
 800408e:	b084      	sub	sp, #16
 8004090:	af00      	add	r7, sp, #0
 8004092:	60f8      	str	r0, [r7, #12]
 8004094:	60b9      	str	r1, [r7, #8]
 8004096:	603b      	str	r3, [r7, #0]
 8004098:	4613      	mov	r3, r2
 800409a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800409c:	e025      	b.n	80040ea <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800409e:	683b      	ldr	r3, [r7, #0]
 80040a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80040a4:	d021      	beq.n	80040ea <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80040a6:	f7fe fefb 	bl	8002ea0 <HAL_GetTick>
 80040aa:	4602      	mov	r2, r0
 80040ac:	69bb      	ldr	r3, [r7, #24]
 80040ae:	1ad3      	subs	r3, r2, r3
 80040b0:	683a      	ldr	r2, [r7, #0]
 80040b2:	429a      	cmp	r2, r3
 80040b4:	d302      	bcc.n	80040bc <I2C_WaitOnFlagUntilTimeout+0x30>
 80040b6:	683b      	ldr	r3, [r7, #0]
 80040b8:	2b00      	cmp	r3, #0
 80040ba:	d116      	bne.n	80040ea <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 80040bc:	68fb      	ldr	r3, [r7, #12]
 80040be:	2200      	movs	r2, #0
 80040c0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80040c2:	68fb      	ldr	r3, [r7, #12]
 80040c4:	2220      	movs	r2, #32
 80040c6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80040ca:	68fb      	ldr	r3, [r7, #12]
 80040cc:	2200      	movs	r2, #0
 80040ce:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80040d2:	68fb      	ldr	r3, [r7, #12]
 80040d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040d6:	f043 0220 	orr.w	r2, r3, #32
 80040da:	68fb      	ldr	r3, [r7, #12]
 80040dc:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80040de:	68fb      	ldr	r3, [r7, #12]
 80040e0:	2200      	movs	r2, #0
 80040e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80040e6:	2301      	movs	r3, #1
 80040e8:	e023      	b.n	8004132 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80040ea:	68bb      	ldr	r3, [r7, #8]
 80040ec:	0c1b      	lsrs	r3, r3, #16
 80040ee:	b2db      	uxtb	r3, r3
 80040f0:	2b01      	cmp	r3, #1
 80040f2:	d10d      	bne.n	8004110 <I2C_WaitOnFlagUntilTimeout+0x84>
 80040f4:	68fb      	ldr	r3, [r7, #12]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	695b      	ldr	r3, [r3, #20]
 80040fa:	43da      	mvns	r2, r3
 80040fc:	68bb      	ldr	r3, [r7, #8]
 80040fe:	4013      	ands	r3, r2
 8004100:	b29b      	uxth	r3, r3
 8004102:	2b00      	cmp	r3, #0
 8004104:	bf0c      	ite	eq
 8004106:	2301      	moveq	r3, #1
 8004108:	2300      	movne	r3, #0
 800410a:	b2db      	uxtb	r3, r3
 800410c:	461a      	mov	r2, r3
 800410e:	e00c      	b.n	800412a <I2C_WaitOnFlagUntilTimeout+0x9e>
 8004110:	68fb      	ldr	r3, [r7, #12]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	699b      	ldr	r3, [r3, #24]
 8004116:	43da      	mvns	r2, r3
 8004118:	68bb      	ldr	r3, [r7, #8]
 800411a:	4013      	ands	r3, r2
 800411c:	b29b      	uxth	r3, r3
 800411e:	2b00      	cmp	r3, #0
 8004120:	bf0c      	ite	eq
 8004122:	2301      	moveq	r3, #1
 8004124:	2300      	movne	r3, #0
 8004126:	b2db      	uxtb	r3, r3
 8004128:	461a      	mov	r2, r3
 800412a:	79fb      	ldrb	r3, [r7, #7]
 800412c:	429a      	cmp	r2, r3
 800412e:	d0b6      	beq.n	800409e <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004130:	2300      	movs	r3, #0
}
 8004132:	4618      	mov	r0, r3
 8004134:	3710      	adds	r7, #16
 8004136:	46bd      	mov	sp, r7
 8004138:	bd80      	pop	{r7, pc}

0800413a <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800413a:	b580      	push	{r7, lr}
 800413c:	b084      	sub	sp, #16
 800413e:	af00      	add	r7, sp, #0
 8004140:	60f8      	str	r0, [r7, #12]
 8004142:	60b9      	str	r1, [r7, #8]
 8004144:	607a      	str	r2, [r7, #4]
 8004146:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004148:	e051      	b.n	80041ee <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800414a:	68fb      	ldr	r3, [r7, #12]
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	695b      	ldr	r3, [r3, #20]
 8004150:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004154:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004158:	d123      	bne.n	80041a2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800415a:	68fb      	ldr	r3, [r7, #12]
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	681a      	ldr	r2, [r3, #0]
 8004160:	68fb      	ldr	r3, [r7, #12]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004168:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800416a:	68fb      	ldr	r3, [r7, #12]
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004172:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004174:	68fb      	ldr	r3, [r7, #12]
 8004176:	2200      	movs	r2, #0
 8004178:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800417a:	68fb      	ldr	r3, [r7, #12]
 800417c:	2220      	movs	r2, #32
 800417e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004182:	68fb      	ldr	r3, [r7, #12]
 8004184:	2200      	movs	r2, #0
 8004186:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800418a:	68fb      	ldr	r3, [r7, #12]
 800418c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800418e:	f043 0204 	orr.w	r2, r3, #4
 8004192:	68fb      	ldr	r3, [r7, #12]
 8004194:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004196:	68fb      	ldr	r3, [r7, #12]
 8004198:	2200      	movs	r2, #0
 800419a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800419e:	2301      	movs	r3, #1
 80041a0:	e046      	b.n	8004230 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80041a8:	d021      	beq.n	80041ee <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80041aa:	f7fe fe79 	bl	8002ea0 <HAL_GetTick>
 80041ae:	4602      	mov	r2, r0
 80041b0:	683b      	ldr	r3, [r7, #0]
 80041b2:	1ad3      	subs	r3, r2, r3
 80041b4:	687a      	ldr	r2, [r7, #4]
 80041b6:	429a      	cmp	r2, r3
 80041b8:	d302      	bcc.n	80041c0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	2b00      	cmp	r3, #0
 80041be:	d116      	bne.n	80041ee <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80041c0:	68fb      	ldr	r3, [r7, #12]
 80041c2:	2200      	movs	r2, #0
 80041c4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80041c6:	68fb      	ldr	r3, [r7, #12]
 80041c8:	2220      	movs	r2, #32
 80041ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80041ce:	68fb      	ldr	r3, [r7, #12]
 80041d0:	2200      	movs	r2, #0
 80041d2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80041d6:	68fb      	ldr	r3, [r7, #12]
 80041d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041da:	f043 0220 	orr.w	r2, r3, #32
 80041de:	68fb      	ldr	r3, [r7, #12]
 80041e0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80041e2:	68fb      	ldr	r3, [r7, #12]
 80041e4:	2200      	movs	r2, #0
 80041e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80041ea:	2301      	movs	r3, #1
 80041ec:	e020      	b.n	8004230 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80041ee:	68bb      	ldr	r3, [r7, #8]
 80041f0:	0c1b      	lsrs	r3, r3, #16
 80041f2:	b2db      	uxtb	r3, r3
 80041f4:	2b01      	cmp	r3, #1
 80041f6:	d10c      	bne.n	8004212 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 80041f8:	68fb      	ldr	r3, [r7, #12]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	695b      	ldr	r3, [r3, #20]
 80041fe:	43da      	mvns	r2, r3
 8004200:	68bb      	ldr	r3, [r7, #8]
 8004202:	4013      	ands	r3, r2
 8004204:	b29b      	uxth	r3, r3
 8004206:	2b00      	cmp	r3, #0
 8004208:	bf14      	ite	ne
 800420a:	2301      	movne	r3, #1
 800420c:	2300      	moveq	r3, #0
 800420e:	b2db      	uxtb	r3, r3
 8004210:	e00b      	b.n	800422a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8004212:	68fb      	ldr	r3, [r7, #12]
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	699b      	ldr	r3, [r3, #24]
 8004218:	43da      	mvns	r2, r3
 800421a:	68bb      	ldr	r3, [r7, #8]
 800421c:	4013      	ands	r3, r2
 800421e:	b29b      	uxth	r3, r3
 8004220:	2b00      	cmp	r3, #0
 8004222:	bf14      	ite	ne
 8004224:	2301      	movne	r3, #1
 8004226:	2300      	moveq	r3, #0
 8004228:	b2db      	uxtb	r3, r3
 800422a:	2b00      	cmp	r3, #0
 800422c:	d18d      	bne.n	800414a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 800422e:	2300      	movs	r3, #0
}
 8004230:	4618      	mov	r0, r3
 8004232:	3710      	adds	r7, #16
 8004234:	46bd      	mov	sp, r7
 8004236:	bd80      	pop	{r7, pc}

08004238 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004238:	b580      	push	{r7, lr}
 800423a:	b084      	sub	sp, #16
 800423c:	af00      	add	r7, sp, #0
 800423e:	60f8      	str	r0, [r7, #12]
 8004240:	60b9      	str	r1, [r7, #8]
 8004242:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004244:	e02d      	b.n	80042a2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004246:	68f8      	ldr	r0, [r7, #12]
 8004248:	f000 f878 	bl	800433c <I2C_IsAcknowledgeFailed>
 800424c:	4603      	mov	r3, r0
 800424e:	2b00      	cmp	r3, #0
 8004250:	d001      	beq.n	8004256 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004252:	2301      	movs	r3, #1
 8004254:	e02d      	b.n	80042b2 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004256:	68bb      	ldr	r3, [r7, #8]
 8004258:	f1b3 3fff 	cmp.w	r3, #4294967295
 800425c:	d021      	beq.n	80042a2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800425e:	f7fe fe1f 	bl	8002ea0 <HAL_GetTick>
 8004262:	4602      	mov	r2, r0
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	1ad3      	subs	r3, r2, r3
 8004268:	68ba      	ldr	r2, [r7, #8]
 800426a:	429a      	cmp	r2, r3
 800426c:	d302      	bcc.n	8004274 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800426e:	68bb      	ldr	r3, [r7, #8]
 8004270:	2b00      	cmp	r3, #0
 8004272:	d116      	bne.n	80042a2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004274:	68fb      	ldr	r3, [r7, #12]
 8004276:	2200      	movs	r2, #0
 8004278:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800427a:	68fb      	ldr	r3, [r7, #12]
 800427c:	2220      	movs	r2, #32
 800427e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004282:	68fb      	ldr	r3, [r7, #12]
 8004284:	2200      	movs	r2, #0
 8004286:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800428a:	68fb      	ldr	r3, [r7, #12]
 800428c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800428e:	f043 0220 	orr.w	r2, r3, #32
 8004292:	68fb      	ldr	r3, [r7, #12]
 8004294:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004296:	68fb      	ldr	r3, [r7, #12]
 8004298:	2200      	movs	r2, #0
 800429a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800429e:	2301      	movs	r3, #1
 80042a0:	e007      	b.n	80042b2 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80042a2:	68fb      	ldr	r3, [r7, #12]
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	695b      	ldr	r3, [r3, #20]
 80042a8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80042ac:	2b80      	cmp	r3, #128	; 0x80
 80042ae:	d1ca      	bne.n	8004246 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80042b0:	2300      	movs	r3, #0
}
 80042b2:	4618      	mov	r0, r3
 80042b4:	3710      	adds	r7, #16
 80042b6:	46bd      	mov	sp, r7
 80042b8:	bd80      	pop	{r7, pc}

080042ba <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80042ba:	b580      	push	{r7, lr}
 80042bc:	b084      	sub	sp, #16
 80042be:	af00      	add	r7, sp, #0
 80042c0:	60f8      	str	r0, [r7, #12]
 80042c2:	60b9      	str	r1, [r7, #8]
 80042c4:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80042c6:	e02d      	b.n	8004324 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80042c8:	68f8      	ldr	r0, [r7, #12]
 80042ca:	f000 f837 	bl	800433c <I2C_IsAcknowledgeFailed>
 80042ce:	4603      	mov	r3, r0
 80042d0:	2b00      	cmp	r3, #0
 80042d2:	d001      	beq.n	80042d8 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80042d4:	2301      	movs	r3, #1
 80042d6:	e02d      	b.n	8004334 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80042d8:	68bb      	ldr	r3, [r7, #8]
 80042da:	f1b3 3fff 	cmp.w	r3, #4294967295
 80042de:	d021      	beq.n	8004324 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80042e0:	f7fe fdde 	bl	8002ea0 <HAL_GetTick>
 80042e4:	4602      	mov	r2, r0
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	1ad3      	subs	r3, r2, r3
 80042ea:	68ba      	ldr	r2, [r7, #8]
 80042ec:	429a      	cmp	r2, r3
 80042ee:	d302      	bcc.n	80042f6 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80042f0:	68bb      	ldr	r3, [r7, #8]
 80042f2:	2b00      	cmp	r3, #0
 80042f4:	d116      	bne.n	8004324 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80042f6:	68fb      	ldr	r3, [r7, #12]
 80042f8:	2200      	movs	r2, #0
 80042fa:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80042fc:	68fb      	ldr	r3, [r7, #12]
 80042fe:	2220      	movs	r2, #32
 8004300:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004304:	68fb      	ldr	r3, [r7, #12]
 8004306:	2200      	movs	r2, #0
 8004308:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800430c:	68fb      	ldr	r3, [r7, #12]
 800430e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004310:	f043 0220 	orr.w	r2, r3, #32
 8004314:	68fb      	ldr	r3, [r7, #12]
 8004316:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004318:	68fb      	ldr	r3, [r7, #12]
 800431a:	2200      	movs	r2, #0
 800431c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004320:	2301      	movs	r3, #1
 8004322:	e007      	b.n	8004334 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004324:	68fb      	ldr	r3, [r7, #12]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	695b      	ldr	r3, [r3, #20]
 800432a:	f003 0304 	and.w	r3, r3, #4
 800432e:	2b04      	cmp	r3, #4
 8004330:	d1ca      	bne.n	80042c8 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004332:	2300      	movs	r3, #0
}
 8004334:	4618      	mov	r0, r3
 8004336:	3710      	adds	r7, #16
 8004338:	46bd      	mov	sp, r7
 800433a:	bd80      	pop	{r7, pc}

0800433c <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800433c:	b480      	push	{r7}
 800433e:	b083      	sub	sp, #12
 8004340:	af00      	add	r7, sp, #0
 8004342:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	695b      	ldr	r3, [r3, #20]
 800434a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800434e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004352:	d11b      	bne.n	800438c <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800435c:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	2200      	movs	r2, #0
 8004362:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	2220      	movs	r2, #32
 8004368:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	2200      	movs	r2, #0
 8004370:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004378:	f043 0204 	orr.w	r2, r3, #4
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	2200      	movs	r2, #0
 8004384:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8004388:	2301      	movs	r3, #1
 800438a:	e000      	b.n	800438e <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800438c:	2300      	movs	r3, #0
}
 800438e:	4618      	mov	r0, r3
 8004390:	370c      	adds	r7, #12
 8004392:	46bd      	mov	sp, r7
 8004394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004398:	4770      	bx	lr
	...

0800439c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800439c:	b580      	push	{r7, lr}
 800439e:	b086      	sub	sp, #24
 80043a0:	af00      	add	r7, sp, #0
 80043a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	2b00      	cmp	r3, #0
 80043a8:	d101      	bne.n	80043ae <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80043aa:	2301      	movs	r3, #1
 80043ac:	e25b      	b.n	8004866 <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	f003 0301 	and.w	r3, r3, #1
 80043b6:	2b00      	cmp	r3, #0
 80043b8:	d075      	beq.n	80044a6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80043ba:	4ba3      	ldr	r3, [pc, #652]	; (8004648 <HAL_RCC_OscConfig+0x2ac>)
 80043bc:	689b      	ldr	r3, [r3, #8]
 80043be:	f003 030c 	and.w	r3, r3, #12
 80043c2:	2b04      	cmp	r3, #4
 80043c4:	d00c      	beq.n	80043e0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80043c6:	4ba0      	ldr	r3, [pc, #640]	; (8004648 <HAL_RCC_OscConfig+0x2ac>)
 80043c8:	689b      	ldr	r3, [r3, #8]
 80043ca:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80043ce:	2b08      	cmp	r3, #8
 80043d0:	d112      	bne.n	80043f8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80043d2:	4b9d      	ldr	r3, [pc, #628]	; (8004648 <HAL_RCC_OscConfig+0x2ac>)
 80043d4:	685b      	ldr	r3, [r3, #4]
 80043d6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80043da:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80043de:	d10b      	bne.n	80043f8 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80043e0:	4b99      	ldr	r3, [pc, #612]	; (8004648 <HAL_RCC_OscConfig+0x2ac>)
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80043e8:	2b00      	cmp	r3, #0
 80043ea:	d05b      	beq.n	80044a4 <HAL_RCC_OscConfig+0x108>
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	685b      	ldr	r3, [r3, #4]
 80043f0:	2b00      	cmp	r3, #0
 80043f2:	d157      	bne.n	80044a4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80043f4:	2301      	movs	r3, #1
 80043f6:	e236      	b.n	8004866 <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	685b      	ldr	r3, [r3, #4]
 80043fc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004400:	d106      	bne.n	8004410 <HAL_RCC_OscConfig+0x74>
 8004402:	4b91      	ldr	r3, [pc, #580]	; (8004648 <HAL_RCC_OscConfig+0x2ac>)
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	4a90      	ldr	r2, [pc, #576]	; (8004648 <HAL_RCC_OscConfig+0x2ac>)
 8004408:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800440c:	6013      	str	r3, [r2, #0]
 800440e:	e01d      	b.n	800444c <HAL_RCC_OscConfig+0xb0>
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	685b      	ldr	r3, [r3, #4]
 8004414:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004418:	d10c      	bne.n	8004434 <HAL_RCC_OscConfig+0x98>
 800441a:	4b8b      	ldr	r3, [pc, #556]	; (8004648 <HAL_RCC_OscConfig+0x2ac>)
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	4a8a      	ldr	r2, [pc, #552]	; (8004648 <HAL_RCC_OscConfig+0x2ac>)
 8004420:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004424:	6013      	str	r3, [r2, #0]
 8004426:	4b88      	ldr	r3, [pc, #544]	; (8004648 <HAL_RCC_OscConfig+0x2ac>)
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	4a87      	ldr	r2, [pc, #540]	; (8004648 <HAL_RCC_OscConfig+0x2ac>)
 800442c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004430:	6013      	str	r3, [r2, #0]
 8004432:	e00b      	b.n	800444c <HAL_RCC_OscConfig+0xb0>
 8004434:	4b84      	ldr	r3, [pc, #528]	; (8004648 <HAL_RCC_OscConfig+0x2ac>)
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	4a83      	ldr	r2, [pc, #524]	; (8004648 <HAL_RCC_OscConfig+0x2ac>)
 800443a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800443e:	6013      	str	r3, [r2, #0]
 8004440:	4b81      	ldr	r3, [pc, #516]	; (8004648 <HAL_RCC_OscConfig+0x2ac>)
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	4a80      	ldr	r2, [pc, #512]	; (8004648 <HAL_RCC_OscConfig+0x2ac>)
 8004446:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800444a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	685b      	ldr	r3, [r3, #4]
 8004450:	2b00      	cmp	r3, #0
 8004452:	d013      	beq.n	800447c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004454:	f7fe fd24 	bl	8002ea0 <HAL_GetTick>
 8004458:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800445a:	e008      	b.n	800446e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800445c:	f7fe fd20 	bl	8002ea0 <HAL_GetTick>
 8004460:	4602      	mov	r2, r0
 8004462:	693b      	ldr	r3, [r7, #16]
 8004464:	1ad3      	subs	r3, r2, r3
 8004466:	2b64      	cmp	r3, #100	; 0x64
 8004468:	d901      	bls.n	800446e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800446a:	2303      	movs	r3, #3
 800446c:	e1fb      	b.n	8004866 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800446e:	4b76      	ldr	r3, [pc, #472]	; (8004648 <HAL_RCC_OscConfig+0x2ac>)
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004476:	2b00      	cmp	r3, #0
 8004478:	d0f0      	beq.n	800445c <HAL_RCC_OscConfig+0xc0>
 800447a:	e014      	b.n	80044a6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800447c:	f7fe fd10 	bl	8002ea0 <HAL_GetTick>
 8004480:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004482:	e008      	b.n	8004496 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004484:	f7fe fd0c 	bl	8002ea0 <HAL_GetTick>
 8004488:	4602      	mov	r2, r0
 800448a:	693b      	ldr	r3, [r7, #16]
 800448c:	1ad3      	subs	r3, r2, r3
 800448e:	2b64      	cmp	r3, #100	; 0x64
 8004490:	d901      	bls.n	8004496 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004492:	2303      	movs	r3, #3
 8004494:	e1e7      	b.n	8004866 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004496:	4b6c      	ldr	r3, [pc, #432]	; (8004648 <HAL_RCC_OscConfig+0x2ac>)
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800449e:	2b00      	cmp	r3, #0
 80044a0:	d1f0      	bne.n	8004484 <HAL_RCC_OscConfig+0xe8>
 80044a2:	e000      	b.n	80044a6 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80044a4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	f003 0302 	and.w	r3, r3, #2
 80044ae:	2b00      	cmp	r3, #0
 80044b0:	d063      	beq.n	800457a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80044b2:	4b65      	ldr	r3, [pc, #404]	; (8004648 <HAL_RCC_OscConfig+0x2ac>)
 80044b4:	689b      	ldr	r3, [r3, #8]
 80044b6:	f003 030c 	and.w	r3, r3, #12
 80044ba:	2b00      	cmp	r3, #0
 80044bc:	d00b      	beq.n	80044d6 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80044be:	4b62      	ldr	r3, [pc, #392]	; (8004648 <HAL_RCC_OscConfig+0x2ac>)
 80044c0:	689b      	ldr	r3, [r3, #8]
 80044c2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80044c6:	2b08      	cmp	r3, #8
 80044c8:	d11c      	bne.n	8004504 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80044ca:	4b5f      	ldr	r3, [pc, #380]	; (8004648 <HAL_RCC_OscConfig+0x2ac>)
 80044cc:	685b      	ldr	r3, [r3, #4]
 80044ce:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80044d2:	2b00      	cmp	r3, #0
 80044d4:	d116      	bne.n	8004504 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80044d6:	4b5c      	ldr	r3, [pc, #368]	; (8004648 <HAL_RCC_OscConfig+0x2ac>)
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	f003 0302 	and.w	r3, r3, #2
 80044de:	2b00      	cmp	r3, #0
 80044e0:	d005      	beq.n	80044ee <HAL_RCC_OscConfig+0x152>
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	68db      	ldr	r3, [r3, #12]
 80044e6:	2b01      	cmp	r3, #1
 80044e8:	d001      	beq.n	80044ee <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80044ea:	2301      	movs	r3, #1
 80044ec:	e1bb      	b.n	8004866 <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80044ee:	4b56      	ldr	r3, [pc, #344]	; (8004648 <HAL_RCC_OscConfig+0x2ac>)
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	691b      	ldr	r3, [r3, #16]
 80044fa:	00db      	lsls	r3, r3, #3
 80044fc:	4952      	ldr	r1, [pc, #328]	; (8004648 <HAL_RCC_OscConfig+0x2ac>)
 80044fe:	4313      	orrs	r3, r2
 8004500:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004502:	e03a      	b.n	800457a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	68db      	ldr	r3, [r3, #12]
 8004508:	2b00      	cmp	r3, #0
 800450a:	d020      	beq.n	800454e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800450c:	4b4f      	ldr	r3, [pc, #316]	; (800464c <HAL_RCC_OscConfig+0x2b0>)
 800450e:	2201      	movs	r2, #1
 8004510:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004512:	f7fe fcc5 	bl	8002ea0 <HAL_GetTick>
 8004516:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004518:	e008      	b.n	800452c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800451a:	f7fe fcc1 	bl	8002ea0 <HAL_GetTick>
 800451e:	4602      	mov	r2, r0
 8004520:	693b      	ldr	r3, [r7, #16]
 8004522:	1ad3      	subs	r3, r2, r3
 8004524:	2b02      	cmp	r3, #2
 8004526:	d901      	bls.n	800452c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004528:	2303      	movs	r3, #3
 800452a:	e19c      	b.n	8004866 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800452c:	4b46      	ldr	r3, [pc, #280]	; (8004648 <HAL_RCC_OscConfig+0x2ac>)
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	f003 0302 	and.w	r3, r3, #2
 8004534:	2b00      	cmp	r3, #0
 8004536:	d0f0      	beq.n	800451a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004538:	4b43      	ldr	r3, [pc, #268]	; (8004648 <HAL_RCC_OscConfig+0x2ac>)
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	691b      	ldr	r3, [r3, #16]
 8004544:	00db      	lsls	r3, r3, #3
 8004546:	4940      	ldr	r1, [pc, #256]	; (8004648 <HAL_RCC_OscConfig+0x2ac>)
 8004548:	4313      	orrs	r3, r2
 800454a:	600b      	str	r3, [r1, #0]
 800454c:	e015      	b.n	800457a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800454e:	4b3f      	ldr	r3, [pc, #252]	; (800464c <HAL_RCC_OscConfig+0x2b0>)
 8004550:	2200      	movs	r2, #0
 8004552:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004554:	f7fe fca4 	bl	8002ea0 <HAL_GetTick>
 8004558:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800455a:	e008      	b.n	800456e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800455c:	f7fe fca0 	bl	8002ea0 <HAL_GetTick>
 8004560:	4602      	mov	r2, r0
 8004562:	693b      	ldr	r3, [r7, #16]
 8004564:	1ad3      	subs	r3, r2, r3
 8004566:	2b02      	cmp	r3, #2
 8004568:	d901      	bls.n	800456e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800456a:	2303      	movs	r3, #3
 800456c:	e17b      	b.n	8004866 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800456e:	4b36      	ldr	r3, [pc, #216]	; (8004648 <HAL_RCC_OscConfig+0x2ac>)
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	f003 0302 	and.w	r3, r3, #2
 8004576:	2b00      	cmp	r3, #0
 8004578:	d1f0      	bne.n	800455c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	f003 0308 	and.w	r3, r3, #8
 8004582:	2b00      	cmp	r3, #0
 8004584:	d030      	beq.n	80045e8 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	695b      	ldr	r3, [r3, #20]
 800458a:	2b00      	cmp	r3, #0
 800458c:	d016      	beq.n	80045bc <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800458e:	4b30      	ldr	r3, [pc, #192]	; (8004650 <HAL_RCC_OscConfig+0x2b4>)
 8004590:	2201      	movs	r2, #1
 8004592:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004594:	f7fe fc84 	bl	8002ea0 <HAL_GetTick>
 8004598:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800459a:	e008      	b.n	80045ae <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800459c:	f7fe fc80 	bl	8002ea0 <HAL_GetTick>
 80045a0:	4602      	mov	r2, r0
 80045a2:	693b      	ldr	r3, [r7, #16]
 80045a4:	1ad3      	subs	r3, r2, r3
 80045a6:	2b02      	cmp	r3, #2
 80045a8:	d901      	bls.n	80045ae <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80045aa:	2303      	movs	r3, #3
 80045ac:	e15b      	b.n	8004866 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80045ae:	4b26      	ldr	r3, [pc, #152]	; (8004648 <HAL_RCC_OscConfig+0x2ac>)
 80045b0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80045b2:	f003 0302 	and.w	r3, r3, #2
 80045b6:	2b00      	cmp	r3, #0
 80045b8:	d0f0      	beq.n	800459c <HAL_RCC_OscConfig+0x200>
 80045ba:	e015      	b.n	80045e8 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80045bc:	4b24      	ldr	r3, [pc, #144]	; (8004650 <HAL_RCC_OscConfig+0x2b4>)
 80045be:	2200      	movs	r2, #0
 80045c0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80045c2:	f7fe fc6d 	bl	8002ea0 <HAL_GetTick>
 80045c6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80045c8:	e008      	b.n	80045dc <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80045ca:	f7fe fc69 	bl	8002ea0 <HAL_GetTick>
 80045ce:	4602      	mov	r2, r0
 80045d0:	693b      	ldr	r3, [r7, #16]
 80045d2:	1ad3      	subs	r3, r2, r3
 80045d4:	2b02      	cmp	r3, #2
 80045d6:	d901      	bls.n	80045dc <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80045d8:	2303      	movs	r3, #3
 80045da:	e144      	b.n	8004866 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80045dc:	4b1a      	ldr	r3, [pc, #104]	; (8004648 <HAL_RCC_OscConfig+0x2ac>)
 80045de:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80045e0:	f003 0302 	and.w	r3, r3, #2
 80045e4:	2b00      	cmp	r3, #0
 80045e6:	d1f0      	bne.n	80045ca <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	f003 0304 	and.w	r3, r3, #4
 80045f0:	2b00      	cmp	r3, #0
 80045f2:	f000 80a0 	beq.w	8004736 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80045f6:	2300      	movs	r3, #0
 80045f8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80045fa:	4b13      	ldr	r3, [pc, #76]	; (8004648 <HAL_RCC_OscConfig+0x2ac>)
 80045fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004602:	2b00      	cmp	r3, #0
 8004604:	d10f      	bne.n	8004626 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004606:	2300      	movs	r3, #0
 8004608:	60bb      	str	r3, [r7, #8]
 800460a:	4b0f      	ldr	r3, [pc, #60]	; (8004648 <HAL_RCC_OscConfig+0x2ac>)
 800460c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800460e:	4a0e      	ldr	r2, [pc, #56]	; (8004648 <HAL_RCC_OscConfig+0x2ac>)
 8004610:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004614:	6413      	str	r3, [r2, #64]	; 0x40
 8004616:	4b0c      	ldr	r3, [pc, #48]	; (8004648 <HAL_RCC_OscConfig+0x2ac>)
 8004618:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800461a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800461e:	60bb      	str	r3, [r7, #8]
 8004620:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004622:	2301      	movs	r3, #1
 8004624:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004626:	4b0b      	ldr	r3, [pc, #44]	; (8004654 <HAL_RCC_OscConfig+0x2b8>)
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800462e:	2b00      	cmp	r3, #0
 8004630:	d121      	bne.n	8004676 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004632:	4b08      	ldr	r3, [pc, #32]	; (8004654 <HAL_RCC_OscConfig+0x2b8>)
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	4a07      	ldr	r2, [pc, #28]	; (8004654 <HAL_RCC_OscConfig+0x2b8>)
 8004638:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800463c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800463e:	f7fe fc2f 	bl	8002ea0 <HAL_GetTick>
 8004642:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004644:	e011      	b.n	800466a <HAL_RCC_OscConfig+0x2ce>
 8004646:	bf00      	nop
 8004648:	40023800 	.word	0x40023800
 800464c:	42470000 	.word	0x42470000
 8004650:	42470e80 	.word	0x42470e80
 8004654:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004658:	f7fe fc22 	bl	8002ea0 <HAL_GetTick>
 800465c:	4602      	mov	r2, r0
 800465e:	693b      	ldr	r3, [r7, #16]
 8004660:	1ad3      	subs	r3, r2, r3
 8004662:	2b02      	cmp	r3, #2
 8004664:	d901      	bls.n	800466a <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8004666:	2303      	movs	r3, #3
 8004668:	e0fd      	b.n	8004866 <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800466a:	4b81      	ldr	r3, [pc, #516]	; (8004870 <HAL_RCC_OscConfig+0x4d4>)
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004672:	2b00      	cmp	r3, #0
 8004674:	d0f0      	beq.n	8004658 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	689b      	ldr	r3, [r3, #8]
 800467a:	2b01      	cmp	r3, #1
 800467c:	d106      	bne.n	800468c <HAL_RCC_OscConfig+0x2f0>
 800467e:	4b7d      	ldr	r3, [pc, #500]	; (8004874 <HAL_RCC_OscConfig+0x4d8>)
 8004680:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004682:	4a7c      	ldr	r2, [pc, #496]	; (8004874 <HAL_RCC_OscConfig+0x4d8>)
 8004684:	f043 0301 	orr.w	r3, r3, #1
 8004688:	6713      	str	r3, [r2, #112]	; 0x70
 800468a:	e01c      	b.n	80046c6 <HAL_RCC_OscConfig+0x32a>
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	689b      	ldr	r3, [r3, #8]
 8004690:	2b05      	cmp	r3, #5
 8004692:	d10c      	bne.n	80046ae <HAL_RCC_OscConfig+0x312>
 8004694:	4b77      	ldr	r3, [pc, #476]	; (8004874 <HAL_RCC_OscConfig+0x4d8>)
 8004696:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004698:	4a76      	ldr	r2, [pc, #472]	; (8004874 <HAL_RCC_OscConfig+0x4d8>)
 800469a:	f043 0304 	orr.w	r3, r3, #4
 800469e:	6713      	str	r3, [r2, #112]	; 0x70
 80046a0:	4b74      	ldr	r3, [pc, #464]	; (8004874 <HAL_RCC_OscConfig+0x4d8>)
 80046a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80046a4:	4a73      	ldr	r2, [pc, #460]	; (8004874 <HAL_RCC_OscConfig+0x4d8>)
 80046a6:	f043 0301 	orr.w	r3, r3, #1
 80046aa:	6713      	str	r3, [r2, #112]	; 0x70
 80046ac:	e00b      	b.n	80046c6 <HAL_RCC_OscConfig+0x32a>
 80046ae:	4b71      	ldr	r3, [pc, #452]	; (8004874 <HAL_RCC_OscConfig+0x4d8>)
 80046b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80046b2:	4a70      	ldr	r2, [pc, #448]	; (8004874 <HAL_RCC_OscConfig+0x4d8>)
 80046b4:	f023 0301 	bic.w	r3, r3, #1
 80046b8:	6713      	str	r3, [r2, #112]	; 0x70
 80046ba:	4b6e      	ldr	r3, [pc, #440]	; (8004874 <HAL_RCC_OscConfig+0x4d8>)
 80046bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80046be:	4a6d      	ldr	r2, [pc, #436]	; (8004874 <HAL_RCC_OscConfig+0x4d8>)
 80046c0:	f023 0304 	bic.w	r3, r3, #4
 80046c4:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	689b      	ldr	r3, [r3, #8]
 80046ca:	2b00      	cmp	r3, #0
 80046cc:	d015      	beq.n	80046fa <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80046ce:	f7fe fbe7 	bl	8002ea0 <HAL_GetTick>
 80046d2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80046d4:	e00a      	b.n	80046ec <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80046d6:	f7fe fbe3 	bl	8002ea0 <HAL_GetTick>
 80046da:	4602      	mov	r2, r0
 80046dc:	693b      	ldr	r3, [r7, #16]
 80046de:	1ad3      	subs	r3, r2, r3
 80046e0:	f241 3288 	movw	r2, #5000	; 0x1388
 80046e4:	4293      	cmp	r3, r2
 80046e6:	d901      	bls.n	80046ec <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 80046e8:	2303      	movs	r3, #3
 80046ea:	e0bc      	b.n	8004866 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80046ec:	4b61      	ldr	r3, [pc, #388]	; (8004874 <HAL_RCC_OscConfig+0x4d8>)
 80046ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80046f0:	f003 0302 	and.w	r3, r3, #2
 80046f4:	2b00      	cmp	r3, #0
 80046f6:	d0ee      	beq.n	80046d6 <HAL_RCC_OscConfig+0x33a>
 80046f8:	e014      	b.n	8004724 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80046fa:	f7fe fbd1 	bl	8002ea0 <HAL_GetTick>
 80046fe:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004700:	e00a      	b.n	8004718 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004702:	f7fe fbcd 	bl	8002ea0 <HAL_GetTick>
 8004706:	4602      	mov	r2, r0
 8004708:	693b      	ldr	r3, [r7, #16]
 800470a:	1ad3      	subs	r3, r2, r3
 800470c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004710:	4293      	cmp	r3, r2
 8004712:	d901      	bls.n	8004718 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8004714:	2303      	movs	r3, #3
 8004716:	e0a6      	b.n	8004866 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004718:	4b56      	ldr	r3, [pc, #344]	; (8004874 <HAL_RCC_OscConfig+0x4d8>)
 800471a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800471c:	f003 0302 	and.w	r3, r3, #2
 8004720:	2b00      	cmp	r3, #0
 8004722:	d1ee      	bne.n	8004702 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004724:	7dfb      	ldrb	r3, [r7, #23]
 8004726:	2b01      	cmp	r3, #1
 8004728:	d105      	bne.n	8004736 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800472a:	4b52      	ldr	r3, [pc, #328]	; (8004874 <HAL_RCC_OscConfig+0x4d8>)
 800472c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800472e:	4a51      	ldr	r2, [pc, #324]	; (8004874 <HAL_RCC_OscConfig+0x4d8>)
 8004730:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004734:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	699b      	ldr	r3, [r3, #24]
 800473a:	2b00      	cmp	r3, #0
 800473c:	f000 8092 	beq.w	8004864 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004740:	4b4c      	ldr	r3, [pc, #304]	; (8004874 <HAL_RCC_OscConfig+0x4d8>)
 8004742:	689b      	ldr	r3, [r3, #8]
 8004744:	f003 030c 	and.w	r3, r3, #12
 8004748:	2b08      	cmp	r3, #8
 800474a:	d05c      	beq.n	8004806 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	699b      	ldr	r3, [r3, #24]
 8004750:	2b02      	cmp	r3, #2
 8004752:	d141      	bne.n	80047d8 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004754:	4b48      	ldr	r3, [pc, #288]	; (8004878 <HAL_RCC_OscConfig+0x4dc>)
 8004756:	2200      	movs	r2, #0
 8004758:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800475a:	f7fe fba1 	bl	8002ea0 <HAL_GetTick>
 800475e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004760:	e008      	b.n	8004774 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004762:	f7fe fb9d 	bl	8002ea0 <HAL_GetTick>
 8004766:	4602      	mov	r2, r0
 8004768:	693b      	ldr	r3, [r7, #16]
 800476a:	1ad3      	subs	r3, r2, r3
 800476c:	2b02      	cmp	r3, #2
 800476e:	d901      	bls.n	8004774 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8004770:	2303      	movs	r3, #3
 8004772:	e078      	b.n	8004866 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004774:	4b3f      	ldr	r3, [pc, #252]	; (8004874 <HAL_RCC_OscConfig+0x4d8>)
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800477c:	2b00      	cmp	r3, #0
 800477e:	d1f0      	bne.n	8004762 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	69da      	ldr	r2, [r3, #28]
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	6a1b      	ldr	r3, [r3, #32]
 8004788:	431a      	orrs	r2, r3
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800478e:	019b      	lsls	r3, r3, #6
 8004790:	431a      	orrs	r2, r3
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004796:	085b      	lsrs	r3, r3, #1
 8004798:	3b01      	subs	r3, #1
 800479a:	041b      	lsls	r3, r3, #16
 800479c:	431a      	orrs	r2, r3
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047a2:	061b      	lsls	r3, r3, #24
 80047a4:	4933      	ldr	r1, [pc, #204]	; (8004874 <HAL_RCC_OscConfig+0x4d8>)
 80047a6:	4313      	orrs	r3, r2
 80047a8:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80047aa:	4b33      	ldr	r3, [pc, #204]	; (8004878 <HAL_RCC_OscConfig+0x4dc>)
 80047ac:	2201      	movs	r2, #1
 80047ae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80047b0:	f7fe fb76 	bl	8002ea0 <HAL_GetTick>
 80047b4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80047b6:	e008      	b.n	80047ca <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80047b8:	f7fe fb72 	bl	8002ea0 <HAL_GetTick>
 80047bc:	4602      	mov	r2, r0
 80047be:	693b      	ldr	r3, [r7, #16]
 80047c0:	1ad3      	subs	r3, r2, r3
 80047c2:	2b02      	cmp	r3, #2
 80047c4:	d901      	bls.n	80047ca <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 80047c6:	2303      	movs	r3, #3
 80047c8:	e04d      	b.n	8004866 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80047ca:	4b2a      	ldr	r3, [pc, #168]	; (8004874 <HAL_RCC_OscConfig+0x4d8>)
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80047d2:	2b00      	cmp	r3, #0
 80047d4:	d0f0      	beq.n	80047b8 <HAL_RCC_OscConfig+0x41c>
 80047d6:	e045      	b.n	8004864 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80047d8:	4b27      	ldr	r3, [pc, #156]	; (8004878 <HAL_RCC_OscConfig+0x4dc>)
 80047da:	2200      	movs	r2, #0
 80047dc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80047de:	f7fe fb5f 	bl	8002ea0 <HAL_GetTick>
 80047e2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80047e4:	e008      	b.n	80047f8 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80047e6:	f7fe fb5b 	bl	8002ea0 <HAL_GetTick>
 80047ea:	4602      	mov	r2, r0
 80047ec:	693b      	ldr	r3, [r7, #16]
 80047ee:	1ad3      	subs	r3, r2, r3
 80047f0:	2b02      	cmp	r3, #2
 80047f2:	d901      	bls.n	80047f8 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 80047f4:	2303      	movs	r3, #3
 80047f6:	e036      	b.n	8004866 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80047f8:	4b1e      	ldr	r3, [pc, #120]	; (8004874 <HAL_RCC_OscConfig+0x4d8>)
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004800:	2b00      	cmp	r3, #0
 8004802:	d1f0      	bne.n	80047e6 <HAL_RCC_OscConfig+0x44a>
 8004804:	e02e      	b.n	8004864 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	699b      	ldr	r3, [r3, #24]
 800480a:	2b01      	cmp	r3, #1
 800480c:	d101      	bne.n	8004812 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 800480e:	2301      	movs	r3, #1
 8004810:	e029      	b.n	8004866 <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004812:	4b18      	ldr	r3, [pc, #96]	; (8004874 <HAL_RCC_OscConfig+0x4d8>)
 8004814:	685b      	ldr	r3, [r3, #4]
 8004816:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004818:	68fb      	ldr	r3, [r7, #12]
 800481a:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	69db      	ldr	r3, [r3, #28]
 8004822:	429a      	cmp	r2, r3
 8004824:	d11c      	bne.n	8004860 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004826:	68fb      	ldr	r3, [r7, #12]
 8004828:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004830:	429a      	cmp	r2, r3
 8004832:	d115      	bne.n	8004860 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8004834:	68fa      	ldr	r2, [r7, #12]
 8004836:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800483a:	4013      	ands	r3, r2
 800483c:	687a      	ldr	r2, [r7, #4]
 800483e:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004840:	4293      	cmp	r3, r2
 8004842:	d10d      	bne.n	8004860 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8004844:	68fb      	ldr	r3, [r7, #12]
 8004846:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 800484e:	429a      	cmp	r2, r3
 8004850:	d106      	bne.n	8004860 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8004852:	68fb      	ldr	r3, [r7, #12]
 8004854:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800485c:	429a      	cmp	r2, r3
 800485e:	d001      	beq.n	8004864 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8004860:	2301      	movs	r3, #1
 8004862:	e000      	b.n	8004866 <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8004864:	2300      	movs	r3, #0
}
 8004866:	4618      	mov	r0, r3
 8004868:	3718      	adds	r7, #24
 800486a:	46bd      	mov	sp, r7
 800486c:	bd80      	pop	{r7, pc}
 800486e:	bf00      	nop
 8004870:	40007000 	.word	0x40007000
 8004874:	40023800 	.word	0x40023800
 8004878:	42470060 	.word	0x42470060

0800487c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800487c:	b580      	push	{r7, lr}
 800487e:	b084      	sub	sp, #16
 8004880:	af00      	add	r7, sp, #0
 8004882:	6078      	str	r0, [r7, #4]
 8004884:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	2b00      	cmp	r3, #0
 800488a:	d101      	bne.n	8004890 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800488c:	2301      	movs	r3, #1
 800488e:	e0cc      	b.n	8004a2a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004890:	4b68      	ldr	r3, [pc, #416]	; (8004a34 <HAL_RCC_ClockConfig+0x1b8>)
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	f003 030f 	and.w	r3, r3, #15
 8004898:	683a      	ldr	r2, [r7, #0]
 800489a:	429a      	cmp	r2, r3
 800489c:	d90c      	bls.n	80048b8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800489e:	4b65      	ldr	r3, [pc, #404]	; (8004a34 <HAL_RCC_ClockConfig+0x1b8>)
 80048a0:	683a      	ldr	r2, [r7, #0]
 80048a2:	b2d2      	uxtb	r2, r2
 80048a4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80048a6:	4b63      	ldr	r3, [pc, #396]	; (8004a34 <HAL_RCC_ClockConfig+0x1b8>)
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	f003 030f 	and.w	r3, r3, #15
 80048ae:	683a      	ldr	r2, [r7, #0]
 80048b0:	429a      	cmp	r2, r3
 80048b2:	d001      	beq.n	80048b8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80048b4:	2301      	movs	r3, #1
 80048b6:	e0b8      	b.n	8004a2a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	f003 0302 	and.w	r3, r3, #2
 80048c0:	2b00      	cmp	r3, #0
 80048c2:	d020      	beq.n	8004906 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	f003 0304 	and.w	r3, r3, #4
 80048cc:	2b00      	cmp	r3, #0
 80048ce:	d005      	beq.n	80048dc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80048d0:	4b59      	ldr	r3, [pc, #356]	; (8004a38 <HAL_RCC_ClockConfig+0x1bc>)
 80048d2:	689b      	ldr	r3, [r3, #8]
 80048d4:	4a58      	ldr	r2, [pc, #352]	; (8004a38 <HAL_RCC_ClockConfig+0x1bc>)
 80048d6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80048da:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	f003 0308 	and.w	r3, r3, #8
 80048e4:	2b00      	cmp	r3, #0
 80048e6:	d005      	beq.n	80048f4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80048e8:	4b53      	ldr	r3, [pc, #332]	; (8004a38 <HAL_RCC_ClockConfig+0x1bc>)
 80048ea:	689b      	ldr	r3, [r3, #8]
 80048ec:	4a52      	ldr	r2, [pc, #328]	; (8004a38 <HAL_RCC_ClockConfig+0x1bc>)
 80048ee:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80048f2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80048f4:	4b50      	ldr	r3, [pc, #320]	; (8004a38 <HAL_RCC_ClockConfig+0x1bc>)
 80048f6:	689b      	ldr	r3, [r3, #8]
 80048f8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	689b      	ldr	r3, [r3, #8]
 8004900:	494d      	ldr	r1, [pc, #308]	; (8004a38 <HAL_RCC_ClockConfig+0x1bc>)
 8004902:	4313      	orrs	r3, r2
 8004904:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	f003 0301 	and.w	r3, r3, #1
 800490e:	2b00      	cmp	r3, #0
 8004910:	d044      	beq.n	800499c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	685b      	ldr	r3, [r3, #4]
 8004916:	2b01      	cmp	r3, #1
 8004918:	d107      	bne.n	800492a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800491a:	4b47      	ldr	r3, [pc, #284]	; (8004a38 <HAL_RCC_ClockConfig+0x1bc>)
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004922:	2b00      	cmp	r3, #0
 8004924:	d119      	bne.n	800495a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004926:	2301      	movs	r3, #1
 8004928:	e07f      	b.n	8004a2a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	685b      	ldr	r3, [r3, #4]
 800492e:	2b02      	cmp	r3, #2
 8004930:	d003      	beq.n	800493a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004936:	2b03      	cmp	r3, #3
 8004938:	d107      	bne.n	800494a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800493a:	4b3f      	ldr	r3, [pc, #252]	; (8004a38 <HAL_RCC_ClockConfig+0x1bc>)
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004942:	2b00      	cmp	r3, #0
 8004944:	d109      	bne.n	800495a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004946:	2301      	movs	r3, #1
 8004948:	e06f      	b.n	8004a2a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800494a:	4b3b      	ldr	r3, [pc, #236]	; (8004a38 <HAL_RCC_ClockConfig+0x1bc>)
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	f003 0302 	and.w	r3, r3, #2
 8004952:	2b00      	cmp	r3, #0
 8004954:	d101      	bne.n	800495a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004956:	2301      	movs	r3, #1
 8004958:	e067      	b.n	8004a2a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800495a:	4b37      	ldr	r3, [pc, #220]	; (8004a38 <HAL_RCC_ClockConfig+0x1bc>)
 800495c:	689b      	ldr	r3, [r3, #8]
 800495e:	f023 0203 	bic.w	r2, r3, #3
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	685b      	ldr	r3, [r3, #4]
 8004966:	4934      	ldr	r1, [pc, #208]	; (8004a38 <HAL_RCC_ClockConfig+0x1bc>)
 8004968:	4313      	orrs	r3, r2
 800496a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800496c:	f7fe fa98 	bl	8002ea0 <HAL_GetTick>
 8004970:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004972:	e00a      	b.n	800498a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004974:	f7fe fa94 	bl	8002ea0 <HAL_GetTick>
 8004978:	4602      	mov	r2, r0
 800497a:	68fb      	ldr	r3, [r7, #12]
 800497c:	1ad3      	subs	r3, r2, r3
 800497e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004982:	4293      	cmp	r3, r2
 8004984:	d901      	bls.n	800498a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004986:	2303      	movs	r3, #3
 8004988:	e04f      	b.n	8004a2a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800498a:	4b2b      	ldr	r3, [pc, #172]	; (8004a38 <HAL_RCC_ClockConfig+0x1bc>)
 800498c:	689b      	ldr	r3, [r3, #8]
 800498e:	f003 020c 	and.w	r2, r3, #12
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	685b      	ldr	r3, [r3, #4]
 8004996:	009b      	lsls	r3, r3, #2
 8004998:	429a      	cmp	r2, r3
 800499a:	d1eb      	bne.n	8004974 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800499c:	4b25      	ldr	r3, [pc, #148]	; (8004a34 <HAL_RCC_ClockConfig+0x1b8>)
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	f003 030f 	and.w	r3, r3, #15
 80049a4:	683a      	ldr	r2, [r7, #0]
 80049a6:	429a      	cmp	r2, r3
 80049a8:	d20c      	bcs.n	80049c4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80049aa:	4b22      	ldr	r3, [pc, #136]	; (8004a34 <HAL_RCC_ClockConfig+0x1b8>)
 80049ac:	683a      	ldr	r2, [r7, #0]
 80049ae:	b2d2      	uxtb	r2, r2
 80049b0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80049b2:	4b20      	ldr	r3, [pc, #128]	; (8004a34 <HAL_RCC_ClockConfig+0x1b8>)
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	f003 030f 	and.w	r3, r3, #15
 80049ba:	683a      	ldr	r2, [r7, #0]
 80049bc:	429a      	cmp	r2, r3
 80049be:	d001      	beq.n	80049c4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80049c0:	2301      	movs	r3, #1
 80049c2:	e032      	b.n	8004a2a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	f003 0304 	and.w	r3, r3, #4
 80049cc:	2b00      	cmp	r3, #0
 80049ce:	d008      	beq.n	80049e2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80049d0:	4b19      	ldr	r3, [pc, #100]	; (8004a38 <HAL_RCC_ClockConfig+0x1bc>)
 80049d2:	689b      	ldr	r3, [r3, #8]
 80049d4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	68db      	ldr	r3, [r3, #12]
 80049dc:	4916      	ldr	r1, [pc, #88]	; (8004a38 <HAL_RCC_ClockConfig+0x1bc>)
 80049de:	4313      	orrs	r3, r2
 80049e0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	f003 0308 	and.w	r3, r3, #8
 80049ea:	2b00      	cmp	r3, #0
 80049ec:	d009      	beq.n	8004a02 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80049ee:	4b12      	ldr	r3, [pc, #72]	; (8004a38 <HAL_RCC_ClockConfig+0x1bc>)
 80049f0:	689b      	ldr	r3, [r3, #8]
 80049f2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	691b      	ldr	r3, [r3, #16]
 80049fa:	00db      	lsls	r3, r3, #3
 80049fc:	490e      	ldr	r1, [pc, #56]	; (8004a38 <HAL_RCC_ClockConfig+0x1bc>)
 80049fe:	4313      	orrs	r3, r2
 8004a00:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004a02:	f000 f821 	bl	8004a48 <HAL_RCC_GetSysClockFreq>
 8004a06:	4601      	mov	r1, r0
 8004a08:	4b0b      	ldr	r3, [pc, #44]	; (8004a38 <HAL_RCC_ClockConfig+0x1bc>)
 8004a0a:	689b      	ldr	r3, [r3, #8]
 8004a0c:	091b      	lsrs	r3, r3, #4
 8004a0e:	f003 030f 	and.w	r3, r3, #15
 8004a12:	4a0a      	ldr	r2, [pc, #40]	; (8004a3c <HAL_RCC_ClockConfig+0x1c0>)
 8004a14:	5cd3      	ldrb	r3, [r2, r3]
 8004a16:	fa21 f303 	lsr.w	r3, r1, r3
 8004a1a:	4a09      	ldr	r2, [pc, #36]	; (8004a40 <HAL_RCC_ClockConfig+0x1c4>)
 8004a1c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004a1e:	4b09      	ldr	r3, [pc, #36]	; (8004a44 <HAL_RCC_ClockConfig+0x1c8>)
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	4618      	mov	r0, r3
 8004a24:	f7fe f9f8 	bl	8002e18 <HAL_InitTick>

  return HAL_OK;
 8004a28:	2300      	movs	r3, #0
}
 8004a2a:	4618      	mov	r0, r3
 8004a2c:	3710      	adds	r7, #16
 8004a2e:	46bd      	mov	sp, r7
 8004a30:	bd80      	pop	{r7, pc}
 8004a32:	bf00      	nop
 8004a34:	40023c00 	.word	0x40023c00
 8004a38:	40023800 	.word	0x40023800
 8004a3c:	0800a344 	.word	0x0800a344
 8004a40:	20000008 	.word	0x20000008
 8004a44:	2000000c 	.word	0x2000000c

08004a48 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004a48:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004a4a:	b085      	sub	sp, #20
 8004a4c:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004a4e:	2300      	movs	r3, #0
 8004a50:	607b      	str	r3, [r7, #4]
 8004a52:	2300      	movs	r3, #0
 8004a54:	60fb      	str	r3, [r7, #12]
 8004a56:	2300      	movs	r3, #0
 8004a58:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8004a5a:	2300      	movs	r3, #0
 8004a5c:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004a5e:	4b63      	ldr	r3, [pc, #396]	; (8004bec <HAL_RCC_GetSysClockFreq+0x1a4>)
 8004a60:	689b      	ldr	r3, [r3, #8]
 8004a62:	f003 030c 	and.w	r3, r3, #12
 8004a66:	2b04      	cmp	r3, #4
 8004a68:	d007      	beq.n	8004a7a <HAL_RCC_GetSysClockFreq+0x32>
 8004a6a:	2b08      	cmp	r3, #8
 8004a6c:	d008      	beq.n	8004a80 <HAL_RCC_GetSysClockFreq+0x38>
 8004a6e:	2b00      	cmp	r3, #0
 8004a70:	f040 80b4 	bne.w	8004bdc <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004a74:	4b5e      	ldr	r3, [pc, #376]	; (8004bf0 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8004a76:	60bb      	str	r3, [r7, #8]
       break;
 8004a78:	e0b3      	b.n	8004be2 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004a7a:	4b5e      	ldr	r3, [pc, #376]	; (8004bf4 <HAL_RCC_GetSysClockFreq+0x1ac>)
 8004a7c:	60bb      	str	r3, [r7, #8]
      break;
 8004a7e:	e0b0      	b.n	8004be2 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004a80:	4b5a      	ldr	r3, [pc, #360]	; (8004bec <HAL_RCC_GetSysClockFreq+0x1a4>)
 8004a82:	685b      	ldr	r3, [r3, #4]
 8004a84:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004a88:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004a8a:	4b58      	ldr	r3, [pc, #352]	; (8004bec <HAL_RCC_GetSysClockFreq+0x1a4>)
 8004a8c:	685b      	ldr	r3, [r3, #4]
 8004a8e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004a92:	2b00      	cmp	r3, #0
 8004a94:	d04a      	beq.n	8004b2c <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004a96:	4b55      	ldr	r3, [pc, #340]	; (8004bec <HAL_RCC_GetSysClockFreq+0x1a4>)
 8004a98:	685b      	ldr	r3, [r3, #4]
 8004a9a:	099b      	lsrs	r3, r3, #6
 8004a9c:	f04f 0400 	mov.w	r4, #0
 8004aa0:	f240 11ff 	movw	r1, #511	; 0x1ff
 8004aa4:	f04f 0200 	mov.w	r2, #0
 8004aa8:	ea03 0501 	and.w	r5, r3, r1
 8004aac:	ea04 0602 	and.w	r6, r4, r2
 8004ab0:	4629      	mov	r1, r5
 8004ab2:	4632      	mov	r2, r6
 8004ab4:	f04f 0300 	mov.w	r3, #0
 8004ab8:	f04f 0400 	mov.w	r4, #0
 8004abc:	0154      	lsls	r4, r2, #5
 8004abe:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8004ac2:	014b      	lsls	r3, r1, #5
 8004ac4:	4619      	mov	r1, r3
 8004ac6:	4622      	mov	r2, r4
 8004ac8:	1b49      	subs	r1, r1, r5
 8004aca:	eb62 0206 	sbc.w	r2, r2, r6
 8004ace:	f04f 0300 	mov.w	r3, #0
 8004ad2:	f04f 0400 	mov.w	r4, #0
 8004ad6:	0194      	lsls	r4, r2, #6
 8004ad8:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8004adc:	018b      	lsls	r3, r1, #6
 8004ade:	1a5b      	subs	r3, r3, r1
 8004ae0:	eb64 0402 	sbc.w	r4, r4, r2
 8004ae4:	f04f 0100 	mov.w	r1, #0
 8004ae8:	f04f 0200 	mov.w	r2, #0
 8004aec:	00e2      	lsls	r2, r4, #3
 8004aee:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8004af2:	00d9      	lsls	r1, r3, #3
 8004af4:	460b      	mov	r3, r1
 8004af6:	4614      	mov	r4, r2
 8004af8:	195b      	adds	r3, r3, r5
 8004afa:	eb44 0406 	adc.w	r4, r4, r6
 8004afe:	f04f 0100 	mov.w	r1, #0
 8004b02:	f04f 0200 	mov.w	r2, #0
 8004b06:	0262      	lsls	r2, r4, #9
 8004b08:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8004b0c:	0259      	lsls	r1, r3, #9
 8004b0e:	460b      	mov	r3, r1
 8004b10:	4614      	mov	r4, r2
 8004b12:	4618      	mov	r0, r3
 8004b14:	4621      	mov	r1, r4
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	f04f 0400 	mov.w	r4, #0
 8004b1c:	461a      	mov	r2, r3
 8004b1e:	4623      	mov	r3, r4
 8004b20:	f7fc f842 	bl	8000ba8 <__aeabi_uldivmod>
 8004b24:	4603      	mov	r3, r0
 8004b26:	460c      	mov	r4, r1
 8004b28:	60fb      	str	r3, [r7, #12]
 8004b2a:	e049      	b.n	8004bc0 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004b2c:	4b2f      	ldr	r3, [pc, #188]	; (8004bec <HAL_RCC_GetSysClockFreq+0x1a4>)
 8004b2e:	685b      	ldr	r3, [r3, #4]
 8004b30:	099b      	lsrs	r3, r3, #6
 8004b32:	f04f 0400 	mov.w	r4, #0
 8004b36:	f240 11ff 	movw	r1, #511	; 0x1ff
 8004b3a:	f04f 0200 	mov.w	r2, #0
 8004b3e:	ea03 0501 	and.w	r5, r3, r1
 8004b42:	ea04 0602 	and.w	r6, r4, r2
 8004b46:	4629      	mov	r1, r5
 8004b48:	4632      	mov	r2, r6
 8004b4a:	f04f 0300 	mov.w	r3, #0
 8004b4e:	f04f 0400 	mov.w	r4, #0
 8004b52:	0154      	lsls	r4, r2, #5
 8004b54:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8004b58:	014b      	lsls	r3, r1, #5
 8004b5a:	4619      	mov	r1, r3
 8004b5c:	4622      	mov	r2, r4
 8004b5e:	1b49      	subs	r1, r1, r5
 8004b60:	eb62 0206 	sbc.w	r2, r2, r6
 8004b64:	f04f 0300 	mov.w	r3, #0
 8004b68:	f04f 0400 	mov.w	r4, #0
 8004b6c:	0194      	lsls	r4, r2, #6
 8004b6e:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8004b72:	018b      	lsls	r3, r1, #6
 8004b74:	1a5b      	subs	r3, r3, r1
 8004b76:	eb64 0402 	sbc.w	r4, r4, r2
 8004b7a:	f04f 0100 	mov.w	r1, #0
 8004b7e:	f04f 0200 	mov.w	r2, #0
 8004b82:	00e2      	lsls	r2, r4, #3
 8004b84:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8004b88:	00d9      	lsls	r1, r3, #3
 8004b8a:	460b      	mov	r3, r1
 8004b8c:	4614      	mov	r4, r2
 8004b8e:	195b      	adds	r3, r3, r5
 8004b90:	eb44 0406 	adc.w	r4, r4, r6
 8004b94:	f04f 0100 	mov.w	r1, #0
 8004b98:	f04f 0200 	mov.w	r2, #0
 8004b9c:	02a2      	lsls	r2, r4, #10
 8004b9e:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8004ba2:	0299      	lsls	r1, r3, #10
 8004ba4:	460b      	mov	r3, r1
 8004ba6:	4614      	mov	r4, r2
 8004ba8:	4618      	mov	r0, r3
 8004baa:	4621      	mov	r1, r4
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	f04f 0400 	mov.w	r4, #0
 8004bb2:	461a      	mov	r2, r3
 8004bb4:	4623      	mov	r3, r4
 8004bb6:	f7fb fff7 	bl	8000ba8 <__aeabi_uldivmod>
 8004bba:	4603      	mov	r3, r0
 8004bbc:	460c      	mov	r4, r1
 8004bbe:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004bc0:	4b0a      	ldr	r3, [pc, #40]	; (8004bec <HAL_RCC_GetSysClockFreq+0x1a4>)
 8004bc2:	685b      	ldr	r3, [r3, #4]
 8004bc4:	0c1b      	lsrs	r3, r3, #16
 8004bc6:	f003 0303 	and.w	r3, r3, #3
 8004bca:	3301      	adds	r3, #1
 8004bcc:	005b      	lsls	r3, r3, #1
 8004bce:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8004bd0:	68fa      	ldr	r2, [r7, #12]
 8004bd2:	683b      	ldr	r3, [r7, #0]
 8004bd4:	fbb2 f3f3 	udiv	r3, r2, r3
 8004bd8:	60bb      	str	r3, [r7, #8]
      break;
 8004bda:	e002      	b.n	8004be2 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004bdc:	4b04      	ldr	r3, [pc, #16]	; (8004bf0 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8004bde:	60bb      	str	r3, [r7, #8]
      break;
 8004be0:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004be2:	68bb      	ldr	r3, [r7, #8]
}
 8004be4:	4618      	mov	r0, r3
 8004be6:	3714      	adds	r7, #20
 8004be8:	46bd      	mov	sp, r7
 8004bea:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004bec:	40023800 	.word	0x40023800
 8004bf0:	00f42400 	.word	0x00f42400
 8004bf4:	007a1200 	.word	0x007a1200

08004bf8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004bf8:	b480      	push	{r7}
 8004bfa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004bfc:	4b03      	ldr	r3, [pc, #12]	; (8004c0c <HAL_RCC_GetHCLKFreq+0x14>)
 8004bfe:	681b      	ldr	r3, [r3, #0]
}
 8004c00:	4618      	mov	r0, r3
 8004c02:	46bd      	mov	sp, r7
 8004c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c08:	4770      	bx	lr
 8004c0a:	bf00      	nop
 8004c0c:	20000008 	.word	0x20000008

08004c10 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004c10:	b580      	push	{r7, lr}
 8004c12:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004c14:	f7ff fff0 	bl	8004bf8 <HAL_RCC_GetHCLKFreq>
 8004c18:	4601      	mov	r1, r0
 8004c1a:	4b05      	ldr	r3, [pc, #20]	; (8004c30 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004c1c:	689b      	ldr	r3, [r3, #8]
 8004c1e:	0a9b      	lsrs	r3, r3, #10
 8004c20:	f003 0307 	and.w	r3, r3, #7
 8004c24:	4a03      	ldr	r2, [pc, #12]	; (8004c34 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004c26:	5cd3      	ldrb	r3, [r2, r3]
 8004c28:	fa21 f303 	lsr.w	r3, r1, r3
}
 8004c2c:	4618      	mov	r0, r3
 8004c2e:	bd80      	pop	{r7, pc}
 8004c30:	40023800 	.word	0x40023800
 8004c34:	0800a354 	.word	0x0800a354

08004c38 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004c38:	b580      	push	{r7, lr}
 8004c3a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8004c3c:	f7ff ffdc 	bl	8004bf8 <HAL_RCC_GetHCLKFreq>
 8004c40:	4601      	mov	r1, r0
 8004c42:	4b05      	ldr	r3, [pc, #20]	; (8004c58 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004c44:	689b      	ldr	r3, [r3, #8]
 8004c46:	0b5b      	lsrs	r3, r3, #13
 8004c48:	f003 0307 	and.w	r3, r3, #7
 8004c4c:	4a03      	ldr	r2, [pc, #12]	; (8004c5c <HAL_RCC_GetPCLK2Freq+0x24>)
 8004c4e:	5cd3      	ldrb	r3, [r2, r3]
 8004c50:	fa21 f303 	lsr.w	r3, r1, r3
}
 8004c54:	4618      	mov	r0, r3
 8004c56:	bd80      	pop	{r7, pc}
 8004c58:	40023800 	.word	0x40023800
 8004c5c:	0800a354 	.word	0x0800a354

08004c60 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004c60:	b580      	push	{r7, lr}
 8004c62:	b082      	sub	sp, #8
 8004c64:	af00      	add	r7, sp, #0
 8004c66:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	2b00      	cmp	r3, #0
 8004c6c:	d101      	bne.n	8004c72 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004c6e:	2301      	movs	r3, #1
 8004c70:	e056      	b.n	8004d20 <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	2200      	movs	r2, #0
 8004c76:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004c7e:	b2db      	uxtb	r3, r3
 8004c80:	2b00      	cmp	r3, #0
 8004c82:	d106      	bne.n	8004c92 <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	2200      	movs	r2, #0
 8004c88:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004c8c:	6878      	ldr	r0, [r7, #4]
 8004c8e:	f7fd fcd5 	bl	800263c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	2202      	movs	r2, #2
 8004c96:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	681a      	ldr	r2, [r3, #0]
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004ca8:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	685a      	ldr	r2, [r3, #4]
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	689b      	ldr	r3, [r3, #8]
 8004cb2:	431a      	orrs	r2, r3
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	68db      	ldr	r3, [r3, #12]
 8004cb8:	431a      	orrs	r2, r3
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	691b      	ldr	r3, [r3, #16]
 8004cbe:	431a      	orrs	r2, r3
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	695b      	ldr	r3, [r3, #20]
 8004cc4:	431a      	orrs	r2, r3
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	699b      	ldr	r3, [r3, #24]
 8004cca:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004cce:	431a      	orrs	r2, r3
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	69db      	ldr	r3, [r3, #28]
 8004cd4:	431a      	orrs	r2, r3
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	6a1b      	ldr	r3, [r3, #32]
 8004cda:	ea42 0103 	orr.w	r1, r2, r3
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	430a      	orrs	r2, r1
 8004ce8:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	699b      	ldr	r3, [r3, #24]
 8004cee:	0c1b      	lsrs	r3, r3, #16
 8004cf0:	f003 0104 	and.w	r1, r3, #4
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	430a      	orrs	r2, r1
 8004cfe:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	69da      	ldr	r2, [r3, #28]
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004d0e:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	2200      	movs	r2, #0
 8004d14:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	2201      	movs	r2, #1
 8004d1a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8004d1e:	2300      	movs	r3, #0
}
 8004d20:	4618      	mov	r0, r3
 8004d22:	3708      	adds	r7, #8
 8004d24:	46bd      	mov	sp, r7
 8004d26:	bd80      	pop	{r7, pc}

08004d28 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004d28:	b580      	push	{r7, lr}
 8004d2a:	b082      	sub	sp, #8
 8004d2c:	af00      	add	r7, sp, #0
 8004d2e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	2b00      	cmp	r3, #0
 8004d34:	d101      	bne.n	8004d3a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004d36:	2301      	movs	r3, #1
 8004d38:	e01d      	b.n	8004d76 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004d40:	b2db      	uxtb	r3, r3
 8004d42:	2b00      	cmp	r3, #0
 8004d44:	d106      	bne.n	8004d54 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	2200      	movs	r2, #0
 8004d4a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004d4e:	6878      	ldr	r0, [r7, #4]
 8004d50:	f7fd fcdc 	bl	800270c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	2202      	movs	r2, #2
 8004d58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	681a      	ldr	r2, [r3, #0]
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	3304      	adds	r3, #4
 8004d64:	4619      	mov	r1, r3
 8004d66:	4610      	mov	r0, r2
 8004d68:	f000 fc2e 	bl	80055c8 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	2201      	movs	r2, #1
 8004d70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004d74:	2300      	movs	r3, #0
}
 8004d76:	4618      	mov	r0, r3
 8004d78:	3708      	adds	r7, #8
 8004d7a:	46bd      	mov	sp, r7
 8004d7c:	bd80      	pop	{r7, pc}

08004d7e <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004d7e:	b480      	push	{r7}
 8004d80:	b085      	sub	sp, #20
 8004d82:	af00      	add	r7, sp, #0
 8004d84:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	68da      	ldr	r2, [r3, #12]
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	f042 0201 	orr.w	r2, r2, #1
 8004d94:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	689b      	ldr	r3, [r3, #8]
 8004d9c:	f003 0307 	and.w	r3, r3, #7
 8004da0:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004da2:	68fb      	ldr	r3, [r7, #12]
 8004da4:	2b06      	cmp	r3, #6
 8004da6:	d007      	beq.n	8004db8 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	681a      	ldr	r2, [r3, #0]
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	f042 0201 	orr.w	r2, r2, #1
 8004db6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004db8:	2300      	movs	r3, #0
}
 8004dba:	4618      	mov	r0, r3
 8004dbc:	3714      	adds	r7, #20
 8004dbe:	46bd      	mov	sp, r7
 8004dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dc4:	4770      	bx	lr

08004dc6 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004dc6:	b580      	push	{r7, lr}
 8004dc8:	b082      	sub	sp, #8
 8004dca:	af00      	add	r7, sp, #0
 8004dcc:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	2b00      	cmp	r3, #0
 8004dd2:	d101      	bne.n	8004dd8 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004dd4:	2301      	movs	r3, #1
 8004dd6:	e01d      	b.n	8004e14 <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004dde:	b2db      	uxtb	r3, r3
 8004de0:	2b00      	cmp	r3, #0
 8004de2:	d106      	bne.n	8004df2 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	2200      	movs	r2, #0
 8004de8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004dec:	6878      	ldr	r0, [r7, #4]
 8004dee:	f7fd fd91 	bl	8002914 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	2202      	movs	r2, #2
 8004df6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	681a      	ldr	r2, [r3, #0]
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	3304      	adds	r3, #4
 8004e02:	4619      	mov	r1, r3
 8004e04:	4610      	mov	r0, r2
 8004e06:	f000 fbdf 	bl	80055c8 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	2201      	movs	r2, #1
 8004e0e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004e12:	2300      	movs	r3, #0
}
 8004e14:	4618      	mov	r0, r3
 8004e16:	3708      	adds	r7, #8
 8004e18:	46bd      	mov	sp, r7
 8004e1a:	bd80      	pop	{r7, pc}

08004e1c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004e1c:	b580      	push	{r7, lr}
 8004e1e:	b084      	sub	sp, #16
 8004e20:	af00      	add	r7, sp, #0
 8004e22:	6078      	str	r0, [r7, #4]
 8004e24:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	2201      	movs	r2, #1
 8004e2c:	6839      	ldr	r1, [r7, #0]
 8004e2e:	4618      	mov	r0, r3
 8004e30:	f000 feb4 	bl	8005b9c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	4a15      	ldr	r2, [pc, #84]	; (8004e90 <HAL_TIM_PWM_Start+0x74>)
 8004e3a:	4293      	cmp	r3, r2
 8004e3c:	d004      	beq.n	8004e48 <HAL_TIM_PWM_Start+0x2c>
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	4a14      	ldr	r2, [pc, #80]	; (8004e94 <HAL_TIM_PWM_Start+0x78>)
 8004e44:	4293      	cmp	r3, r2
 8004e46:	d101      	bne.n	8004e4c <HAL_TIM_PWM_Start+0x30>
 8004e48:	2301      	movs	r3, #1
 8004e4a:	e000      	b.n	8004e4e <HAL_TIM_PWM_Start+0x32>
 8004e4c:	2300      	movs	r3, #0
 8004e4e:	2b00      	cmp	r3, #0
 8004e50:	d007      	beq.n	8004e62 <HAL_TIM_PWM_Start+0x46>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004e60:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	689b      	ldr	r3, [r3, #8]
 8004e68:	f003 0307 	and.w	r3, r3, #7
 8004e6c:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004e6e:	68fb      	ldr	r3, [r7, #12]
 8004e70:	2b06      	cmp	r3, #6
 8004e72:	d007      	beq.n	8004e84 <HAL_TIM_PWM_Start+0x68>
  {
    __HAL_TIM_ENABLE(htim);
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	681a      	ldr	r2, [r3, #0]
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	f042 0201 	orr.w	r2, r2, #1
 8004e82:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004e84:	2300      	movs	r3, #0
}
 8004e86:	4618      	mov	r0, r3
 8004e88:	3710      	adds	r7, #16
 8004e8a:	46bd      	mov	sp, r7
 8004e8c:	bd80      	pop	{r7, pc}
 8004e8e:	bf00      	nop
 8004e90:	40010000 	.word	0x40010000
 8004e94:	40010400 	.word	0x40010400

08004e98 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004e98:	b580      	push	{r7, lr}
 8004e9a:	b082      	sub	sp, #8
 8004e9c:	af00      	add	r7, sp, #0
 8004e9e:	6078      	str	r0, [r7, #4]
 8004ea0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	2200      	movs	r2, #0
 8004ea8:	6839      	ldr	r1, [r7, #0]
 8004eaa:	4618      	mov	r0, r3
 8004eac:	f000 fe76 	bl	8005b9c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	4a22      	ldr	r2, [pc, #136]	; (8004f40 <HAL_TIM_PWM_Stop+0xa8>)
 8004eb6:	4293      	cmp	r3, r2
 8004eb8:	d004      	beq.n	8004ec4 <HAL_TIM_PWM_Stop+0x2c>
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	4a21      	ldr	r2, [pc, #132]	; (8004f44 <HAL_TIM_PWM_Stop+0xac>)
 8004ec0:	4293      	cmp	r3, r2
 8004ec2:	d101      	bne.n	8004ec8 <HAL_TIM_PWM_Stop+0x30>
 8004ec4:	2301      	movs	r3, #1
 8004ec6:	e000      	b.n	8004eca <HAL_TIM_PWM_Stop+0x32>
 8004ec8:	2300      	movs	r3, #0
 8004eca:	2b00      	cmp	r3, #0
 8004ecc:	d017      	beq.n	8004efe <HAL_TIM_PWM_Stop+0x66>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	6a1a      	ldr	r2, [r3, #32]
 8004ed4:	f241 1311 	movw	r3, #4369	; 0x1111
 8004ed8:	4013      	ands	r3, r2
 8004eda:	2b00      	cmp	r3, #0
 8004edc:	d10f      	bne.n	8004efe <HAL_TIM_PWM_Stop+0x66>
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	6a1a      	ldr	r2, [r3, #32]
 8004ee4:	f240 4344 	movw	r3, #1092	; 0x444
 8004ee8:	4013      	ands	r3, r2
 8004eea:	2b00      	cmp	r3, #0
 8004eec:	d107      	bne.n	8004efe <HAL_TIM_PWM_Stop+0x66>
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004efc:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	6a1a      	ldr	r2, [r3, #32]
 8004f04:	f241 1311 	movw	r3, #4369	; 0x1111
 8004f08:	4013      	ands	r3, r2
 8004f0a:	2b00      	cmp	r3, #0
 8004f0c:	d10f      	bne.n	8004f2e <HAL_TIM_PWM_Stop+0x96>
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	6a1a      	ldr	r2, [r3, #32]
 8004f14:	f240 4344 	movw	r3, #1092	; 0x444
 8004f18:	4013      	ands	r3, r2
 8004f1a:	2b00      	cmp	r3, #0
 8004f1c:	d107      	bne.n	8004f2e <HAL_TIM_PWM_Stop+0x96>
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	681a      	ldr	r2, [r3, #0]
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	f022 0201 	bic.w	r2, r2, #1
 8004f2c:	601a      	str	r2, [r3, #0]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	2201      	movs	r2, #1
 8004f32:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8004f36:	2300      	movs	r3, #0
}
 8004f38:	4618      	mov	r0, r3
 8004f3a:	3708      	adds	r7, #8
 8004f3c:	46bd      	mov	sp, r7
 8004f3e:	bd80      	pop	{r7, pc}
 8004f40:	40010000 	.word	0x40010000
 8004f44:	40010400 	.word	0x40010400

08004f48 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8004f48:	b580      	push	{r7, lr}
 8004f4a:	b086      	sub	sp, #24
 8004f4c:	af00      	add	r7, sp, #0
 8004f4e:	6078      	str	r0, [r7, #4]
 8004f50:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	2b00      	cmp	r3, #0
 8004f56:	d101      	bne.n	8004f5c <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8004f58:	2301      	movs	r3, #1
 8004f5a:	e083      	b.n	8005064 <HAL_TIM_Encoder_Init+0x11c>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004f62:	b2db      	uxtb	r3, r3
 8004f64:	2b00      	cmp	r3, #0
 8004f66:	d106      	bne.n	8004f76 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	2200      	movs	r2, #0
 8004f6c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8004f70:	6878      	ldr	r0, [r7, #4]
 8004f72:	f7fd fc51 	bl	8002818 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	2202      	movs	r2, #2
 8004f7a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	689b      	ldr	r3, [r3, #8]
 8004f84:	687a      	ldr	r2, [r7, #4]
 8004f86:	6812      	ldr	r2, [r2, #0]
 8004f88:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004f8c:	f023 0307 	bic.w	r3, r3, #7
 8004f90:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	681a      	ldr	r2, [r3, #0]
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	3304      	adds	r3, #4
 8004f9a:	4619      	mov	r1, r3
 8004f9c:	4610      	mov	r0, r2
 8004f9e:	f000 fb13 	bl	80055c8 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	689b      	ldr	r3, [r3, #8]
 8004fa8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	699b      	ldr	r3, [r3, #24]
 8004fb0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	6a1b      	ldr	r3, [r3, #32]
 8004fb8:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8004fba:	683b      	ldr	r3, [r7, #0]
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	697a      	ldr	r2, [r7, #20]
 8004fc0:	4313      	orrs	r3, r2
 8004fc2:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8004fc4:	693b      	ldr	r3, [r7, #16]
 8004fc6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004fca:	f023 0303 	bic.w	r3, r3, #3
 8004fce:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8004fd0:	683b      	ldr	r3, [r7, #0]
 8004fd2:	689a      	ldr	r2, [r3, #8]
 8004fd4:	683b      	ldr	r3, [r7, #0]
 8004fd6:	699b      	ldr	r3, [r3, #24]
 8004fd8:	021b      	lsls	r3, r3, #8
 8004fda:	4313      	orrs	r3, r2
 8004fdc:	693a      	ldr	r2, [r7, #16]
 8004fde:	4313      	orrs	r3, r2
 8004fe0:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8004fe2:	693b      	ldr	r3, [r7, #16]
 8004fe4:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8004fe8:	f023 030c 	bic.w	r3, r3, #12
 8004fec:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8004fee:	693b      	ldr	r3, [r7, #16]
 8004ff0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004ff4:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004ff8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8004ffa:	683b      	ldr	r3, [r7, #0]
 8004ffc:	68da      	ldr	r2, [r3, #12]
 8004ffe:	683b      	ldr	r3, [r7, #0]
 8005000:	69db      	ldr	r3, [r3, #28]
 8005002:	021b      	lsls	r3, r3, #8
 8005004:	4313      	orrs	r3, r2
 8005006:	693a      	ldr	r2, [r7, #16]
 8005008:	4313      	orrs	r3, r2
 800500a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 800500c:	683b      	ldr	r3, [r7, #0]
 800500e:	691b      	ldr	r3, [r3, #16]
 8005010:	011a      	lsls	r2, r3, #4
 8005012:	683b      	ldr	r3, [r7, #0]
 8005014:	6a1b      	ldr	r3, [r3, #32]
 8005016:	031b      	lsls	r3, r3, #12
 8005018:	4313      	orrs	r3, r2
 800501a:	693a      	ldr	r2, [r7, #16]
 800501c:	4313      	orrs	r3, r2
 800501e:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8005020:	68fb      	ldr	r3, [r7, #12]
 8005022:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8005026:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8005028:	68fb      	ldr	r3, [r7, #12]
 800502a:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 800502e:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8005030:	683b      	ldr	r3, [r7, #0]
 8005032:	685a      	ldr	r2, [r3, #4]
 8005034:	683b      	ldr	r3, [r7, #0]
 8005036:	695b      	ldr	r3, [r3, #20]
 8005038:	011b      	lsls	r3, r3, #4
 800503a:	4313      	orrs	r3, r2
 800503c:	68fa      	ldr	r2, [r7, #12]
 800503e:	4313      	orrs	r3, r2
 8005040:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	697a      	ldr	r2, [r7, #20]
 8005048:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	693a      	ldr	r2, [r7, #16]
 8005050:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	68fa      	ldr	r2, [r7, #12]
 8005058:	621a      	str	r2, [r3, #32]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	2201      	movs	r2, #1
 800505e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005062:	2300      	movs	r3, #0
}
 8005064:	4618      	mov	r0, r3
 8005066:	3718      	adds	r7, #24
 8005068:	46bd      	mov	sp, r7
 800506a:	bd80      	pop	{r7, pc}

0800506c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800506c:	b580      	push	{r7, lr}
 800506e:	b082      	sub	sp, #8
 8005070:	af00      	add	r7, sp, #0
 8005072:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	691b      	ldr	r3, [r3, #16]
 800507a:	f003 0302 	and.w	r3, r3, #2
 800507e:	2b02      	cmp	r3, #2
 8005080:	d122      	bne.n	80050c8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	68db      	ldr	r3, [r3, #12]
 8005088:	f003 0302 	and.w	r3, r3, #2
 800508c:	2b02      	cmp	r3, #2
 800508e:	d11b      	bne.n	80050c8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	f06f 0202 	mvn.w	r2, #2
 8005098:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	2201      	movs	r2, #1
 800509e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	699b      	ldr	r3, [r3, #24]
 80050a6:	f003 0303 	and.w	r3, r3, #3
 80050aa:	2b00      	cmp	r3, #0
 80050ac:	d003      	beq.n	80050b6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80050ae:	6878      	ldr	r0, [r7, #4]
 80050b0:	f000 fa6b 	bl	800558a <HAL_TIM_IC_CaptureCallback>
 80050b4:	e005      	b.n	80050c2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80050b6:	6878      	ldr	r0, [r7, #4]
 80050b8:	f000 fa5d 	bl	8005576 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80050bc:	6878      	ldr	r0, [r7, #4]
 80050be:	f000 fa6e 	bl	800559e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	2200      	movs	r2, #0
 80050c6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	691b      	ldr	r3, [r3, #16]
 80050ce:	f003 0304 	and.w	r3, r3, #4
 80050d2:	2b04      	cmp	r3, #4
 80050d4:	d122      	bne.n	800511c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	68db      	ldr	r3, [r3, #12]
 80050dc:	f003 0304 	and.w	r3, r3, #4
 80050e0:	2b04      	cmp	r3, #4
 80050e2:	d11b      	bne.n	800511c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	f06f 0204 	mvn.w	r2, #4
 80050ec:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	2202      	movs	r2, #2
 80050f2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	699b      	ldr	r3, [r3, #24]
 80050fa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80050fe:	2b00      	cmp	r3, #0
 8005100:	d003      	beq.n	800510a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005102:	6878      	ldr	r0, [r7, #4]
 8005104:	f000 fa41 	bl	800558a <HAL_TIM_IC_CaptureCallback>
 8005108:	e005      	b.n	8005116 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800510a:	6878      	ldr	r0, [r7, #4]
 800510c:	f000 fa33 	bl	8005576 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005110:	6878      	ldr	r0, [r7, #4]
 8005112:	f000 fa44 	bl	800559e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	2200      	movs	r2, #0
 800511a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	691b      	ldr	r3, [r3, #16]
 8005122:	f003 0308 	and.w	r3, r3, #8
 8005126:	2b08      	cmp	r3, #8
 8005128:	d122      	bne.n	8005170 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	681b      	ldr	r3, [r3, #0]
 800512e:	68db      	ldr	r3, [r3, #12]
 8005130:	f003 0308 	and.w	r3, r3, #8
 8005134:	2b08      	cmp	r3, #8
 8005136:	d11b      	bne.n	8005170 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	f06f 0208 	mvn.w	r2, #8
 8005140:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	2204      	movs	r2, #4
 8005146:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	69db      	ldr	r3, [r3, #28]
 800514e:	f003 0303 	and.w	r3, r3, #3
 8005152:	2b00      	cmp	r3, #0
 8005154:	d003      	beq.n	800515e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005156:	6878      	ldr	r0, [r7, #4]
 8005158:	f000 fa17 	bl	800558a <HAL_TIM_IC_CaptureCallback>
 800515c:	e005      	b.n	800516a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800515e:	6878      	ldr	r0, [r7, #4]
 8005160:	f000 fa09 	bl	8005576 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005164:	6878      	ldr	r0, [r7, #4]
 8005166:	f000 fa1a 	bl	800559e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	2200      	movs	r2, #0
 800516e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	691b      	ldr	r3, [r3, #16]
 8005176:	f003 0310 	and.w	r3, r3, #16
 800517a:	2b10      	cmp	r3, #16
 800517c:	d122      	bne.n	80051c4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	68db      	ldr	r3, [r3, #12]
 8005184:	f003 0310 	and.w	r3, r3, #16
 8005188:	2b10      	cmp	r3, #16
 800518a:	d11b      	bne.n	80051c4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	f06f 0210 	mvn.w	r2, #16
 8005194:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	2208      	movs	r2, #8
 800519a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	69db      	ldr	r3, [r3, #28]
 80051a2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80051a6:	2b00      	cmp	r3, #0
 80051a8:	d003      	beq.n	80051b2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80051aa:	6878      	ldr	r0, [r7, #4]
 80051ac:	f000 f9ed 	bl	800558a <HAL_TIM_IC_CaptureCallback>
 80051b0:	e005      	b.n	80051be <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80051b2:	6878      	ldr	r0, [r7, #4]
 80051b4:	f000 f9df 	bl	8005576 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80051b8:	6878      	ldr	r0, [r7, #4]
 80051ba:	f000 f9f0 	bl	800559e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	2200      	movs	r2, #0
 80051c2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	691b      	ldr	r3, [r3, #16]
 80051ca:	f003 0301 	and.w	r3, r3, #1
 80051ce:	2b01      	cmp	r3, #1
 80051d0:	d10e      	bne.n	80051f0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	68db      	ldr	r3, [r3, #12]
 80051d8:	f003 0301 	and.w	r3, r3, #1
 80051dc:	2b01      	cmp	r3, #1
 80051de:	d107      	bne.n	80051f0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	f06f 0201 	mvn.w	r2, #1
 80051e8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80051ea:	6878      	ldr	r0, [r7, #4]
 80051ec:	f7fb ff9e 	bl	800112c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	691b      	ldr	r3, [r3, #16]
 80051f6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80051fa:	2b80      	cmp	r3, #128	; 0x80
 80051fc:	d10e      	bne.n	800521c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	68db      	ldr	r3, [r3, #12]
 8005204:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005208:	2b80      	cmp	r3, #128	; 0x80
 800520a:	d107      	bne.n	800521c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005214:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005216:	6878      	ldr	r0, [r7, #4]
 8005218:	f000 fd6c 	bl	8005cf4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	691b      	ldr	r3, [r3, #16]
 8005222:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005226:	2b40      	cmp	r3, #64	; 0x40
 8005228:	d10e      	bne.n	8005248 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	68db      	ldr	r3, [r3, #12]
 8005230:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005234:	2b40      	cmp	r3, #64	; 0x40
 8005236:	d107      	bne.n	8005248 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005240:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005242:	6878      	ldr	r0, [r7, #4]
 8005244:	f000 f9b5 	bl	80055b2 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	691b      	ldr	r3, [r3, #16]
 800524e:	f003 0320 	and.w	r3, r3, #32
 8005252:	2b20      	cmp	r3, #32
 8005254:	d10e      	bne.n	8005274 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	681b      	ldr	r3, [r3, #0]
 800525a:	68db      	ldr	r3, [r3, #12]
 800525c:	f003 0320 	and.w	r3, r3, #32
 8005260:	2b20      	cmp	r3, #32
 8005262:	d107      	bne.n	8005274 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	f06f 0220 	mvn.w	r2, #32
 800526c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800526e:	6878      	ldr	r0, [r7, #4]
 8005270:	f000 fd36 	bl	8005ce0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005274:	bf00      	nop
 8005276:	3708      	adds	r7, #8
 8005278:	46bd      	mov	sp, r7
 800527a:	bd80      	pop	{r7, pc}

0800527c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800527c:	b580      	push	{r7, lr}
 800527e:	b084      	sub	sp, #16
 8005280:	af00      	add	r7, sp, #0
 8005282:	60f8      	str	r0, [r7, #12]
 8005284:	60b9      	str	r1, [r7, #8]
 8005286:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005288:	68fb      	ldr	r3, [r7, #12]
 800528a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800528e:	2b01      	cmp	r3, #1
 8005290:	d101      	bne.n	8005296 <HAL_TIM_PWM_ConfigChannel+0x1a>
 8005292:	2302      	movs	r3, #2
 8005294:	e0b4      	b.n	8005400 <HAL_TIM_PWM_ConfigChannel+0x184>
 8005296:	68fb      	ldr	r3, [r7, #12]
 8005298:	2201      	movs	r2, #1
 800529a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800529e:	68fb      	ldr	r3, [r7, #12]
 80052a0:	2202      	movs	r2, #2
 80052a2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	2b0c      	cmp	r3, #12
 80052aa:	f200 809f 	bhi.w	80053ec <HAL_TIM_PWM_ConfigChannel+0x170>
 80052ae:	a201      	add	r2, pc, #4	; (adr r2, 80052b4 <HAL_TIM_PWM_ConfigChannel+0x38>)
 80052b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80052b4:	080052e9 	.word	0x080052e9
 80052b8:	080053ed 	.word	0x080053ed
 80052bc:	080053ed 	.word	0x080053ed
 80052c0:	080053ed 	.word	0x080053ed
 80052c4:	08005329 	.word	0x08005329
 80052c8:	080053ed 	.word	0x080053ed
 80052cc:	080053ed 	.word	0x080053ed
 80052d0:	080053ed 	.word	0x080053ed
 80052d4:	0800536b 	.word	0x0800536b
 80052d8:	080053ed 	.word	0x080053ed
 80052dc:	080053ed 	.word	0x080053ed
 80052e0:	080053ed 	.word	0x080053ed
 80052e4:	080053ab 	.word	0x080053ab
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80052e8:	68fb      	ldr	r3, [r7, #12]
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	68b9      	ldr	r1, [r7, #8]
 80052ee:	4618      	mov	r0, r3
 80052f0:	f000 fa0a 	bl	8005708 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80052f4:	68fb      	ldr	r3, [r7, #12]
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	699a      	ldr	r2, [r3, #24]
 80052fa:	68fb      	ldr	r3, [r7, #12]
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	f042 0208 	orr.w	r2, r2, #8
 8005302:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005304:	68fb      	ldr	r3, [r7, #12]
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	699a      	ldr	r2, [r3, #24]
 800530a:	68fb      	ldr	r3, [r7, #12]
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	f022 0204 	bic.w	r2, r2, #4
 8005312:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005314:	68fb      	ldr	r3, [r7, #12]
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	6999      	ldr	r1, [r3, #24]
 800531a:	68bb      	ldr	r3, [r7, #8]
 800531c:	691a      	ldr	r2, [r3, #16]
 800531e:	68fb      	ldr	r3, [r7, #12]
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	430a      	orrs	r2, r1
 8005324:	619a      	str	r2, [r3, #24]
      break;
 8005326:	e062      	b.n	80053ee <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005328:	68fb      	ldr	r3, [r7, #12]
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	68b9      	ldr	r1, [r7, #8]
 800532e:	4618      	mov	r0, r3
 8005330:	f000 fa5a 	bl	80057e8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005334:	68fb      	ldr	r3, [r7, #12]
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	699a      	ldr	r2, [r3, #24]
 800533a:	68fb      	ldr	r3, [r7, #12]
 800533c:	681b      	ldr	r3, [r3, #0]
 800533e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005342:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005344:	68fb      	ldr	r3, [r7, #12]
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	699a      	ldr	r2, [r3, #24]
 800534a:	68fb      	ldr	r3, [r7, #12]
 800534c:	681b      	ldr	r3, [r3, #0]
 800534e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005352:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005354:	68fb      	ldr	r3, [r7, #12]
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	6999      	ldr	r1, [r3, #24]
 800535a:	68bb      	ldr	r3, [r7, #8]
 800535c:	691b      	ldr	r3, [r3, #16]
 800535e:	021a      	lsls	r2, r3, #8
 8005360:	68fb      	ldr	r3, [r7, #12]
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	430a      	orrs	r2, r1
 8005366:	619a      	str	r2, [r3, #24]
      break;
 8005368:	e041      	b.n	80053ee <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800536a:	68fb      	ldr	r3, [r7, #12]
 800536c:	681b      	ldr	r3, [r3, #0]
 800536e:	68b9      	ldr	r1, [r7, #8]
 8005370:	4618      	mov	r0, r3
 8005372:	f000 faaf 	bl	80058d4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005376:	68fb      	ldr	r3, [r7, #12]
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	69da      	ldr	r2, [r3, #28]
 800537c:	68fb      	ldr	r3, [r7, #12]
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	f042 0208 	orr.w	r2, r2, #8
 8005384:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005386:	68fb      	ldr	r3, [r7, #12]
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	69da      	ldr	r2, [r3, #28]
 800538c:	68fb      	ldr	r3, [r7, #12]
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	f022 0204 	bic.w	r2, r2, #4
 8005394:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005396:	68fb      	ldr	r3, [r7, #12]
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	69d9      	ldr	r1, [r3, #28]
 800539c:	68bb      	ldr	r3, [r7, #8]
 800539e:	691a      	ldr	r2, [r3, #16]
 80053a0:	68fb      	ldr	r3, [r7, #12]
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	430a      	orrs	r2, r1
 80053a6:	61da      	str	r2, [r3, #28]
      break;
 80053a8:	e021      	b.n	80053ee <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80053aa:	68fb      	ldr	r3, [r7, #12]
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	68b9      	ldr	r1, [r7, #8]
 80053b0:	4618      	mov	r0, r3
 80053b2:	f000 fb03 	bl	80059bc <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80053b6:	68fb      	ldr	r3, [r7, #12]
 80053b8:	681b      	ldr	r3, [r3, #0]
 80053ba:	69da      	ldr	r2, [r3, #28]
 80053bc:	68fb      	ldr	r3, [r7, #12]
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80053c4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80053c6:	68fb      	ldr	r3, [r7, #12]
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	69da      	ldr	r2, [r3, #28]
 80053cc:	68fb      	ldr	r3, [r7, #12]
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80053d4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80053d6:	68fb      	ldr	r3, [r7, #12]
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	69d9      	ldr	r1, [r3, #28]
 80053dc:	68bb      	ldr	r3, [r7, #8]
 80053de:	691b      	ldr	r3, [r3, #16]
 80053e0:	021a      	lsls	r2, r3, #8
 80053e2:	68fb      	ldr	r3, [r7, #12]
 80053e4:	681b      	ldr	r3, [r3, #0]
 80053e6:	430a      	orrs	r2, r1
 80053e8:	61da      	str	r2, [r3, #28]
      break;
 80053ea:	e000      	b.n	80053ee <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 80053ec:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 80053ee:	68fb      	ldr	r3, [r7, #12]
 80053f0:	2201      	movs	r2, #1
 80053f2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80053f6:	68fb      	ldr	r3, [r7, #12]
 80053f8:	2200      	movs	r2, #0
 80053fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80053fe:	2300      	movs	r3, #0
}
 8005400:	4618      	mov	r0, r3
 8005402:	3710      	adds	r7, #16
 8005404:	46bd      	mov	sp, r7
 8005406:	bd80      	pop	{r7, pc}

08005408 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005408:	b580      	push	{r7, lr}
 800540a:	b084      	sub	sp, #16
 800540c:	af00      	add	r7, sp, #0
 800540e:	6078      	str	r0, [r7, #4]
 8005410:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005418:	2b01      	cmp	r3, #1
 800541a:	d101      	bne.n	8005420 <HAL_TIM_ConfigClockSource+0x18>
 800541c:	2302      	movs	r3, #2
 800541e:	e0a6      	b.n	800556e <HAL_TIM_ConfigClockSource+0x166>
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	2201      	movs	r2, #1
 8005424:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	2202      	movs	r2, #2
 800542c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	689b      	ldr	r3, [r3, #8]
 8005436:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005438:	68fb      	ldr	r3, [r7, #12]
 800543a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800543e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005440:	68fb      	ldr	r3, [r7, #12]
 8005442:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005446:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	68fa      	ldr	r2, [r7, #12]
 800544e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005450:	683b      	ldr	r3, [r7, #0]
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	2b40      	cmp	r3, #64	; 0x40
 8005456:	d067      	beq.n	8005528 <HAL_TIM_ConfigClockSource+0x120>
 8005458:	2b40      	cmp	r3, #64	; 0x40
 800545a:	d80b      	bhi.n	8005474 <HAL_TIM_ConfigClockSource+0x6c>
 800545c:	2b10      	cmp	r3, #16
 800545e:	d073      	beq.n	8005548 <HAL_TIM_ConfigClockSource+0x140>
 8005460:	2b10      	cmp	r3, #16
 8005462:	d802      	bhi.n	800546a <HAL_TIM_ConfigClockSource+0x62>
 8005464:	2b00      	cmp	r3, #0
 8005466:	d06f      	beq.n	8005548 <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8005468:	e078      	b.n	800555c <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800546a:	2b20      	cmp	r3, #32
 800546c:	d06c      	beq.n	8005548 <HAL_TIM_ConfigClockSource+0x140>
 800546e:	2b30      	cmp	r3, #48	; 0x30
 8005470:	d06a      	beq.n	8005548 <HAL_TIM_ConfigClockSource+0x140>
      break;
 8005472:	e073      	b.n	800555c <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8005474:	2b70      	cmp	r3, #112	; 0x70
 8005476:	d00d      	beq.n	8005494 <HAL_TIM_ConfigClockSource+0x8c>
 8005478:	2b70      	cmp	r3, #112	; 0x70
 800547a:	d804      	bhi.n	8005486 <HAL_TIM_ConfigClockSource+0x7e>
 800547c:	2b50      	cmp	r3, #80	; 0x50
 800547e:	d033      	beq.n	80054e8 <HAL_TIM_ConfigClockSource+0xe0>
 8005480:	2b60      	cmp	r3, #96	; 0x60
 8005482:	d041      	beq.n	8005508 <HAL_TIM_ConfigClockSource+0x100>
      break;
 8005484:	e06a      	b.n	800555c <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8005486:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800548a:	d066      	beq.n	800555a <HAL_TIM_ConfigClockSource+0x152>
 800548c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005490:	d017      	beq.n	80054c2 <HAL_TIM_ConfigClockSource+0xba>
      break;
 8005492:	e063      	b.n	800555c <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	6818      	ldr	r0, [r3, #0]
 8005498:	683b      	ldr	r3, [r7, #0]
 800549a:	6899      	ldr	r1, [r3, #8]
 800549c:	683b      	ldr	r3, [r7, #0]
 800549e:	685a      	ldr	r2, [r3, #4]
 80054a0:	683b      	ldr	r3, [r7, #0]
 80054a2:	68db      	ldr	r3, [r3, #12]
 80054a4:	f000 fb5a 	bl	8005b5c <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	689b      	ldr	r3, [r3, #8]
 80054ae:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80054b0:	68fb      	ldr	r3, [r7, #12]
 80054b2:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80054b6:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	68fa      	ldr	r2, [r7, #12]
 80054be:	609a      	str	r2, [r3, #8]
      break;
 80054c0:	e04c      	b.n	800555c <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	6818      	ldr	r0, [r3, #0]
 80054c6:	683b      	ldr	r3, [r7, #0]
 80054c8:	6899      	ldr	r1, [r3, #8]
 80054ca:	683b      	ldr	r3, [r7, #0]
 80054cc:	685a      	ldr	r2, [r3, #4]
 80054ce:	683b      	ldr	r3, [r7, #0]
 80054d0:	68db      	ldr	r3, [r3, #12]
 80054d2:	f000 fb43 	bl	8005b5c <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	681b      	ldr	r3, [r3, #0]
 80054da:	689a      	ldr	r2, [r3, #8]
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80054e4:	609a      	str	r2, [r3, #8]
      break;
 80054e6:	e039      	b.n	800555c <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	6818      	ldr	r0, [r3, #0]
 80054ec:	683b      	ldr	r3, [r7, #0]
 80054ee:	6859      	ldr	r1, [r3, #4]
 80054f0:	683b      	ldr	r3, [r7, #0]
 80054f2:	68db      	ldr	r3, [r3, #12]
 80054f4:	461a      	mov	r2, r3
 80054f6:	f000 fab7 	bl	8005a68 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	2150      	movs	r1, #80	; 0x50
 8005500:	4618      	mov	r0, r3
 8005502:	f000 fb10 	bl	8005b26 <TIM_ITRx_SetConfig>
      break;
 8005506:	e029      	b.n	800555c <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	6818      	ldr	r0, [r3, #0]
 800550c:	683b      	ldr	r3, [r7, #0]
 800550e:	6859      	ldr	r1, [r3, #4]
 8005510:	683b      	ldr	r3, [r7, #0]
 8005512:	68db      	ldr	r3, [r3, #12]
 8005514:	461a      	mov	r2, r3
 8005516:	f000 fad6 	bl	8005ac6 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	2160      	movs	r1, #96	; 0x60
 8005520:	4618      	mov	r0, r3
 8005522:	f000 fb00 	bl	8005b26 <TIM_ITRx_SetConfig>
      break;
 8005526:	e019      	b.n	800555c <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	6818      	ldr	r0, [r3, #0]
 800552c:	683b      	ldr	r3, [r7, #0]
 800552e:	6859      	ldr	r1, [r3, #4]
 8005530:	683b      	ldr	r3, [r7, #0]
 8005532:	68db      	ldr	r3, [r3, #12]
 8005534:	461a      	mov	r2, r3
 8005536:	f000 fa97 	bl	8005a68 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	681b      	ldr	r3, [r3, #0]
 800553e:	2140      	movs	r1, #64	; 0x40
 8005540:	4618      	mov	r0, r3
 8005542:	f000 faf0 	bl	8005b26 <TIM_ITRx_SetConfig>
      break;
 8005546:	e009      	b.n	800555c <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	681a      	ldr	r2, [r3, #0]
 800554c:	683b      	ldr	r3, [r7, #0]
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	4619      	mov	r1, r3
 8005552:	4610      	mov	r0, r2
 8005554:	f000 fae7 	bl	8005b26 <TIM_ITRx_SetConfig>
      break;
 8005558:	e000      	b.n	800555c <HAL_TIM_ConfigClockSource+0x154>
      break;
 800555a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	2201      	movs	r2, #1
 8005560:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	2200      	movs	r2, #0
 8005568:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800556c:	2300      	movs	r3, #0
}
 800556e:	4618      	mov	r0, r3
 8005570:	3710      	adds	r7, #16
 8005572:	46bd      	mov	sp, r7
 8005574:	bd80      	pop	{r7, pc}

08005576 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005576:	b480      	push	{r7}
 8005578:	b083      	sub	sp, #12
 800557a:	af00      	add	r7, sp, #0
 800557c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800557e:	bf00      	nop
 8005580:	370c      	adds	r7, #12
 8005582:	46bd      	mov	sp, r7
 8005584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005588:	4770      	bx	lr

0800558a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800558a:	b480      	push	{r7}
 800558c:	b083      	sub	sp, #12
 800558e:	af00      	add	r7, sp, #0
 8005590:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005592:	bf00      	nop
 8005594:	370c      	adds	r7, #12
 8005596:	46bd      	mov	sp, r7
 8005598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800559c:	4770      	bx	lr

0800559e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800559e:	b480      	push	{r7}
 80055a0:	b083      	sub	sp, #12
 80055a2:	af00      	add	r7, sp, #0
 80055a4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80055a6:	bf00      	nop
 80055a8:	370c      	adds	r7, #12
 80055aa:	46bd      	mov	sp, r7
 80055ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055b0:	4770      	bx	lr

080055b2 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80055b2:	b480      	push	{r7}
 80055b4:	b083      	sub	sp, #12
 80055b6:	af00      	add	r7, sp, #0
 80055b8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80055ba:	bf00      	nop
 80055bc:	370c      	adds	r7, #12
 80055be:	46bd      	mov	sp, r7
 80055c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055c4:	4770      	bx	lr
	...

080055c8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80055c8:	b480      	push	{r7}
 80055ca:	b085      	sub	sp, #20
 80055cc:	af00      	add	r7, sp, #0
 80055ce:	6078      	str	r0, [r7, #4]
 80055d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	4a40      	ldr	r2, [pc, #256]	; (80056dc <TIM_Base_SetConfig+0x114>)
 80055dc:	4293      	cmp	r3, r2
 80055de:	d013      	beq.n	8005608 <TIM_Base_SetConfig+0x40>
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80055e6:	d00f      	beq.n	8005608 <TIM_Base_SetConfig+0x40>
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	4a3d      	ldr	r2, [pc, #244]	; (80056e0 <TIM_Base_SetConfig+0x118>)
 80055ec:	4293      	cmp	r3, r2
 80055ee:	d00b      	beq.n	8005608 <TIM_Base_SetConfig+0x40>
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	4a3c      	ldr	r2, [pc, #240]	; (80056e4 <TIM_Base_SetConfig+0x11c>)
 80055f4:	4293      	cmp	r3, r2
 80055f6:	d007      	beq.n	8005608 <TIM_Base_SetConfig+0x40>
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	4a3b      	ldr	r2, [pc, #236]	; (80056e8 <TIM_Base_SetConfig+0x120>)
 80055fc:	4293      	cmp	r3, r2
 80055fe:	d003      	beq.n	8005608 <TIM_Base_SetConfig+0x40>
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	4a3a      	ldr	r2, [pc, #232]	; (80056ec <TIM_Base_SetConfig+0x124>)
 8005604:	4293      	cmp	r3, r2
 8005606:	d108      	bne.n	800561a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005608:	68fb      	ldr	r3, [r7, #12]
 800560a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800560e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005610:	683b      	ldr	r3, [r7, #0]
 8005612:	685b      	ldr	r3, [r3, #4]
 8005614:	68fa      	ldr	r2, [r7, #12]
 8005616:	4313      	orrs	r3, r2
 8005618:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	4a2f      	ldr	r2, [pc, #188]	; (80056dc <TIM_Base_SetConfig+0x114>)
 800561e:	4293      	cmp	r3, r2
 8005620:	d02b      	beq.n	800567a <TIM_Base_SetConfig+0xb2>
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005628:	d027      	beq.n	800567a <TIM_Base_SetConfig+0xb2>
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	4a2c      	ldr	r2, [pc, #176]	; (80056e0 <TIM_Base_SetConfig+0x118>)
 800562e:	4293      	cmp	r3, r2
 8005630:	d023      	beq.n	800567a <TIM_Base_SetConfig+0xb2>
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	4a2b      	ldr	r2, [pc, #172]	; (80056e4 <TIM_Base_SetConfig+0x11c>)
 8005636:	4293      	cmp	r3, r2
 8005638:	d01f      	beq.n	800567a <TIM_Base_SetConfig+0xb2>
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	4a2a      	ldr	r2, [pc, #168]	; (80056e8 <TIM_Base_SetConfig+0x120>)
 800563e:	4293      	cmp	r3, r2
 8005640:	d01b      	beq.n	800567a <TIM_Base_SetConfig+0xb2>
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	4a29      	ldr	r2, [pc, #164]	; (80056ec <TIM_Base_SetConfig+0x124>)
 8005646:	4293      	cmp	r3, r2
 8005648:	d017      	beq.n	800567a <TIM_Base_SetConfig+0xb2>
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	4a28      	ldr	r2, [pc, #160]	; (80056f0 <TIM_Base_SetConfig+0x128>)
 800564e:	4293      	cmp	r3, r2
 8005650:	d013      	beq.n	800567a <TIM_Base_SetConfig+0xb2>
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	4a27      	ldr	r2, [pc, #156]	; (80056f4 <TIM_Base_SetConfig+0x12c>)
 8005656:	4293      	cmp	r3, r2
 8005658:	d00f      	beq.n	800567a <TIM_Base_SetConfig+0xb2>
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	4a26      	ldr	r2, [pc, #152]	; (80056f8 <TIM_Base_SetConfig+0x130>)
 800565e:	4293      	cmp	r3, r2
 8005660:	d00b      	beq.n	800567a <TIM_Base_SetConfig+0xb2>
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	4a25      	ldr	r2, [pc, #148]	; (80056fc <TIM_Base_SetConfig+0x134>)
 8005666:	4293      	cmp	r3, r2
 8005668:	d007      	beq.n	800567a <TIM_Base_SetConfig+0xb2>
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	4a24      	ldr	r2, [pc, #144]	; (8005700 <TIM_Base_SetConfig+0x138>)
 800566e:	4293      	cmp	r3, r2
 8005670:	d003      	beq.n	800567a <TIM_Base_SetConfig+0xb2>
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	4a23      	ldr	r2, [pc, #140]	; (8005704 <TIM_Base_SetConfig+0x13c>)
 8005676:	4293      	cmp	r3, r2
 8005678:	d108      	bne.n	800568c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800567a:	68fb      	ldr	r3, [r7, #12]
 800567c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005680:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005682:	683b      	ldr	r3, [r7, #0]
 8005684:	68db      	ldr	r3, [r3, #12]
 8005686:	68fa      	ldr	r2, [r7, #12]
 8005688:	4313      	orrs	r3, r2
 800568a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800568c:	68fb      	ldr	r3, [r7, #12]
 800568e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005692:	683b      	ldr	r3, [r7, #0]
 8005694:	695b      	ldr	r3, [r3, #20]
 8005696:	4313      	orrs	r3, r2
 8005698:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	68fa      	ldr	r2, [r7, #12]
 800569e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80056a0:	683b      	ldr	r3, [r7, #0]
 80056a2:	689a      	ldr	r2, [r3, #8]
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80056a8:	683b      	ldr	r3, [r7, #0]
 80056aa:	681a      	ldr	r2, [r3, #0]
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	4a0a      	ldr	r2, [pc, #40]	; (80056dc <TIM_Base_SetConfig+0x114>)
 80056b4:	4293      	cmp	r3, r2
 80056b6:	d003      	beq.n	80056c0 <TIM_Base_SetConfig+0xf8>
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	4a0c      	ldr	r2, [pc, #48]	; (80056ec <TIM_Base_SetConfig+0x124>)
 80056bc:	4293      	cmp	r3, r2
 80056be:	d103      	bne.n	80056c8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80056c0:	683b      	ldr	r3, [r7, #0]
 80056c2:	691a      	ldr	r2, [r3, #16]
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	2201      	movs	r2, #1
 80056cc:	615a      	str	r2, [r3, #20]
}
 80056ce:	bf00      	nop
 80056d0:	3714      	adds	r7, #20
 80056d2:	46bd      	mov	sp, r7
 80056d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056d8:	4770      	bx	lr
 80056da:	bf00      	nop
 80056dc:	40010000 	.word	0x40010000
 80056e0:	40000400 	.word	0x40000400
 80056e4:	40000800 	.word	0x40000800
 80056e8:	40000c00 	.word	0x40000c00
 80056ec:	40010400 	.word	0x40010400
 80056f0:	40014000 	.word	0x40014000
 80056f4:	40014400 	.word	0x40014400
 80056f8:	40014800 	.word	0x40014800
 80056fc:	40001800 	.word	0x40001800
 8005700:	40001c00 	.word	0x40001c00
 8005704:	40002000 	.word	0x40002000

08005708 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005708:	b480      	push	{r7}
 800570a:	b087      	sub	sp, #28
 800570c:	af00      	add	r7, sp, #0
 800570e:	6078      	str	r0, [r7, #4]
 8005710:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	6a1b      	ldr	r3, [r3, #32]
 8005716:	f023 0201 	bic.w	r2, r3, #1
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	6a1b      	ldr	r3, [r3, #32]
 8005722:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	685b      	ldr	r3, [r3, #4]
 8005728:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	699b      	ldr	r3, [r3, #24]
 800572e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005730:	68fb      	ldr	r3, [r7, #12]
 8005732:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005736:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005738:	68fb      	ldr	r3, [r7, #12]
 800573a:	f023 0303 	bic.w	r3, r3, #3
 800573e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005740:	683b      	ldr	r3, [r7, #0]
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	68fa      	ldr	r2, [r7, #12]
 8005746:	4313      	orrs	r3, r2
 8005748:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800574a:	697b      	ldr	r3, [r7, #20]
 800574c:	f023 0302 	bic.w	r3, r3, #2
 8005750:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005752:	683b      	ldr	r3, [r7, #0]
 8005754:	689b      	ldr	r3, [r3, #8]
 8005756:	697a      	ldr	r2, [r7, #20]
 8005758:	4313      	orrs	r3, r2
 800575a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	4a20      	ldr	r2, [pc, #128]	; (80057e0 <TIM_OC1_SetConfig+0xd8>)
 8005760:	4293      	cmp	r3, r2
 8005762:	d003      	beq.n	800576c <TIM_OC1_SetConfig+0x64>
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	4a1f      	ldr	r2, [pc, #124]	; (80057e4 <TIM_OC1_SetConfig+0xdc>)
 8005768:	4293      	cmp	r3, r2
 800576a:	d10c      	bne.n	8005786 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800576c:	697b      	ldr	r3, [r7, #20]
 800576e:	f023 0308 	bic.w	r3, r3, #8
 8005772:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005774:	683b      	ldr	r3, [r7, #0]
 8005776:	68db      	ldr	r3, [r3, #12]
 8005778:	697a      	ldr	r2, [r7, #20]
 800577a:	4313      	orrs	r3, r2
 800577c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800577e:	697b      	ldr	r3, [r7, #20]
 8005780:	f023 0304 	bic.w	r3, r3, #4
 8005784:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	4a15      	ldr	r2, [pc, #84]	; (80057e0 <TIM_OC1_SetConfig+0xd8>)
 800578a:	4293      	cmp	r3, r2
 800578c:	d003      	beq.n	8005796 <TIM_OC1_SetConfig+0x8e>
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	4a14      	ldr	r2, [pc, #80]	; (80057e4 <TIM_OC1_SetConfig+0xdc>)
 8005792:	4293      	cmp	r3, r2
 8005794:	d111      	bne.n	80057ba <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005796:	693b      	ldr	r3, [r7, #16]
 8005798:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800579c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800579e:	693b      	ldr	r3, [r7, #16]
 80057a0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80057a4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80057a6:	683b      	ldr	r3, [r7, #0]
 80057a8:	695b      	ldr	r3, [r3, #20]
 80057aa:	693a      	ldr	r2, [r7, #16]
 80057ac:	4313      	orrs	r3, r2
 80057ae:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80057b0:	683b      	ldr	r3, [r7, #0]
 80057b2:	699b      	ldr	r3, [r3, #24]
 80057b4:	693a      	ldr	r2, [r7, #16]
 80057b6:	4313      	orrs	r3, r2
 80057b8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	693a      	ldr	r2, [r7, #16]
 80057be:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	68fa      	ldr	r2, [r7, #12]
 80057c4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80057c6:	683b      	ldr	r3, [r7, #0]
 80057c8:	685a      	ldr	r2, [r3, #4]
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	697a      	ldr	r2, [r7, #20]
 80057d2:	621a      	str	r2, [r3, #32]
}
 80057d4:	bf00      	nop
 80057d6:	371c      	adds	r7, #28
 80057d8:	46bd      	mov	sp, r7
 80057da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057de:	4770      	bx	lr
 80057e0:	40010000 	.word	0x40010000
 80057e4:	40010400 	.word	0x40010400

080057e8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80057e8:	b480      	push	{r7}
 80057ea:	b087      	sub	sp, #28
 80057ec:	af00      	add	r7, sp, #0
 80057ee:	6078      	str	r0, [r7, #4]
 80057f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	6a1b      	ldr	r3, [r3, #32]
 80057f6:	f023 0210 	bic.w	r2, r3, #16
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	6a1b      	ldr	r3, [r3, #32]
 8005802:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	685b      	ldr	r3, [r3, #4]
 8005808:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	699b      	ldr	r3, [r3, #24]
 800580e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005810:	68fb      	ldr	r3, [r7, #12]
 8005812:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005816:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005818:	68fb      	ldr	r3, [r7, #12]
 800581a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800581e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005820:	683b      	ldr	r3, [r7, #0]
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	021b      	lsls	r3, r3, #8
 8005826:	68fa      	ldr	r2, [r7, #12]
 8005828:	4313      	orrs	r3, r2
 800582a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800582c:	697b      	ldr	r3, [r7, #20]
 800582e:	f023 0320 	bic.w	r3, r3, #32
 8005832:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005834:	683b      	ldr	r3, [r7, #0]
 8005836:	689b      	ldr	r3, [r3, #8]
 8005838:	011b      	lsls	r3, r3, #4
 800583a:	697a      	ldr	r2, [r7, #20]
 800583c:	4313      	orrs	r3, r2
 800583e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	4a22      	ldr	r2, [pc, #136]	; (80058cc <TIM_OC2_SetConfig+0xe4>)
 8005844:	4293      	cmp	r3, r2
 8005846:	d003      	beq.n	8005850 <TIM_OC2_SetConfig+0x68>
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	4a21      	ldr	r2, [pc, #132]	; (80058d0 <TIM_OC2_SetConfig+0xe8>)
 800584c:	4293      	cmp	r3, r2
 800584e:	d10d      	bne.n	800586c <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005850:	697b      	ldr	r3, [r7, #20]
 8005852:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005856:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005858:	683b      	ldr	r3, [r7, #0]
 800585a:	68db      	ldr	r3, [r3, #12]
 800585c:	011b      	lsls	r3, r3, #4
 800585e:	697a      	ldr	r2, [r7, #20]
 8005860:	4313      	orrs	r3, r2
 8005862:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005864:	697b      	ldr	r3, [r7, #20]
 8005866:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800586a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	4a17      	ldr	r2, [pc, #92]	; (80058cc <TIM_OC2_SetConfig+0xe4>)
 8005870:	4293      	cmp	r3, r2
 8005872:	d003      	beq.n	800587c <TIM_OC2_SetConfig+0x94>
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	4a16      	ldr	r2, [pc, #88]	; (80058d0 <TIM_OC2_SetConfig+0xe8>)
 8005878:	4293      	cmp	r3, r2
 800587a:	d113      	bne.n	80058a4 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800587c:	693b      	ldr	r3, [r7, #16]
 800587e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005882:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005884:	693b      	ldr	r3, [r7, #16]
 8005886:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800588a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800588c:	683b      	ldr	r3, [r7, #0]
 800588e:	695b      	ldr	r3, [r3, #20]
 8005890:	009b      	lsls	r3, r3, #2
 8005892:	693a      	ldr	r2, [r7, #16]
 8005894:	4313      	orrs	r3, r2
 8005896:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005898:	683b      	ldr	r3, [r7, #0]
 800589a:	699b      	ldr	r3, [r3, #24]
 800589c:	009b      	lsls	r3, r3, #2
 800589e:	693a      	ldr	r2, [r7, #16]
 80058a0:	4313      	orrs	r3, r2
 80058a2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	693a      	ldr	r2, [r7, #16]
 80058a8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	68fa      	ldr	r2, [r7, #12]
 80058ae:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80058b0:	683b      	ldr	r3, [r7, #0]
 80058b2:	685a      	ldr	r2, [r3, #4]
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	697a      	ldr	r2, [r7, #20]
 80058bc:	621a      	str	r2, [r3, #32]
}
 80058be:	bf00      	nop
 80058c0:	371c      	adds	r7, #28
 80058c2:	46bd      	mov	sp, r7
 80058c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058c8:	4770      	bx	lr
 80058ca:	bf00      	nop
 80058cc:	40010000 	.word	0x40010000
 80058d0:	40010400 	.word	0x40010400

080058d4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80058d4:	b480      	push	{r7}
 80058d6:	b087      	sub	sp, #28
 80058d8:	af00      	add	r7, sp, #0
 80058da:	6078      	str	r0, [r7, #4]
 80058dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	6a1b      	ldr	r3, [r3, #32]
 80058e2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	6a1b      	ldr	r3, [r3, #32]
 80058ee:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	685b      	ldr	r3, [r3, #4]
 80058f4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	69db      	ldr	r3, [r3, #28]
 80058fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80058fc:	68fb      	ldr	r3, [r7, #12]
 80058fe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005902:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005904:	68fb      	ldr	r3, [r7, #12]
 8005906:	f023 0303 	bic.w	r3, r3, #3
 800590a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800590c:	683b      	ldr	r3, [r7, #0]
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	68fa      	ldr	r2, [r7, #12]
 8005912:	4313      	orrs	r3, r2
 8005914:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005916:	697b      	ldr	r3, [r7, #20]
 8005918:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800591c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800591e:	683b      	ldr	r3, [r7, #0]
 8005920:	689b      	ldr	r3, [r3, #8]
 8005922:	021b      	lsls	r3, r3, #8
 8005924:	697a      	ldr	r2, [r7, #20]
 8005926:	4313      	orrs	r3, r2
 8005928:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	4a21      	ldr	r2, [pc, #132]	; (80059b4 <TIM_OC3_SetConfig+0xe0>)
 800592e:	4293      	cmp	r3, r2
 8005930:	d003      	beq.n	800593a <TIM_OC3_SetConfig+0x66>
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	4a20      	ldr	r2, [pc, #128]	; (80059b8 <TIM_OC3_SetConfig+0xe4>)
 8005936:	4293      	cmp	r3, r2
 8005938:	d10d      	bne.n	8005956 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800593a:	697b      	ldr	r3, [r7, #20]
 800593c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005940:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005942:	683b      	ldr	r3, [r7, #0]
 8005944:	68db      	ldr	r3, [r3, #12]
 8005946:	021b      	lsls	r3, r3, #8
 8005948:	697a      	ldr	r2, [r7, #20]
 800594a:	4313      	orrs	r3, r2
 800594c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800594e:	697b      	ldr	r3, [r7, #20]
 8005950:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005954:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	4a16      	ldr	r2, [pc, #88]	; (80059b4 <TIM_OC3_SetConfig+0xe0>)
 800595a:	4293      	cmp	r3, r2
 800595c:	d003      	beq.n	8005966 <TIM_OC3_SetConfig+0x92>
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	4a15      	ldr	r2, [pc, #84]	; (80059b8 <TIM_OC3_SetConfig+0xe4>)
 8005962:	4293      	cmp	r3, r2
 8005964:	d113      	bne.n	800598e <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005966:	693b      	ldr	r3, [r7, #16]
 8005968:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800596c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800596e:	693b      	ldr	r3, [r7, #16]
 8005970:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005974:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005976:	683b      	ldr	r3, [r7, #0]
 8005978:	695b      	ldr	r3, [r3, #20]
 800597a:	011b      	lsls	r3, r3, #4
 800597c:	693a      	ldr	r2, [r7, #16]
 800597e:	4313      	orrs	r3, r2
 8005980:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005982:	683b      	ldr	r3, [r7, #0]
 8005984:	699b      	ldr	r3, [r3, #24]
 8005986:	011b      	lsls	r3, r3, #4
 8005988:	693a      	ldr	r2, [r7, #16]
 800598a:	4313      	orrs	r3, r2
 800598c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	693a      	ldr	r2, [r7, #16]
 8005992:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	68fa      	ldr	r2, [r7, #12]
 8005998:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800599a:	683b      	ldr	r3, [r7, #0]
 800599c:	685a      	ldr	r2, [r3, #4]
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	697a      	ldr	r2, [r7, #20]
 80059a6:	621a      	str	r2, [r3, #32]
}
 80059a8:	bf00      	nop
 80059aa:	371c      	adds	r7, #28
 80059ac:	46bd      	mov	sp, r7
 80059ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059b2:	4770      	bx	lr
 80059b4:	40010000 	.word	0x40010000
 80059b8:	40010400 	.word	0x40010400

080059bc <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80059bc:	b480      	push	{r7}
 80059be:	b087      	sub	sp, #28
 80059c0:	af00      	add	r7, sp, #0
 80059c2:	6078      	str	r0, [r7, #4]
 80059c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	6a1b      	ldr	r3, [r3, #32]
 80059ca:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	6a1b      	ldr	r3, [r3, #32]
 80059d6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	685b      	ldr	r3, [r3, #4]
 80059dc:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	69db      	ldr	r3, [r3, #28]
 80059e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80059e4:	68fb      	ldr	r3, [r7, #12]
 80059e6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80059ea:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80059ec:	68fb      	ldr	r3, [r7, #12]
 80059ee:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80059f2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80059f4:	683b      	ldr	r3, [r7, #0]
 80059f6:	681b      	ldr	r3, [r3, #0]
 80059f8:	021b      	lsls	r3, r3, #8
 80059fa:	68fa      	ldr	r2, [r7, #12]
 80059fc:	4313      	orrs	r3, r2
 80059fe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005a00:	693b      	ldr	r3, [r7, #16]
 8005a02:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005a06:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005a08:	683b      	ldr	r3, [r7, #0]
 8005a0a:	689b      	ldr	r3, [r3, #8]
 8005a0c:	031b      	lsls	r3, r3, #12
 8005a0e:	693a      	ldr	r2, [r7, #16]
 8005a10:	4313      	orrs	r3, r2
 8005a12:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	4a12      	ldr	r2, [pc, #72]	; (8005a60 <TIM_OC4_SetConfig+0xa4>)
 8005a18:	4293      	cmp	r3, r2
 8005a1a:	d003      	beq.n	8005a24 <TIM_OC4_SetConfig+0x68>
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	4a11      	ldr	r2, [pc, #68]	; (8005a64 <TIM_OC4_SetConfig+0xa8>)
 8005a20:	4293      	cmp	r3, r2
 8005a22:	d109      	bne.n	8005a38 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005a24:	697b      	ldr	r3, [r7, #20]
 8005a26:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005a2a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005a2c:	683b      	ldr	r3, [r7, #0]
 8005a2e:	695b      	ldr	r3, [r3, #20]
 8005a30:	019b      	lsls	r3, r3, #6
 8005a32:	697a      	ldr	r2, [r7, #20]
 8005a34:	4313      	orrs	r3, r2
 8005a36:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	697a      	ldr	r2, [r7, #20]
 8005a3c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	68fa      	ldr	r2, [r7, #12]
 8005a42:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005a44:	683b      	ldr	r3, [r7, #0]
 8005a46:	685a      	ldr	r2, [r3, #4]
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	693a      	ldr	r2, [r7, #16]
 8005a50:	621a      	str	r2, [r3, #32]
}
 8005a52:	bf00      	nop
 8005a54:	371c      	adds	r7, #28
 8005a56:	46bd      	mov	sp, r7
 8005a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a5c:	4770      	bx	lr
 8005a5e:	bf00      	nop
 8005a60:	40010000 	.word	0x40010000
 8005a64:	40010400 	.word	0x40010400

08005a68 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005a68:	b480      	push	{r7}
 8005a6a:	b087      	sub	sp, #28
 8005a6c:	af00      	add	r7, sp, #0
 8005a6e:	60f8      	str	r0, [r7, #12]
 8005a70:	60b9      	str	r1, [r7, #8]
 8005a72:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005a74:	68fb      	ldr	r3, [r7, #12]
 8005a76:	6a1b      	ldr	r3, [r3, #32]
 8005a78:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005a7a:	68fb      	ldr	r3, [r7, #12]
 8005a7c:	6a1b      	ldr	r3, [r3, #32]
 8005a7e:	f023 0201 	bic.w	r2, r3, #1
 8005a82:	68fb      	ldr	r3, [r7, #12]
 8005a84:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005a86:	68fb      	ldr	r3, [r7, #12]
 8005a88:	699b      	ldr	r3, [r3, #24]
 8005a8a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005a8c:	693b      	ldr	r3, [r7, #16]
 8005a8e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005a92:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	011b      	lsls	r3, r3, #4
 8005a98:	693a      	ldr	r2, [r7, #16]
 8005a9a:	4313      	orrs	r3, r2
 8005a9c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005a9e:	697b      	ldr	r3, [r7, #20]
 8005aa0:	f023 030a 	bic.w	r3, r3, #10
 8005aa4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005aa6:	697a      	ldr	r2, [r7, #20]
 8005aa8:	68bb      	ldr	r3, [r7, #8]
 8005aaa:	4313      	orrs	r3, r2
 8005aac:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005aae:	68fb      	ldr	r3, [r7, #12]
 8005ab0:	693a      	ldr	r2, [r7, #16]
 8005ab2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005ab4:	68fb      	ldr	r3, [r7, #12]
 8005ab6:	697a      	ldr	r2, [r7, #20]
 8005ab8:	621a      	str	r2, [r3, #32]
}
 8005aba:	bf00      	nop
 8005abc:	371c      	adds	r7, #28
 8005abe:	46bd      	mov	sp, r7
 8005ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ac4:	4770      	bx	lr

08005ac6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005ac6:	b480      	push	{r7}
 8005ac8:	b087      	sub	sp, #28
 8005aca:	af00      	add	r7, sp, #0
 8005acc:	60f8      	str	r0, [r7, #12]
 8005ace:	60b9      	str	r1, [r7, #8]
 8005ad0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005ad2:	68fb      	ldr	r3, [r7, #12]
 8005ad4:	6a1b      	ldr	r3, [r3, #32]
 8005ad6:	f023 0210 	bic.w	r2, r3, #16
 8005ada:	68fb      	ldr	r3, [r7, #12]
 8005adc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005ade:	68fb      	ldr	r3, [r7, #12]
 8005ae0:	699b      	ldr	r3, [r3, #24]
 8005ae2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005ae4:	68fb      	ldr	r3, [r7, #12]
 8005ae6:	6a1b      	ldr	r3, [r3, #32]
 8005ae8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005aea:	697b      	ldr	r3, [r7, #20]
 8005aec:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005af0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	031b      	lsls	r3, r3, #12
 8005af6:	697a      	ldr	r2, [r7, #20]
 8005af8:	4313      	orrs	r3, r2
 8005afa:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005afc:	693b      	ldr	r3, [r7, #16]
 8005afe:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005b02:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005b04:	68bb      	ldr	r3, [r7, #8]
 8005b06:	011b      	lsls	r3, r3, #4
 8005b08:	693a      	ldr	r2, [r7, #16]
 8005b0a:	4313      	orrs	r3, r2
 8005b0c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005b0e:	68fb      	ldr	r3, [r7, #12]
 8005b10:	697a      	ldr	r2, [r7, #20]
 8005b12:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005b14:	68fb      	ldr	r3, [r7, #12]
 8005b16:	693a      	ldr	r2, [r7, #16]
 8005b18:	621a      	str	r2, [r3, #32]
}
 8005b1a:	bf00      	nop
 8005b1c:	371c      	adds	r7, #28
 8005b1e:	46bd      	mov	sp, r7
 8005b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b24:	4770      	bx	lr

08005b26 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005b26:	b480      	push	{r7}
 8005b28:	b085      	sub	sp, #20
 8005b2a:	af00      	add	r7, sp, #0
 8005b2c:	6078      	str	r0, [r7, #4]
 8005b2e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	689b      	ldr	r3, [r3, #8]
 8005b34:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005b36:	68fb      	ldr	r3, [r7, #12]
 8005b38:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005b3c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005b3e:	683a      	ldr	r2, [r7, #0]
 8005b40:	68fb      	ldr	r3, [r7, #12]
 8005b42:	4313      	orrs	r3, r2
 8005b44:	f043 0307 	orr.w	r3, r3, #7
 8005b48:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	68fa      	ldr	r2, [r7, #12]
 8005b4e:	609a      	str	r2, [r3, #8]
}
 8005b50:	bf00      	nop
 8005b52:	3714      	adds	r7, #20
 8005b54:	46bd      	mov	sp, r7
 8005b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b5a:	4770      	bx	lr

08005b5c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005b5c:	b480      	push	{r7}
 8005b5e:	b087      	sub	sp, #28
 8005b60:	af00      	add	r7, sp, #0
 8005b62:	60f8      	str	r0, [r7, #12]
 8005b64:	60b9      	str	r1, [r7, #8]
 8005b66:	607a      	str	r2, [r7, #4]
 8005b68:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005b6a:	68fb      	ldr	r3, [r7, #12]
 8005b6c:	689b      	ldr	r3, [r3, #8]
 8005b6e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005b70:	697b      	ldr	r3, [r7, #20]
 8005b72:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005b76:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005b78:	683b      	ldr	r3, [r7, #0]
 8005b7a:	021a      	lsls	r2, r3, #8
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	431a      	orrs	r2, r3
 8005b80:	68bb      	ldr	r3, [r7, #8]
 8005b82:	4313      	orrs	r3, r2
 8005b84:	697a      	ldr	r2, [r7, #20]
 8005b86:	4313      	orrs	r3, r2
 8005b88:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005b8a:	68fb      	ldr	r3, [r7, #12]
 8005b8c:	697a      	ldr	r2, [r7, #20]
 8005b8e:	609a      	str	r2, [r3, #8]
}
 8005b90:	bf00      	nop
 8005b92:	371c      	adds	r7, #28
 8005b94:	46bd      	mov	sp, r7
 8005b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b9a:	4770      	bx	lr

08005b9c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005b9c:	b480      	push	{r7}
 8005b9e:	b087      	sub	sp, #28
 8005ba0:	af00      	add	r7, sp, #0
 8005ba2:	60f8      	str	r0, [r7, #12]
 8005ba4:	60b9      	str	r1, [r7, #8]
 8005ba6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005ba8:	68bb      	ldr	r3, [r7, #8]
 8005baa:	f003 031f 	and.w	r3, r3, #31
 8005bae:	2201      	movs	r2, #1
 8005bb0:	fa02 f303 	lsl.w	r3, r2, r3
 8005bb4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005bb6:	68fb      	ldr	r3, [r7, #12]
 8005bb8:	6a1a      	ldr	r2, [r3, #32]
 8005bba:	697b      	ldr	r3, [r7, #20]
 8005bbc:	43db      	mvns	r3, r3
 8005bbe:	401a      	ands	r2, r3
 8005bc0:	68fb      	ldr	r3, [r7, #12]
 8005bc2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005bc4:	68fb      	ldr	r3, [r7, #12]
 8005bc6:	6a1a      	ldr	r2, [r3, #32]
 8005bc8:	68bb      	ldr	r3, [r7, #8]
 8005bca:	f003 031f 	and.w	r3, r3, #31
 8005bce:	6879      	ldr	r1, [r7, #4]
 8005bd0:	fa01 f303 	lsl.w	r3, r1, r3
 8005bd4:	431a      	orrs	r2, r3
 8005bd6:	68fb      	ldr	r3, [r7, #12]
 8005bd8:	621a      	str	r2, [r3, #32]
}
 8005bda:	bf00      	nop
 8005bdc:	371c      	adds	r7, #28
 8005bde:	46bd      	mov	sp, r7
 8005be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005be4:	4770      	bx	lr
	...

08005be8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005be8:	b480      	push	{r7}
 8005bea:	b085      	sub	sp, #20
 8005bec:	af00      	add	r7, sp, #0
 8005bee:	6078      	str	r0, [r7, #4]
 8005bf0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005bf8:	2b01      	cmp	r3, #1
 8005bfa:	d101      	bne.n	8005c00 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005bfc:	2302      	movs	r3, #2
 8005bfe:	e05a      	b.n	8005cb6 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	2201      	movs	r2, #1
 8005c04:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	2202      	movs	r2, #2
 8005c0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	681b      	ldr	r3, [r3, #0]
 8005c14:	685b      	ldr	r3, [r3, #4]
 8005c16:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	681b      	ldr	r3, [r3, #0]
 8005c1c:	689b      	ldr	r3, [r3, #8]
 8005c1e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005c20:	68fb      	ldr	r3, [r7, #12]
 8005c22:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005c26:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005c28:	683b      	ldr	r3, [r7, #0]
 8005c2a:	681b      	ldr	r3, [r3, #0]
 8005c2c:	68fa      	ldr	r2, [r7, #12]
 8005c2e:	4313      	orrs	r3, r2
 8005c30:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	681b      	ldr	r3, [r3, #0]
 8005c36:	68fa      	ldr	r2, [r7, #12]
 8005c38:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	681b      	ldr	r3, [r3, #0]
 8005c3e:	4a21      	ldr	r2, [pc, #132]	; (8005cc4 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8005c40:	4293      	cmp	r3, r2
 8005c42:	d022      	beq.n	8005c8a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	681b      	ldr	r3, [r3, #0]
 8005c48:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005c4c:	d01d      	beq.n	8005c8a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	681b      	ldr	r3, [r3, #0]
 8005c52:	4a1d      	ldr	r2, [pc, #116]	; (8005cc8 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8005c54:	4293      	cmp	r3, r2
 8005c56:	d018      	beq.n	8005c8a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	681b      	ldr	r3, [r3, #0]
 8005c5c:	4a1b      	ldr	r2, [pc, #108]	; (8005ccc <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8005c5e:	4293      	cmp	r3, r2
 8005c60:	d013      	beq.n	8005c8a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	681b      	ldr	r3, [r3, #0]
 8005c66:	4a1a      	ldr	r2, [pc, #104]	; (8005cd0 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8005c68:	4293      	cmp	r3, r2
 8005c6a:	d00e      	beq.n	8005c8a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	681b      	ldr	r3, [r3, #0]
 8005c70:	4a18      	ldr	r2, [pc, #96]	; (8005cd4 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8005c72:	4293      	cmp	r3, r2
 8005c74:	d009      	beq.n	8005c8a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	681b      	ldr	r3, [r3, #0]
 8005c7a:	4a17      	ldr	r2, [pc, #92]	; (8005cd8 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8005c7c:	4293      	cmp	r3, r2
 8005c7e:	d004      	beq.n	8005c8a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	681b      	ldr	r3, [r3, #0]
 8005c84:	4a15      	ldr	r2, [pc, #84]	; (8005cdc <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8005c86:	4293      	cmp	r3, r2
 8005c88:	d10c      	bne.n	8005ca4 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005c8a:	68bb      	ldr	r3, [r7, #8]
 8005c8c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005c90:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005c92:	683b      	ldr	r3, [r7, #0]
 8005c94:	685b      	ldr	r3, [r3, #4]
 8005c96:	68ba      	ldr	r2, [r7, #8]
 8005c98:	4313      	orrs	r3, r2
 8005c9a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	681b      	ldr	r3, [r3, #0]
 8005ca0:	68ba      	ldr	r2, [r7, #8]
 8005ca2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	2201      	movs	r2, #1
 8005ca8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	2200      	movs	r2, #0
 8005cb0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005cb4:	2300      	movs	r3, #0
}
 8005cb6:	4618      	mov	r0, r3
 8005cb8:	3714      	adds	r7, #20
 8005cba:	46bd      	mov	sp, r7
 8005cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cc0:	4770      	bx	lr
 8005cc2:	bf00      	nop
 8005cc4:	40010000 	.word	0x40010000
 8005cc8:	40000400 	.word	0x40000400
 8005ccc:	40000800 	.word	0x40000800
 8005cd0:	40000c00 	.word	0x40000c00
 8005cd4:	40010400 	.word	0x40010400
 8005cd8:	40014000 	.word	0x40014000
 8005cdc:	40001800 	.word	0x40001800

08005ce0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005ce0:	b480      	push	{r7}
 8005ce2:	b083      	sub	sp, #12
 8005ce4:	af00      	add	r7, sp, #0
 8005ce6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005ce8:	bf00      	nop
 8005cea:	370c      	adds	r7, #12
 8005cec:	46bd      	mov	sp, r7
 8005cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cf2:	4770      	bx	lr

08005cf4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005cf4:	b480      	push	{r7}
 8005cf6:	b083      	sub	sp, #12
 8005cf8:	af00      	add	r7, sp, #0
 8005cfa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005cfc:	bf00      	nop
 8005cfe:	370c      	adds	r7, #12
 8005d00:	46bd      	mov	sp, r7
 8005d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d06:	4770      	bx	lr

08005d08 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005d08:	b580      	push	{r7, lr}
 8005d0a:	b082      	sub	sp, #8
 8005d0c:	af00      	add	r7, sp, #0
 8005d0e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	2b00      	cmp	r3, #0
 8005d14:	d101      	bne.n	8005d1a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005d16:	2301      	movs	r3, #1
 8005d18:	e03f      	b.n	8005d9a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8005d20:	b2db      	uxtb	r3, r3
 8005d22:	2b00      	cmp	r3, #0
 8005d24:	d106      	bne.n	8005d34 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	2200      	movs	r2, #0
 8005d2a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005d2e:	6878      	ldr	r0, [r7, #4]
 8005d30:	f7fc febe 	bl	8002ab0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	2224      	movs	r2, #36	; 0x24
 8005d38:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	681b      	ldr	r3, [r3, #0]
 8005d40:	68da      	ldr	r2, [r3, #12]
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	681b      	ldr	r3, [r3, #0]
 8005d46:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005d4a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005d4c:	6878      	ldr	r0, [r7, #4]
 8005d4e:	f000 fbf1 	bl	8006534 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	681b      	ldr	r3, [r3, #0]
 8005d56:	691a      	ldr	r2, [r3, #16]
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	681b      	ldr	r3, [r3, #0]
 8005d5c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005d60:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	681b      	ldr	r3, [r3, #0]
 8005d66:	695a      	ldr	r2, [r3, #20]
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	681b      	ldr	r3, [r3, #0]
 8005d6c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005d70:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	681b      	ldr	r3, [r3, #0]
 8005d76:	68da      	ldr	r2, [r3, #12]
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	681b      	ldr	r3, [r3, #0]
 8005d7c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005d80:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	2200      	movs	r2, #0
 8005d86:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	2220      	movs	r2, #32
 8005d8c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	2220      	movs	r2, #32
 8005d94:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8005d98:	2300      	movs	r3, #0
}
 8005d9a:	4618      	mov	r0, r3
 8005d9c:	3708      	adds	r7, #8
 8005d9e:	46bd      	mov	sp, r7
 8005da0:	bd80      	pop	{r7, pc}

08005da2 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005da2:	b580      	push	{r7, lr}
 8005da4:	b088      	sub	sp, #32
 8005da6:	af02      	add	r7, sp, #8
 8005da8:	60f8      	str	r0, [r7, #12]
 8005daa:	60b9      	str	r1, [r7, #8]
 8005dac:	603b      	str	r3, [r7, #0]
 8005dae:	4613      	mov	r3, r2
 8005db0:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 8005db2:	2300      	movs	r3, #0
 8005db4:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005db6:	68fb      	ldr	r3, [r7, #12]
 8005db8:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8005dbc:	b2db      	uxtb	r3, r3
 8005dbe:	2b20      	cmp	r3, #32
 8005dc0:	f040 8083 	bne.w	8005eca <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 8005dc4:	68bb      	ldr	r3, [r7, #8]
 8005dc6:	2b00      	cmp	r3, #0
 8005dc8:	d002      	beq.n	8005dd0 <HAL_UART_Transmit+0x2e>
 8005dca:	88fb      	ldrh	r3, [r7, #6]
 8005dcc:	2b00      	cmp	r3, #0
 8005dce:	d101      	bne.n	8005dd4 <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 8005dd0:	2301      	movs	r3, #1
 8005dd2:	e07b      	b.n	8005ecc <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8005dd4:	68fb      	ldr	r3, [r7, #12]
 8005dd6:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8005dda:	2b01      	cmp	r3, #1
 8005ddc:	d101      	bne.n	8005de2 <HAL_UART_Transmit+0x40>
 8005dde:	2302      	movs	r3, #2
 8005de0:	e074      	b.n	8005ecc <HAL_UART_Transmit+0x12a>
 8005de2:	68fb      	ldr	r3, [r7, #12]
 8005de4:	2201      	movs	r2, #1
 8005de6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005dea:	68fb      	ldr	r3, [r7, #12]
 8005dec:	2200      	movs	r2, #0
 8005dee:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005df0:	68fb      	ldr	r3, [r7, #12]
 8005df2:	2221      	movs	r2, #33	; 0x21
 8005df4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8005df8:	f7fd f852 	bl	8002ea0 <HAL_GetTick>
 8005dfc:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8005dfe:	68fb      	ldr	r3, [r7, #12]
 8005e00:	88fa      	ldrh	r2, [r7, #6]
 8005e02:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8005e04:	68fb      	ldr	r3, [r7, #12]
 8005e06:	88fa      	ldrh	r2, [r7, #6]
 8005e08:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8005e0a:	68fb      	ldr	r3, [r7, #12]
 8005e0c:	2200      	movs	r2, #0
 8005e0e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 8005e12:	e042      	b.n	8005e9a <HAL_UART_Transmit+0xf8>
    {
      huart->TxXferCount--;
 8005e14:	68fb      	ldr	r3, [r7, #12]
 8005e16:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005e18:	b29b      	uxth	r3, r3
 8005e1a:	3b01      	subs	r3, #1
 8005e1c:	b29a      	uxth	r2, r3
 8005e1e:	68fb      	ldr	r3, [r7, #12]
 8005e20:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8005e22:	68fb      	ldr	r3, [r7, #12]
 8005e24:	689b      	ldr	r3, [r3, #8]
 8005e26:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005e2a:	d122      	bne.n	8005e72 <HAL_UART_Transmit+0xd0>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005e2c:	683b      	ldr	r3, [r7, #0]
 8005e2e:	9300      	str	r3, [sp, #0]
 8005e30:	697b      	ldr	r3, [r7, #20]
 8005e32:	2200      	movs	r2, #0
 8005e34:	2180      	movs	r1, #128	; 0x80
 8005e36:	68f8      	ldr	r0, [r7, #12]
 8005e38:	f000 fa10 	bl	800625c <UART_WaitOnFlagUntilTimeout>
 8005e3c:	4603      	mov	r3, r0
 8005e3e:	2b00      	cmp	r3, #0
 8005e40:	d001      	beq.n	8005e46 <HAL_UART_Transmit+0xa4>
        {
          return HAL_TIMEOUT;
 8005e42:	2303      	movs	r3, #3
 8005e44:	e042      	b.n	8005ecc <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 8005e46:	68bb      	ldr	r3, [r7, #8]
 8005e48:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 8005e4a:	693b      	ldr	r3, [r7, #16]
 8005e4c:	881b      	ldrh	r3, [r3, #0]
 8005e4e:	461a      	mov	r2, r3
 8005e50:	68fb      	ldr	r3, [r7, #12]
 8005e52:	681b      	ldr	r3, [r3, #0]
 8005e54:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005e58:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8005e5a:	68fb      	ldr	r3, [r7, #12]
 8005e5c:	691b      	ldr	r3, [r3, #16]
 8005e5e:	2b00      	cmp	r3, #0
 8005e60:	d103      	bne.n	8005e6a <HAL_UART_Transmit+0xc8>
        {
          pData += 2U;
 8005e62:	68bb      	ldr	r3, [r7, #8]
 8005e64:	3302      	adds	r3, #2
 8005e66:	60bb      	str	r3, [r7, #8]
 8005e68:	e017      	b.n	8005e9a <HAL_UART_Transmit+0xf8>
        }
        else
        {
          pData += 1U;
 8005e6a:	68bb      	ldr	r3, [r7, #8]
 8005e6c:	3301      	adds	r3, #1
 8005e6e:	60bb      	str	r3, [r7, #8]
 8005e70:	e013      	b.n	8005e9a <HAL_UART_Transmit+0xf8>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005e72:	683b      	ldr	r3, [r7, #0]
 8005e74:	9300      	str	r3, [sp, #0]
 8005e76:	697b      	ldr	r3, [r7, #20]
 8005e78:	2200      	movs	r2, #0
 8005e7a:	2180      	movs	r1, #128	; 0x80
 8005e7c:	68f8      	ldr	r0, [r7, #12]
 8005e7e:	f000 f9ed 	bl	800625c <UART_WaitOnFlagUntilTimeout>
 8005e82:	4603      	mov	r3, r0
 8005e84:	2b00      	cmp	r3, #0
 8005e86:	d001      	beq.n	8005e8c <HAL_UART_Transmit+0xea>
        {
          return HAL_TIMEOUT;
 8005e88:	2303      	movs	r3, #3
 8005e8a:	e01f      	b.n	8005ecc <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8005e8c:	68bb      	ldr	r3, [r7, #8]
 8005e8e:	1c5a      	adds	r2, r3, #1
 8005e90:	60ba      	str	r2, [r7, #8]
 8005e92:	781a      	ldrb	r2, [r3, #0]
 8005e94:	68fb      	ldr	r3, [r7, #12]
 8005e96:	681b      	ldr	r3, [r3, #0]
 8005e98:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 8005e9a:	68fb      	ldr	r3, [r7, #12]
 8005e9c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005e9e:	b29b      	uxth	r3, r3
 8005ea0:	2b00      	cmp	r3, #0
 8005ea2:	d1b7      	bne.n	8005e14 <HAL_UART_Transmit+0x72>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005ea4:	683b      	ldr	r3, [r7, #0]
 8005ea6:	9300      	str	r3, [sp, #0]
 8005ea8:	697b      	ldr	r3, [r7, #20]
 8005eaa:	2200      	movs	r2, #0
 8005eac:	2140      	movs	r1, #64	; 0x40
 8005eae:	68f8      	ldr	r0, [r7, #12]
 8005eb0:	f000 f9d4 	bl	800625c <UART_WaitOnFlagUntilTimeout>
 8005eb4:	4603      	mov	r3, r0
 8005eb6:	2b00      	cmp	r3, #0
 8005eb8:	d001      	beq.n	8005ebe <HAL_UART_Transmit+0x11c>
    {
      return HAL_TIMEOUT;
 8005eba:	2303      	movs	r3, #3
 8005ebc:	e006      	b.n	8005ecc <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005ebe:	68fb      	ldr	r3, [r7, #12]
 8005ec0:	2220      	movs	r2, #32
 8005ec2:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 8005ec6:	2300      	movs	r3, #0
 8005ec8:	e000      	b.n	8005ecc <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 8005eca:	2302      	movs	r3, #2
  }
}
 8005ecc:	4618      	mov	r0, r3
 8005ece:	3718      	adds	r7, #24
 8005ed0:	46bd      	mov	sp, r7
 8005ed2:	bd80      	pop	{r7, pc}

08005ed4 <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005ed4:	b580      	push	{r7, lr}
 8005ed6:	b088      	sub	sp, #32
 8005ed8:	af02      	add	r7, sp, #8
 8005eda:	60f8      	str	r0, [r7, #12]
 8005edc:	60b9      	str	r1, [r7, #8]
 8005ede:	603b      	str	r3, [r7, #0]
 8005ee0:	4613      	mov	r3, r2
 8005ee2:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 8005ee4:	2300      	movs	r3, #0
 8005ee6:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005ee8:	68fb      	ldr	r3, [r7, #12]
 8005eea:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8005eee:	b2db      	uxtb	r3, r3
 8005ef0:	2b20      	cmp	r3, #32
 8005ef2:	f040 8090 	bne.w	8006016 <HAL_UART_Receive+0x142>
  {
    if ((pData == NULL) || (Size == 0U))
 8005ef6:	68bb      	ldr	r3, [r7, #8]
 8005ef8:	2b00      	cmp	r3, #0
 8005efa:	d002      	beq.n	8005f02 <HAL_UART_Receive+0x2e>
 8005efc:	88fb      	ldrh	r3, [r7, #6]
 8005efe:	2b00      	cmp	r3, #0
 8005f00:	d101      	bne.n	8005f06 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8005f02:	2301      	movs	r3, #1
 8005f04:	e088      	b.n	8006018 <HAL_UART_Receive+0x144>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8005f06:	68fb      	ldr	r3, [r7, #12]
 8005f08:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8005f0c:	2b01      	cmp	r3, #1
 8005f0e:	d101      	bne.n	8005f14 <HAL_UART_Receive+0x40>
 8005f10:	2302      	movs	r3, #2
 8005f12:	e081      	b.n	8006018 <HAL_UART_Receive+0x144>
 8005f14:	68fb      	ldr	r3, [r7, #12]
 8005f16:	2201      	movs	r2, #1
 8005f18:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005f1c:	68fb      	ldr	r3, [r7, #12]
 8005f1e:	2200      	movs	r2, #0
 8005f20:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005f22:	68fb      	ldr	r3, [r7, #12]
 8005f24:	2222      	movs	r2, #34	; 0x22
 8005f26:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8005f2a:	f7fc ffb9 	bl	8002ea0 <HAL_GetTick>
 8005f2e:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8005f30:	68fb      	ldr	r3, [r7, #12]
 8005f32:	88fa      	ldrh	r2, [r7, #6]
 8005f34:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8005f36:	68fb      	ldr	r3, [r7, #12]
 8005f38:	88fa      	ldrh	r2, [r7, #6]
 8005f3a:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8005f3c:	68fb      	ldr	r3, [r7, #12]
 8005f3e:	2200      	movs	r2, #0
 8005f40:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8005f44:	e05c      	b.n	8006000 <HAL_UART_Receive+0x12c>
    {
      huart->RxXferCount--;
 8005f46:	68fb      	ldr	r3, [r7, #12]
 8005f48:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005f4a:	b29b      	uxth	r3, r3
 8005f4c:	3b01      	subs	r3, #1
 8005f4e:	b29a      	uxth	r2, r3
 8005f50:	68fb      	ldr	r3, [r7, #12]
 8005f52:	85da      	strh	r2, [r3, #46]	; 0x2e
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8005f54:	68fb      	ldr	r3, [r7, #12]
 8005f56:	689b      	ldr	r3, [r3, #8]
 8005f58:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005f5c:	d12b      	bne.n	8005fb6 <HAL_UART_Receive+0xe2>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8005f5e:	683b      	ldr	r3, [r7, #0]
 8005f60:	9300      	str	r3, [sp, #0]
 8005f62:	697b      	ldr	r3, [r7, #20]
 8005f64:	2200      	movs	r2, #0
 8005f66:	2120      	movs	r1, #32
 8005f68:	68f8      	ldr	r0, [r7, #12]
 8005f6a:	f000 f977 	bl	800625c <UART_WaitOnFlagUntilTimeout>
 8005f6e:	4603      	mov	r3, r0
 8005f70:	2b00      	cmp	r3, #0
 8005f72:	d001      	beq.n	8005f78 <HAL_UART_Receive+0xa4>
        {
          return HAL_TIMEOUT;
 8005f74:	2303      	movs	r3, #3
 8005f76:	e04f      	b.n	8006018 <HAL_UART_Receive+0x144>
        }
        tmp = (uint16_t *) pData;
 8005f78:	68bb      	ldr	r3, [r7, #8]
 8005f7a:	613b      	str	r3, [r7, #16]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8005f7c:	68fb      	ldr	r3, [r7, #12]
 8005f7e:	691b      	ldr	r3, [r3, #16]
 8005f80:	2b00      	cmp	r3, #0
 8005f82:	d10c      	bne.n	8005f9e <HAL_UART_Receive+0xca>
        {
          *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8005f84:	68fb      	ldr	r3, [r7, #12]
 8005f86:	681b      	ldr	r3, [r3, #0]
 8005f88:	685b      	ldr	r3, [r3, #4]
 8005f8a:	b29b      	uxth	r3, r3
 8005f8c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005f90:	b29a      	uxth	r2, r3
 8005f92:	693b      	ldr	r3, [r7, #16]
 8005f94:	801a      	strh	r2, [r3, #0]
          pData += 2U;
 8005f96:	68bb      	ldr	r3, [r7, #8]
 8005f98:	3302      	adds	r3, #2
 8005f9a:	60bb      	str	r3, [r7, #8]
 8005f9c:	e030      	b.n	8006000 <HAL_UART_Receive+0x12c>
        }
        else
        {
          *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 8005f9e:	68fb      	ldr	r3, [r7, #12]
 8005fa0:	681b      	ldr	r3, [r3, #0]
 8005fa2:	685b      	ldr	r3, [r3, #4]
 8005fa4:	b29b      	uxth	r3, r3
 8005fa6:	b2db      	uxtb	r3, r3
 8005fa8:	b29a      	uxth	r2, r3
 8005faa:	693b      	ldr	r3, [r7, #16]
 8005fac:	801a      	strh	r2, [r3, #0]
          pData += 1U;
 8005fae:	68bb      	ldr	r3, [r7, #8]
 8005fb0:	3301      	adds	r3, #1
 8005fb2:	60bb      	str	r3, [r7, #8]
 8005fb4:	e024      	b.n	8006000 <HAL_UART_Receive+0x12c>
        }

      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8005fb6:	683b      	ldr	r3, [r7, #0]
 8005fb8:	9300      	str	r3, [sp, #0]
 8005fba:	697b      	ldr	r3, [r7, #20]
 8005fbc:	2200      	movs	r2, #0
 8005fbe:	2120      	movs	r1, #32
 8005fc0:	68f8      	ldr	r0, [r7, #12]
 8005fc2:	f000 f94b 	bl	800625c <UART_WaitOnFlagUntilTimeout>
 8005fc6:	4603      	mov	r3, r0
 8005fc8:	2b00      	cmp	r3, #0
 8005fca:	d001      	beq.n	8005fd0 <HAL_UART_Receive+0xfc>
        {
          return HAL_TIMEOUT;
 8005fcc:	2303      	movs	r3, #3
 8005fce:	e023      	b.n	8006018 <HAL_UART_Receive+0x144>
        }
        if (huart->Init.Parity == UART_PARITY_NONE)
 8005fd0:	68fb      	ldr	r3, [r7, #12]
 8005fd2:	691b      	ldr	r3, [r3, #16]
 8005fd4:	2b00      	cmp	r3, #0
 8005fd6:	d108      	bne.n	8005fea <HAL_UART_Receive+0x116>
        {
          *pData++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8005fd8:	68fb      	ldr	r3, [r7, #12]
 8005fda:	681b      	ldr	r3, [r3, #0]
 8005fdc:	6859      	ldr	r1, [r3, #4]
 8005fde:	68bb      	ldr	r3, [r7, #8]
 8005fe0:	1c5a      	adds	r2, r3, #1
 8005fe2:	60ba      	str	r2, [r7, #8]
 8005fe4:	b2ca      	uxtb	r2, r1
 8005fe6:	701a      	strb	r2, [r3, #0]
 8005fe8:	e00a      	b.n	8006000 <HAL_UART_Receive+0x12c>
        }
        else
        {
          *pData++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8005fea:	68fb      	ldr	r3, [r7, #12]
 8005fec:	681b      	ldr	r3, [r3, #0]
 8005fee:	685b      	ldr	r3, [r3, #4]
 8005ff0:	b2da      	uxtb	r2, r3
 8005ff2:	68bb      	ldr	r3, [r7, #8]
 8005ff4:	1c59      	adds	r1, r3, #1
 8005ff6:	60b9      	str	r1, [r7, #8]
 8005ff8:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8005ffc:	b2d2      	uxtb	r2, r2
 8005ffe:	701a      	strb	r2, [r3, #0]
    while (huart->RxXferCount > 0U)
 8006000:	68fb      	ldr	r3, [r7, #12]
 8006002:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006004:	b29b      	uxth	r3, r3
 8006006:	2b00      	cmp	r3, #0
 8006008:	d19d      	bne.n	8005f46 <HAL_UART_Receive+0x72>

      }
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800600a:	68fb      	ldr	r3, [r7, #12]
 800600c:	2220      	movs	r2, #32
 800600e:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    return HAL_OK;
 8006012:	2300      	movs	r3, #0
 8006014:	e000      	b.n	8006018 <HAL_UART_Receive+0x144>
  }
  else
  {
    return HAL_BUSY;
 8006016:	2302      	movs	r3, #2
  }
}
 8006018:	4618      	mov	r0, r3
 800601a:	3718      	adds	r7, #24
 800601c:	46bd      	mov	sp, r7
 800601e:	bd80      	pop	{r7, pc}

08006020 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006020:	b580      	push	{r7, lr}
 8006022:	b088      	sub	sp, #32
 8006024:	af00      	add	r7, sp, #0
 8006026:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	681b      	ldr	r3, [r3, #0]
 800602c:	681b      	ldr	r3, [r3, #0]
 800602e:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	681b      	ldr	r3, [r3, #0]
 8006034:	68db      	ldr	r3, [r3, #12]
 8006036:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	681b      	ldr	r3, [r3, #0]
 800603c:	695b      	ldr	r3, [r3, #20]
 800603e:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 8006040:	2300      	movs	r3, #0
 8006042:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 8006044:	2300      	movs	r3, #0
 8006046:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8006048:	69fb      	ldr	r3, [r7, #28]
 800604a:	f003 030f 	and.w	r3, r3, #15
 800604e:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 8006050:	693b      	ldr	r3, [r7, #16]
 8006052:	2b00      	cmp	r3, #0
 8006054:	d10d      	bne.n	8006072 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006056:	69fb      	ldr	r3, [r7, #28]
 8006058:	f003 0320 	and.w	r3, r3, #32
 800605c:	2b00      	cmp	r3, #0
 800605e:	d008      	beq.n	8006072 <HAL_UART_IRQHandler+0x52>
 8006060:	69bb      	ldr	r3, [r7, #24]
 8006062:	f003 0320 	and.w	r3, r3, #32
 8006066:	2b00      	cmp	r3, #0
 8006068:	d003      	beq.n	8006072 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 800606a:	6878      	ldr	r0, [r7, #4]
 800606c:	f000 f9e0 	bl	8006430 <UART_Receive_IT>
      return;
 8006070:	e0d1      	b.n	8006216 <HAL_UART_IRQHandler+0x1f6>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8006072:	693b      	ldr	r3, [r7, #16]
 8006074:	2b00      	cmp	r3, #0
 8006076:	f000 80b0 	beq.w	80061da <HAL_UART_IRQHandler+0x1ba>
 800607a:	697b      	ldr	r3, [r7, #20]
 800607c:	f003 0301 	and.w	r3, r3, #1
 8006080:	2b00      	cmp	r3, #0
 8006082:	d105      	bne.n	8006090 <HAL_UART_IRQHandler+0x70>
 8006084:	69bb      	ldr	r3, [r7, #24]
 8006086:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800608a:	2b00      	cmp	r3, #0
 800608c:	f000 80a5 	beq.w	80061da <HAL_UART_IRQHandler+0x1ba>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8006090:	69fb      	ldr	r3, [r7, #28]
 8006092:	f003 0301 	and.w	r3, r3, #1
 8006096:	2b00      	cmp	r3, #0
 8006098:	d00a      	beq.n	80060b0 <HAL_UART_IRQHandler+0x90>
 800609a:	69bb      	ldr	r3, [r7, #24]
 800609c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80060a0:	2b00      	cmp	r3, #0
 80060a2:	d005      	beq.n	80060b0 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80060a8:	f043 0201 	orr.w	r2, r3, #1
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80060b0:	69fb      	ldr	r3, [r7, #28]
 80060b2:	f003 0304 	and.w	r3, r3, #4
 80060b6:	2b00      	cmp	r3, #0
 80060b8:	d00a      	beq.n	80060d0 <HAL_UART_IRQHandler+0xb0>
 80060ba:	697b      	ldr	r3, [r7, #20]
 80060bc:	f003 0301 	and.w	r3, r3, #1
 80060c0:	2b00      	cmp	r3, #0
 80060c2:	d005      	beq.n	80060d0 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80060c8:	f043 0202 	orr.w	r2, r3, #2
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80060d0:	69fb      	ldr	r3, [r7, #28]
 80060d2:	f003 0302 	and.w	r3, r3, #2
 80060d6:	2b00      	cmp	r3, #0
 80060d8:	d00a      	beq.n	80060f0 <HAL_UART_IRQHandler+0xd0>
 80060da:	697b      	ldr	r3, [r7, #20]
 80060dc:	f003 0301 	and.w	r3, r3, #1
 80060e0:	2b00      	cmp	r3, #0
 80060e2:	d005      	beq.n	80060f0 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80060e8:	f043 0204 	orr.w	r2, r3, #4
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 80060f0:	69fb      	ldr	r3, [r7, #28]
 80060f2:	f003 0308 	and.w	r3, r3, #8
 80060f6:	2b00      	cmp	r3, #0
 80060f8:	d00f      	beq.n	800611a <HAL_UART_IRQHandler+0xfa>
 80060fa:	69bb      	ldr	r3, [r7, #24]
 80060fc:	f003 0320 	and.w	r3, r3, #32
 8006100:	2b00      	cmp	r3, #0
 8006102:	d104      	bne.n	800610e <HAL_UART_IRQHandler+0xee>
 8006104:	697b      	ldr	r3, [r7, #20]
 8006106:	f003 0301 	and.w	r3, r3, #1
 800610a:	2b00      	cmp	r3, #0
 800610c:	d005      	beq.n	800611a <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006112:	f043 0208 	orr.w	r2, r3, #8
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800611e:	2b00      	cmp	r3, #0
 8006120:	d078      	beq.n	8006214 <HAL_UART_IRQHandler+0x1f4>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006122:	69fb      	ldr	r3, [r7, #28]
 8006124:	f003 0320 	and.w	r3, r3, #32
 8006128:	2b00      	cmp	r3, #0
 800612a:	d007      	beq.n	800613c <HAL_UART_IRQHandler+0x11c>
 800612c:	69bb      	ldr	r3, [r7, #24]
 800612e:	f003 0320 	and.w	r3, r3, #32
 8006132:	2b00      	cmp	r3, #0
 8006134:	d002      	beq.n	800613c <HAL_UART_IRQHandler+0x11c>
      {
        UART_Receive_IT(huart);
 8006136:	6878      	ldr	r0, [r7, #4]
 8006138:	f000 f97a 	bl	8006430 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	681b      	ldr	r3, [r3, #0]
 8006140:	695b      	ldr	r3, [r3, #20]
 8006142:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006146:	2b40      	cmp	r3, #64	; 0x40
 8006148:	bf0c      	ite	eq
 800614a:	2301      	moveq	r3, #1
 800614c:	2300      	movne	r3, #0
 800614e:	b2db      	uxtb	r3, r3
 8006150:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006156:	f003 0308 	and.w	r3, r3, #8
 800615a:	2b00      	cmp	r3, #0
 800615c:	d102      	bne.n	8006164 <HAL_UART_IRQHandler+0x144>
 800615e:	68fb      	ldr	r3, [r7, #12]
 8006160:	2b00      	cmp	r3, #0
 8006162:	d031      	beq.n	80061c8 <HAL_UART_IRQHandler+0x1a8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8006164:	6878      	ldr	r0, [r7, #4]
 8006166:	f000 f8c3 	bl	80062f0 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	681b      	ldr	r3, [r3, #0]
 800616e:	695b      	ldr	r3, [r3, #20]
 8006170:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006174:	2b40      	cmp	r3, #64	; 0x40
 8006176:	d123      	bne.n	80061c0 <HAL_UART_IRQHandler+0x1a0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	681b      	ldr	r3, [r3, #0]
 800617c:	695a      	ldr	r2, [r3, #20]
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	681b      	ldr	r3, [r3, #0]
 8006182:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006186:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800618c:	2b00      	cmp	r3, #0
 800618e:	d013      	beq.n	80061b8 <HAL_UART_IRQHandler+0x198>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006194:	4a21      	ldr	r2, [pc, #132]	; (800621c <HAL_UART_IRQHandler+0x1fc>)
 8006196:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800619c:	4618      	mov	r0, r3
 800619e:	f7fd f987 	bl	80034b0 <HAL_DMA_Abort_IT>
 80061a2:	4603      	mov	r3, r0
 80061a4:	2b00      	cmp	r3, #0
 80061a6:	d016      	beq.n	80061d6 <HAL_UART_IRQHandler+0x1b6>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80061ac:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80061ae:	687a      	ldr	r2, [r7, #4]
 80061b0:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80061b2:	4610      	mov	r0, r2
 80061b4:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80061b6:	e00e      	b.n	80061d6 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80061b8:	6878      	ldr	r0, [r7, #4]
 80061ba:	f000 f845 	bl	8006248 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80061be:	e00a      	b.n	80061d6 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80061c0:	6878      	ldr	r0, [r7, #4]
 80061c2:	f000 f841 	bl	8006248 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80061c6:	e006      	b.n	80061d6 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80061c8:	6878      	ldr	r0, [r7, #4]
 80061ca:	f000 f83d 	bl	8006248 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	2200      	movs	r2, #0
 80061d2:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 80061d4:	e01e      	b.n	8006214 <HAL_UART_IRQHandler+0x1f4>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80061d6:	bf00      	nop
    return;
 80061d8:	e01c      	b.n	8006214 <HAL_UART_IRQHandler+0x1f4>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80061da:	69fb      	ldr	r3, [r7, #28]
 80061dc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80061e0:	2b00      	cmp	r3, #0
 80061e2:	d008      	beq.n	80061f6 <HAL_UART_IRQHandler+0x1d6>
 80061e4:	69bb      	ldr	r3, [r7, #24]
 80061e6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80061ea:	2b00      	cmp	r3, #0
 80061ec:	d003      	beq.n	80061f6 <HAL_UART_IRQHandler+0x1d6>
  {
    UART_Transmit_IT(huart);
 80061ee:	6878      	ldr	r0, [r7, #4]
 80061f0:	f000 f8b0 	bl	8006354 <UART_Transmit_IT>
    return;
 80061f4:	e00f      	b.n	8006216 <HAL_UART_IRQHandler+0x1f6>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80061f6:	69fb      	ldr	r3, [r7, #28]
 80061f8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80061fc:	2b00      	cmp	r3, #0
 80061fe:	d00a      	beq.n	8006216 <HAL_UART_IRQHandler+0x1f6>
 8006200:	69bb      	ldr	r3, [r7, #24]
 8006202:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006206:	2b00      	cmp	r3, #0
 8006208:	d005      	beq.n	8006216 <HAL_UART_IRQHandler+0x1f6>
  {
    UART_EndTransmit_IT(huart);
 800620a:	6878      	ldr	r0, [r7, #4]
 800620c:	f000 f8f8 	bl	8006400 <UART_EndTransmit_IT>
    return;
 8006210:	bf00      	nop
 8006212:	e000      	b.n	8006216 <HAL_UART_IRQHandler+0x1f6>
    return;
 8006214:	bf00      	nop
  }
}
 8006216:	3720      	adds	r7, #32
 8006218:	46bd      	mov	sp, r7
 800621a:	bd80      	pop	{r7, pc}
 800621c:	0800632d 	.word	0x0800632d

08006220 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8006220:	b480      	push	{r7}
 8006222:	b083      	sub	sp, #12
 8006224:	af00      	add	r7, sp, #0
 8006226:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8006228:	bf00      	nop
 800622a:	370c      	adds	r7, #12
 800622c:	46bd      	mov	sp, r7
 800622e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006232:	4770      	bx	lr

08006234 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8006234:	b480      	push	{r7}
 8006236:	b083      	sub	sp, #12
 8006238:	af00      	add	r7, sp, #0
 800623a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 800623c:	bf00      	nop
 800623e:	370c      	adds	r7, #12
 8006240:	46bd      	mov	sp, r7
 8006242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006246:	4770      	bx	lr

08006248 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006248:	b480      	push	{r7}
 800624a:	b083      	sub	sp, #12
 800624c:	af00      	add	r7, sp, #0
 800624e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8006250:	bf00      	nop
 8006252:	370c      	adds	r7, #12
 8006254:	46bd      	mov	sp, r7
 8006256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800625a:	4770      	bx	lr

0800625c <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 800625c:	b580      	push	{r7, lr}
 800625e:	b084      	sub	sp, #16
 8006260:	af00      	add	r7, sp, #0
 8006262:	60f8      	str	r0, [r7, #12]
 8006264:	60b9      	str	r1, [r7, #8]
 8006266:	603b      	str	r3, [r7, #0]
 8006268:	4613      	mov	r3, r2
 800626a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800626c:	e02c      	b.n	80062c8 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800626e:	69bb      	ldr	r3, [r7, #24]
 8006270:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006274:	d028      	beq.n	80062c8 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8006276:	69bb      	ldr	r3, [r7, #24]
 8006278:	2b00      	cmp	r3, #0
 800627a:	d007      	beq.n	800628c <UART_WaitOnFlagUntilTimeout+0x30>
 800627c:	f7fc fe10 	bl	8002ea0 <HAL_GetTick>
 8006280:	4602      	mov	r2, r0
 8006282:	683b      	ldr	r3, [r7, #0]
 8006284:	1ad3      	subs	r3, r2, r3
 8006286:	69ba      	ldr	r2, [r7, #24]
 8006288:	429a      	cmp	r2, r3
 800628a:	d21d      	bcs.n	80062c8 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800628c:	68fb      	ldr	r3, [r7, #12]
 800628e:	681b      	ldr	r3, [r3, #0]
 8006290:	68da      	ldr	r2, [r3, #12]
 8006292:	68fb      	ldr	r3, [r7, #12]
 8006294:	681b      	ldr	r3, [r3, #0]
 8006296:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800629a:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800629c:	68fb      	ldr	r3, [r7, #12]
 800629e:	681b      	ldr	r3, [r3, #0]
 80062a0:	695a      	ldr	r2, [r3, #20]
 80062a2:	68fb      	ldr	r3, [r7, #12]
 80062a4:	681b      	ldr	r3, [r3, #0]
 80062a6:	f022 0201 	bic.w	r2, r2, #1
 80062aa:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 80062ac:	68fb      	ldr	r3, [r7, #12]
 80062ae:	2220      	movs	r2, #32
 80062b0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 80062b4:	68fb      	ldr	r3, [r7, #12]
 80062b6:	2220      	movs	r2, #32
 80062b8:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80062bc:	68fb      	ldr	r3, [r7, #12]
 80062be:	2200      	movs	r2, #0
 80062c0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 80062c4:	2303      	movs	r3, #3
 80062c6:	e00f      	b.n	80062e8 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80062c8:	68fb      	ldr	r3, [r7, #12]
 80062ca:	681b      	ldr	r3, [r3, #0]
 80062cc:	681a      	ldr	r2, [r3, #0]
 80062ce:	68bb      	ldr	r3, [r7, #8]
 80062d0:	4013      	ands	r3, r2
 80062d2:	68ba      	ldr	r2, [r7, #8]
 80062d4:	429a      	cmp	r2, r3
 80062d6:	bf0c      	ite	eq
 80062d8:	2301      	moveq	r3, #1
 80062da:	2300      	movne	r3, #0
 80062dc:	b2db      	uxtb	r3, r3
 80062de:	461a      	mov	r2, r3
 80062e0:	79fb      	ldrb	r3, [r7, #7]
 80062e2:	429a      	cmp	r2, r3
 80062e4:	d0c3      	beq.n	800626e <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80062e6:	2300      	movs	r3, #0
}
 80062e8:	4618      	mov	r0, r3
 80062ea:	3710      	adds	r7, #16
 80062ec:	46bd      	mov	sp, r7
 80062ee:	bd80      	pop	{r7, pc}

080062f0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80062f0:	b480      	push	{r7}
 80062f2:	b083      	sub	sp, #12
 80062f4:	af00      	add	r7, sp, #0
 80062f6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	681b      	ldr	r3, [r3, #0]
 80062fc:	68da      	ldr	r2, [r3, #12]
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	681b      	ldr	r3, [r3, #0]
 8006302:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8006306:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	681b      	ldr	r3, [r3, #0]
 800630c:	695a      	ldr	r2, [r3, #20]
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	681b      	ldr	r3, [r3, #0]
 8006312:	f022 0201 	bic.w	r2, r2, #1
 8006316:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	2220      	movs	r2, #32
 800631c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 8006320:	bf00      	nop
 8006322:	370c      	adds	r7, #12
 8006324:	46bd      	mov	sp, r7
 8006326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800632a:	4770      	bx	lr

0800632c <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800632c:	b580      	push	{r7, lr}
 800632e:	b084      	sub	sp, #16
 8006330:	af00      	add	r7, sp, #0
 8006332:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006338:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800633a:	68fb      	ldr	r3, [r7, #12]
 800633c:	2200      	movs	r2, #0
 800633e:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8006340:	68fb      	ldr	r3, [r7, #12]
 8006342:	2200      	movs	r2, #0
 8006344:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006346:	68f8      	ldr	r0, [r7, #12]
 8006348:	f7ff ff7e 	bl	8006248 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800634c:	bf00      	nop
 800634e:	3710      	adds	r7, #16
 8006350:	46bd      	mov	sp, r7
 8006352:	bd80      	pop	{r7, pc}

08006354 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8006354:	b480      	push	{r7}
 8006356:	b085      	sub	sp, #20
 8006358:	af00      	add	r7, sp, #0
 800635a:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8006362:	b2db      	uxtb	r3, r3
 8006364:	2b21      	cmp	r3, #33	; 0x21
 8006366:	d144      	bne.n	80063f2 <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	689b      	ldr	r3, [r3, #8]
 800636c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006370:	d11a      	bne.n	80063a8 <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	6a1b      	ldr	r3, [r3, #32]
 8006376:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8006378:	68fb      	ldr	r3, [r7, #12]
 800637a:	881b      	ldrh	r3, [r3, #0]
 800637c:	461a      	mov	r2, r3
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	681b      	ldr	r3, [r3, #0]
 8006382:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006386:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	691b      	ldr	r3, [r3, #16]
 800638c:	2b00      	cmp	r3, #0
 800638e:	d105      	bne.n	800639c <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	6a1b      	ldr	r3, [r3, #32]
 8006394:	1c9a      	adds	r2, r3, #2
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	621a      	str	r2, [r3, #32]
 800639a:	e00e      	b.n	80063ba <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	6a1b      	ldr	r3, [r3, #32]
 80063a0:	1c5a      	adds	r2, r3, #1
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	621a      	str	r2, [r3, #32]
 80063a6:	e008      	b.n	80063ba <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	6a1b      	ldr	r3, [r3, #32]
 80063ac:	1c59      	adds	r1, r3, #1
 80063ae:	687a      	ldr	r2, [r7, #4]
 80063b0:	6211      	str	r1, [r2, #32]
 80063b2:	781a      	ldrb	r2, [r3, #0]
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	681b      	ldr	r3, [r3, #0]
 80063b8:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80063be:	b29b      	uxth	r3, r3
 80063c0:	3b01      	subs	r3, #1
 80063c2:	b29b      	uxth	r3, r3
 80063c4:	687a      	ldr	r2, [r7, #4]
 80063c6:	4619      	mov	r1, r3
 80063c8:	84d1      	strh	r1, [r2, #38]	; 0x26
 80063ca:	2b00      	cmp	r3, #0
 80063cc:	d10f      	bne.n	80063ee <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	681b      	ldr	r3, [r3, #0]
 80063d2:	68da      	ldr	r2, [r3, #12]
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	681b      	ldr	r3, [r3, #0]
 80063d8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80063dc:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	681b      	ldr	r3, [r3, #0]
 80063e2:	68da      	ldr	r2, [r3, #12]
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	681b      	ldr	r3, [r3, #0]
 80063e8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80063ec:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80063ee:	2300      	movs	r3, #0
 80063f0:	e000      	b.n	80063f4 <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 80063f2:	2302      	movs	r3, #2
  }
}
 80063f4:	4618      	mov	r0, r3
 80063f6:	3714      	adds	r7, #20
 80063f8:	46bd      	mov	sp, r7
 80063fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063fe:	4770      	bx	lr

08006400 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006400:	b580      	push	{r7, lr}
 8006402:	b082      	sub	sp, #8
 8006404:	af00      	add	r7, sp, #0
 8006406:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	681b      	ldr	r3, [r3, #0]
 800640c:	68da      	ldr	r2, [r3, #12]
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	681b      	ldr	r3, [r3, #0]
 8006412:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006416:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	2220      	movs	r2, #32
 800641c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006420:	6878      	ldr	r0, [r7, #4]
 8006422:	f7ff fefd 	bl	8006220 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8006426:	2300      	movs	r3, #0
}
 8006428:	4618      	mov	r0, r3
 800642a:	3708      	adds	r7, #8
 800642c:	46bd      	mov	sp, r7
 800642e:	bd80      	pop	{r7, pc}

08006430 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8006430:	b580      	push	{r7, lr}
 8006432:	b084      	sub	sp, #16
 8006434:	af00      	add	r7, sp, #0
 8006436:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800643e:	b2db      	uxtb	r3, r3
 8006440:	2b22      	cmp	r3, #34	; 0x22
 8006442:	d171      	bne.n	8006528 <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	689b      	ldr	r3, [r3, #8]
 8006448:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800644c:	d123      	bne.n	8006496 <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006452:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	691b      	ldr	r3, [r3, #16]
 8006458:	2b00      	cmp	r3, #0
 800645a:	d10e      	bne.n	800647a <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	681b      	ldr	r3, [r3, #0]
 8006460:	685b      	ldr	r3, [r3, #4]
 8006462:	b29b      	uxth	r3, r3
 8006464:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006468:	b29a      	uxth	r2, r3
 800646a:	68fb      	ldr	r3, [r7, #12]
 800646c:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006472:	1c9a      	adds	r2, r3, #2
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	629a      	str	r2, [r3, #40]	; 0x28
 8006478:	e029      	b.n	80064ce <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	681b      	ldr	r3, [r3, #0]
 800647e:	685b      	ldr	r3, [r3, #4]
 8006480:	b29b      	uxth	r3, r3
 8006482:	b2db      	uxtb	r3, r3
 8006484:	b29a      	uxth	r2, r3
 8006486:	68fb      	ldr	r3, [r7, #12]
 8006488:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800648e:	1c5a      	adds	r2, r3, #1
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	629a      	str	r2, [r3, #40]	; 0x28
 8006494:	e01b      	b.n	80064ce <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	691b      	ldr	r3, [r3, #16]
 800649a:	2b00      	cmp	r3, #0
 800649c:	d10a      	bne.n	80064b4 <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	681b      	ldr	r3, [r3, #0]
 80064a2:	6858      	ldr	r0, [r3, #4]
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80064a8:	1c59      	adds	r1, r3, #1
 80064aa:	687a      	ldr	r2, [r7, #4]
 80064ac:	6291      	str	r1, [r2, #40]	; 0x28
 80064ae:	b2c2      	uxtb	r2, r0
 80064b0:	701a      	strb	r2, [r3, #0]
 80064b2:	e00c      	b.n	80064ce <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	681b      	ldr	r3, [r3, #0]
 80064b8:	685b      	ldr	r3, [r3, #4]
 80064ba:	b2da      	uxtb	r2, r3
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80064c0:	1c58      	adds	r0, r3, #1
 80064c2:	6879      	ldr	r1, [r7, #4]
 80064c4:	6288      	str	r0, [r1, #40]	; 0x28
 80064c6:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80064ca:	b2d2      	uxtb	r2, r2
 80064cc:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80064d2:	b29b      	uxth	r3, r3
 80064d4:	3b01      	subs	r3, #1
 80064d6:	b29b      	uxth	r3, r3
 80064d8:	687a      	ldr	r2, [r7, #4]
 80064da:	4619      	mov	r1, r3
 80064dc:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80064de:	2b00      	cmp	r3, #0
 80064e0:	d120      	bne.n	8006524 <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	681b      	ldr	r3, [r3, #0]
 80064e6:	68da      	ldr	r2, [r3, #12]
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	681b      	ldr	r3, [r3, #0]
 80064ec:	f022 0220 	bic.w	r2, r2, #32
 80064f0:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	681b      	ldr	r3, [r3, #0]
 80064f6:	68da      	ldr	r2, [r3, #12]
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	681b      	ldr	r3, [r3, #0]
 80064fc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006500:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	681b      	ldr	r3, [r3, #0]
 8006506:	695a      	ldr	r2, [r3, #20]
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	681b      	ldr	r3, [r3, #0]
 800650c:	f022 0201 	bic.w	r2, r2, #1
 8006510:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	2220      	movs	r2, #32
 8006516:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 800651a:	6878      	ldr	r0, [r7, #4]
 800651c:	f7ff fe8a 	bl	8006234 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 8006520:	2300      	movs	r3, #0
 8006522:	e002      	b.n	800652a <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 8006524:	2300      	movs	r3, #0
 8006526:	e000      	b.n	800652a <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 8006528:	2302      	movs	r3, #2
  }
}
 800652a:	4618      	mov	r0, r3
 800652c:	3710      	adds	r7, #16
 800652e:	46bd      	mov	sp, r7
 8006530:	bd80      	pop	{r7, pc}
	...

08006534 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006534:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006538:	b085      	sub	sp, #20
 800653a:	af00      	add	r7, sp, #0
 800653c:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	681b      	ldr	r3, [r3, #0]
 8006542:	691b      	ldr	r3, [r3, #16]
 8006544:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	68da      	ldr	r2, [r3, #12]
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	681b      	ldr	r3, [r3, #0]
 8006550:	430a      	orrs	r2, r1
 8006552:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	689a      	ldr	r2, [r3, #8]
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	691b      	ldr	r3, [r3, #16]
 800655c:	431a      	orrs	r2, r3
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	695b      	ldr	r3, [r3, #20]
 8006562:	431a      	orrs	r2, r3
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	69db      	ldr	r3, [r3, #28]
 8006568:	4313      	orrs	r3, r2
 800656a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	681b      	ldr	r3, [r3, #0]
 8006570:	68db      	ldr	r3, [r3, #12]
 8006572:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8006576:	f023 030c 	bic.w	r3, r3, #12
 800657a:	687a      	ldr	r2, [r7, #4]
 800657c:	6812      	ldr	r2, [r2, #0]
 800657e:	68f9      	ldr	r1, [r7, #12]
 8006580:	430b      	orrs	r3, r1
 8006582:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	681b      	ldr	r3, [r3, #0]
 8006588:	695b      	ldr	r3, [r3, #20]
 800658a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	699a      	ldr	r2, [r3, #24]
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	681b      	ldr	r3, [r3, #0]
 8006596:	430a      	orrs	r2, r1
 8006598:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	69db      	ldr	r3, [r3, #28]
 800659e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80065a2:	f040 818b 	bne.w	80068bc <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	681b      	ldr	r3, [r3, #0]
 80065aa:	4ac1      	ldr	r2, [pc, #772]	; (80068b0 <UART_SetConfig+0x37c>)
 80065ac:	4293      	cmp	r3, r2
 80065ae:	d005      	beq.n	80065bc <UART_SetConfig+0x88>
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	681b      	ldr	r3, [r3, #0]
 80065b4:	4abf      	ldr	r2, [pc, #764]	; (80068b4 <UART_SetConfig+0x380>)
 80065b6:	4293      	cmp	r3, r2
 80065b8:	f040 80bd 	bne.w	8006736 <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80065bc:	f7fe fb3c 	bl	8004c38 <HAL_RCC_GetPCLK2Freq>
 80065c0:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80065c2:	68bb      	ldr	r3, [r7, #8]
 80065c4:	461d      	mov	r5, r3
 80065c6:	f04f 0600 	mov.w	r6, #0
 80065ca:	46a8      	mov	r8, r5
 80065cc:	46b1      	mov	r9, r6
 80065ce:	eb18 0308 	adds.w	r3, r8, r8
 80065d2:	eb49 0409 	adc.w	r4, r9, r9
 80065d6:	4698      	mov	r8, r3
 80065d8:	46a1      	mov	r9, r4
 80065da:	eb18 0805 	adds.w	r8, r8, r5
 80065de:	eb49 0906 	adc.w	r9, r9, r6
 80065e2:	f04f 0100 	mov.w	r1, #0
 80065e6:	f04f 0200 	mov.w	r2, #0
 80065ea:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80065ee:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80065f2:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80065f6:	4688      	mov	r8, r1
 80065f8:	4691      	mov	r9, r2
 80065fa:	eb18 0005 	adds.w	r0, r8, r5
 80065fe:	eb49 0106 	adc.w	r1, r9, r6
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	685b      	ldr	r3, [r3, #4]
 8006606:	461d      	mov	r5, r3
 8006608:	f04f 0600 	mov.w	r6, #0
 800660c:	196b      	adds	r3, r5, r5
 800660e:	eb46 0406 	adc.w	r4, r6, r6
 8006612:	461a      	mov	r2, r3
 8006614:	4623      	mov	r3, r4
 8006616:	f7fa fac7 	bl	8000ba8 <__aeabi_uldivmod>
 800661a:	4603      	mov	r3, r0
 800661c:	460c      	mov	r4, r1
 800661e:	461a      	mov	r2, r3
 8006620:	4ba5      	ldr	r3, [pc, #660]	; (80068b8 <UART_SetConfig+0x384>)
 8006622:	fba3 2302 	umull	r2, r3, r3, r2
 8006626:	095b      	lsrs	r3, r3, #5
 8006628:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800662c:	68bb      	ldr	r3, [r7, #8]
 800662e:	461d      	mov	r5, r3
 8006630:	f04f 0600 	mov.w	r6, #0
 8006634:	46a9      	mov	r9, r5
 8006636:	46b2      	mov	sl, r6
 8006638:	eb19 0309 	adds.w	r3, r9, r9
 800663c:	eb4a 040a 	adc.w	r4, sl, sl
 8006640:	4699      	mov	r9, r3
 8006642:	46a2      	mov	sl, r4
 8006644:	eb19 0905 	adds.w	r9, r9, r5
 8006648:	eb4a 0a06 	adc.w	sl, sl, r6
 800664c:	f04f 0100 	mov.w	r1, #0
 8006650:	f04f 0200 	mov.w	r2, #0
 8006654:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006658:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800665c:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8006660:	4689      	mov	r9, r1
 8006662:	4692      	mov	sl, r2
 8006664:	eb19 0005 	adds.w	r0, r9, r5
 8006668:	eb4a 0106 	adc.w	r1, sl, r6
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	685b      	ldr	r3, [r3, #4]
 8006670:	461d      	mov	r5, r3
 8006672:	f04f 0600 	mov.w	r6, #0
 8006676:	196b      	adds	r3, r5, r5
 8006678:	eb46 0406 	adc.w	r4, r6, r6
 800667c:	461a      	mov	r2, r3
 800667e:	4623      	mov	r3, r4
 8006680:	f7fa fa92 	bl	8000ba8 <__aeabi_uldivmod>
 8006684:	4603      	mov	r3, r0
 8006686:	460c      	mov	r4, r1
 8006688:	461a      	mov	r2, r3
 800668a:	4b8b      	ldr	r3, [pc, #556]	; (80068b8 <UART_SetConfig+0x384>)
 800668c:	fba3 1302 	umull	r1, r3, r3, r2
 8006690:	095b      	lsrs	r3, r3, #5
 8006692:	2164      	movs	r1, #100	; 0x64
 8006694:	fb01 f303 	mul.w	r3, r1, r3
 8006698:	1ad3      	subs	r3, r2, r3
 800669a:	00db      	lsls	r3, r3, #3
 800669c:	3332      	adds	r3, #50	; 0x32
 800669e:	4a86      	ldr	r2, [pc, #536]	; (80068b8 <UART_SetConfig+0x384>)
 80066a0:	fba2 2303 	umull	r2, r3, r2, r3
 80066a4:	095b      	lsrs	r3, r3, #5
 80066a6:	005b      	lsls	r3, r3, #1
 80066a8:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80066ac:	4498      	add	r8, r3
 80066ae:	68bb      	ldr	r3, [r7, #8]
 80066b0:	461d      	mov	r5, r3
 80066b2:	f04f 0600 	mov.w	r6, #0
 80066b6:	46a9      	mov	r9, r5
 80066b8:	46b2      	mov	sl, r6
 80066ba:	eb19 0309 	adds.w	r3, r9, r9
 80066be:	eb4a 040a 	adc.w	r4, sl, sl
 80066c2:	4699      	mov	r9, r3
 80066c4:	46a2      	mov	sl, r4
 80066c6:	eb19 0905 	adds.w	r9, r9, r5
 80066ca:	eb4a 0a06 	adc.w	sl, sl, r6
 80066ce:	f04f 0100 	mov.w	r1, #0
 80066d2:	f04f 0200 	mov.w	r2, #0
 80066d6:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80066da:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80066de:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80066e2:	4689      	mov	r9, r1
 80066e4:	4692      	mov	sl, r2
 80066e6:	eb19 0005 	adds.w	r0, r9, r5
 80066ea:	eb4a 0106 	adc.w	r1, sl, r6
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	685b      	ldr	r3, [r3, #4]
 80066f2:	461d      	mov	r5, r3
 80066f4:	f04f 0600 	mov.w	r6, #0
 80066f8:	196b      	adds	r3, r5, r5
 80066fa:	eb46 0406 	adc.w	r4, r6, r6
 80066fe:	461a      	mov	r2, r3
 8006700:	4623      	mov	r3, r4
 8006702:	f7fa fa51 	bl	8000ba8 <__aeabi_uldivmod>
 8006706:	4603      	mov	r3, r0
 8006708:	460c      	mov	r4, r1
 800670a:	461a      	mov	r2, r3
 800670c:	4b6a      	ldr	r3, [pc, #424]	; (80068b8 <UART_SetConfig+0x384>)
 800670e:	fba3 1302 	umull	r1, r3, r3, r2
 8006712:	095b      	lsrs	r3, r3, #5
 8006714:	2164      	movs	r1, #100	; 0x64
 8006716:	fb01 f303 	mul.w	r3, r1, r3
 800671a:	1ad3      	subs	r3, r2, r3
 800671c:	00db      	lsls	r3, r3, #3
 800671e:	3332      	adds	r3, #50	; 0x32
 8006720:	4a65      	ldr	r2, [pc, #404]	; (80068b8 <UART_SetConfig+0x384>)
 8006722:	fba2 2303 	umull	r2, r3, r2, r3
 8006726:	095b      	lsrs	r3, r3, #5
 8006728:	f003 0207 	and.w	r2, r3, #7
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	681b      	ldr	r3, [r3, #0]
 8006730:	4442      	add	r2, r8
 8006732:	609a      	str	r2, [r3, #8]
 8006734:	e26f      	b.n	8006c16 <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8006736:	f7fe fa6b 	bl	8004c10 <HAL_RCC_GetPCLK1Freq>
 800673a:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800673c:	68bb      	ldr	r3, [r7, #8]
 800673e:	461d      	mov	r5, r3
 8006740:	f04f 0600 	mov.w	r6, #0
 8006744:	46a8      	mov	r8, r5
 8006746:	46b1      	mov	r9, r6
 8006748:	eb18 0308 	adds.w	r3, r8, r8
 800674c:	eb49 0409 	adc.w	r4, r9, r9
 8006750:	4698      	mov	r8, r3
 8006752:	46a1      	mov	r9, r4
 8006754:	eb18 0805 	adds.w	r8, r8, r5
 8006758:	eb49 0906 	adc.w	r9, r9, r6
 800675c:	f04f 0100 	mov.w	r1, #0
 8006760:	f04f 0200 	mov.w	r2, #0
 8006764:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8006768:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800676c:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8006770:	4688      	mov	r8, r1
 8006772:	4691      	mov	r9, r2
 8006774:	eb18 0005 	adds.w	r0, r8, r5
 8006778:	eb49 0106 	adc.w	r1, r9, r6
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	685b      	ldr	r3, [r3, #4]
 8006780:	461d      	mov	r5, r3
 8006782:	f04f 0600 	mov.w	r6, #0
 8006786:	196b      	adds	r3, r5, r5
 8006788:	eb46 0406 	adc.w	r4, r6, r6
 800678c:	461a      	mov	r2, r3
 800678e:	4623      	mov	r3, r4
 8006790:	f7fa fa0a 	bl	8000ba8 <__aeabi_uldivmod>
 8006794:	4603      	mov	r3, r0
 8006796:	460c      	mov	r4, r1
 8006798:	461a      	mov	r2, r3
 800679a:	4b47      	ldr	r3, [pc, #284]	; (80068b8 <UART_SetConfig+0x384>)
 800679c:	fba3 2302 	umull	r2, r3, r3, r2
 80067a0:	095b      	lsrs	r3, r3, #5
 80067a2:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80067a6:	68bb      	ldr	r3, [r7, #8]
 80067a8:	461d      	mov	r5, r3
 80067aa:	f04f 0600 	mov.w	r6, #0
 80067ae:	46a9      	mov	r9, r5
 80067b0:	46b2      	mov	sl, r6
 80067b2:	eb19 0309 	adds.w	r3, r9, r9
 80067b6:	eb4a 040a 	adc.w	r4, sl, sl
 80067ba:	4699      	mov	r9, r3
 80067bc:	46a2      	mov	sl, r4
 80067be:	eb19 0905 	adds.w	r9, r9, r5
 80067c2:	eb4a 0a06 	adc.w	sl, sl, r6
 80067c6:	f04f 0100 	mov.w	r1, #0
 80067ca:	f04f 0200 	mov.w	r2, #0
 80067ce:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80067d2:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80067d6:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80067da:	4689      	mov	r9, r1
 80067dc:	4692      	mov	sl, r2
 80067de:	eb19 0005 	adds.w	r0, r9, r5
 80067e2:	eb4a 0106 	adc.w	r1, sl, r6
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	685b      	ldr	r3, [r3, #4]
 80067ea:	461d      	mov	r5, r3
 80067ec:	f04f 0600 	mov.w	r6, #0
 80067f0:	196b      	adds	r3, r5, r5
 80067f2:	eb46 0406 	adc.w	r4, r6, r6
 80067f6:	461a      	mov	r2, r3
 80067f8:	4623      	mov	r3, r4
 80067fa:	f7fa f9d5 	bl	8000ba8 <__aeabi_uldivmod>
 80067fe:	4603      	mov	r3, r0
 8006800:	460c      	mov	r4, r1
 8006802:	461a      	mov	r2, r3
 8006804:	4b2c      	ldr	r3, [pc, #176]	; (80068b8 <UART_SetConfig+0x384>)
 8006806:	fba3 1302 	umull	r1, r3, r3, r2
 800680a:	095b      	lsrs	r3, r3, #5
 800680c:	2164      	movs	r1, #100	; 0x64
 800680e:	fb01 f303 	mul.w	r3, r1, r3
 8006812:	1ad3      	subs	r3, r2, r3
 8006814:	00db      	lsls	r3, r3, #3
 8006816:	3332      	adds	r3, #50	; 0x32
 8006818:	4a27      	ldr	r2, [pc, #156]	; (80068b8 <UART_SetConfig+0x384>)
 800681a:	fba2 2303 	umull	r2, r3, r2, r3
 800681e:	095b      	lsrs	r3, r3, #5
 8006820:	005b      	lsls	r3, r3, #1
 8006822:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8006826:	4498      	add	r8, r3
 8006828:	68bb      	ldr	r3, [r7, #8]
 800682a:	461d      	mov	r5, r3
 800682c:	f04f 0600 	mov.w	r6, #0
 8006830:	46a9      	mov	r9, r5
 8006832:	46b2      	mov	sl, r6
 8006834:	eb19 0309 	adds.w	r3, r9, r9
 8006838:	eb4a 040a 	adc.w	r4, sl, sl
 800683c:	4699      	mov	r9, r3
 800683e:	46a2      	mov	sl, r4
 8006840:	eb19 0905 	adds.w	r9, r9, r5
 8006844:	eb4a 0a06 	adc.w	sl, sl, r6
 8006848:	f04f 0100 	mov.w	r1, #0
 800684c:	f04f 0200 	mov.w	r2, #0
 8006850:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006854:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8006858:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800685c:	4689      	mov	r9, r1
 800685e:	4692      	mov	sl, r2
 8006860:	eb19 0005 	adds.w	r0, r9, r5
 8006864:	eb4a 0106 	adc.w	r1, sl, r6
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	685b      	ldr	r3, [r3, #4]
 800686c:	461d      	mov	r5, r3
 800686e:	f04f 0600 	mov.w	r6, #0
 8006872:	196b      	adds	r3, r5, r5
 8006874:	eb46 0406 	adc.w	r4, r6, r6
 8006878:	461a      	mov	r2, r3
 800687a:	4623      	mov	r3, r4
 800687c:	f7fa f994 	bl	8000ba8 <__aeabi_uldivmod>
 8006880:	4603      	mov	r3, r0
 8006882:	460c      	mov	r4, r1
 8006884:	461a      	mov	r2, r3
 8006886:	4b0c      	ldr	r3, [pc, #48]	; (80068b8 <UART_SetConfig+0x384>)
 8006888:	fba3 1302 	umull	r1, r3, r3, r2
 800688c:	095b      	lsrs	r3, r3, #5
 800688e:	2164      	movs	r1, #100	; 0x64
 8006890:	fb01 f303 	mul.w	r3, r1, r3
 8006894:	1ad3      	subs	r3, r2, r3
 8006896:	00db      	lsls	r3, r3, #3
 8006898:	3332      	adds	r3, #50	; 0x32
 800689a:	4a07      	ldr	r2, [pc, #28]	; (80068b8 <UART_SetConfig+0x384>)
 800689c:	fba2 2303 	umull	r2, r3, r2, r3
 80068a0:	095b      	lsrs	r3, r3, #5
 80068a2:	f003 0207 	and.w	r2, r3, #7
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	681b      	ldr	r3, [r3, #0]
 80068aa:	4442      	add	r2, r8
 80068ac:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 80068ae:	e1b2      	b.n	8006c16 <UART_SetConfig+0x6e2>
 80068b0:	40011000 	.word	0x40011000
 80068b4:	40011400 	.word	0x40011400
 80068b8:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	681b      	ldr	r3, [r3, #0]
 80068c0:	4ad7      	ldr	r2, [pc, #860]	; (8006c20 <UART_SetConfig+0x6ec>)
 80068c2:	4293      	cmp	r3, r2
 80068c4:	d005      	beq.n	80068d2 <UART_SetConfig+0x39e>
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	681b      	ldr	r3, [r3, #0]
 80068ca:	4ad6      	ldr	r2, [pc, #856]	; (8006c24 <UART_SetConfig+0x6f0>)
 80068cc:	4293      	cmp	r3, r2
 80068ce:	f040 80d1 	bne.w	8006a74 <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 80068d2:	f7fe f9b1 	bl	8004c38 <HAL_RCC_GetPCLK2Freq>
 80068d6:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80068d8:	68bb      	ldr	r3, [r7, #8]
 80068da:	469a      	mov	sl, r3
 80068dc:	f04f 0b00 	mov.w	fp, #0
 80068e0:	46d0      	mov	r8, sl
 80068e2:	46d9      	mov	r9, fp
 80068e4:	eb18 0308 	adds.w	r3, r8, r8
 80068e8:	eb49 0409 	adc.w	r4, r9, r9
 80068ec:	4698      	mov	r8, r3
 80068ee:	46a1      	mov	r9, r4
 80068f0:	eb18 080a 	adds.w	r8, r8, sl
 80068f4:	eb49 090b 	adc.w	r9, r9, fp
 80068f8:	f04f 0100 	mov.w	r1, #0
 80068fc:	f04f 0200 	mov.w	r2, #0
 8006900:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8006904:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8006908:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800690c:	4688      	mov	r8, r1
 800690e:	4691      	mov	r9, r2
 8006910:	eb1a 0508 	adds.w	r5, sl, r8
 8006914:	eb4b 0609 	adc.w	r6, fp, r9
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	685b      	ldr	r3, [r3, #4]
 800691c:	4619      	mov	r1, r3
 800691e:	f04f 0200 	mov.w	r2, #0
 8006922:	f04f 0300 	mov.w	r3, #0
 8006926:	f04f 0400 	mov.w	r4, #0
 800692a:	0094      	lsls	r4, r2, #2
 800692c:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8006930:	008b      	lsls	r3, r1, #2
 8006932:	461a      	mov	r2, r3
 8006934:	4623      	mov	r3, r4
 8006936:	4628      	mov	r0, r5
 8006938:	4631      	mov	r1, r6
 800693a:	f7fa f935 	bl	8000ba8 <__aeabi_uldivmod>
 800693e:	4603      	mov	r3, r0
 8006940:	460c      	mov	r4, r1
 8006942:	461a      	mov	r2, r3
 8006944:	4bb8      	ldr	r3, [pc, #736]	; (8006c28 <UART_SetConfig+0x6f4>)
 8006946:	fba3 2302 	umull	r2, r3, r3, r2
 800694a:	095b      	lsrs	r3, r3, #5
 800694c:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8006950:	68bb      	ldr	r3, [r7, #8]
 8006952:	469b      	mov	fp, r3
 8006954:	f04f 0c00 	mov.w	ip, #0
 8006958:	46d9      	mov	r9, fp
 800695a:	46e2      	mov	sl, ip
 800695c:	eb19 0309 	adds.w	r3, r9, r9
 8006960:	eb4a 040a 	adc.w	r4, sl, sl
 8006964:	4699      	mov	r9, r3
 8006966:	46a2      	mov	sl, r4
 8006968:	eb19 090b 	adds.w	r9, r9, fp
 800696c:	eb4a 0a0c 	adc.w	sl, sl, ip
 8006970:	f04f 0100 	mov.w	r1, #0
 8006974:	f04f 0200 	mov.w	r2, #0
 8006978:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800697c:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8006980:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8006984:	4689      	mov	r9, r1
 8006986:	4692      	mov	sl, r2
 8006988:	eb1b 0509 	adds.w	r5, fp, r9
 800698c:	eb4c 060a 	adc.w	r6, ip, sl
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	685b      	ldr	r3, [r3, #4]
 8006994:	4619      	mov	r1, r3
 8006996:	f04f 0200 	mov.w	r2, #0
 800699a:	f04f 0300 	mov.w	r3, #0
 800699e:	f04f 0400 	mov.w	r4, #0
 80069a2:	0094      	lsls	r4, r2, #2
 80069a4:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80069a8:	008b      	lsls	r3, r1, #2
 80069aa:	461a      	mov	r2, r3
 80069ac:	4623      	mov	r3, r4
 80069ae:	4628      	mov	r0, r5
 80069b0:	4631      	mov	r1, r6
 80069b2:	f7fa f8f9 	bl	8000ba8 <__aeabi_uldivmod>
 80069b6:	4603      	mov	r3, r0
 80069b8:	460c      	mov	r4, r1
 80069ba:	461a      	mov	r2, r3
 80069bc:	4b9a      	ldr	r3, [pc, #616]	; (8006c28 <UART_SetConfig+0x6f4>)
 80069be:	fba3 1302 	umull	r1, r3, r3, r2
 80069c2:	095b      	lsrs	r3, r3, #5
 80069c4:	2164      	movs	r1, #100	; 0x64
 80069c6:	fb01 f303 	mul.w	r3, r1, r3
 80069ca:	1ad3      	subs	r3, r2, r3
 80069cc:	011b      	lsls	r3, r3, #4
 80069ce:	3332      	adds	r3, #50	; 0x32
 80069d0:	4a95      	ldr	r2, [pc, #596]	; (8006c28 <UART_SetConfig+0x6f4>)
 80069d2:	fba2 2303 	umull	r2, r3, r2, r3
 80069d6:	095b      	lsrs	r3, r3, #5
 80069d8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80069dc:	4498      	add	r8, r3
 80069de:	68bb      	ldr	r3, [r7, #8]
 80069e0:	469b      	mov	fp, r3
 80069e2:	f04f 0c00 	mov.w	ip, #0
 80069e6:	46d9      	mov	r9, fp
 80069e8:	46e2      	mov	sl, ip
 80069ea:	eb19 0309 	adds.w	r3, r9, r9
 80069ee:	eb4a 040a 	adc.w	r4, sl, sl
 80069f2:	4699      	mov	r9, r3
 80069f4:	46a2      	mov	sl, r4
 80069f6:	eb19 090b 	adds.w	r9, r9, fp
 80069fa:	eb4a 0a0c 	adc.w	sl, sl, ip
 80069fe:	f04f 0100 	mov.w	r1, #0
 8006a02:	f04f 0200 	mov.w	r2, #0
 8006a06:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006a0a:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8006a0e:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8006a12:	4689      	mov	r9, r1
 8006a14:	4692      	mov	sl, r2
 8006a16:	eb1b 0509 	adds.w	r5, fp, r9
 8006a1a:	eb4c 060a 	adc.w	r6, ip, sl
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	685b      	ldr	r3, [r3, #4]
 8006a22:	4619      	mov	r1, r3
 8006a24:	f04f 0200 	mov.w	r2, #0
 8006a28:	f04f 0300 	mov.w	r3, #0
 8006a2c:	f04f 0400 	mov.w	r4, #0
 8006a30:	0094      	lsls	r4, r2, #2
 8006a32:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8006a36:	008b      	lsls	r3, r1, #2
 8006a38:	461a      	mov	r2, r3
 8006a3a:	4623      	mov	r3, r4
 8006a3c:	4628      	mov	r0, r5
 8006a3e:	4631      	mov	r1, r6
 8006a40:	f7fa f8b2 	bl	8000ba8 <__aeabi_uldivmod>
 8006a44:	4603      	mov	r3, r0
 8006a46:	460c      	mov	r4, r1
 8006a48:	461a      	mov	r2, r3
 8006a4a:	4b77      	ldr	r3, [pc, #476]	; (8006c28 <UART_SetConfig+0x6f4>)
 8006a4c:	fba3 1302 	umull	r1, r3, r3, r2
 8006a50:	095b      	lsrs	r3, r3, #5
 8006a52:	2164      	movs	r1, #100	; 0x64
 8006a54:	fb01 f303 	mul.w	r3, r1, r3
 8006a58:	1ad3      	subs	r3, r2, r3
 8006a5a:	011b      	lsls	r3, r3, #4
 8006a5c:	3332      	adds	r3, #50	; 0x32
 8006a5e:	4a72      	ldr	r2, [pc, #456]	; (8006c28 <UART_SetConfig+0x6f4>)
 8006a60:	fba2 2303 	umull	r2, r3, r2, r3
 8006a64:	095b      	lsrs	r3, r3, #5
 8006a66:	f003 020f 	and.w	r2, r3, #15
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	681b      	ldr	r3, [r3, #0]
 8006a6e:	4442      	add	r2, r8
 8006a70:	609a      	str	r2, [r3, #8]
 8006a72:	e0d0      	b.n	8006c16 <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 8006a74:	f7fe f8cc 	bl	8004c10 <HAL_RCC_GetPCLK1Freq>
 8006a78:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006a7a:	68bb      	ldr	r3, [r7, #8]
 8006a7c:	469a      	mov	sl, r3
 8006a7e:	f04f 0b00 	mov.w	fp, #0
 8006a82:	46d0      	mov	r8, sl
 8006a84:	46d9      	mov	r9, fp
 8006a86:	eb18 0308 	adds.w	r3, r8, r8
 8006a8a:	eb49 0409 	adc.w	r4, r9, r9
 8006a8e:	4698      	mov	r8, r3
 8006a90:	46a1      	mov	r9, r4
 8006a92:	eb18 080a 	adds.w	r8, r8, sl
 8006a96:	eb49 090b 	adc.w	r9, r9, fp
 8006a9a:	f04f 0100 	mov.w	r1, #0
 8006a9e:	f04f 0200 	mov.w	r2, #0
 8006aa2:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8006aa6:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8006aaa:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8006aae:	4688      	mov	r8, r1
 8006ab0:	4691      	mov	r9, r2
 8006ab2:	eb1a 0508 	adds.w	r5, sl, r8
 8006ab6:	eb4b 0609 	adc.w	r6, fp, r9
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	685b      	ldr	r3, [r3, #4]
 8006abe:	4619      	mov	r1, r3
 8006ac0:	f04f 0200 	mov.w	r2, #0
 8006ac4:	f04f 0300 	mov.w	r3, #0
 8006ac8:	f04f 0400 	mov.w	r4, #0
 8006acc:	0094      	lsls	r4, r2, #2
 8006ace:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8006ad2:	008b      	lsls	r3, r1, #2
 8006ad4:	461a      	mov	r2, r3
 8006ad6:	4623      	mov	r3, r4
 8006ad8:	4628      	mov	r0, r5
 8006ada:	4631      	mov	r1, r6
 8006adc:	f7fa f864 	bl	8000ba8 <__aeabi_uldivmod>
 8006ae0:	4603      	mov	r3, r0
 8006ae2:	460c      	mov	r4, r1
 8006ae4:	461a      	mov	r2, r3
 8006ae6:	4b50      	ldr	r3, [pc, #320]	; (8006c28 <UART_SetConfig+0x6f4>)
 8006ae8:	fba3 2302 	umull	r2, r3, r3, r2
 8006aec:	095b      	lsrs	r3, r3, #5
 8006aee:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8006af2:	68bb      	ldr	r3, [r7, #8]
 8006af4:	469b      	mov	fp, r3
 8006af6:	f04f 0c00 	mov.w	ip, #0
 8006afa:	46d9      	mov	r9, fp
 8006afc:	46e2      	mov	sl, ip
 8006afe:	eb19 0309 	adds.w	r3, r9, r9
 8006b02:	eb4a 040a 	adc.w	r4, sl, sl
 8006b06:	4699      	mov	r9, r3
 8006b08:	46a2      	mov	sl, r4
 8006b0a:	eb19 090b 	adds.w	r9, r9, fp
 8006b0e:	eb4a 0a0c 	adc.w	sl, sl, ip
 8006b12:	f04f 0100 	mov.w	r1, #0
 8006b16:	f04f 0200 	mov.w	r2, #0
 8006b1a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006b1e:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8006b22:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8006b26:	4689      	mov	r9, r1
 8006b28:	4692      	mov	sl, r2
 8006b2a:	eb1b 0509 	adds.w	r5, fp, r9
 8006b2e:	eb4c 060a 	adc.w	r6, ip, sl
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	685b      	ldr	r3, [r3, #4]
 8006b36:	4619      	mov	r1, r3
 8006b38:	f04f 0200 	mov.w	r2, #0
 8006b3c:	f04f 0300 	mov.w	r3, #0
 8006b40:	f04f 0400 	mov.w	r4, #0
 8006b44:	0094      	lsls	r4, r2, #2
 8006b46:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8006b4a:	008b      	lsls	r3, r1, #2
 8006b4c:	461a      	mov	r2, r3
 8006b4e:	4623      	mov	r3, r4
 8006b50:	4628      	mov	r0, r5
 8006b52:	4631      	mov	r1, r6
 8006b54:	f7fa f828 	bl	8000ba8 <__aeabi_uldivmod>
 8006b58:	4603      	mov	r3, r0
 8006b5a:	460c      	mov	r4, r1
 8006b5c:	461a      	mov	r2, r3
 8006b5e:	4b32      	ldr	r3, [pc, #200]	; (8006c28 <UART_SetConfig+0x6f4>)
 8006b60:	fba3 1302 	umull	r1, r3, r3, r2
 8006b64:	095b      	lsrs	r3, r3, #5
 8006b66:	2164      	movs	r1, #100	; 0x64
 8006b68:	fb01 f303 	mul.w	r3, r1, r3
 8006b6c:	1ad3      	subs	r3, r2, r3
 8006b6e:	011b      	lsls	r3, r3, #4
 8006b70:	3332      	adds	r3, #50	; 0x32
 8006b72:	4a2d      	ldr	r2, [pc, #180]	; (8006c28 <UART_SetConfig+0x6f4>)
 8006b74:	fba2 2303 	umull	r2, r3, r2, r3
 8006b78:	095b      	lsrs	r3, r3, #5
 8006b7a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006b7e:	4498      	add	r8, r3
 8006b80:	68bb      	ldr	r3, [r7, #8]
 8006b82:	469b      	mov	fp, r3
 8006b84:	f04f 0c00 	mov.w	ip, #0
 8006b88:	46d9      	mov	r9, fp
 8006b8a:	46e2      	mov	sl, ip
 8006b8c:	eb19 0309 	adds.w	r3, r9, r9
 8006b90:	eb4a 040a 	adc.w	r4, sl, sl
 8006b94:	4699      	mov	r9, r3
 8006b96:	46a2      	mov	sl, r4
 8006b98:	eb19 090b 	adds.w	r9, r9, fp
 8006b9c:	eb4a 0a0c 	adc.w	sl, sl, ip
 8006ba0:	f04f 0100 	mov.w	r1, #0
 8006ba4:	f04f 0200 	mov.w	r2, #0
 8006ba8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006bac:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8006bb0:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8006bb4:	4689      	mov	r9, r1
 8006bb6:	4692      	mov	sl, r2
 8006bb8:	eb1b 0509 	adds.w	r5, fp, r9
 8006bbc:	eb4c 060a 	adc.w	r6, ip, sl
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	685b      	ldr	r3, [r3, #4]
 8006bc4:	4619      	mov	r1, r3
 8006bc6:	f04f 0200 	mov.w	r2, #0
 8006bca:	f04f 0300 	mov.w	r3, #0
 8006bce:	f04f 0400 	mov.w	r4, #0
 8006bd2:	0094      	lsls	r4, r2, #2
 8006bd4:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8006bd8:	008b      	lsls	r3, r1, #2
 8006bda:	461a      	mov	r2, r3
 8006bdc:	4623      	mov	r3, r4
 8006bde:	4628      	mov	r0, r5
 8006be0:	4631      	mov	r1, r6
 8006be2:	f7f9 ffe1 	bl	8000ba8 <__aeabi_uldivmod>
 8006be6:	4603      	mov	r3, r0
 8006be8:	460c      	mov	r4, r1
 8006bea:	461a      	mov	r2, r3
 8006bec:	4b0e      	ldr	r3, [pc, #56]	; (8006c28 <UART_SetConfig+0x6f4>)
 8006bee:	fba3 1302 	umull	r1, r3, r3, r2
 8006bf2:	095b      	lsrs	r3, r3, #5
 8006bf4:	2164      	movs	r1, #100	; 0x64
 8006bf6:	fb01 f303 	mul.w	r3, r1, r3
 8006bfa:	1ad3      	subs	r3, r2, r3
 8006bfc:	011b      	lsls	r3, r3, #4
 8006bfe:	3332      	adds	r3, #50	; 0x32
 8006c00:	4a09      	ldr	r2, [pc, #36]	; (8006c28 <UART_SetConfig+0x6f4>)
 8006c02:	fba2 2303 	umull	r2, r3, r2, r3
 8006c06:	095b      	lsrs	r3, r3, #5
 8006c08:	f003 020f 	and.w	r2, r3, #15
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	681b      	ldr	r3, [r3, #0]
 8006c10:	4442      	add	r2, r8
 8006c12:	609a      	str	r2, [r3, #8]
}
 8006c14:	e7ff      	b.n	8006c16 <UART_SetConfig+0x6e2>
 8006c16:	bf00      	nop
 8006c18:	3714      	adds	r7, #20
 8006c1a:	46bd      	mov	sp, r7
 8006c1c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006c20:	40011000 	.word	0x40011000
 8006c24:	40011400 	.word	0x40011400
 8006c28:	51eb851f 	.word	0x51eb851f

08006c2c <clearerr>:
 8006c2c:	b538      	push	{r3, r4, r5, lr}
 8006c2e:	4b0e      	ldr	r3, [pc, #56]	; (8006c68 <clearerr+0x3c>)
 8006c30:	681d      	ldr	r5, [r3, #0]
 8006c32:	4604      	mov	r4, r0
 8006c34:	b125      	cbz	r5, 8006c40 <clearerr+0x14>
 8006c36:	69ab      	ldr	r3, [r5, #24]
 8006c38:	b913      	cbnz	r3, 8006c40 <clearerr+0x14>
 8006c3a:	4628      	mov	r0, r5
 8006c3c:	f000 f862 	bl	8006d04 <__sinit>
 8006c40:	4b0a      	ldr	r3, [pc, #40]	; (8006c6c <clearerr+0x40>)
 8006c42:	429c      	cmp	r4, r3
 8006c44:	d105      	bne.n	8006c52 <clearerr+0x26>
 8006c46:	686c      	ldr	r4, [r5, #4]
 8006c48:	89a3      	ldrh	r3, [r4, #12]
 8006c4a:	f023 0360 	bic.w	r3, r3, #96	; 0x60
 8006c4e:	81a3      	strh	r3, [r4, #12]
 8006c50:	bd38      	pop	{r3, r4, r5, pc}
 8006c52:	4b07      	ldr	r3, [pc, #28]	; (8006c70 <clearerr+0x44>)
 8006c54:	429c      	cmp	r4, r3
 8006c56:	d101      	bne.n	8006c5c <clearerr+0x30>
 8006c58:	68ac      	ldr	r4, [r5, #8]
 8006c5a:	e7f5      	b.n	8006c48 <clearerr+0x1c>
 8006c5c:	4b05      	ldr	r3, [pc, #20]	; (8006c74 <clearerr+0x48>)
 8006c5e:	429c      	cmp	r4, r3
 8006c60:	bf08      	it	eq
 8006c62:	68ec      	ldreq	r4, [r5, #12]
 8006c64:	e7f0      	b.n	8006c48 <clearerr+0x1c>
 8006c66:	bf00      	nop
 8006c68:	20000014 	.word	0x20000014
 8006c6c:	0800a37c 	.word	0x0800a37c
 8006c70:	0800a39c 	.word	0x0800a39c
 8006c74:	0800a35c 	.word	0x0800a35c

08006c78 <__errno>:
 8006c78:	4b01      	ldr	r3, [pc, #4]	; (8006c80 <__errno+0x8>)
 8006c7a:	6818      	ldr	r0, [r3, #0]
 8006c7c:	4770      	bx	lr
 8006c7e:	bf00      	nop
 8006c80:	20000014 	.word	0x20000014

08006c84 <std>:
 8006c84:	2300      	movs	r3, #0
 8006c86:	b510      	push	{r4, lr}
 8006c88:	4604      	mov	r4, r0
 8006c8a:	e9c0 3300 	strd	r3, r3, [r0]
 8006c8e:	6083      	str	r3, [r0, #8]
 8006c90:	8181      	strh	r1, [r0, #12]
 8006c92:	6643      	str	r3, [r0, #100]	; 0x64
 8006c94:	81c2      	strh	r2, [r0, #14]
 8006c96:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8006c9a:	6183      	str	r3, [r0, #24]
 8006c9c:	4619      	mov	r1, r3
 8006c9e:	2208      	movs	r2, #8
 8006ca0:	305c      	adds	r0, #92	; 0x5c
 8006ca2:	f000 f90b 	bl	8006ebc <memset>
 8006ca6:	4b05      	ldr	r3, [pc, #20]	; (8006cbc <std+0x38>)
 8006ca8:	6263      	str	r3, [r4, #36]	; 0x24
 8006caa:	4b05      	ldr	r3, [pc, #20]	; (8006cc0 <std+0x3c>)
 8006cac:	62a3      	str	r3, [r4, #40]	; 0x28
 8006cae:	4b05      	ldr	r3, [pc, #20]	; (8006cc4 <std+0x40>)
 8006cb0:	62e3      	str	r3, [r4, #44]	; 0x2c
 8006cb2:	4b05      	ldr	r3, [pc, #20]	; (8006cc8 <std+0x44>)
 8006cb4:	6224      	str	r4, [r4, #32]
 8006cb6:	6323      	str	r3, [r4, #48]	; 0x30
 8006cb8:	bd10      	pop	{r4, pc}
 8006cba:	bf00      	nop
 8006cbc:	08007979 	.word	0x08007979
 8006cc0:	0800799b 	.word	0x0800799b
 8006cc4:	080079d3 	.word	0x080079d3
 8006cc8:	080079f7 	.word	0x080079f7

08006ccc <_cleanup_r>:
 8006ccc:	4901      	ldr	r1, [pc, #4]	; (8006cd4 <_cleanup_r+0x8>)
 8006cce:	f000 b8a1 	b.w	8006e14 <_fwalk_reent>
 8006cd2:	bf00      	nop
 8006cd4:	0800895d 	.word	0x0800895d

08006cd8 <__sfmoreglue>:
 8006cd8:	b570      	push	{r4, r5, r6, lr}
 8006cda:	1e4a      	subs	r2, r1, #1
 8006cdc:	2568      	movs	r5, #104	; 0x68
 8006cde:	4355      	muls	r5, r2
 8006ce0:	460e      	mov	r6, r1
 8006ce2:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8006ce6:	f000 f8f1 	bl	8006ecc <_malloc_r>
 8006cea:	4604      	mov	r4, r0
 8006cec:	b140      	cbz	r0, 8006d00 <__sfmoreglue+0x28>
 8006cee:	2100      	movs	r1, #0
 8006cf0:	e9c0 1600 	strd	r1, r6, [r0]
 8006cf4:	300c      	adds	r0, #12
 8006cf6:	60a0      	str	r0, [r4, #8]
 8006cf8:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8006cfc:	f000 f8de 	bl	8006ebc <memset>
 8006d00:	4620      	mov	r0, r4
 8006d02:	bd70      	pop	{r4, r5, r6, pc}

08006d04 <__sinit>:
 8006d04:	6983      	ldr	r3, [r0, #24]
 8006d06:	b510      	push	{r4, lr}
 8006d08:	4604      	mov	r4, r0
 8006d0a:	bb33      	cbnz	r3, 8006d5a <__sinit+0x56>
 8006d0c:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 8006d10:	6503      	str	r3, [r0, #80]	; 0x50
 8006d12:	4b12      	ldr	r3, [pc, #72]	; (8006d5c <__sinit+0x58>)
 8006d14:	4a12      	ldr	r2, [pc, #72]	; (8006d60 <__sinit+0x5c>)
 8006d16:	681b      	ldr	r3, [r3, #0]
 8006d18:	6282      	str	r2, [r0, #40]	; 0x28
 8006d1a:	4298      	cmp	r0, r3
 8006d1c:	bf04      	itt	eq
 8006d1e:	2301      	moveq	r3, #1
 8006d20:	6183      	streq	r3, [r0, #24]
 8006d22:	f000 f81f 	bl	8006d64 <__sfp>
 8006d26:	6060      	str	r0, [r4, #4]
 8006d28:	4620      	mov	r0, r4
 8006d2a:	f000 f81b 	bl	8006d64 <__sfp>
 8006d2e:	60a0      	str	r0, [r4, #8]
 8006d30:	4620      	mov	r0, r4
 8006d32:	f000 f817 	bl	8006d64 <__sfp>
 8006d36:	2200      	movs	r2, #0
 8006d38:	60e0      	str	r0, [r4, #12]
 8006d3a:	2104      	movs	r1, #4
 8006d3c:	6860      	ldr	r0, [r4, #4]
 8006d3e:	f7ff ffa1 	bl	8006c84 <std>
 8006d42:	2201      	movs	r2, #1
 8006d44:	2109      	movs	r1, #9
 8006d46:	68a0      	ldr	r0, [r4, #8]
 8006d48:	f7ff ff9c 	bl	8006c84 <std>
 8006d4c:	2202      	movs	r2, #2
 8006d4e:	2112      	movs	r1, #18
 8006d50:	68e0      	ldr	r0, [r4, #12]
 8006d52:	f7ff ff97 	bl	8006c84 <std>
 8006d56:	2301      	movs	r3, #1
 8006d58:	61a3      	str	r3, [r4, #24]
 8006d5a:	bd10      	pop	{r4, pc}
 8006d5c:	0800a3bc 	.word	0x0800a3bc
 8006d60:	08006ccd 	.word	0x08006ccd

08006d64 <__sfp>:
 8006d64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006d66:	4b1b      	ldr	r3, [pc, #108]	; (8006dd4 <__sfp+0x70>)
 8006d68:	681e      	ldr	r6, [r3, #0]
 8006d6a:	69b3      	ldr	r3, [r6, #24]
 8006d6c:	4607      	mov	r7, r0
 8006d6e:	b913      	cbnz	r3, 8006d76 <__sfp+0x12>
 8006d70:	4630      	mov	r0, r6
 8006d72:	f7ff ffc7 	bl	8006d04 <__sinit>
 8006d76:	3648      	adds	r6, #72	; 0x48
 8006d78:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8006d7c:	3b01      	subs	r3, #1
 8006d7e:	d503      	bpl.n	8006d88 <__sfp+0x24>
 8006d80:	6833      	ldr	r3, [r6, #0]
 8006d82:	b133      	cbz	r3, 8006d92 <__sfp+0x2e>
 8006d84:	6836      	ldr	r6, [r6, #0]
 8006d86:	e7f7      	b.n	8006d78 <__sfp+0x14>
 8006d88:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8006d8c:	b16d      	cbz	r5, 8006daa <__sfp+0x46>
 8006d8e:	3468      	adds	r4, #104	; 0x68
 8006d90:	e7f4      	b.n	8006d7c <__sfp+0x18>
 8006d92:	2104      	movs	r1, #4
 8006d94:	4638      	mov	r0, r7
 8006d96:	f7ff ff9f 	bl	8006cd8 <__sfmoreglue>
 8006d9a:	6030      	str	r0, [r6, #0]
 8006d9c:	2800      	cmp	r0, #0
 8006d9e:	d1f1      	bne.n	8006d84 <__sfp+0x20>
 8006da0:	230c      	movs	r3, #12
 8006da2:	603b      	str	r3, [r7, #0]
 8006da4:	4604      	mov	r4, r0
 8006da6:	4620      	mov	r0, r4
 8006da8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006daa:	4b0b      	ldr	r3, [pc, #44]	; (8006dd8 <__sfp+0x74>)
 8006dac:	6665      	str	r5, [r4, #100]	; 0x64
 8006dae:	e9c4 5500 	strd	r5, r5, [r4]
 8006db2:	60a5      	str	r5, [r4, #8]
 8006db4:	e9c4 3503 	strd	r3, r5, [r4, #12]
 8006db8:	e9c4 5505 	strd	r5, r5, [r4, #20]
 8006dbc:	2208      	movs	r2, #8
 8006dbe:	4629      	mov	r1, r5
 8006dc0:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8006dc4:	f000 f87a 	bl	8006ebc <memset>
 8006dc8:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8006dcc:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8006dd0:	e7e9      	b.n	8006da6 <__sfp+0x42>
 8006dd2:	bf00      	nop
 8006dd4:	0800a3bc 	.word	0x0800a3bc
 8006dd8:	ffff0001 	.word	0xffff0001

08006ddc <_fwalk>:
 8006ddc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006de0:	4688      	mov	r8, r1
 8006de2:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8006de6:	2600      	movs	r6, #0
 8006de8:	b914      	cbnz	r4, 8006df0 <_fwalk+0x14>
 8006dea:	4630      	mov	r0, r6
 8006dec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006df0:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 8006df4:	3f01      	subs	r7, #1
 8006df6:	d501      	bpl.n	8006dfc <_fwalk+0x20>
 8006df8:	6824      	ldr	r4, [r4, #0]
 8006dfa:	e7f5      	b.n	8006de8 <_fwalk+0xc>
 8006dfc:	89ab      	ldrh	r3, [r5, #12]
 8006dfe:	2b01      	cmp	r3, #1
 8006e00:	d906      	bls.n	8006e10 <_fwalk+0x34>
 8006e02:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006e06:	3301      	adds	r3, #1
 8006e08:	d002      	beq.n	8006e10 <_fwalk+0x34>
 8006e0a:	4628      	mov	r0, r5
 8006e0c:	47c0      	blx	r8
 8006e0e:	4306      	orrs	r6, r0
 8006e10:	3568      	adds	r5, #104	; 0x68
 8006e12:	e7ef      	b.n	8006df4 <_fwalk+0x18>

08006e14 <_fwalk_reent>:
 8006e14:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006e18:	4680      	mov	r8, r0
 8006e1a:	4689      	mov	r9, r1
 8006e1c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8006e20:	2600      	movs	r6, #0
 8006e22:	b914      	cbnz	r4, 8006e2a <_fwalk_reent+0x16>
 8006e24:	4630      	mov	r0, r6
 8006e26:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006e2a:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 8006e2e:	3f01      	subs	r7, #1
 8006e30:	d501      	bpl.n	8006e36 <_fwalk_reent+0x22>
 8006e32:	6824      	ldr	r4, [r4, #0]
 8006e34:	e7f5      	b.n	8006e22 <_fwalk_reent+0xe>
 8006e36:	89ab      	ldrh	r3, [r5, #12]
 8006e38:	2b01      	cmp	r3, #1
 8006e3a:	d907      	bls.n	8006e4c <_fwalk_reent+0x38>
 8006e3c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006e40:	3301      	adds	r3, #1
 8006e42:	d003      	beq.n	8006e4c <_fwalk_reent+0x38>
 8006e44:	4629      	mov	r1, r5
 8006e46:	4640      	mov	r0, r8
 8006e48:	47c8      	blx	r9
 8006e4a:	4306      	orrs	r6, r0
 8006e4c:	3568      	adds	r5, #104	; 0x68
 8006e4e:	e7ee      	b.n	8006e2e <_fwalk_reent+0x1a>

08006e50 <getchar>:
 8006e50:	4b07      	ldr	r3, [pc, #28]	; (8006e70 <getchar+0x20>)
 8006e52:	b510      	push	{r4, lr}
 8006e54:	681c      	ldr	r4, [r3, #0]
 8006e56:	b124      	cbz	r4, 8006e62 <getchar+0x12>
 8006e58:	69a3      	ldr	r3, [r4, #24]
 8006e5a:	b913      	cbnz	r3, 8006e62 <getchar+0x12>
 8006e5c:	4620      	mov	r0, r4
 8006e5e:	f7ff ff51 	bl	8006d04 <__sinit>
 8006e62:	6861      	ldr	r1, [r4, #4]
 8006e64:	4620      	mov	r0, r4
 8006e66:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006e6a:	f001 bdb3 	b.w	80089d4 <_getc_r>
 8006e6e:	bf00      	nop
 8006e70:	20000014 	.word	0x20000014

08006e74 <__libc_init_array>:
 8006e74:	b570      	push	{r4, r5, r6, lr}
 8006e76:	4e0d      	ldr	r6, [pc, #52]	; (8006eac <__libc_init_array+0x38>)
 8006e78:	4c0d      	ldr	r4, [pc, #52]	; (8006eb0 <__libc_init_array+0x3c>)
 8006e7a:	1ba4      	subs	r4, r4, r6
 8006e7c:	10a4      	asrs	r4, r4, #2
 8006e7e:	2500      	movs	r5, #0
 8006e80:	42a5      	cmp	r5, r4
 8006e82:	d109      	bne.n	8006e98 <__libc_init_array+0x24>
 8006e84:	4e0b      	ldr	r6, [pc, #44]	; (8006eb4 <__libc_init_array+0x40>)
 8006e86:	4c0c      	ldr	r4, [pc, #48]	; (8006eb8 <__libc_init_array+0x44>)
 8006e88:	f002 fc2c 	bl	80096e4 <_init>
 8006e8c:	1ba4      	subs	r4, r4, r6
 8006e8e:	10a4      	asrs	r4, r4, #2
 8006e90:	2500      	movs	r5, #0
 8006e92:	42a5      	cmp	r5, r4
 8006e94:	d105      	bne.n	8006ea2 <__libc_init_array+0x2e>
 8006e96:	bd70      	pop	{r4, r5, r6, pc}
 8006e98:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8006e9c:	4798      	blx	r3
 8006e9e:	3501      	adds	r5, #1
 8006ea0:	e7ee      	b.n	8006e80 <__libc_init_array+0xc>
 8006ea2:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8006ea6:	4798      	blx	r3
 8006ea8:	3501      	adds	r5, #1
 8006eaa:	e7f2      	b.n	8006e92 <__libc_init_array+0x1e>
 8006eac:	0800a628 	.word	0x0800a628
 8006eb0:	0800a628 	.word	0x0800a628
 8006eb4:	0800a628 	.word	0x0800a628
 8006eb8:	0800a62c 	.word	0x0800a62c

08006ebc <memset>:
 8006ebc:	4402      	add	r2, r0
 8006ebe:	4603      	mov	r3, r0
 8006ec0:	4293      	cmp	r3, r2
 8006ec2:	d100      	bne.n	8006ec6 <memset+0xa>
 8006ec4:	4770      	bx	lr
 8006ec6:	f803 1b01 	strb.w	r1, [r3], #1
 8006eca:	e7f9      	b.n	8006ec0 <memset+0x4>

08006ecc <_malloc_r>:
 8006ecc:	b570      	push	{r4, r5, r6, lr}
 8006ece:	1ccd      	adds	r5, r1, #3
 8006ed0:	f025 0503 	bic.w	r5, r5, #3
 8006ed4:	3508      	adds	r5, #8
 8006ed6:	2d0c      	cmp	r5, #12
 8006ed8:	bf38      	it	cc
 8006eda:	250c      	movcc	r5, #12
 8006edc:	2d00      	cmp	r5, #0
 8006ede:	4606      	mov	r6, r0
 8006ee0:	db01      	blt.n	8006ee6 <_malloc_r+0x1a>
 8006ee2:	42a9      	cmp	r1, r5
 8006ee4:	d903      	bls.n	8006eee <_malloc_r+0x22>
 8006ee6:	230c      	movs	r3, #12
 8006ee8:	6033      	str	r3, [r6, #0]
 8006eea:	2000      	movs	r0, #0
 8006eec:	bd70      	pop	{r4, r5, r6, pc}
 8006eee:	f001 fe34 	bl	8008b5a <__malloc_lock>
 8006ef2:	4a21      	ldr	r2, [pc, #132]	; (8006f78 <_malloc_r+0xac>)
 8006ef4:	6814      	ldr	r4, [r2, #0]
 8006ef6:	4621      	mov	r1, r4
 8006ef8:	b991      	cbnz	r1, 8006f20 <_malloc_r+0x54>
 8006efa:	4c20      	ldr	r4, [pc, #128]	; (8006f7c <_malloc_r+0xb0>)
 8006efc:	6823      	ldr	r3, [r4, #0]
 8006efe:	b91b      	cbnz	r3, 8006f08 <_malloc_r+0x3c>
 8006f00:	4630      	mov	r0, r6
 8006f02:	f000 fd29 	bl	8007958 <_sbrk_r>
 8006f06:	6020      	str	r0, [r4, #0]
 8006f08:	4629      	mov	r1, r5
 8006f0a:	4630      	mov	r0, r6
 8006f0c:	f000 fd24 	bl	8007958 <_sbrk_r>
 8006f10:	1c43      	adds	r3, r0, #1
 8006f12:	d124      	bne.n	8006f5e <_malloc_r+0x92>
 8006f14:	230c      	movs	r3, #12
 8006f16:	6033      	str	r3, [r6, #0]
 8006f18:	4630      	mov	r0, r6
 8006f1a:	f001 fe1f 	bl	8008b5c <__malloc_unlock>
 8006f1e:	e7e4      	b.n	8006eea <_malloc_r+0x1e>
 8006f20:	680b      	ldr	r3, [r1, #0]
 8006f22:	1b5b      	subs	r3, r3, r5
 8006f24:	d418      	bmi.n	8006f58 <_malloc_r+0x8c>
 8006f26:	2b0b      	cmp	r3, #11
 8006f28:	d90f      	bls.n	8006f4a <_malloc_r+0x7e>
 8006f2a:	600b      	str	r3, [r1, #0]
 8006f2c:	50cd      	str	r5, [r1, r3]
 8006f2e:	18cc      	adds	r4, r1, r3
 8006f30:	4630      	mov	r0, r6
 8006f32:	f001 fe13 	bl	8008b5c <__malloc_unlock>
 8006f36:	f104 000b 	add.w	r0, r4, #11
 8006f3a:	1d23      	adds	r3, r4, #4
 8006f3c:	f020 0007 	bic.w	r0, r0, #7
 8006f40:	1ac3      	subs	r3, r0, r3
 8006f42:	d0d3      	beq.n	8006eec <_malloc_r+0x20>
 8006f44:	425a      	negs	r2, r3
 8006f46:	50e2      	str	r2, [r4, r3]
 8006f48:	e7d0      	b.n	8006eec <_malloc_r+0x20>
 8006f4a:	428c      	cmp	r4, r1
 8006f4c:	684b      	ldr	r3, [r1, #4]
 8006f4e:	bf16      	itet	ne
 8006f50:	6063      	strne	r3, [r4, #4]
 8006f52:	6013      	streq	r3, [r2, #0]
 8006f54:	460c      	movne	r4, r1
 8006f56:	e7eb      	b.n	8006f30 <_malloc_r+0x64>
 8006f58:	460c      	mov	r4, r1
 8006f5a:	6849      	ldr	r1, [r1, #4]
 8006f5c:	e7cc      	b.n	8006ef8 <_malloc_r+0x2c>
 8006f5e:	1cc4      	adds	r4, r0, #3
 8006f60:	f024 0403 	bic.w	r4, r4, #3
 8006f64:	42a0      	cmp	r0, r4
 8006f66:	d005      	beq.n	8006f74 <_malloc_r+0xa8>
 8006f68:	1a21      	subs	r1, r4, r0
 8006f6a:	4630      	mov	r0, r6
 8006f6c:	f000 fcf4 	bl	8007958 <_sbrk_r>
 8006f70:	3001      	adds	r0, #1
 8006f72:	d0cf      	beq.n	8006f14 <_malloc_r+0x48>
 8006f74:	6025      	str	r5, [r4, #0]
 8006f76:	e7db      	b.n	8006f30 <_malloc_r+0x64>
 8006f78:	2000060c 	.word	0x2000060c
 8006f7c:	20000610 	.word	0x20000610

08006f80 <__cvt>:
 8006f80:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006f84:	ec55 4b10 	vmov	r4, r5, d0
 8006f88:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 8006f8a:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8006f8e:	2d00      	cmp	r5, #0
 8006f90:	460e      	mov	r6, r1
 8006f92:	4691      	mov	r9, r2
 8006f94:	4619      	mov	r1, r3
 8006f96:	bfb8      	it	lt
 8006f98:	4622      	movlt	r2, r4
 8006f9a:	462b      	mov	r3, r5
 8006f9c:	f027 0720 	bic.w	r7, r7, #32
 8006fa0:	bfbb      	ittet	lt
 8006fa2:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8006fa6:	461d      	movlt	r5, r3
 8006fa8:	2300      	movge	r3, #0
 8006faa:	232d      	movlt	r3, #45	; 0x2d
 8006fac:	bfb8      	it	lt
 8006fae:	4614      	movlt	r4, r2
 8006fb0:	2f46      	cmp	r7, #70	; 0x46
 8006fb2:	700b      	strb	r3, [r1, #0]
 8006fb4:	d004      	beq.n	8006fc0 <__cvt+0x40>
 8006fb6:	2f45      	cmp	r7, #69	; 0x45
 8006fb8:	d100      	bne.n	8006fbc <__cvt+0x3c>
 8006fba:	3601      	adds	r6, #1
 8006fbc:	2102      	movs	r1, #2
 8006fbe:	e000      	b.n	8006fc2 <__cvt+0x42>
 8006fc0:	2103      	movs	r1, #3
 8006fc2:	ab03      	add	r3, sp, #12
 8006fc4:	9301      	str	r3, [sp, #4]
 8006fc6:	ab02      	add	r3, sp, #8
 8006fc8:	9300      	str	r3, [sp, #0]
 8006fca:	4632      	mov	r2, r6
 8006fcc:	4653      	mov	r3, sl
 8006fce:	ec45 4b10 	vmov	d0, r4, r5
 8006fd2:	f000 fe85 	bl	8007ce0 <_dtoa_r>
 8006fd6:	2f47      	cmp	r7, #71	; 0x47
 8006fd8:	4680      	mov	r8, r0
 8006fda:	d102      	bne.n	8006fe2 <__cvt+0x62>
 8006fdc:	f019 0f01 	tst.w	r9, #1
 8006fe0:	d026      	beq.n	8007030 <__cvt+0xb0>
 8006fe2:	2f46      	cmp	r7, #70	; 0x46
 8006fe4:	eb08 0906 	add.w	r9, r8, r6
 8006fe8:	d111      	bne.n	800700e <__cvt+0x8e>
 8006fea:	f898 3000 	ldrb.w	r3, [r8]
 8006fee:	2b30      	cmp	r3, #48	; 0x30
 8006ff0:	d10a      	bne.n	8007008 <__cvt+0x88>
 8006ff2:	2200      	movs	r2, #0
 8006ff4:	2300      	movs	r3, #0
 8006ff6:	4620      	mov	r0, r4
 8006ff8:	4629      	mov	r1, r5
 8006ffa:	f7f9 fd65 	bl	8000ac8 <__aeabi_dcmpeq>
 8006ffe:	b918      	cbnz	r0, 8007008 <__cvt+0x88>
 8007000:	f1c6 0601 	rsb	r6, r6, #1
 8007004:	f8ca 6000 	str.w	r6, [sl]
 8007008:	f8da 3000 	ldr.w	r3, [sl]
 800700c:	4499      	add	r9, r3
 800700e:	2200      	movs	r2, #0
 8007010:	2300      	movs	r3, #0
 8007012:	4620      	mov	r0, r4
 8007014:	4629      	mov	r1, r5
 8007016:	f7f9 fd57 	bl	8000ac8 <__aeabi_dcmpeq>
 800701a:	b938      	cbnz	r0, 800702c <__cvt+0xac>
 800701c:	2230      	movs	r2, #48	; 0x30
 800701e:	9b03      	ldr	r3, [sp, #12]
 8007020:	454b      	cmp	r3, r9
 8007022:	d205      	bcs.n	8007030 <__cvt+0xb0>
 8007024:	1c59      	adds	r1, r3, #1
 8007026:	9103      	str	r1, [sp, #12]
 8007028:	701a      	strb	r2, [r3, #0]
 800702a:	e7f8      	b.n	800701e <__cvt+0x9e>
 800702c:	f8cd 900c 	str.w	r9, [sp, #12]
 8007030:	9b03      	ldr	r3, [sp, #12]
 8007032:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8007034:	eba3 0308 	sub.w	r3, r3, r8
 8007038:	4640      	mov	r0, r8
 800703a:	6013      	str	r3, [r2, #0]
 800703c:	b004      	add	sp, #16
 800703e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08007042 <__exponent>:
 8007042:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007044:	2900      	cmp	r1, #0
 8007046:	4604      	mov	r4, r0
 8007048:	bfba      	itte	lt
 800704a:	4249      	neglt	r1, r1
 800704c:	232d      	movlt	r3, #45	; 0x2d
 800704e:	232b      	movge	r3, #43	; 0x2b
 8007050:	2909      	cmp	r1, #9
 8007052:	f804 2b02 	strb.w	r2, [r4], #2
 8007056:	7043      	strb	r3, [r0, #1]
 8007058:	dd20      	ble.n	800709c <__exponent+0x5a>
 800705a:	f10d 0307 	add.w	r3, sp, #7
 800705e:	461f      	mov	r7, r3
 8007060:	260a      	movs	r6, #10
 8007062:	fb91 f5f6 	sdiv	r5, r1, r6
 8007066:	fb06 1115 	mls	r1, r6, r5, r1
 800706a:	3130      	adds	r1, #48	; 0x30
 800706c:	2d09      	cmp	r5, #9
 800706e:	f803 1c01 	strb.w	r1, [r3, #-1]
 8007072:	f103 32ff 	add.w	r2, r3, #4294967295
 8007076:	4629      	mov	r1, r5
 8007078:	dc09      	bgt.n	800708e <__exponent+0x4c>
 800707a:	3130      	adds	r1, #48	; 0x30
 800707c:	3b02      	subs	r3, #2
 800707e:	f802 1c01 	strb.w	r1, [r2, #-1]
 8007082:	42bb      	cmp	r3, r7
 8007084:	4622      	mov	r2, r4
 8007086:	d304      	bcc.n	8007092 <__exponent+0x50>
 8007088:	1a10      	subs	r0, r2, r0
 800708a:	b003      	add	sp, #12
 800708c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800708e:	4613      	mov	r3, r2
 8007090:	e7e7      	b.n	8007062 <__exponent+0x20>
 8007092:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007096:	f804 2b01 	strb.w	r2, [r4], #1
 800709a:	e7f2      	b.n	8007082 <__exponent+0x40>
 800709c:	2330      	movs	r3, #48	; 0x30
 800709e:	4419      	add	r1, r3
 80070a0:	7083      	strb	r3, [r0, #2]
 80070a2:	1d02      	adds	r2, r0, #4
 80070a4:	70c1      	strb	r1, [r0, #3]
 80070a6:	e7ef      	b.n	8007088 <__exponent+0x46>

080070a8 <_printf_float>:
 80070a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80070ac:	b08d      	sub	sp, #52	; 0x34
 80070ae:	460c      	mov	r4, r1
 80070b0:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 80070b4:	4616      	mov	r6, r2
 80070b6:	461f      	mov	r7, r3
 80070b8:	4605      	mov	r5, r0
 80070ba:	f001 fcb7 	bl	8008a2c <_localeconv_r>
 80070be:	6803      	ldr	r3, [r0, #0]
 80070c0:	9304      	str	r3, [sp, #16]
 80070c2:	4618      	mov	r0, r3
 80070c4:	f7f9 f884 	bl	80001d0 <strlen>
 80070c8:	2300      	movs	r3, #0
 80070ca:	930a      	str	r3, [sp, #40]	; 0x28
 80070cc:	f8d8 3000 	ldr.w	r3, [r8]
 80070d0:	9005      	str	r0, [sp, #20]
 80070d2:	3307      	adds	r3, #7
 80070d4:	f023 0307 	bic.w	r3, r3, #7
 80070d8:	f103 0208 	add.w	r2, r3, #8
 80070dc:	f894 a018 	ldrb.w	sl, [r4, #24]
 80070e0:	f8d4 b000 	ldr.w	fp, [r4]
 80070e4:	f8c8 2000 	str.w	r2, [r8]
 80070e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80070ec:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 80070f0:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 80070f4:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80070f8:	9307      	str	r3, [sp, #28]
 80070fa:	f8cd 8018 	str.w	r8, [sp, #24]
 80070fe:	f04f 32ff 	mov.w	r2, #4294967295
 8007102:	4ba7      	ldr	r3, [pc, #668]	; (80073a0 <_printf_float+0x2f8>)
 8007104:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007108:	f7f9 fd10 	bl	8000b2c <__aeabi_dcmpun>
 800710c:	bb70      	cbnz	r0, 800716c <_printf_float+0xc4>
 800710e:	f04f 32ff 	mov.w	r2, #4294967295
 8007112:	4ba3      	ldr	r3, [pc, #652]	; (80073a0 <_printf_float+0x2f8>)
 8007114:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007118:	f7f9 fcea 	bl	8000af0 <__aeabi_dcmple>
 800711c:	bb30      	cbnz	r0, 800716c <_printf_float+0xc4>
 800711e:	2200      	movs	r2, #0
 8007120:	2300      	movs	r3, #0
 8007122:	4640      	mov	r0, r8
 8007124:	4649      	mov	r1, r9
 8007126:	f7f9 fcd9 	bl	8000adc <__aeabi_dcmplt>
 800712a:	b110      	cbz	r0, 8007132 <_printf_float+0x8a>
 800712c:	232d      	movs	r3, #45	; 0x2d
 800712e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007132:	4a9c      	ldr	r2, [pc, #624]	; (80073a4 <_printf_float+0x2fc>)
 8007134:	4b9c      	ldr	r3, [pc, #624]	; (80073a8 <_printf_float+0x300>)
 8007136:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 800713a:	bf8c      	ite	hi
 800713c:	4690      	movhi	r8, r2
 800713e:	4698      	movls	r8, r3
 8007140:	2303      	movs	r3, #3
 8007142:	f02b 0204 	bic.w	r2, fp, #4
 8007146:	6123      	str	r3, [r4, #16]
 8007148:	6022      	str	r2, [r4, #0]
 800714a:	f04f 0900 	mov.w	r9, #0
 800714e:	9700      	str	r7, [sp, #0]
 8007150:	4633      	mov	r3, r6
 8007152:	aa0b      	add	r2, sp, #44	; 0x2c
 8007154:	4621      	mov	r1, r4
 8007156:	4628      	mov	r0, r5
 8007158:	f000 f9e6 	bl	8007528 <_printf_common>
 800715c:	3001      	adds	r0, #1
 800715e:	f040 808d 	bne.w	800727c <_printf_float+0x1d4>
 8007162:	f04f 30ff 	mov.w	r0, #4294967295
 8007166:	b00d      	add	sp, #52	; 0x34
 8007168:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800716c:	4642      	mov	r2, r8
 800716e:	464b      	mov	r3, r9
 8007170:	4640      	mov	r0, r8
 8007172:	4649      	mov	r1, r9
 8007174:	f7f9 fcda 	bl	8000b2c <__aeabi_dcmpun>
 8007178:	b110      	cbz	r0, 8007180 <_printf_float+0xd8>
 800717a:	4a8c      	ldr	r2, [pc, #560]	; (80073ac <_printf_float+0x304>)
 800717c:	4b8c      	ldr	r3, [pc, #560]	; (80073b0 <_printf_float+0x308>)
 800717e:	e7da      	b.n	8007136 <_printf_float+0x8e>
 8007180:	6861      	ldr	r1, [r4, #4]
 8007182:	1c4b      	adds	r3, r1, #1
 8007184:	f44b 6280 	orr.w	r2, fp, #1024	; 0x400
 8007188:	a80a      	add	r0, sp, #40	; 0x28
 800718a:	d13e      	bne.n	800720a <_printf_float+0x162>
 800718c:	2306      	movs	r3, #6
 800718e:	6063      	str	r3, [r4, #4]
 8007190:	2300      	movs	r3, #0
 8007192:	e9cd 0302 	strd	r0, r3, [sp, #8]
 8007196:	ab09      	add	r3, sp, #36	; 0x24
 8007198:	9300      	str	r3, [sp, #0]
 800719a:	ec49 8b10 	vmov	d0, r8, r9
 800719e:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 80071a2:	6022      	str	r2, [r4, #0]
 80071a4:	f8cd a004 	str.w	sl, [sp, #4]
 80071a8:	6861      	ldr	r1, [r4, #4]
 80071aa:	4628      	mov	r0, r5
 80071ac:	f7ff fee8 	bl	8006f80 <__cvt>
 80071b0:	f00a 03df 	and.w	r3, sl, #223	; 0xdf
 80071b4:	2b47      	cmp	r3, #71	; 0x47
 80071b6:	4680      	mov	r8, r0
 80071b8:	d109      	bne.n	80071ce <_printf_float+0x126>
 80071ba:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80071bc:	1cd8      	adds	r0, r3, #3
 80071be:	db02      	blt.n	80071c6 <_printf_float+0x11e>
 80071c0:	6862      	ldr	r2, [r4, #4]
 80071c2:	4293      	cmp	r3, r2
 80071c4:	dd47      	ble.n	8007256 <_printf_float+0x1ae>
 80071c6:	f1aa 0a02 	sub.w	sl, sl, #2
 80071ca:	fa5f fa8a 	uxtb.w	sl, sl
 80071ce:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 80071d2:	9909      	ldr	r1, [sp, #36]	; 0x24
 80071d4:	d824      	bhi.n	8007220 <_printf_float+0x178>
 80071d6:	3901      	subs	r1, #1
 80071d8:	4652      	mov	r2, sl
 80071da:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80071de:	9109      	str	r1, [sp, #36]	; 0x24
 80071e0:	f7ff ff2f 	bl	8007042 <__exponent>
 80071e4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80071e6:	1813      	adds	r3, r2, r0
 80071e8:	2a01      	cmp	r2, #1
 80071ea:	4681      	mov	r9, r0
 80071ec:	6123      	str	r3, [r4, #16]
 80071ee:	dc02      	bgt.n	80071f6 <_printf_float+0x14e>
 80071f0:	6822      	ldr	r2, [r4, #0]
 80071f2:	07d1      	lsls	r1, r2, #31
 80071f4:	d501      	bpl.n	80071fa <_printf_float+0x152>
 80071f6:	3301      	adds	r3, #1
 80071f8:	6123      	str	r3, [r4, #16]
 80071fa:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 80071fe:	2b00      	cmp	r3, #0
 8007200:	d0a5      	beq.n	800714e <_printf_float+0xa6>
 8007202:	232d      	movs	r3, #45	; 0x2d
 8007204:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007208:	e7a1      	b.n	800714e <_printf_float+0xa6>
 800720a:	f1ba 0f67 	cmp.w	sl, #103	; 0x67
 800720e:	f000 8177 	beq.w	8007500 <_printf_float+0x458>
 8007212:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 8007216:	d1bb      	bne.n	8007190 <_printf_float+0xe8>
 8007218:	2900      	cmp	r1, #0
 800721a:	d1b9      	bne.n	8007190 <_printf_float+0xe8>
 800721c:	2301      	movs	r3, #1
 800721e:	e7b6      	b.n	800718e <_printf_float+0xe6>
 8007220:	f1ba 0f66 	cmp.w	sl, #102	; 0x66
 8007224:	d119      	bne.n	800725a <_printf_float+0x1b2>
 8007226:	2900      	cmp	r1, #0
 8007228:	6863      	ldr	r3, [r4, #4]
 800722a:	dd0c      	ble.n	8007246 <_printf_float+0x19e>
 800722c:	6121      	str	r1, [r4, #16]
 800722e:	b913      	cbnz	r3, 8007236 <_printf_float+0x18e>
 8007230:	6822      	ldr	r2, [r4, #0]
 8007232:	07d2      	lsls	r2, r2, #31
 8007234:	d502      	bpl.n	800723c <_printf_float+0x194>
 8007236:	3301      	adds	r3, #1
 8007238:	440b      	add	r3, r1
 800723a:	6123      	str	r3, [r4, #16]
 800723c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800723e:	65a3      	str	r3, [r4, #88]	; 0x58
 8007240:	f04f 0900 	mov.w	r9, #0
 8007244:	e7d9      	b.n	80071fa <_printf_float+0x152>
 8007246:	b913      	cbnz	r3, 800724e <_printf_float+0x1a6>
 8007248:	6822      	ldr	r2, [r4, #0]
 800724a:	07d0      	lsls	r0, r2, #31
 800724c:	d501      	bpl.n	8007252 <_printf_float+0x1aa>
 800724e:	3302      	adds	r3, #2
 8007250:	e7f3      	b.n	800723a <_printf_float+0x192>
 8007252:	2301      	movs	r3, #1
 8007254:	e7f1      	b.n	800723a <_printf_float+0x192>
 8007256:	f04f 0a67 	mov.w	sl, #103	; 0x67
 800725a:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800725e:	4293      	cmp	r3, r2
 8007260:	db05      	blt.n	800726e <_printf_float+0x1c6>
 8007262:	6822      	ldr	r2, [r4, #0]
 8007264:	6123      	str	r3, [r4, #16]
 8007266:	07d1      	lsls	r1, r2, #31
 8007268:	d5e8      	bpl.n	800723c <_printf_float+0x194>
 800726a:	3301      	adds	r3, #1
 800726c:	e7e5      	b.n	800723a <_printf_float+0x192>
 800726e:	2b00      	cmp	r3, #0
 8007270:	bfd4      	ite	le
 8007272:	f1c3 0302 	rsble	r3, r3, #2
 8007276:	2301      	movgt	r3, #1
 8007278:	4413      	add	r3, r2
 800727a:	e7de      	b.n	800723a <_printf_float+0x192>
 800727c:	6823      	ldr	r3, [r4, #0]
 800727e:	055a      	lsls	r2, r3, #21
 8007280:	d407      	bmi.n	8007292 <_printf_float+0x1ea>
 8007282:	6923      	ldr	r3, [r4, #16]
 8007284:	4642      	mov	r2, r8
 8007286:	4631      	mov	r1, r6
 8007288:	4628      	mov	r0, r5
 800728a:	47b8      	blx	r7
 800728c:	3001      	adds	r0, #1
 800728e:	d12b      	bne.n	80072e8 <_printf_float+0x240>
 8007290:	e767      	b.n	8007162 <_printf_float+0xba>
 8007292:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 8007296:	f240 80dc 	bls.w	8007452 <_printf_float+0x3aa>
 800729a:	2200      	movs	r2, #0
 800729c:	2300      	movs	r3, #0
 800729e:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80072a2:	f7f9 fc11 	bl	8000ac8 <__aeabi_dcmpeq>
 80072a6:	2800      	cmp	r0, #0
 80072a8:	d033      	beq.n	8007312 <_printf_float+0x26a>
 80072aa:	2301      	movs	r3, #1
 80072ac:	4a41      	ldr	r2, [pc, #260]	; (80073b4 <_printf_float+0x30c>)
 80072ae:	4631      	mov	r1, r6
 80072b0:	4628      	mov	r0, r5
 80072b2:	47b8      	blx	r7
 80072b4:	3001      	adds	r0, #1
 80072b6:	f43f af54 	beq.w	8007162 <_printf_float+0xba>
 80072ba:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80072be:	429a      	cmp	r2, r3
 80072c0:	db02      	blt.n	80072c8 <_printf_float+0x220>
 80072c2:	6823      	ldr	r3, [r4, #0]
 80072c4:	07d8      	lsls	r0, r3, #31
 80072c6:	d50f      	bpl.n	80072e8 <_printf_float+0x240>
 80072c8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80072cc:	4631      	mov	r1, r6
 80072ce:	4628      	mov	r0, r5
 80072d0:	47b8      	blx	r7
 80072d2:	3001      	adds	r0, #1
 80072d4:	f43f af45 	beq.w	8007162 <_printf_float+0xba>
 80072d8:	f04f 0800 	mov.w	r8, #0
 80072dc:	f104 091a 	add.w	r9, r4, #26
 80072e0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80072e2:	3b01      	subs	r3, #1
 80072e4:	4543      	cmp	r3, r8
 80072e6:	dc09      	bgt.n	80072fc <_printf_float+0x254>
 80072e8:	6823      	ldr	r3, [r4, #0]
 80072ea:	079b      	lsls	r3, r3, #30
 80072ec:	f100 8103 	bmi.w	80074f6 <_printf_float+0x44e>
 80072f0:	68e0      	ldr	r0, [r4, #12]
 80072f2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80072f4:	4298      	cmp	r0, r3
 80072f6:	bfb8      	it	lt
 80072f8:	4618      	movlt	r0, r3
 80072fa:	e734      	b.n	8007166 <_printf_float+0xbe>
 80072fc:	2301      	movs	r3, #1
 80072fe:	464a      	mov	r2, r9
 8007300:	4631      	mov	r1, r6
 8007302:	4628      	mov	r0, r5
 8007304:	47b8      	blx	r7
 8007306:	3001      	adds	r0, #1
 8007308:	f43f af2b 	beq.w	8007162 <_printf_float+0xba>
 800730c:	f108 0801 	add.w	r8, r8, #1
 8007310:	e7e6      	b.n	80072e0 <_printf_float+0x238>
 8007312:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007314:	2b00      	cmp	r3, #0
 8007316:	dc2b      	bgt.n	8007370 <_printf_float+0x2c8>
 8007318:	2301      	movs	r3, #1
 800731a:	4a26      	ldr	r2, [pc, #152]	; (80073b4 <_printf_float+0x30c>)
 800731c:	4631      	mov	r1, r6
 800731e:	4628      	mov	r0, r5
 8007320:	47b8      	blx	r7
 8007322:	3001      	adds	r0, #1
 8007324:	f43f af1d 	beq.w	8007162 <_printf_float+0xba>
 8007328:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800732a:	b923      	cbnz	r3, 8007336 <_printf_float+0x28e>
 800732c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800732e:	b913      	cbnz	r3, 8007336 <_printf_float+0x28e>
 8007330:	6823      	ldr	r3, [r4, #0]
 8007332:	07d9      	lsls	r1, r3, #31
 8007334:	d5d8      	bpl.n	80072e8 <_printf_float+0x240>
 8007336:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800733a:	4631      	mov	r1, r6
 800733c:	4628      	mov	r0, r5
 800733e:	47b8      	blx	r7
 8007340:	3001      	adds	r0, #1
 8007342:	f43f af0e 	beq.w	8007162 <_printf_float+0xba>
 8007346:	f04f 0900 	mov.w	r9, #0
 800734a:	f104 0a1a 	add.w	sl, r4, #26
 800734e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007350:	425b      	negs	r3, r3
 8007352:	454b      	cmp	r3, r9
 8007354:	dc01      	bgt.n	800735a <_printf_float+0x2b2>
 8007356:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007358:	e794      	b.n	8007284 <_printf_float+0x1dc>
 800735a:	2301      	movs	r3, #1
 800735c:	4652      	mov	r2, sl
 800735e:	4631      	mov	r1, r6
 8007360:	4628      	mov	r0, r5
 8007362:	47b8      	blx	r7
 8007364:	3001      	adds	r0, #1
 8007366:	f43f aefc 	beq.w	8007162 <_printf_float+0xba>
 800736a:	f109 0901 	add.w	r9, r9, #1
 800736e:	e7ee      	b.n	800734e <_printf_float+0x2a6>
 8007370:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007372:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8007374:	429a      	cmp	r2, r3
 8007376:	bfa8      	it	ge
 8007378:	461a      	movge	r2, r3
 800737a:	2a00      	cmp	r2, #0
 800737c:	4691      	mov	r9, r2
 800737e:	dd07      	ble.n	8007390 <_printf_float+0x2e8>
 8007380:	4613      	mov	r3, r2
 8007382:	4631      	mov	r1, r6
 8007384:	4642      	mov	r2, r8
 8007386:	4628      	mov	r0, r5
 8007388:	47b8      	blx	r7
 800738a:	3001      	adds	r0, #1
 800738c:	f43f aee9 	beq.w	8007162 <_printf_float+0xba>
 8007390:	f104 031a 	add.w	r3, r4, #26
 8007394:	f04f 0b00 	mov.w	fp, #0
 8007398:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800739c:	9306      	str	r3, [sp, #24]
 800739e:	e015      	b.n	80073cc <_printf_float+0x324>
 80073a0:	7fefffff 	.word	0x7fefffff
 80073a4:	0800a3c4 	.word	0x0800a3c4
 80073a8:	0800a3c0 	.word	0x0800a3c0
 80073ac:	0800a3cc 	.word	0x0800a3cc
 80073b0:	0800a3c8 	.word	0x0800a3c8
 80073b4:	0800a3d0 	.word	0x0800a3d0
 80073b8:	2301      	movs	r3, #1
 80073ba:	9a06      	ldr	r2, [sp, #24]
 80073bc:	4631      	mov	r1, r6
 80073be:	4628      	mov	r0, r5
 80073c0:	47b8      	blx	r7
 80073c2:	3001      	adds	r0, #1
 80073c4:	f43f aecd 	beq.w	8007162 <_printf_float+0xba>
 80073c8:	f10b 0b01 	add.w	fp, fp, #1
 80073cc:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 80073d0:	ebaa 0309 	sub.w	r3, sl, r9
 80073d4:	455b      	cmp	r3, fp
 80073d6:	dcef      	bgt.n	80073b8 <_printf_float+0x310>
 80073d8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80073dc:	429a      	cmp	r2, r3
 80073de:	44d0      	add	r8, sl
 80073e0:	db15      	blt.n	800740e <_printf_float+0x366>
 80073e2:	6823      	ldr	r3, [r4, #0]
 80073e4:	07da      	lsls	r2, r3, #31
 80073e6:	d412      	bmi.n	800740e <_printf_float+0x366>
 80073e8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80073ea:	9909      	ldr	r1, [sp, #36]	; 0x24
 80073ec:	eba3 020a 	sub.w	r2, r3, sl
 80073f0:	eba3 0a01 	sub.w	sl, r3, r1
 80073f4:	4592      	cmp	sl, r2
 80073f6:	bfa8      	it	ge
 80073f8:	4692      	movge	sl, r2
 80073fa:	f1ba 0f00 	cmp.w	sl, #0
 80073fe:	dc0e      	bgt.n	800741e <_printf_float+0x376>
 8007400:	f04f 0800 	mov.w	r8, #0
 8007404:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8007408:	f104 091a 	add.w	r9, r4, #26
 800740c:	e019      	b.n	8007442 <_printf_float+0x39a>
 800740e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007412:	4631      	mov	r1, r6
 8007414:	4628      	mov	r0, r5
 8007416:	47b8      	blx	r7
 8007418:	3001      	adds	r0, #1
 800741a:	d1e5      	bne.n	80073e8 <_printf_float+0x340>
 800741c:	e6a1      	b.n	8007162 <_printf_float+0xba>
 800741e:	4653      	mov	r3, sl
 8007420:	4642      	mov	r2, r8
 8007422:	4631      	mov	r1, r6
 8007424:	4628      	mov	r0, r5
 8007426:	47b8      	blx	r7
 8007428:	3001      	adds	r0, #1
 800742a:	d1e9      	bne.n	8007400 <_printf_float+0x358>
 800742c:	e699      	b.n	8007162 <_printf_float+0xba>
 800742e:	2301      	movs	r3, #1
 8007430:	464a      	mov	r2, r9
 8007432:	4631      	mov	r1, r6
 8007434:	4628      	mov	r0, r5
 8007436:	47b8      	blx	r7
 8007438:	3001      	adds	r0, #1
 800743a:	f43f ae92 	beq.w	8007162 <_printf_float+0xba>
 800743e:	f108 0801 	add.w	r8, r8, #1
 8007442:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007446:	1a9b      	subs	r3, r3, r2
 8007448:	eba3 030a 	sub.w	r3, r3, sl
 800744c:	4543      	cmp	r3, r8
 800744e:	dcee      	bgt.n	800742e <_printf_float+0x386>
 8007450:	e74a      	b.n	80072e8 <_printf_float+0x240>
 8007452:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007454:	2a01      	cmp	r2, #1
 8007456:	dc01      	bgt.n	800745c <_printf_float+0x3b4>
 8007458:	07db      	lsls	r3, r3, #31
 800745a:	d53a      	bpl.n	80074d2 <_printf_float+0x42a>
 800745c:	2301      	movs	r3, #1
 800745e:	4642      	mov	r2, r8
 8007460:	4631      	mov	r1, r6
 8007462:	4628      	mov	r0, r5
 8007464:	47b8      	blx	r7
 8007466:	3001      	adds	r0, #1
 8007468:	f43f ae7b 	beq.w	8007162 <_printf_float+0xba>
 800746c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007470:	4631      	mov	r1, r6
 8007472:	4628      	mov	r0, r5
 8007474:	47b8      	blx	r7
 8007476:	3001      	adds	r0, #1
 8007478:	f108 0801 	add.w	r8, r8, #1
 800747c:	f43f ae71 	beq.w	8007162 <_printf_float+0xba>
 8007480:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007482:	2200      	movs	r2, #0
 8007484:	f103 3aff 	add.w	sl, r3, #4294967295
 8007488:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800748c:	2300      	movs	r3, #0
 800748e:	f7f9 fb1b 	bl	8000ac8 <__aeabi_dcmpeq>
 8007492:	b9c8      	cbnz	r0, 80074c8 <_printf_float+0x420>
 8007494:	4653      	mov	r3, sl
 8007496:	4642      	mov	r2, r8
 8007498:	4631      	mov	r1, r6
 800749a:	4628      	mov	r0, r5
 800749c:	47b8      	blx	r7
 800749e:	3001      	adds	r0, #1
 80074a0:	d10e      	bne.n	80074c0 <_printf_float+0x418>
 80074a2:	e65e      	b.n	8007162 <_printf_float+0xba>
 80074a4:	2301      	movs	r3, #1
 80074a6:	4652      	mov	r2, sl
 80074a8:	4631      	mov	r1, r6
 80074aa:	4628      	mov	r0, r5
 80074ac:	47b8      	blx	r7
 80074ae:	3001      	adds	r0, #1
 80074b0:	f43f ae57 	beq.w	8007162 <_printf_float+0xba>
 80074b4:	f108 0801 	add.w	r8, r8, #1
 80074b8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80074ba:	3b01      	subs	r3, #1
 80074bc:	4543      	cmp	r3, r8
 80074be:	dcf1      	bgt.n	80074a4 <_printf_float+0x3fc>
 80074c0:	464b      	mov	r3, r9
 80074c2:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80074c6:	e6de      	b.n	8007286 <_printf_float+0x1de>
 80074c8:	f04f 0800 	mov.w	r8, #0
 80074cc:	f104 0a1a 	add.w	sl, r4, #26
 80074d0:	e7f2      	b.n	80074b8 <_printf_float+0x410>
 80074d2:	2301      	movs	r3, #1
 80074d4:	e7df      	b.n	8007496 <_printf_float+0x3ee>
 80074d6:	2301      	movs	r3, #1
 80074d8:	464a      	mov	r2, r9
 80074da:	4631      	mov	r1, r6
 80074dc:	4628      	mov	r0, r5
 80074de:	47b8      	blx	r7
 80074e0:	3001      	adds	r0, #1
 80074e2:	f43f ae3e 	beq.w	8007162 <_printf_float+0xba>
 80074e6:	f108 0801 	add.w	r8, r8, #1
 80074ea:	68e3      	ldr	r3, [r4, #12]
 80074ec:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80074ee:	1a9b      	subs	r3, r3, r2
 80074f0:	4543      	cmp	r3, r8
 80074f2:	dcf0      	bgt.n	80074d6 <_printf_float+0x42e>
 80074f4:	e6fc      	b.n	80072f0 <_printf_float+0x248>
 80074f6:	f04f 0800 	mov.w	r8, #0
 80074fa:	f104 0919 	add.w	r9, r4, #25
 80074fe:	e7f4      	b.n	80074ea <_printf_float+0x442>
 8007500:	2900      	cmp	r1, #0
 8007502:	f43f ae8b 	beq.w	800721c <_printf_float+0x174>
 8007506:	2300      	movs	r3, #0
 8007508:	e9cd 0302 	strd	r0, r3, [sp, #8]
 800750c:	ab09      	add	r3, sp, #36	; 0x24
 800750e:	9300      	str	r3, [sp, #0]
 8007510:	ec49 8b10 	vmov	d0, r8, r9
 8007514:	6022      	str	r2, [r4, #0]
 8007516:	f8cd a004 	str.w	sl, [sp, #4]
 800751a:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800751e:	4628      	mov	r0, r5
 8007520:	f7ff fd2e 	bl	8006f80 <__cvt>
 8007524:	4680      	mov	r8, r0
 8007526:	e648      	b.n	80071ba <_printf_float+0x112>

08007528 <_printf_common>:
 8007528:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800752c:	4691      	mov	r9, r2
 800752e:	461f      	mov	r7, r3
 8007530:	688a      	ldr	r2, [r1, #8]
 8007532:	690b      	ldr	r3, [r1, #16]
 8007534:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007538:	4293      	cmp	r3, r2
 800753a:	bfb8      	it	lt
 800753c:	4613      	movlt	r3, r2
 800753e:	f8c9 3000 	str.w	r3, [r9]
 8007542:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8007546:	4606      	mov	r6, r0
 8007548:	460c      	mov	r4, r1
 800754a:	b112      	cbz	r2, 8007552 <_printf_common+0x2a>
 800754c:	3301      	adds	r3, #1
 800754e:	f8c9 3000 	str.w	r3, [r9]
 8007552:	6823      	ldr	r3, [r4, #0]
 8007554:	0699      	lsls	r1, r3, #26
 8007556:	bf42      	ittt	mi
 8007558:	f8d9 3000 	ldrmi.w	r3, [r9]
 800755c:	3302      	addmi	r3, #2
 800755e:	f8c9 3000 	strmi.w	r3, [r9]
 8007562:	6825      	ldr	r5, [r4, #0]
 8007564:	f015 0506 	ands.w	r5, r5, #6
 8007568:	d107      	bne.n	800757a <_printf_common+0x52>
 800756a:	f104 0a19 	add.w	sl, r4, #25
 800756e:	68e3      	ldr	r3, [r4, #12]
 8007570:	f8d9 2000 	ldr.w	r2, [r9]
 8007574:	1a9b      	subs	r3, r3, r2
 8007576:	42ab      	cmp	r3, r5
 8007578:	dc28      	bgt.n	80075cc <_printf_common+0xa4>
 800757a:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800757e:	6822      	ldr	r2, [r4, #0]
 8007580:	3300      	adds	r3, #0
 8007582:	bf18      	it	ne
 8007584:	2301      	movne	r3, #1
 8007586:	0692      	lsls	r2, r2, #26
 8007588:	d42d      	bmi.n	80075e6 <_printf_common+0xbe>
 800758a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800758e:	4639      	mov	r1, r7
 8007590:	4630      	mov	r0, r6
 8007592:	47c0      	blx	r8
 8007594:	3001      	adds	r0, #1
 8007596:	d020      	beq.n	80075da <_printf_common+0xb2>
 8007598:	6823      	ldr	r3, [r4, #0]
 800759a:	68e5      	ldr	r5, [r4, #12]
 800759c:	f8d9 2000 	ldr.w	r2, [r9]
 80075a0:	f003 0306 	and.w	r3, r3, #6
 80075a4:	2b04      	cmp	r3, #4
 80075a6:	bf08      	it	eq
 80075a8:	1aad      	subeq	r5, r5, r2
 80075aa:	68a3      	ldr	r3, [r4, #8]
 80075ac:	6922      	ldr	r2, [r4, #16]
 80075ae:	bf0c      	ite	eq
 80075b0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80075b4:	2500      	movne	r5, #0
 80075b6:	4293      	cmp	r3, r2
 80075b8:	bfc4      	itt	gt
 80075ba:	1a9b      	subgt	r3, r3, r2
 80075bc:	18ed      	addgt	r5, r5, r3
 80075be:	f04f 0900 	mov.w	r9, #0
 80075c2:	341a      	adds	r4, #26
 80075c4:	454d      	cmp	r5, r9
 80075c6:	d11a      	bne.n	80075fe <_printf_common+0xd6>
 80075c8:	2000      	movs	r0, #0
 80075ca:	e008      	b.n	80075de <_printf_common+0xb6>
 80075cc:	2301      	movs	r3, #1
 80075ce:	4652      	mov	r2, sl
 80075d0:	4639      	mov	r1, r7
 80075d2:	4630      	mov	r0, r6
 80075d4:	47c0      	blx	r8
 80075d6:	3001      	adds	r0, #1
 80075d8:	d103      	bne.n	80075e2 <_printf_common+0xba>
 80075da:	f04f 30ff 	mov.w	r0, #4294967295
 80075de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80075e2:	3501      	adds	r5, #1
 80075e4:	e7c3      	b.n	800756e <_printf_common+0x46>
 80075e6:	18e1      	adds	r1, r4, r3
 80075e8:	1c5a      	adds	r2, r3, #1
 80075ea:	2030      	movs	r0, #48	; 0x30
 80075ec:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80075f0:	4422      	add	r2, r4
 80075f2:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80075f6:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80075fa:	3302      	adds	r3, #2
 80075fc:	e7c5      	b.n	800758a <_printf_common+0x62>
 80075fe:	2301      	movs	r3, #1
 8007600:	4622      	mov	r2, r4
 8007602:	4639      	mov	r1, r7
 8007604:	4630      	mov	r0, r6
 8007606:	47c0      	blx	r8
 8007608:	3001      	adds	r0, #1
 800760a:	d0e6      	beq.n	80075da <_printf_common+0xb2>
 800760c:	f109 0901 	add.w	r9, r9, #1
 8007610:	e7d8      	b.n	80075c4 <_printf_common+0x9c>
	...

08007614 <_printf_i>:
 8007614:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8007618:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 800761c:	460c      	mov	r4, r1
 800761e:	7e09      	ldrb	r1, [r1, #24]
 8007620:	b085      	sub	sp, #20
 8007622:	296e      	cmp	r1, #110	; 0x6e
 8007624:	4617      	mov	r7, r2
 8007626:	4606      	mov	r6, r0
 8007628:	4698      	mov	r8, r3
 800762a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800762c:	f000 80b3 	beq.w	8007796 <_printf_i+0x182>
 8007630:	d822      	bhi.n	8007678 <_printf_i+0x64>
 8007632:	2963      	cmp	r1, #99	; 0x63
 8007634:	d036      	beq.n	80076a4 <_printf_i+0x90>
 8007636:	d80a      	bhi.n	800764e <_printf_i+0x3a>
 8007638:	2900      	cmp	r1, #0
 800763a:	f000 80b9 	beq.w	80077b0 <_printf_i+0x19c>
 800763e:	2958      	cmp	r1, #88	; 0x58
 8007640:	f000 8083 	beq.w	800774a <_printf_i+0x136>
 8007644:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007648:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 800764c:	e032      	b.n	80076b4 <_printf_i+0xa0>
 800764e:	2964      	cmp	r1, #100	; 0x64
 8007650:	d001      	beq.n	8007656 <_printf_i+0x42>
 8007652:	2969      	cmp	r1, #105	; 0x69
 8007654:	d1f6      	bne.n	8007644 <_printf_i+0x30>
 8007656:	6820      	ldr	r0, [r4, #0]
 8007658:	6813      	ldr	r3, [r2, #0]
 800765a:	0605      	lsls	r5, r0, #24
 800765c:	f103 0104 	add.w	r1, r3, #4
 8007660:	d52a      	bpl.n	80076b8 <_printf_i+0xa4>
 8007662:	681b      	ldr	r3, [r3, #0]
 8007664:	6011      	str	r1, [r2, #0]
 8007666:	2b00      	cmp	r3, #0
 8007668:	da03      	bge.n	8007672 <_printf_i+0x5e>
 800766a:	222d      	movs	r2, #45	; 0x2d
 800766c:	425b      	negs	r3, r3
 800766e:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8007672:	486f      	ldr	r0, [pc, #444]	; (8007830 <_printf_i+0x21c>)
 8007674:	220a      	movs	r2, #10
 8007676:	e039      	b.n	80076ec <_printf_i+0xd8>
 8007678:	2973      	cmp	r1, #115	; 0x73
 800767a:	f000 809d 	beq.w	80077b8 <_printf_i+0x1a4>
 800767e:	d808      	bhi.n	8007692 <_printf_i+0x7e>
 8007680:	296f      	cmp	r1, #111	; 0x6f
 8007682:	d020      	beq.n	80076c6 <_printf_i+0xb2>
 8007684:	2970      	cmp	r1, #112	; 0x70
 8007686:	d1dd      	bne.n	8007644 <_printf_i+0x30>
 8007688:	6823      	ldr	r3, [r4, #0]
 800768a:	f043 0320 	orr.w	r3, r3, #32
 800768e:	6023      	str	r3, [r4, #0]
 8007690:	e003      	b.n	800769a <_printf_i+0x86>
 8007692:	2975      	cmp	r1, #117	; 0x75
 8007694:	d017      	beq.n	80076c6 <_printf_i+0xb2>
 8007696:	2978      	cmp	r1, #120	; 0x78
 8007698:	d1d4      	bne.n	8007644 <_printf_i+0x30>
 800769a:	2378      	movs	r3, #120	; 0x78
 800769c:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80076a0:	4864      	ldr	r0, [pc, #400]	; (8007834 <_printf_i+0x220>)
 80076a2:	e055      	b.n	8007750 <_printf_i+0x13c>
 80076a4:	6813      	ldr	r3, [r2, #0]
 80076a6:	1d19      	adds	r1, r3, #4
 80076a8:	681b      	ldr	r3, [r3, #0]
 80076aa:	6011      	str	r1, [r2, #0]
 80076ac:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80076b0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80076b4:	2301      	movs	r3, #1
 80076b6:	e08c      	b.n	80077d2 <_printf_i+0x1be>
 80076b8:	681b      	ldr	r3, [r3, #0]
 80076ba:	6011      	str	r1, [r2, #0]
 80076bc:	f010 0f40 	tst.w	r0, #64	; 0x40
 80076c0:	bf18      	it	ne
 80076c2:	b21b      	sxthne	r3, r3
 80076c4:	e7cf      	b.n	8007666 <_printf_i+0x52>
 80076c6:	6813      	ldr	r3, [r2, #0]
 80076c8:	6825      	ldr	r5, [r4, #0]
 80076ca:	1d18      	adds	r0, r3, #4
 80076cc:	6010      	str	r0, [r2, #0]
 80076ce:	0628      	lsls	r0, r5, #24
 80076d0:	d501      	bpl.n	80076d6 <_printf_i+0xc2>
 80076d2:	681b      	ldr	r3, [r3, #0]
 80076d4:	e002      	b.n	80076dc <_printf_i+0xc8>
 80076d6:	0668      	lsls	r0, r5, #25
 80076d8:	d5fb      	bpl.n	80076d2 <_printf_i+0xbe>
 80076da:	881b      	ldrh	r3, [r3, #0]
 80076dc:	4854      	ldr	r0, [pc, #336]	; (8007830 <_printf_i+0x21c>)
 80076de:	296f      	cmp	r1, #111	; 0x6f
 80076e0:	bf14      	ite	ne
 80076e2:	220a      	movne	r2, #10
 80076e4:	2208      	moveq	r2, #8
 80076e6:	2100      	movs	r1, #0
 80076e8:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80076ec:	6865      	ldr	r5, [r4, #4]
 80076ee:	60a5      	str	r5, [r4, #8]
 80076f0:	2d00      	cmp	r5, #0
 80076f2:	f2c0 8095 	blt.w	8007820 <_printf_i+0x20c>
 80076f6:	6821      	ldr	r1, [r4, #0]
 80076f8:	f021 0104 	bic.w	r1, r1, #4
 80076fc:	6021      	str	r1, [r4, #0]
 80076fe:	2b00      	cmp	r3, #0
 8007700:	d13d      	bne.n	800777e <_printf_i+0x16a>
 8007702:	2d00      	cmp	r5, #0
 8007704:	f040 808e 	bne.w	8007824 <_printf_i+0x210>
 8007708:	4665      	mov	r5, ip
 800770a:	2a08      	cmp	r2, #8
 800770c:	d10b      	bne.n	8007726 <_printf_i+0x112>
 800770e:	6823      	ldr	r3, [r4, #0]
 8007710:	07db      	lsls	r3, r3, #31
 8007712:	d508      	bpl.n	8007726 <_printf_i+0x112>
 8007714:	6923      	ldr	r3, [r4, #16]
 8007716:	6862      	ldr	r2, [r4, #4]
 8007718:	429a      	cmp	r2, r3
 800771a:	bfde      	ittt	le
 800771c:	2330      	movle	r3, #48	; 0x30
 800771e:	f805 3c01 	strble.w	r3, [r5, #-1]
 8007722:	f105 35ff 	addle.w	r5, r5, #4294967295
 8007726:	ebac 0305 	sub.w	r3, ip, r5
 800772a:	6123      	str	r3, [r4, #16]
 800772c:	f8cd 8000 	str.w	r8, [sp]
 8007730:	463b      	mov	r3, r7
 8007732:	aa03      	add	r2, sp, #12
 8007734:	4621      	mov	r1, r4
 8007736:	4630      	mov	r0, r6
 8007738:	f7ff fef6 	bl	8007528 <_printf_common>
 800773c:	3001      	adds	r0, #1
 800773e:	d14d      	bne.n	80077dc <_printf_i+0x1c8>
 8007740:	f04f 30ff 	mov.w	r0, #4294967295
 8007744:	b005      	add	sp, #20
 8007746:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800774a:	4839      	ldr	r0, [pc, #228]	; (8007830 <_printf_i+0x21c>)
 800774c:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8007750:	6813      	ldr	r3, [r2, #0]
 8007752:	6821      	ldr	r1, [r4, #0]
 8007754:	1d1d      	adds	r5, r3, #4
 8007756:	681b      	ldr	r3, [r3, #0]
 8007758:	6015      	str	r5, [r2, #0]
 800775a:	060a      	lsls	r2, r1, #24
 800775c:	d50b      	bpl.n	8007776 <_printf_i+0x162>
 800775e:	07ca      	lsls	r2, r1, #31
 8007760:	bf44      	itt	mi
 8007762:	f041 0120 	orrmi.w	r1, r1, #32
 8007766:	6021      	strmi	r1, [r4, #0]
 8007768:	b91b      	cbnz	r3, 8007772 <_printf_i+0x15e>
 800776a:	6822      	ldr	r2, [r4, #0]
 800776c:	f022 0220 	bic.w	r2, r2, #32
 8007770:	6022      	str	r2, [r4, #0]
 8007772:	2210      	movs	r2, #16
 8007774:	e7b7      	b.n	80076e6 <_printf_i+0xd2>
 8007776:	064d      	lsls	r5, r1, #25
 8007778:	bf48      	it	mi
 800777a:	b29b      	uxthmi	r3, r3
 800777c:	e7ef      	b.n	800775e <_printf_i+0x14a>
 800777e:	4665      	mov	r5, ip
 8007780:	fbb3 f1f2 	udiv	r1, r3, r2
 8007784:	fb02 3311 	mls	r3, r2, r1, r3
 8007788:	5cc3      	ldrb	r3, [r0, r3]
 800778a:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800778e:	460b      	mov	r3, r1
 8007790:	2900      	cmp	r1, #0
 8007792:	d1f5      	bne.n	8007780 <_printf_i+0x16c>
 8007794:	e7b9      	b.n	800770a <_printf_i+0xf6>
 8007796:	6813      	ldr	r3, [r2, #0]
 8007798:	6825      	ldr	r5, [r4, #0]
 800779a:	6961      	ldr	r1, [r4, #20]
 800779c:	1d18      	adds	r0, r3, #4
 800779e:	6010      	str	r0, [r2, #0]
 80077a0:	0628      	lsls	r0, r5, #24
 80077a2:	681b      	ldr	r3, [r3, #0]
 80077a4:	d501      	bpl.n	80077aa <_printf_i+0x196>
 80077a6:	6019      	str	r1, [r3, #0]
 80077a8:	e002      	b.n	80077b0 <_printf_i+0x19c>
 80077aa:	066a      	lsls	r2, r5, #25
 80077ac:	d5fb      	bpl.n	80077a6 <_printf_i+0x192>
 80077ae:	8019      	strh	r1, [r3, #0]
 80077b0:	2300      	movs	r3, #0
 80077b2:	6123      	str	r3, [r4, #16]
 80077b4:	4665      	mov	r5, ip
 80077b6:	e7b9      	b.n	800772c <_printf_i+0x118>
 80077b8:	6813      	ldr	r3, [r2, #0]
 80077ba:	1d19      	adds	r1, r3, #4
 80077bc:	6011      	str	r1, [r2, #0]
 80077be:	681d      	ldr	r5, [r3, #0]
 80077c0:	6862      	ldr	r2, [r4, #4]
 80077c2:	2100      	movs	r1, #0
 80077c4:	4628      	mov	r0, r5
 80077c6:	f7f8 fd0b 	bl	80001e0 <memchr>
 80077ca:	b108      	cbz	r0, 80077d0 <_printf_i+0x1bc>
 80077cc:	1b40      	subs	r0, r0, r5
 80077ce:	6060      	str	r0, [r4, #4]
 80077d0:	6863      	ldr	r3, [r4, #4]
 80077d2:	6123      	str	r3, [r4, #16]
 80077d4:	2300      	movs	r3, #0
 80077d6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80077da:	e7a7      	b.n	800772c <_printf_i+0x118>
 80077dc:	6923      	ldr	r3, [r4, #16]
 80077de:	462a      	mov	r2, r5
 80077e0:	4639      	mov	r1, r7
 80077e2:	4630      	mov	r0, r6
 80077e4:	47c0      	blx	r8
 80077e6:	3001      	adds	r0, #1
 80077e8:	d0aa      	beq.n	8007740 <_printf_i+0x12c>
 80077ea:	6823      	ldr	r3, [r4, #0]
 80077ec:	079b      	lsls	r3, r3, #30
 80077ee:	d413      	bmi.n	8007818 <_printf_i+0x204>
 80077f0:	68e0      	ldr	r0, [r4, #12]
 80077f2:	9b03      	ldr	r3, [sp, #12]
 80077f4:	4298      	cmp	r0, r3
 80077f6:	bfb8      	it	lt
 80077f8:	4618      	movlt	r0, r3
 80077fa:	e7a3      	b.n	8007744 <_printf_i+0x130>
 80077fc:	2301      	movs	r3, #1
 80077fe:	464a      	mov	r2, r9
 8007800:	4639      	mov	r1, r7
 8007802:	4630      	mov	r0, r6
 8007804:	47c0      	blx	r8
 8007806:	3001      	adds	r0, #1
 8007808:	d09a      	beq.n	8007740 <_printf_i+0x12c>
 800780a:	3501      	adds	r5, #1
 800780c:	68e3      	ldr	r3, [r4, #12]
 800780e:	9a03      	ldr	r2, [sp, #12]
 8007810:	1a9b      	subs	r3, r3, r2
 8007812:	42ab      	cmp	r3, r5
 8007814:	dcf2      	bgt.n	80077fc <_printf_i+0x1e8>
 8007816:	e7eb      	b.n	80077f0 <_printf_i+0x1dc>
 8007818:	2500      	movs	r5, #0
 800781a:	f104 0919 	add.w	r9, r4, #25
 800781e:	e7f5      	b.n	800780c <_printf_i+0x1f8>
 8007820:	2b00      	cmp	r3, #0
 8007822:	d1ac      	bne.n	800777e <_printf_i+0x16a>
 8007824:	7803      	ldrb	r3, [r0, #0]
 8007826:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800782a:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800782e:	e76c      	b.n	800770a <_printf_i+0xf6>
 8007830:	0800a3d2 	.word	0x0800a3d2
 8007834:	0800a3e3 	.word	0x0800a3e3

08007838 <iprintf>:
 8007838:	b40f      	push	{r0, r1, r2, r3}
 800783a:	4b0a      	ldr	r3, [pc, #40]	; (8007864 <iprintf+0x2c>)
 800783c:	b513      	push	{r0, r1, r4, lr}
 800783e:	681c      	ldr	r4, [r3, #0]
 8007840:	b124      	cbz	r4, 800784c <iprintf+0x14>
 8007842:	69a3      	ldr	r3, [r4, #24]
 8007844:	b913      	cbnz	r3, 800784c <iprintf+0x14>
 8007846:	4620      	mov	r0, r4
 8007848:	f7ff fa5c 	bl	8006d04 <__sinit>
 800784c:	ab05      	add	r3, sp, #20
 800784e:	9a04      	ldr	r2, [sp, #16]
 8007850:	68a1      	ldr	r1, [r4, #8]
 8007852:	9301      	str	r3, [sp, #4]
 8007854:	4620      	mov	r0, r4
 8007856:	f001 fce3 	bl	8009220 <_vfiprintf_r>
 800785a:	b002      	add	sp, #8
 800785c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007860:	b004      	add	sp, #16
 8007862:	4770      	bx	lr
 8007864:	20000014 	.word	0x20000014

08007868 <putchar>:
 8007868:	b538      	push	{r3, r4, r5, lr}
 800786a:	4b08      	ldr	r3, [pc, #32]	; (800788c <putchar+0x24>)
 800786c:	681c      	ldr	r4, [r3, #0]
 800786e:	4605      	mov	r5, r0
 8007870:	b124      	cbz	r4, 800787c <putchar+0x14>
 8007872:	69a3      	ldr	r3, [r4, #24]
 8007874:	b913      	cbnz	r3, 800787c <putchar+0x14>
 8007876:	4620      	mov	r0, r4
 8007878:	f7ff fa44 	bl	8006d04 <__sinit>
 800787c:	68a2      	ldr	r2, [r4, #8]
 800787e:	4629      	mov	r1, r5
 8007880:	4620      	mov	r0, r4
 8007882:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007886:	f001 bde1 	b.w	800944c <_putc_r>
 800788a:	bf00      	nop
 800788c:	20000014 	.word	0x20000014

08007890 <_puts_r>:
 8007890:	b570      	push	{r4, r5, r6, lr}
 8007892:	460e      	mov	r6, r1
 8007894:	4605      	mov	r5, r0
 8007896:	b118      	cbz	r0, 80078a0 <_puts_r+0x10>
 8007898:	6983      	ldr	r3, [r0, #24]
 800789a:	b90b      	cbnz	r3, 80078a0 <_puts_r+0x10>
 800789c:	f7ff fa32 	bl	8006d04 <__sinit>
 80078a0:	69ab      	ldr	r3, [r5, #24]
 80078a2:	68ac      	ldr	r4, [r5, #8]
 80078a4:	b913      	cbnz	r3, 80078ac <_puts_r+0x1c>
 80078a6:	4628      	mov	r0, r5
 80078a8:	f7ff fa2c 	bl	8006d04 <__sinit>
 80078ac:	4b23      	ldr	r3, [pc, #140]	; (800793c <_puts_r+0xac>)
 80078ae:	429c      	cmp	r4, r3
 80078b0:	d117      	bne.n	80078e2 <_puts_r+0x52>
 80078b2:	686c      	ldr	r4, [r5, #4]
 80078b4:	89a3      	ldrh	r3, [r4, #12]
 80078b6:	071b      	lsls	r3, r3, #28
 80078b8:	d51d      	bpl.n	80078f6 <_puts_r+0x66>
 80078ba:	6923      	ldr	r3, [r4, #16]
 80078bc:	b1db      	cbz	r3, 80078f6 <_puts_r+0x66>
 80078be:	3e01      	subs	r6, #1
 80078c0:	68a3      	ldr	r3, [r4, #8]
 80078c2:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80078c6:	3b01      	subs	r3, #1
 80078c8:	60a3      	str	r3, [r4, #8]
 80078ca:	b9e9      	cbnz	r1, 8007908 <_puts_r+0x78>
 80078cc:	2b00      	cmp	r3, #0
 80078ce:	da2e      	bge.n	800792e <_puts_r+0x9e>
 80078d0:	4622      	mov	r2, r4
 80078d2:	210a      	movs	r1, #10
 80078d4:	4628      	mov	r0, r5
 80078d6:	f000 f893 	bl	8007a00 <__swbuf_r>
 80078da:	3001      	adds	r0, #1
 80078dc:	d011      	beq.n	8007902 <_puts_r+0x72>
 80078de:	200a      	movs	r0, #10
 80078e0:	e011      	b.n	8007906 <_puts_r+0x76>
 80078e2:	4b17      	ldr	r3, [pc, #92]	; (8007940 <_puts_r+0xb0>)
 80078e4:	429c      	cmp	r4, r3
 80078e6:	d101      	bne.n	80078ec <_puts_r+0x5c>
 80078e8:	68ac      	ldr	r4, [r5, #8]
 80078ea:	e7e3      	b.n	80078b4 <_puts_r+0x24>
 80078ec:	4b15      	ldr	r3, [pc, #84]	; (8007944 <_puts_r+0xb4>)
 80078ee:	429c      	cmp	r4, r3
 80078f0:	bf08      	it	eq
 80078f2:	68ec      	ldreq	r4, [r5, #12]
 80078f4:	e7de      	b.n	80078b4 <_puts_r+0x24>
 80078f6:	4621      	mov	r1, r4
 80078f8:	4628      	mov	r0, r5
 80078fa:	f000 f8e5 	bl	8007ac8 <__swsetup_r>
 80078fe:	2800      	cmp	r0, #0
 8007900:	d0dd      	beq.n	80078be <_puts_r+0x2e>
 8007902:	f04f 30ff 	mov.w	r0, #4294967295
 8007906:	bd70      	pop	{r4, r5, r6, pc}
 8007908:	2b00      	cmp	r3, #0
 800790a:	da04      	bge.n	8007916 <_puts_r+0x86>
 800790c:	69a2      	ldr	r2, [r4, #24]
 800790e:	429a      	cmp	r2, r3
 8007910:	dc06      	bgt.n	8007920 <_puts_r+0x90>
 8007912:	290a      	cmp	r1, #10
 8007914:	d004      	beq.n	8007920 <_puts_r+0x90>
 8007916:	6823      	ldr	r3, [r4, #0]
 8007918:	1c5a      	adds	r2, r3, #1
 800791a:	6022      	str	r2, [r4, #0]
 800791c:	7019      	strb	r1, [r3, #0]
 800791e:	e7cf      	b.n	80078c0 <_puts_r+0x30>
 8007920:	4622      	mov	r2, r4
 8007922:	4628      	mov	r0, r5
 8007924:	f000 f86c 	bl	8007a00 <__swbuf_r>
 8007928:	3001      	adds	r0, #1
 800792a:	d1c9      	bne.n	80078c0 <_puts_r+0x30>
 800792c:	e7e9      	b.n	8007902 <_puts_r+0x72>
 800792e:	6823      	ldr	r3, [r4, #0]
 8007930:	200a      	movs	r0, #10
 8007932:	1c5a      	adds	r2, r3, #1
 8007934:	6022      	str	r2, [r4, #0]
 8007936:	7018      	strb	r0, [r3, #0]
 8007938:	e7e5      	b.n	8007906 <_puts_r+0x76>
 800793a:	bf00      	nop
 800793c:	0800a37c 	.word	0x0800a37c
 8007940:	0800a39c 	.word	0x0800a39c
 8007944:	0800a35c 	.word	0x0800a35c

08007948 <puts>:
 8007948:	4b02      	ldr	r3, [pc, #8]	; (8007954 <puts+0xc>)
 800794a:	4601      	mov	r1, r0
 800794c:	6818      	ldr	r0, [r3, #0]
 800794e:	f7ff bf9f 	b.w	8007890 <_puts_r>
 8007952:	bf00      	nop
 8007954:	20000014 	.word	0x20000014

08007958 <_sbrk_r>:
 8007958:	b538      	push	{r3, r4, r5, lr}
 800795a:	4c06      	ldr	r4, [pc, #24]	; (8007974 <_sbrk_r+0x1c>)
 800795c:	2300      	movs	r3, #0
 800795e:	4605      	mov	r5, r0
 8007960:	4608      	mov	r0, r1
 8007962:	6023      	str	r3, [r4, #0]
 8007964:	f7fb f9ca 	bl	8002cfc <_sbrk>
 8007968:	1c43      	adds	r3, r0, #1
 800796a:	d102      	bne.n	8007972 <_sbrk_r+0x1a>
 800796c:	6823      	ldr	r3, [r4, #0]
 800796e:	b103      	cbz	r3, 8007972 <_sbrk_r+0x1a>
 8007970:	602b      	str	r3, [r5, #0]
 8007972:	bd38      	pop	{r3, r4, r5, pc}
 8007974:	200009d8 	.word	0x200009d8

08007978 <__sread>:
 8007978:	b510      	push	{r4, lr}
 800797a:	460c      	mov	r4, r1
 800797c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007980:	f001 fd9a 	bl	80094b8 <_read_r>
 8007984:	2800      	cmp	r0, #0
 8007986:	bfab      	itete	ge
 8007988:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800798a:	89a3      	ldrhlt	r3, [r4, #12]
 800798c:	181b      	addge	r3, r3, r0
 800798e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8007992:	bfac      	ite	ge
 8007994:	6563      	strge	r3, [r4, #84]	; 0x54
 8007996:	81a3      	strhlt	r3, [r4, #12]
 8007998:	bd10      	pop	{r4, pc}

0800799a <__swrite>:
 800799a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800799e:	461f      	mov	r7, r3
 80079a0:	898b      	ldrh	r3, [r1, #12]
 80079a2:	05db      	lsls	r3, r3, #23
 80079a4:	4605      	mov	r5, r0
 80079a6:	460c      	mov	r4, r1
 80079a8:	4616      	mov	r6, r2
 80079aa:	d505      	bpl.n	80079b8 <__swrite+0x1e>
 80079ac:	2302      	movs	r3, #2
 80079ae:	2200      	movs	r2, #0
 80079b0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80079b4:	f001 f848 	bl	8008a48 <_lseek_r>
 80079b8:	89a3      	ldrh	r3, [r4, #12]
 80079ba:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80079be:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80079c2:	81a3      	strh	r3, [r4, #12]
 80079c4:	4632      	mov	r2, r6
 80079c6:	463b      	mov	r3, r7
 80079c8:	4628      	mov	r0, r5
 80079ca:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80079ce:	f000 b869 	b.w	8007aa4 <_write_r>

080079d2 <__sseek>:
 80079d2:	b510      	push	{r4, lr}
 80079d4:	460c      	mov	r4, r1
 80079d6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80079da:	f001 f835 	bl	8008a48 <_lseek_r>
 80079de:	1c43      	adds	r3, r0, #1
 80079e0:	89a3      	ldrh	r3, [r4, #12]
 80079e2:	bf15      	itete	ne
 80079e4:	6560      	strne	r0, [r4, #84]	; 0x54
 80079e6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80079ea:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80079ee:	81a3      	strheq	r3, [r4, #12]
 80079f0:	bf18      	it	ne
 80079f2:	81a3      	strhne	r3, [r4, #12]
 80079f4:	bd10      	pop	{r4, pc}

080079f6 <__sclose>:
 80079f6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80079fa:	f000 b8d3 	b.w	8007ba4 <_close_r>
	...

08007a00 <__swbuf_r>:
 8007a00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007a02:	460e      	mov	r6, r1
 8007a04:	4614      	mov	r4, r2
 8007a06:	4605      	mov	r5, r0
 8007a08:	b118      	cbz	r0, 8007a12 <__swbuf_r+0x12>
 8007a0a:	6983      	ldr	r3, [r0, #24]
 8007a0c:	b90b      	cbnz	r3, 8007a12 <__swbuf_r+0x12>
 8007a0e:	f7ff f979 	bl	8006d04 <__sinit>
 8007a12:	4b21      	ldr	r3, [pc, #132]	; (8007a98 <__swbuf_r+0x98>)
 8007a14:	429c      	cmp	r4, r3
 8007a16:	d12a      	bne.n	8007a6e <__swbuf_r+0x6e>
 8007a18:	686c      	ldr	r4, [r5, #4]
 8007a1a:	69a3      	ldr	r3, [r4, #24]
 8007a1c:	60a3      	str	r3, [r4, #8]
 8007a1e:	89a3      	ldrh	r3, [r4, #12]
 8007a20:	071a      	lsls	r2, r3, #28
 8007a22:	d52e      	bpl.n	8007a82 <__swbuf_r+0x82>
 8007a24:	6923      	ldr	r3, [r4, #16]
 8007a26:	b363      	cbz	r3, 8007a82 <__swbuf_r+0x82>
 8007a28:	6923      	ldr	r3, [r4, #16]
 8007a2a:	6820      	ldr	r0, [r4, #0]
 8007a2c:	1ac0      	subs	r0, r0, r3
 8007a2e:	6963      	ldr	r3, [r4, #20]
 8007a30:	b2f6      	uxtb	r6, r6
 8007a32:	4283      	cmp	r3, r0
 8007a34:	4637      	mov	r7, r6
 8007a36:	dc04      	bgt.n	8007a42 <__swbuf_r+0x42>
 8007a38:	4621      	mov	r1, r4
 8007a3a:	4628      	mov	r0, r5
 8007a3c:	f000 ff8e 	bl	800895c <_fflush_r>
 8007a40:	bb28      	cbnz	r0, 8007a8e <__swbuf_r+0x8e>
 8007a42:	68a3      	ldr	r3, [r4, #8]
 8007a44:	3b01      	subs	r3, #1
 8007a46:	60a3      	str	r3, [r4, #8]
 8007a48:	6823      	ldr	r3, [r4, #0]
 8007a4a:	1c5a      	adds	r2, r3, #1
 8007a4c:	6022      	str	r2, [r4, #0]
 8007a4e:	701e      	strb	r6, [r3, #0]
 8007a50:	6963      	ldr	r3, [r4, #20]
 8007a52:	3001      	adds	r0, #1
 8007a54:	4283      	cmp	r3, r0
 8007a56:	d004      	beq.n	8007a62 <__swbuf_r+0x62>
 8007a58:	89a3      	ldrh	r3, [r4, #12]
 8007a5a:	07db      	lsls	r3, r3, #31
 8007a5c:	d519      	bpl.n	8007a92 <__swbuf_r+0x92>
 8007a5e:	2e0a      	cmp	r6, #10
 8007a60:	d117      	bne.n	8007a92 <__swbuf_r+0x92>
 8007a62:	4621      	mov	r1, r4
 8007a64:	4628      	mov	r0, r5
 8007a66:	f000 ff79 	bl	800895c <_fflush_r>
 8007a6a:	b190      	cbz	r0, 8007a92 <__swbuf_r+0x92>
 8007a6c:	e00f      	b.n	8007a8e <__swbuf_r+0x8e>
 8007a6e:	4b0b      	ldr	r3, [pc, #44]	; (8007a9c <__swbuf_r+0x9c>)
 8007a70:	429c      	cmp	r4, r3
 8007a72:	d101      	bne.n	8007a78 <__swbuf_r+0x78>
 8007a74:	68ac      	ldr	r4, [r5, #8]
 8007a76:	e7d0      	b.n	8007a1a <__swbuf_r+0x1a>
 8007a78:	4b09      	ldr	r3, [pc, #36]	; (8007aa0 <__swbuf_r+0xa0>)
 8007a7a:	429c      	cmp	r4, r3
 8007a7c:	bf08      	it	eq
 8007a7e:	68ec      	ldreq	r4, [r5, #12]
 8007a80:	e7cb      	b.n	8007a1a <__swbuf_r+0x1a>
 8007a82:	4621      	mov	r1, r4
 8007a84:	4628      	mov	r0, r5
 8007a86:	f000 f81f 	bl	8007ac8 <__swsetup_r>
 8007a8a:	2800      	cmp	r0, #0
 8007a8c:	d0cc      	beq.n	8007a28 <__swbuf_r+0x28>
 8007a8e:	f04f 37ff 	mov.w	r7, #4294967295
 8007a92:	4638      	mov	r0, r7
 8007a94:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007a96:	bf00      	nop
 8007a98:	0800a37c 	.word	0x0800a37c
 8007a9c:	0800a39c 	.word	0x0800a39c
 8007aa0:	0800a35c 	.word	0x0800a35c

08007aa4 <_write_r>:
 8007aa4:	b538      	push	{r3, r4, r5, lr}
 8007aa6:	4c07      	ldr	r4, [pc, #28]	; (8007ac4 <_write_r+0x20>)
 8007aa8:	4605      	mov	r5, r0
 8007aaa:	4608      	mov	r0, r1
 8007aac:	4611      	mov	r1, r2
 8007aae:	2200      	movs	r2, #0
 8007ab0:	6022      	str	r2, [r4, #0]
 8007ab2:	461a      	mov	r2, r3
 8007ab4:	f7fb f8d2 	bl	8002c5c <_write>
 8007ab8:	1c43      	adds	r3, r0, #1
 8007aba:	d102      	bne.n	8007ac2 <_write_r+0x1e>
 8007abc:	6823      	ldr	r3, [r4, #0]
 8007abe:	b103      	cbz	r3, 8007ac2 <_write_r+0x1e>
 8007ac0:	602b      	str	r3, [r5, #0]
 8007ac2:	bd38      	pop	{r3, r4, r5, pc}
 8007ac4:	200009d8 	.word	0x200009d8

08007ac8 <__swsetup_r>:
 8007ac8:	4b32      	ldr	r3, [pc, #200]	; (8007b94 <__swsetup_r+0xcc>)
 8007aca:	b570      	push	{r4, r5, r6, lr}
 8007acc:	681d      	ldr	r5, [r3, #0]
 8007ace:	4606      	mov	r6, r0
 8007ad0:	460c      	mov	r4, r1
 8007ad2:	b125      	cbz	r5, 8007ade <__swsetup_r+0x16>
 8007ad4:	69ab      	ldr	r3, [r5, #24]
 8007ad6:	b913      	cbnz	r3, 8007ade <__swsetup_r+0x16>
 8007ad8:	4628      	mov	r0, r5
 8007ada:	f7ff f913 	bl	8006d04 <__sinit>
 8007ade:	4b2e      	ldr	r3, [pc, #184]	; (8007b98 <__swsetup_r+0xd0>)
 8007ae0:	429c      	cmp	r4, r3
 8007ae2:	d10f      	bne.n	8007b04 <__swsetup_r+0x3c>
 8007ae4:	686c      	ldr	r4, [r5, #4]
 8007ae6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007aea:	b29a      	uxth	r2, r3
 8007aec:	0715      	lsls	r5, r2, #28
 8007aee:	d42c      	bmi.n	8007b4a <__swsetup_r+0x82>
 8007af0:	06d0      	lsls	r0, r2, #27
 8007af2:	d411      	bmi.n	8007b18 <__swsetup_r+0x50>
 8007af4:	2209      	movs	r2, #9
 8007af6:	6032      	str	r2, [r6, #0]
 8007af8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007afc:	81a3      	strh	r3, [r4, #12]
 8007afe:	f04f 30ff 	mov.w	r0, #4294967295
 8007b02:	e03e      	b.n	8007b82 <__swsetup_r+0xba>
 8007b04:	4b25      	ldr	r3, [pc, #148]	; (8007b9c <__swsetup_r+0xd4>)
 8007b06:	429c      	cmp	r4, r3
 8007b08:	d101      	bne.n	8007b0e <__swsetup_r+0x46>
 8007b0a:	68ac      	ldr	r4, [r5, #8]
 8007b0c:	e7eb      	b.n	8007ae6 <__swsetup_r+0x1e>
 8007b0e:	4b24      	ldr	r3, [pc, #144]	; (8007ba0 <__swsetup_r+0xd8>)
 8007b10:	429c      	cmp	r4, r3
 8007b12:	bf08      	it	eq
 8007b14:	68ec      	ldreq	r4, [r5, #12]
 8007b16:	e7e6      	b.n	8007ae6 <__swsetup_r+0x1e>
 8007b18:	0751      	lsls	r1, r2, #29
 8007b1a:	d512      	bpl.n	8007b42 <__swsetup_r+0x7a>
 8007b1c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007b1e:	b141      	cbz	r1, 8007b32 <__swsetup_r+0x6a>
 8007b20:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007b24:	4299      	cmp	r1, r3
 8007b26:	d002      	beq.n	8007b2e <__swsetup_r+0x66>
 8007b28:	4630      	mov	r0, r6
 8007b2a:	f001 fb01 	bl	8009130 <_free_r>
 8007b2e:	2300      	movs	r3, #0
 8007b30:	6363      	str	r3, [r4, #52]	; 0x34
 8007b32:	89a3      	ldrh	r3, [r4, #12]
 8007b34:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8007b38:	81a3      	strh	r3, [r4, #12]
 8007b3a:	2300      	movs	r3, #0
 8007b3c:	6063      	str	r3, [r4, #4]
 8007b3e:	6923      	ldr	r3, [r4, #16]
 8007b40:	6023      	str	r3, [r4, #0]
 8007b42:	89a3      	ldrh	r3, [r4, #12]
 8007b44:	f043 0308 	orr.w	r3, r3, #8
 8007b48:	81a3      	strh	r3, [r4, #12]
 8007b4a:	6923      	ldr	r3, [r4, #16]
 8007b4c:	b94b      	cbnz	r3, 8007b62 <__swsetup_r+0x9a>
 8007b4e:	89a3      	ldrh	r3, [r4, #12]
 8007b50:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8007b54:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007b58:	d003      	beq.n	8007b62 <__swsetup_r+0x9a>
 8007b5a:	4621      	mov	r1, r4
 8007b5c:	4630      	mov	r0, r6
 8007b5e:	f000 ffa9 	bl	8008ab4 <__smakebuf_r>
 8007b62:	89a2      	ldrh	r2, [r4, #12]
 8007b64:	f012 0301 	ands.w	r3, r2, #1
 8007b68:	d00c      	beq.n	8007b84 <__swsetup_r+0xbc>
 8007b6a:	2300      	movs	r3, #0
 8007b6c:	60a3      	str	r3, [r4, #8]
 8007b6e:	6963      	ldr	r3, [r4, #20]
 8007b70:	425b      	negs	r3, r3
 8007b72:	61a3      	str	r3, [r4, #24]
 8007b74:	6923      	ldr	r3, [r4, #16]
 8007b76:	b953      	cbnz	r3, 8007b8e <__swsetup_r+0xc6>
 8007b78:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007b7c:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8007b80:	d1ba      	bne.n	8007af8 <__swsetup_r+0x30>
 8007b82:	bd70      	pop	{r4, r5, r6, pc}
 8007b84:	0792      	lsls	r2, r2, #30
 8007b86:	bf58      	it	pl
 8007b88:	6963      	ldrpl	r3, [r4, #20]
 8007b8a:	60a3      	str	r3, [r4, #8]
 8007b8c:	e7f2      	b.n	8007b74 <__swsetup_r+0xac>
 8007b8e:	2000      	movs	r0, #0
 8007b90:	e7f7      	b.n	8007b82 <__swsetup_r+0xba>
 8007b92:	bf00      	nop
 8007b94:	20000014 	.word	0x20000014
 8007b98:	0800a37c 	.word	0x0800a37c
 8007b9c:	0800a39c 	.word	0x0800a39c
 8007ba0:	0800a35c 	.word	0x0800a35c

08007ba4 <_close_r>:
 8007ba4:	b538      	push	{r3, r4, r5, lr}
 8007ba6:	4c06      	ldr	r4, [pc, #24]	; (8007bc0 <_close_r+0x1c>)
 8007ba8:	2300      	movs	r3, #0
 8007baa:	4605      	mov	r5, r0
 8007bac:	4608      	mov	r0, r1
 8007bae:	6023      	str	r3, [r4, #0]
 8007bb0:	f7fb f870 	bl	8002c94 <_close>
 8007bb4:	1c43      	adds	r3, r0, #1
 8007bb6:	d102      	bne.n	8007bbe <_close_r+0x1a>
 8007bb8:	6823      	ldr	r3, [r4, #0]
 8007bba:	b103      	cbz	r3, 8007bbe <_close_r+0x1a>
 8007bbc:	602b      	str	r3, [r5, #0]
 8007bbe:	bd38      	pop	{r3, r4, r5, pc}
 8007bc0:	200009d8 	.word	0x200009d8

08007bc4 <quorem>:
 8007bc4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007bc8:	6903      	ldr	r3, [r0, #16]
 8007bca:	690c      	ldr	r4, [r1, #16]
 8007bcc:	42a3      	cmp	r3, r4
 8007bce:	4680      	mov	r8, r0
 8007bd0:	f2c0 8082 	blt.w	8007cd8 <quorem+0x114>
 8007bd4:	3c01      	subs	r4, #1
 8007bd6:	f101 0714 	add.w	r7, r1, #20
 8007bda:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 8007bde:	f100 0614 	add.w	r6, r0, #20
 8007be2:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 8007be6:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 8007bea:	eb06 030c 	add.w	r3, r6, ip
 8007bee:	3501      	adds	r5, #1
 8007bf0:	eb07 090c 	add.w	r9, r7, ip
 8007bf4:	9301      	str	r3, [sp, #4]
 8007bf6:	fbb0 f5f5 	udiv	r5, r0, r5
 8007bfa:	b395      	cbz	r5, 8007c62 <quorem+0x9e>
 8007bfc:	f04f 0a00 	mov.w	sl, #0
 8007c00:	4638      	mov	r0, r7
 8007c02:	46b6      	mov	lr, r6
 8007c04:	46d3      	mov	fp, sl
 8007c06:	f850 2b04 	ldr.w	r2, [r0], #4
 8007c0a:	b293      	uxth	r3, r2
 8007c0c:	fb05 a303 	mla	r3, r5, r3, sl
 8007c10:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8007c14:	b29b      	uxth	r3, r3
 8007c16:	ebab 0303 	sub.w	r3, fp, r3
 8007c1a:	0c12      	lsrs	r2, r2, #16
 8007c1c:	f8de b000 	ldr.w	fp, [lr]
 8007c20:	fb05 a202 	mla	r2, r5, r2, sl
 8007c24:	fa13 f38b 	uxtah	r3, r3, fp
 8007c28:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 8007c2c:	fa1f fb82 	uxth.w	fp, r2
 8007c30:	f8de 2000 	ldr.w	r2, [lr]
 8007c34:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 8007c38:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8007c3c:	b29b      	uxth	r3, r3
 8007c3e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007c42:	4581      	cmp	r9, r0
 8007c44:	ea4f 4b22 	mov.w	fp, r2, asr #16
 8007c48:	f84e 3b04 	str.w	r3, [lr], #4
 8007c4c:	d2db      	bcs.n	8007c06 <quorem+0x42>
 8007c4e:	f856 300c 	ldr.w	r3, [r6, ip]
 8007c52:	b933      	cbnz	r3, 8007c62 <quorem+0x9e>
 8007c54:	9b01      	ldr	r3, [sp, #4]
 8007c56:	3b04      	subs	r3, #4
 8007c58:	429e      	cmp	r6, r3
 8007c5a:	461a      	mov	r2, r3
 8007c5c:	d330      	bcc.n	8007cc0 <quorem+0xfc>
 8007c5e:	f8c8 4010 	str.w	r4, [r8, #16]
 8007c62:	4640      	mov	r0, r8
 8007c64:	f001 f990 	bl	8008f88 <__mcmp>
 8007c68:	2800      	cmp	r0, #0
 8007c6a:	db25      	blt.n	8007cb8 <quorem+0xf4>
 8007c6c:	3501      	adds	r5, #1
 8007c6e:	4630      	mov	r0, r6
 8007c70:	f04f 0c00 	mov.w	ip, #0
 8007c74:	f857 2b04 	ldr.w	r2, [r7], #4
 8007c78:	f8d0 e000 	ldr.w	lr, [r0]
 8007c7c:	b293      	uxth	r3, r2
 8007c7e:	ebac 0303 	sub.w	r3, ip, r3
 8007c82:	0c12      	lsrs	r2, r2, #16
 8007c84:	fa13 f38e 	uxtah	r3, r3, lr
 8007c88:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8007c8c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8007c90:	b29b      	uxth	r3, r3
 8007c92:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007c96:	45b9      	cmp	r9, r7
 8007c98:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8007c9c:	f840 3b04 	str.w	r3, [r0], #4
 8007ca0:	d2e8      	bcs.n	8007c74 <quorem+0xb0>
 8007ca2:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 8007ca6:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 8007caa:	b92a      	cbnz	r2, 8007cb8 <quorem+0xf4>
 8007cac:	3b04      	subs	r3, #4
 8007cae:	429e      	cmp	r6, r3
 8007cb0:	461a      	mov	r2, r3
 8007cb2:	d30b      	bcc.n	8007ccc <quorem+0x108>
 8007cb4:	f8c8 4010 	str.w	r4, [r8, #16]
 8007cb8:	4628      	mov	r0, r5
 8007cba:	b003      	add	sp, #12
 8007cbc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007cc0:	6812      	ldr	r2, [r2, #0]
 8007cc2:	3b04      	subs	r3, #4
 8007cc4:	2a00      	cmp	r2, #0
 8007cc6:	d1ca      	bne.n	8007c5e <quorem+0x9a>
 8007cc8:	3c01      	subs	r4, #1
 8007cca:	e7c5      	b.n	8007c58 <quorem+0x94>
 8007ccc:	6812      	ldr	r2, [r2, #0]
 8007cce:	3b04      	subs	r3, #4
 8007cd0:	2a00      	cmp	r2, #0
 8007cd2:	d1ef      	bne.n	8007cb4 <quorem+0xf0>
 8007cd4:	3c01      	subs	r4, #1
 8007cd6:	e7ea      	b.n	8007cae <quorem+0xea>
 8007cd8:	2000      	movs	r0, #0
 8007cda:	e7ee      	b.n	8007cba <quorem+0xf6>
 8007cdc:	0000      	movs	r0, r0
	...

08007ce0 <_dtoa_r>:
 8007ce0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007ce4:	ec57 6b10 	vmov	r6, r7, d0
 8007ce8:	b097      	sub	sp, #92	; 0x5c
 8007cea:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8007cec:	9106      	str	r1, [sp, #24]
 8007cee:	4604      	mov	r4, r0
 8007cf0:	920b      	str	r2, [sp, #44]	; 0x2c
 8007cf2:	9312      	str	r3, [sp, #72]	; 0x48
 8007cf4:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8007cf8:	e9cd 6700 	strd	r6, r7, [sp]
 8007cfc:	b93d      	cbnz	r5, 8007d0e <_dtoa_r+0x2e>
 8007cfe:	2010      	movs	r0, #16
 8007d00:	f000 ff18 	bl	8008b34 <malloc>
 8007d04:	6260      	str	r0, [r4, #36]	; 0x24
 8007d06:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8007d0a:	6005      	str	r5, [r0, #0]
 8007d0c:	60c5      	str	r5, [r0, #12]
 8007d0e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007d10:	6819      	ldr	r1, [r3, #0]
 8007d12:	b151      	cbz	r1, 8007d2a <_dtoa_r+0x4a>
 8007d14:	685a      	ldr	r2, [r3, #4]
 8007d16:	604a      	str	r2, [r1, #4]
 8007d18:	2301      	movs	r3, #1
 8007d1a:	4093      	lsls	r3, r2
 8007d1c:	608b      	str	r3, [r1, #8]
 8007d1e:	4620      	mov	r0, r4
 8007d20:	f000 ff51 	bl	8008bc6 <_Bfree>
 8007d24:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007d26:	2200      	movs	r2, #0
 8007d28:	601a      	str	r2, [r3, #0]
 8007d2a:	1e3b      	subs	r3, r7, #0
 8007d2c:	bfbb      	ittet	lt
 8007d2e:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8007d32:	9301      	strlt	r3, [sp, #4]
 8007d34:	2300      	movge	r3, #0
 8007d36:	2201      	movlt	r2, #1
 8007d38:	bfac      	ite	ge
 8007d3a:	f8c8 3000 	strge.w	r3, [r8]
 8007d3e:	f8c8 2000 	strlt.w	r2, [r8]
 8007d42:	4baf      	ldr	r3, [pc, #700]	; (8008000 <_dtoa_r+0x320>)
 8007d44:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8007d48:	ea33 0308 	bics.w	r3, r3, r8
 8007d4c:	d114      	bne.n	8007d78 <_dtoa_r+0x98>
 8007d4e:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8007d50:	f242 730f 	movw	r3, #9999	; 0x270f
 8007d54:	6013      	str	r3, [r2, #0]
 8007d56:	9b00      	ldr	r3, [sp, #0]
 8007d58:	b923      	cbnz	r3, 8007d64 <_dtoa_r+0x84>
 8007d5a:	f3c8 0013 	ubfx	r0, r8, #0, #20
 8007d5e:	2800      	cmp	r0, #0
 8007d60:	f000 8542 	beq.w	80087e8 <_dtoa_r+0xb08>
 8007d64:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007d66:	f8df b2ac 	ldr.w	fp, [pc, #684]	; 8008014 <_dtoa_r+0x334>
 8007d6a:	2b00      	cmp	r3, #0
 8007d6c:	f000 8544 	beq.w	80087f8 <_dtoa_r+0xb18>
 8007d70:	f10b 0303 	add.w	r3, fp, #3
 8007d74:	f000 bd3e 	b.w	80087f4 <_dtoa_r+0xb14>
 8007d78:	e9dd 6700 	ldrd	r6, r7, [sp]
 8007d7c:	2200      	movs	r2, #0
 8007d7e:	2300      	movs	r3, #0
 8007d80:	4630      	mov	r0, r6
 8007d82:	4639      	mov	r1, r7
 8007d84:	f7f8 fea0 	bl	8000ac8 <__aeabi_dcmpeq>
 8007d88:	4681      	mov	r9, r0
 8007d8a:	b168      	cbz	r0, 8007da8 <_dtoa_r+0xc8>
 8007d8c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8007d8e:	2301      	movs	r3, #1
 8007d90:	6013      	str	r3, [r2, #0]
 8007d92:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007d94:	2b00      	cmp	r3, #0
 8007d96:	f000 8524 	beq.w	80087e2 <_dtoa_r+0xb02>
 8007d9a:	4b9a      	ldr	r3, [pc, #616]	; (8008004 <_dtoa_r+0x324>)
 8007d9c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8007d9e:	f103 3bff 	add.w	fp, r3, #4294967295
 8007da2:	6013      	str	r3, [r2, #0]
 8007da4:	f000 bd28 	b.w	80087f8 <_dtoa_r+0xb18>
 8007da8:	aa14      	add	r2, sp, #80	; 0x50
 8007daa:	a915      	add	r1, sp, #84	; 0x54
 8007dac:	ec47 6b10 	vmov	d0, r6, r7
 8007db0:	4620      	mov	r0, r4
 8007db2:	f001 f960 	bl	8009076 <__d2b>
 8007db6:	f3c8 550a 	ubfx	r5, r8, #20, #11
 8007dba:	9004      	str	r0, [sp, #16]
 8007dbc:	2d00      	cmp	r5, #0
 8007dbe:	d07c      	beq.n	8007eba <_dtoa_r+0x1da>
 8007dc0:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8007dc4:	f043 5b7f 	orr.w	fp, r3, #1069547520	; 0x3fc00000
 8007dc8:	46b2      	mov	sl, r6
 8007dca:	f44b 1b40 	orr.w	fp, fp, #3145728	; 0x300000
 8007dce:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8007dd2:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
 8007dd6:	2200      	movs	r2, #0
 8007dd8:	4b8b      	ldr	r3, [pc, #556]	; (8008008 <_dtoa_r+0x328>)
 8007dda:	4650      	mov	r0, sl
 8007ddc:	4659      	mov	r1, fp
 8007dde:	f7f8 fa53 	bl	8000288 <__aeabi_dsub>
 8007de2:	a381      	add	r3, pc, #516	; (adr r3, 8007fe8 <_dtoa_r+0x308>)
 8007de4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007de8:	f7f8 fc06 	bl	80005f8 <__aeabi_dmul>
 8007dec:	a380      	add	r3, pc, #512	; (adr r3, 8007ff0 <_dtoa_r+0x310>)
 8007dee:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007df2:	f7f8 fa4b 	bl	800028c <__adddf3>
 8007df6:	4606      	mov	r6, r0
 8007df8:	4628      	mov	r0, r5
 8007dfa:	460f      	mov	r7, r1
 8007dfc:	f7f8 fb92 	bl	8000524 <__aeabi_i2d>
 8007e00:	a37d      	add	r3, pc, #500	; (adr r3, 8007ff8 <_dtoa_r+0x318>)
 8007e02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e06:	f7f8 fbf7 	bl	80005f8 <__aeabi_dmul>
 8007e0a:	4602      	mov	r2, r0
 8007e0c:	460b      	mov	r3, r1
 8007e0e:	4630      	mov	r0, r6
 8007e10:	4639      	mov	r1, r7
 8007e12:	f7f8 fa3b 	bl	800028c <__adddf3>
 8007e16:	4606      	mov	r6, r0
 8007e18:	460f      	mov	r7, r1
 8007e1a:	f7f8 fe9d 	bl	8000b58 <__aeabi_d2iz>
 8007e1e:	2200      	movs	r2, #0
 8007e20:	4682      	mov	sl, r0
 8007e22:	2300      	movs	r3, #0
 8007e24:	4630      	mov	r0, r6
 8007e26:	4639      	mov	r1, r7
 8007e28:	f7f8 fe58 	bl	8000adc <__aeabi_dcmplt>
 8007e2c:	b148      	cbz	r0, 8007e42 <_dtoa_r+0x162>
 8007e2e:	4650      	mov	r0, sl
 8007e30:	f7f8 fb78 	bl	8000524 <__aeabi_i2d>
 8007e34:	4632      	mov	r2, r6
 8007e36:	463b      	mov	r3, r7
 8007e38:	f7f8 fe46 	bl	8000ac8 <__aeabi_dcmpeq>
 8007e3c:	b908      	cbnz	r0, 8007e42 <_dtoa_r+0x162>
 8007e3e:	f10a 3aff 	add.w	sl, sl, #4294967295
 8007e42:	f1ba 0f16 	cmp.w	sl, #22
 8007e46:	d859      	bhi.n	8007efc <_dtoa_r+0x21c>
 8007e48:	4970      	ldr	r1, [pc, #448]	; (800800c <_dtoa_r+0x32c>)
 8007e4a:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 8007e4e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007e52:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007e56:	f7f8 fe5f 	bl	8000b18 <__aeabi_dcmpgt>
 8007e5a:	2800      	cmp	r0, #0
 8007e5c:	d050      	beq.n	8007f00 <_dtoa_r+0x220>
 8007e5e:	f10a 3aff 	add.w	sl, sl, #4294967295
 8007e62:	2300      	movs	r3, #0
 8007e64:	930f      	str	r3, [sp, #60]	; 0x3c
 8007e66:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8007e68:	1b5d      	subs	r5, r3, r5
 8007e6a:	f1b5 0801 	subs.w	r8, r5, #1
 8007e6e:	bf49      	itett	mi
 8007e70:	f1c5 0301 	rsbmi	r3, r5, #1
 8007e74:	2300      	movpl	r3, #0
 8007e76:	9305      	strmi	r3, [sp, #20]
 8007e78:	f04f 0800 	movmi.w	r8, #0
 8007e7c:	bf58      	it	pl
 8007e7e:	9305      	strpl	r3, [sp, #20]
 8007e80:	f1ba 0f00 	cmp.w	sl, #0
 8007e84:	db3e      	blt.n	8007f04 <_dtoa_r+0x224>
 8007e86:	2300      	movs	r3, #0
 8007e88:	44d0      	add	r8, sl
 8007e8a:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 8007e8e:	9307      	str	r3, [sp, #28]
 8007e90:	9b06      	ldr	r3, [sp, #24]
 8007e92:	2b09      	cmp	r3, #9
 8007e94:	f200 8090 	bhi.w	8007fb8 <_dtoa_r+0x2d8>
 8007e98:	2b05      	cmp	r3, #5
 8007e9a:	bfc4      	itt	gt
 8007e9c:	3b04      	subgt	r3, #4
 8007e9e:	9306      	strgt	r3, [sp, #24]
 8007ea0:	9b06      	ldr	r3, [sp, #24]
 8007ea2:	f1a3 0302 	sub.w	r3, r3, #2
 8007ea6:	bfcc      	ite	gt
 8007ea8:	2500      	movgt	r5, #0
 8007eaa:	2501      	movle	r5, #1
 8007eac:	2b03      	cmp	r3, #3
 8007eae:	f200 808f 	bhi.w	8007fd0 <_dtoa_r+0x2f0>
 8007eb2:	e8df f003 	tbb	[pc, r3]
 8007eb6:	7f7d      	.short	0x7f7d
 8007eb8:	7131      	.short	0x7131
 8007eba:	e9dd 5314 	ldrd	r5, r3, [sp, #80]	; 0x50
 8007ebe:	441d      	add	r5, r3
 8007ec0:	f205 4032 	addw	r0, r5, #1074	; 0x432
 8007ec4:	2820      	cmp	r0, #32
 8007ec6:	dd13      	ble.n	8007ef0 <_dtoa_r+0x210>
 8007ec8:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 8007ecc:	9b00      	ldr	r3, [sp, #0]
 8007ece:	fa08 f800 	lsl.w	r8, r8, r0
 8007ed2:	f205 4012 	addw	r0, r5, #1042	; 0x412
 8007ed6:	fa23 f000 	lsr.w	r0, r3, r0
 8007eda:	ea48 0000 	orr.w	r0, r8, r0
 8007ede:	f7f8 fb11 	bl	8000504 <__aeabi_ui2d>
 8007ee2:	2301      	movs	r3, #1
 8007ee4:	4682      	mov	sl, r0
 8007ee6:	f1a1 7bf8 	sub.w	fp, r1, #32505856	; 0x1f00000
 8007eea:	3d01      	subs	r5, #1
 8007eec:	9313      	str	r3, [sp, #76]	; 0x4c
 8007eee:	e772      	b.n	8007dd6 <_dtoa_r+0xf6>
 8007ef0:	9b00      	ldr	r3, [sp, #0]
 8007ef2:	f1c0 0020 	rsb	r0, r0, #32
 8007ef6:	fa03 f000 	lsl.w	r0, r3, r0
 8007efa:	e7f0      	b.n	8007ede <_dtoa_r+0x1fe>
 8007efc:	2301      	movs	r3, #1
 8007efe:	e7b1      	b.n	8007e64 <_dtoa_r+0x184>
 8007f00:	900f      	str	r0, [sp, #60]	; 0x3c
 8007f02:	e7b0      	b.n	8007e66 <_dtoa_r+0x186>
 8007f04:	9b05      	ldr	r3, [sp, #20]
 8007f06:	eba3 030a 	sub.w	r3, r3, sl
 8007f0a:	9305      	str	r3, [sp, #20]
 8007f0c:	f1ca 0300 	rsb	r3, sl, #0
 8007f10:	9307      	str	r3, [sp, #28]
 8007f12:	2300      	movs	r3, #0
 8007f14:	930e      	str	r3, [sp, #56]	; 0x38
 8007f16:	e7bb      	b.n	8007e90 <_dtoa_r+0x1b0>
 8007f18:	2301      	movs	r3, #1
 8007f1a:	930a      	str	r3, [sp, #40]	; 0x28
 8007f1c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007f1e:	2b00      	cmp	r3, #0
 8007f20:	dd59      	ble.n	8007fd6 <_dtoa_r+0x2f6>
 8007f22:	9302      	str	r3, [sp, #8]
 8007f24:	4699      	mov	r9, r3
 8007f26:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8007f28:	2200      	movs	r2, #0
 8007f2a:	6072      	str	r2, [r6, #4]
 8007f2c:	2204      	movs	r2, #4
 8007f2e:	f102 0014 	add.w	r0, r2, #20
 8007f32:	4298      	cmp	r0, r3
 8007f34:	6871      	ldr	r1, [r6, #4]
 8007f36:	d953      	bls.n	8007fe0 <_dtoa_r+0x300>
 8007f38:	4620      	mov	r0, r4
 8007f3a:	f000 fe10 	bl	8008b5e <_Balloc>
 8007f3e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007f40:	6030      	str	r0, [r6, #0]
 8007f42:	f1b9 0f0e 	cmp.w	r9, #14
 8007f46:	f8d3 b000 	ldr.w	fp, [r3]
 8007f4a:	f200 80e6 	bhi.w	800811a <_dtoa_r+0x43a>
 8007f4e:	2d00      	cmp	r5, #0
 8007f50:	f000 80e3 	beq.w	800811a <_dtoa_r+0x43a>
 8007f54:	ed9d 7b00 	vldr	d7, [sp]
 8007f58:	f1ba 0f00 	cmp.w	sl, #0
 8007f5c:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 8007f60:	dd74      	ble.n	800804c <_dtoa_r+0x36c>
 8007f62:	4a2a      	ldr	r2, [pc, #168]	; (800800c <_dtoa_r+0x32c>)
 8007f64:	f00a 030f 	and.w	r3, sl, #15
 8007f68:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8007f6c:	ed93 7b00 	vldr	d7, [r3]
 8007f70:	ea4f 162a 	mov.w	r6, sl, asr #4
 8007f74:	06f0      	lsls	r0, r6, #27
 8007f76:	ed8d 7b08 	vstr	d7, [sp, #32]
 8007f7a:	d565      	bpl.n	8008048 <_dtoa_r+0x368>
 8007f7c:	4b24      	ldr	r3, [pc, #144]	; (8008010 <_dtoa_r+0x330>)
 8007f7e:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8007f82:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8007f86:	f7f8 fc61 	bl	800084c <__aeabi_ddiv>
 8007f8a:	e9cd 0100 	strd	r0, r1, [sp]
 8007f8e:	f006 060f 	and.w	r6, r6, #15
 8007f92:	2503      	movs	r5, #3
 8007f94:	4f1e      	ldr	r7, [pc, #120]	; (8008010 <_dtoa_r+0x330>)
 8007f96:	e04c      	b.n	8008032 <_dtoa_r+0x352>
 8007f98:	2301      	movs	r3, #1
 8007f9a:	930a      	str	r3, [sp, #40]	; 0x28
 8007f9c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007f9e:	4453      	add	r3, sl
 8007fa0:	f103 0901 	add.w	r9, r3, #1
 8007fa4:	9302      	str	r3, [sp, #8]
 8007fa6:	464b      	mov	r3, r9
 8007fa8:	2b01      	cmp	r3, #1
 8007faa:	bfb8      	it	lt
 8007fac:	2301      	movlt	r3, #1
 8007fae:	e7ba      	b.n	8007f26 <_dtoa_r+0x246>
 8007fb0:	2300      	movs	r3, #0
 8007fb2:	e7b2      	b.n	8007f1a <_dtoa_r+0x23a>
 8007fb4:	2300      	movs	r3, #0
 8007fb6:	e7f0      	b.n	8007f9a <_dtoa_r+0x2ba>
 8007fb8:	2501      	movs	r5, #1
 8007fba:	2300      	movs	r3, #0
 8007fbc:	9306      	str	r3, [sp, #24]
 8007fbe:	950a      	str	r5, [sp, #40]	; 0x28
 8007fc0:	f04f 33ff 	mov.w	r3, #4294967295
 8007fc4:	9302      	str	r3, [sp, #8]
 8007fc6:	4699      	mov	r9, r3
 8007fc8:	2200      	movs	r2, #0
 8007fca:	2312      	movs	r3, #18
 8007fcc:	920b      	str	r2, [sp, #44]	; 0x2c
 8007fce:	e7aa      	b.n	8007f26 <_dtoa_r+0x246>
 8007fd0:	2301      	movs	r3, #1
 8007fd2:	930a      	str	r3, [sp, #40]	; 0x28
 8007fd4:	e7f4      	b.n	8007fc0 <_dtoa_r+0x2e0>
 8007fd6:	2301      	movs	r3, #1
 8007fd8:	9302      	str	r3, [sp, #8]
 8007fda:	4699      	mov	r9, r3
 8007fdc:	461a      	mov	r2, r3
 8007fde:	e7f5      	b.n	8007fcc <_dtoa_r+0x2ec>
 8007fe0:	3101      	adds	r1, #1
 8007fe2:	6071      	str	r1, [r6, #4]
 8007fe4:	0052      	lsls	r2, r2, #1
 8007fe6:	e7a2      	b.n	8007f2e <_dtoa_r+0x24e>
 8007fe8:	636f4361 	.word	0x636f4361
 8007fec:	3fd287a7 	.word	0x3fd287a7
 8007ff0:	8b60c8b3 	.word	0x8b60c8b3
 8007ff4:	3fc68a28 	.word	0x3fc68a28
 8007ff8:	509f79fb 	.word	0x509f79fb
 8007ffc:	3fd34413 	.word	0x3fd34413
 8008000:	7ff00000 	.word	0x7ff00000
 8008004:	0800a3d1 	.word	0x0800a3d1
 8008008:	3ff80000 	.word	0x3ff80000
 800800c:	0800a430 	.word	0x0800a430
 8008010:	0800a408 	.word	0x0800a408
 8008014:	0800a3fd 	.word	0x0800a3fd
 8008018:	07f1      	lsls	r1, r6, #31
 800801a:	d508      	bpl.n	800802e <_dtoa_r+0x34e>
 800801c:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8008020:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008024:	f7f8 fae8 	bl	80005f8 <__aeabi_dmul>
 8008028:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800802c:	3501      	adds	r5, #1
 800802e:	1076      	asrs	r6, r6, #1
 8008030:	3708      	adds	r7, #8
 8008032:	2e00      	cmp	r6, #0
 8008034:	d1f0      	bne.n	8008018 <_dtoa_r+0x338>
 8008036:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800803a:	e9dd 0100 	ldrd	r0, r1, [sp]
 800803e:	f7f8 fc05 	bl	800084c <__aeabi_ddiv>
 8008042:	e9cd 0100 	strd	r0, r1, [sp]
 8008046:	e01a      	b.n	800807e <_dtoa_r+0x39e>
 8008048:	2502      	movs	r5, #2
 800804a:	e7a3      	b.n	8007f94 <_dtoa_r+0x2b4>
 800804c:	f000 80a0 	beq.w	8008190 <_dtoa_r+0x4b0>
 8008050:	f1ca 0600 	rsb	r6, sl, #0
 8008054:	4b9f      	ldr	r3, [pc, #636]	; (80082d4 <_dtoa_r+0x5f4>)
 8008056:	4fa0      	ldr	r7, [pc, #640]	; (80082d8 <_dtoa_r+0x5f8>)
 8008058:	f006 020f 	and.w	r2, r6, #15
 800805c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008060:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008064:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8008068:	f7f8 fac6 	bl	80005f8 <__aeabi_dmul>
 800806c:	e9cd 0100 	strd	r0, r1, [sp]
 8008070:	1136      	asrs	r6, r6, #4
 8008072:	2300      	movs	r3, #0
 8008074:	2502      	movs	r5, #2
 8008076:	2e00      	cmp	r6, #0
 8008078:	d17f      	bne.n	800817a <_dtoa_r+0x49a>
 800807a:	2b00      	cmp	r3, #0
 800807c:	d1e1      	bne.n	8008042 <_dtoa_r+0x362>
 800807e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008080:	2b00      	cmp	r3, #0
 8008082:	f000 8087 	beq.w	8008194 <_dtoa_r+0x4b4>
 8008086:	e9dd 6700 	ldrd	r6, r7, [sp]
 800808a:	2200      	movs	r2, #0
 800808c:	4b93      	ldr	r3, [pc, #588]	; (80082dc <_dtoa_r+0x5fc>)
 800808e:	4630      	mov	r0, r6
 8008090:	4639      	mov	r1, r7
 8008092:	f7f8 fd23 	bl	8000adc <__aeabi_dcmplt>
 8008096:	2800      	cmp	r0, #0
 8008098:	d07c      	beq.n	8008194 <_dtoa_r+0x4b4>
 800809a:	f1b9 0f00 	cmp.w	r9, #0
 800809e:	d079      	beq.n	8008194 <_dtoa_r+0x4b4>
 80080a0:	9b02      	ldr	r3, [sp, #8]
 80080a2:	2b00      	cmp	r3, #0
 80080a4:	dd35      	ble.n	8008112 <_dtoa_r+0x432>
 80080a6:	f10a 33ff 	add.w	r3, sl, #4294967295
 80080aa:	9308      	str	r3, [sp, #32]
 80080ac:	4639      	mov	r1, r7
 80080ae:	2200      	movs	r2, #0
 80080b0:	4b8b      	ldr	r3, [pc, #556]	; (80082e0 <_dtoa_r+0x600>)
 80080b2:	4630      	mov	r0, r6
 80080b4:	f7f8 faa0 	bl	80005f8 <__aeabi_dmul>
 80080b8:	e9cd 0100 	strd	r0, r1, [sp]
 80080bc:	9f02      	ldr	r7, [sp, #8]
 80080be:	3501      	adds	r5, #1
 80080c0:	4628      	mov	r0, r5
 80080c2:	f7f8 fa2f 	bl	8000524 <__aeabi_i2d>
 80080c6:	e9dd 2300 	ldrd	r2, r3, [sp]
 80080ca:	f7f8 fa95 	bl	80005f8 <__aeabi_dmul>
 80080ce:	2200      	movs	r2, #0
 80080d0:	4b84      	ldr	r3, [pc, #528]	; (80082e4 <_dtoa_r+0x604>)
 80080d2:	f7f8 f8db 	bl	800028c <__adddf3>
 80080d6:	4605      	mov	r5, r0
 80080d8:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 80080dc:	2f00      	cmp	r7, #0
 80080de:	d15d      	bne.n	800819c <_dtoa_r+0x4bc>
 80080e0:	2200      	movs	r2, #0
 80080e2:	4b81      	ldr	r3, [pc, #516]	; (80082e8 <_dtoa_r+0x608>)
 80080e4:	e9dd 0100 	ldrd	r0, r1, [sp]
 80080e8:	f7f8 f8ce 	bl	8000288 <__aeabi_dsub>
 80080ec:	462a      	mov	r2, r5
 80080ee:	4633      	mov	r3, r6
 80080f0:	e9cd 0100 	strd	r0, r1, [sp]
 80080f4:	f7f8 fd10 	bl	8000b18 <__aeabi_dcmpgt>
 80080f8:	2800      	cmp	r0, #0
 80080fa:	f040 8288 	bne.w	800860e <_dtoa_r+0x92e>
 80080fe:	462a      	mov	r2, r5
 8008100:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 8008104:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008108:	f7f8 fce8 	bl	8000adc <__aeabi_dcmplt>
 800810c:	2800      	cmp	r0, #0
 800810e:	f040 827c 	bne.w	800860a <_dtoa_r+0x92a>
 8008112:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8008116:	e9cd 2300 	strd	r2, r3, [sp]
 800811a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800811c:	2b00      	cmp	r3, #0
 800811e:	f2c0 8150 	blt.w	80083c2 <_dtoa_r+0x6e2>
 8008122:	f1ba 0f0e 	cmp.w	sl, #14
 8008126:	f300 814c 	bgt.w	80083c2 <_dtoa_r+0x6e2>
 800812a:	4b6a      	ldr	r3, [pc, #424]	; (80082d4 <_dtoa_r+0x5f4>)
 800812c:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8008130:	ed93 7b00 	vldr	d7, [r3]
 8008134:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008136:	2b00      	cmp	r3, #0
 8008138:	ed8d 7b02 	vstr	d7, [sp, #8]
 800813c:	f280 80d8 	bge.w	80082f0 <_dtoa_r+0x610>
 8008140:	f1b9 0f00 	cmp.w	r9, #0
 8008144:	f300 80d4 	bgt.w	80082f0 <_dtoa_r+0x610>
 8008148:	f040 825e 	bne.w	8008608 <_dtoa_r+0x928>
 800814c:	2200      	movs	r2, #0
 800814e:	4b66      	ldr	r3, [pc, #408]	; (80082e8 <_dtoa_r+0x608>)
 8008150:	ec51 0b17 	vmov	r0, r1, d7
 8008154:	f7f8 fa50 	bl	80005f8 <__aeabi_dmul>
 8008158:	e9dd 2300 	ldrd	r2, r3, [sp]
 800815c:	f7f8 fcd2 	bl	8000b04 <__aeabi_dcmpge>
 8008160:	464f      	mov	r7, r9
 8008162:	464e      	mov	r6, r9
 8008164:	2800      	cmp	r0, #0
 8008166:	f040 8234 	bne.w	80085d2 <_dtoa_r+0x8f2>
 800816a:	2331      	movs	r3, #49	; 0x31
 800816c:	f10b 0501 	add.w	r5, fp, #1
 8008170:	f88b 3000 	strb.w	r3, [fp]
 8008174:	f10a 0a01 	add.w	sl, sl, #1
 8008178:	e22f      	b.n	80085da <_dtoa_r+0x8fa>
 800817a:	07f2      	lsls	r2, r6, #31
 800817c:	d505      	bpl.n	800818a <_dtoa_r+0x4aa>
 800817e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008182:	f7f8 fa39 	bl	80005f8 <__aeabi_dmul>
 8008186:	3501      	adds	r5, #1
 8008188:	2301      	movs	r3, #1
 800818a:	1076      	asrs	r6, r6, #1
 800818c:	3708      	adds	r7, #8
 800818e:	e772      	b.n	8008076 <_dtoa_r+0x396>
 8008190:	2502      	movs	r5, #2
 8008192:	e774      	b.n	800807e <_dtoa_r+0x39e>
 8008194:	f8cd a020 	str.w	sl, [sp, #32]
 8008198:	464f      	mov	r7, r9
 800819a:	e791      	b.n	80080c0 <_dtoa_r+0x3e0>
 800819c:	4b4d      	ldr	r3, [pc, #308]	; (80082d4 <_dtoa_r+0x5f4>)
 800819e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80081a2:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 80081a6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80081a8:	2b00      	cmp	r3, #0
 80081aa:	d047      	beq.n	800823c <_dtoa_r+0x55c>
 80081ac:	4602      	mov	r2, r0
 80081ae:	460b      	mov	r3, r1
 80081b0:	2000      	movs	r0, #0
 80081b2:	494e      	ldr	r1, [pc, #312]	; (80082ec <_dtoa_r+0x60c>)
 80081b4:	f7f8 fb4a 	bl	800084c <__aeabi_ddiv>
 80081b8:	462a      	mov	r2, r5
 80081ba:	4633      	mov	r3, r6
 80081bc:	f7f8 f864 	bl	8000288 <__aeabi_dsub>
 80081c0:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 80081c4:	465d      	mov	r5, fp
 80081c6:	e9dd 0100 	ldrd	r0, r1, [sp]
 80081ca:	f7f8 fcc5 	bl	8000b58 <__aeabi_d2iz>
 80081ce:	4606      	mov	r6, r0
 80081d0:	f7f8 f9a8 	bl	8000524 <__aeabi_i2d>
 80081d4:	4602      	mov	r2, r0
 80081d6:	460b      	mov	r3, r1
 80081d8:	e9dd 0100 	ldrd	r0, r1, [sp]
 80081dc:	f7f8 f854 	bl	8000288 <__aeabi_dsub>
 80081e0:	3630      	adds	r6, #48	; 0x30
 80081e2:	f805 6b01 	strb.w	r6, [r5], #1
 80081e6:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 80081ea:	e9cd 0100 	strd	r0, r1, [sp]
 80081ee:	f7f8 fc75 	bl	8000adc <__aeabi_dcmplt>
 80081f2:	2800      	cmp	r0, #0
 80081f4:	d163      	bne.n	80082be <_dtoa_r+0x5de>
 80081f6:	e9dd 2300 	ldrd	r2, r3, [sp]
 80081fa:	2000      	movs	r0, #0
 80081fc:	4937      	ldr	r1, [pc, #220]	; (80082dc <_dtoa_r+0x5fc>)
 80081fe:	f7f8 f843 	bl	8000288 <__aeabi_dsub>
 8008202:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8008206:	f7f8 fc69 	bl	8000adc <__aeabi_dcmplt>
 800820a:	2800      	cmp	r0, #0
 800820c:	f040 80b7 	bne.w	800837e <_dtoa_r+0x69e>
 8008210:	eba5 030b 	sub.w	r3, r5, fp
 8008214:	429f      	cmp	r7, r3
 8008216:	f77f af7c 	ble.w	8008112 <_dtoa_r+0x432>
 800821a:	2200      	movs	r2, #0
 800821c:	4b30      	ldr	r3, [pc, #192]	; (80082e0 <_dtoa_r+0x600>)
 800821e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8008222:	f7f8 f9e9 	bl	80005f8 <__aeabi_dmul>
 8008226:	2200      	movs	r2, #0
 8008228:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800822c:	4b2c      	ldr	r3, [pc, #176]	; (80082e0 <_dtoa_r+0x600>)
 800822e:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008232:	f7f8 f9e1 	bl	80005f8 <__aeabi_dmul>
 8008236:	e9cd 0100 	strd	r0, r1, [sp]
 800823a:	e7c4      	b.n	80081c6 <_dtoa_r+0x4e6>
 800823c:	462a      	mov	r2, r5
 800823e:	4633      	mov	r3, r6
 8008240:	f7f8 f9da 	bl	80005f8 <__aeabi_dmul>
 8008244:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8008248:	eb0b 0507 	add.w	r5, fp, r7
 800824c:	465e      	mov	r6, fp
 800824e:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008252:	f7f8 fc81 	bl	8000b58 <__aeabi_d2iz>
 8008256:	4607      	mov	r7, r0
 8008258:	f7f8 f964 	bl	8000524 <__aeabi_i2d>
 800825c:	3730      	adds	r7, #48	; 0x30
 800825e:	4602      	mov	r2, r0
 8008260:	460b      	mov	r3, r1
 8008262:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008266:	f7f8 f80f 	bl	8000288 <__aeabi_dsub>
 800826a:	f806 7b01 	strb.w	r7, [r6], #1
 800826e:	42ae      	cmp	r6, r5
 8008270:	e9cd 0100 	strd	r0, r1, [sp]
 8008274:	f04f 0200 	mov.w	r2, #0
 8008278:	d126      	bne.n	80082c8 <_dtoa_r+0x5e8>
 800827a:	4b1c      	ldr	r3, [pc, #112]	; (80082ec <_dtoa_r+0x60c>)
 800827c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8008280:	f7f8 f804 	bl	800028c <__adddf3>
 8008284:	4602      	mov	r2, r0
 8008286:	460b      	mov	r3, r1
 8008288:	e9dd 0100 	ldrd	r0, r1, [sp]
 800828c:	f7f8 fc44 	bl	8000b18 <__aeabi_dcmpgt>
 8008290:	2800      	cmp	r0, #0
 8008292:	d174      	bne.n	800837e <_dtoa_r+0x69e>
 8008294:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8008298:	2000      	movs	r0, #0
 800829a:	4914      	ldr	r1, [pc, #80]	; (80082ec <_dtoa_r+0x60c>)
 800829c:	f7f7 fff4 	bl	8000288 <__aeabi_dsub>
 80082a0:	4602      	mov	r2, r0
 80082a2:	460b      	mov	r3, r1
 80082a4:	e9dd 0100 	ldrd	r0, r1, [sp]
 80082a8:	f7f8 fc18 	bl	8000adc <__aeabi_dcmplt>
 80082ac:	2800      	cmp	r0, #0
 80082ae:	f43f af30 	beq.w	8008112 <_dtoa_r+0x432>
 80082b2:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80082b6:	2b30      	cmp	r3, #48	; 0x30
 80082b8:	f105 32ff 	add.w	r2, r5, #4294967295
 80082bc:	d002      	beq.n	80082c4 <_dtoa_r+0x5e4>
 80082be:	f8dd a020 	ldr.w	sl, [sp, #32]
 80082c2:	e04a      	b.n	800835a <_dtoa_r+0x67a>
 80082c4:	4615      	mov	r5, r2
 80082c6:	e7f4      	b.n	80082b2 <_dtoa_r+0x5d2>
 80082c8:	4b05      	ldr	r3, [pc, #20]	; (80082e0 <_dtoa_r+0x600>)
 80082ca:	f7f8 f995 	bl	80005f8 <__aeabi_dmul>
 80082ce:	e9cd 0100 	strd	r0, r1, [sp]
 80082d2:	e7bc      	b.n	800824e <_dtoa_r+0x56e>
 80082d4:	0800a430 	.word	0x0800a430
 80082d8:	0800a408 	.word	0x0800a408
 80082dc:	3ff00000 	.word	0x3ff00000
 80082e0:	40240000 	.word	0x40240000
 80082e4:	401c0000 	.word	0x401c0000
 80082e8:	40140000 	.word	0x40140000
 80082ec:	3fe00000 	.word	0x3fe00000
 80082f0:	e9dd 6700 	ldrd	r6, r7, [sp]
 80082f4:	465d      	mov	r5, fp
 80082f6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80082fa:	4630      	mov	r0, r6
 80082fc:	4639      	mov	r1, r7
 80082fe:	f7f8 faa5 	bl	800084c <__aeabi_ddiv>
 8008302:	f7f8 fc29 	bl	8000b58 <__aeabi_d2iz>
 8008306:	4680      	mov	r8, r0
 8008308:	f7f8 f90c 	bl	8000524 <__aeabi_i2d>
 800830c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008310:	f7f8 f972 	bl	80005f8 <__aeabi_dmul>
 8008314:	4602      	mov	r2, r0
 8008316:	460b      	mov	r3, r1
 8008318:	4630      	mov	r0, r6
 800831a:	4639      	mov	r1, r7
 800831c:	f108 0630 	add.w	r6, r8, #48	; 0x30
 8008320:	f7f7 ffb2 	bl	8000288 <__aeabi_dsub>
 8008324:	f805 6b01 	strb.w	r6, [r5], #1
 8008328:	eba5 060b 	sub.w	r6, r5, fp
 800832c:	45b1      	cmp	r9, r6
 800832e:	4602      	mov	r2, r0
 8008330:	460b      	mov	r3, r1
 8008332:	d139      	bne.n	80083a8 <_dtoa_r+0x6c8>
 8008334:	f7f7 ffaa 	bl	800028c <__adddf3>
 8008338:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800833c:	4606      	mov	r6, r0
 800833e:	460f      	mov	r7, r1
 8008340:	f7f8 fbea 	bl	8000b18 <__aeabi_dcmpgt>
 8008344:	b9c8      	cbnz	r0, 800837a <_dtoa_r+0x69a>
 8008346:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800834a:	4630      	mov	r0, r6
 800834c:	4639      	mov	r1, r7
 800834e:	f7f8 fbbb 	bl	8000ac8 <__aeabi_dcmpeq>
 8008352:	b110      	cbz	r0, 800835a <_dtoa_r+0x67a>
 8008354:	f018 0f01 	tst.w	r8, #1
 8008358:	d10f      	bne.n	800837a <_dtoa_r+0x69a>
 800835a:	9904      	ldr	r1, [sp, #16]
 800835c:	4620      	mov	r0, r4
 800835e:	f000 fc32 	bl	8008bc6 <_Bfree>
 8008362:	2300      	movs	r3, #0
 8008364:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8008366:	702b      	strb	r3, [r5, #0]
 8008368:	f10a 0301 	add.w	r3, sl, #1
 800836c:	6013      	str	r3, [r2, #0]
 800836e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008370:	2b00      	cmp	r3, #0
 8008372:	f000 8241 	beq.w	80087f8 <_dtoa_r+0xb18>
 8008376:	601d      	str	r5, [r3, #0]
 8008378:	e23e      	b.n	80087f8 <_dtoa_r+0xb18>
 800837a:	f8cd a020 	str.w	sl, [sp, #32]
 800837e:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8008382:	2a39      	cmp	r2, #57	; 0x39
 8008384:	f105 33ff 	add.w	r3, r5, #4294967295
 8008388:	d108      	bne.n	800839c <_dtoa_r+0x6bc>
 800838a:	459b      	cmp	fp, r3
 800838c:	d10a      	bne.n	80083a4 <_dtoa_r+0x6c4>
 800838e:	9b08      	ldr	r3, [sp, #32]
 8008390:	3301      	adds	r3, #1
 8008392:	9308      	str	r3, [sp, #32]
 8008394:	2330      	movs	r3, #48	; 0x30
 8008396:	f88b 3000 	strb.w	r3, [fp]
 800839a:	465b      	mov	r3, fp
 800839c:	781a      	ldrb	r2, [r3, #0]
 800839e:	3201      	adds	r2, #1
 80083a0:	701a      	strb	r2, [r3, #0]
 80083a2:	e78c      	b.n	80082be <_dtoa_r+0x5de>
 80083a4:	461d      	mov	r5, r3
 80083a6:	e7ea      	b.n	800837e <_dtoa_r+0x69e>
 80083a8:	2200      	movs	r2, #0
 80083aa:	4b9b      	ldr	r3, [pc, #620]	; (8008618 <_dtoa_r+0x938>)
 80083ac:	f7f8 f924 	bl	80005f8 <__aeabi_dmul>
 80083b0:	2200      	movs	r2, #0
 80083b2:	2300      	movs	r3, #0
 80083b4:	4606      	mov	r6, r0
 80083b6:	460f      	mov	r7, r1
 80083b8:	f7f8 fb86 	bl	8000ac8 <__aeabi_dcmpeq>
 80083bc:	2800      	cmp	r0, #0
 80083be:	d09a      	beq.n	80082f6 <_dtoa_r+0x616>
 80083c0:	e7cb      	b.n	800835a <_dtoa_r+0x67a>
 80083c2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80083c4:	2a00      	cmp	r2, #0
 80083c6:	f000 808b 	beq.w	80084e0 <_dtoa_r+0x800>
 80083ca:	9a06      	ldr	r2, [sp, #24]
 80083cc:	2a01      	cmp	r2, #1
 80083ce:	dc6e      	bgt.n	80084ae <_dtoa_r+0x7ce>
 80083d0:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80083d2:	2a00      	cmp	r2, #0
 80083d4:	d067      	beq.n	80084a6 <_dtoa_r+0x7c6>
 80083d6:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80083da:	9f07      	ldr	r7, [sp, #28]
 80083dc:	9d05      	ldr	r5, [sp, #20]
 80083de:	9a05      	ldr	r2, [sp, #20]
 80083e0:	2101      	movs	r1, #1
 80083e2:	441a      	add	r2, r3
 80083e4:	4620      	mov	r0, r4
 80083e6:	9205      	str	r2, [sp, #20]
 80083e8:	4498      	add	r8, r3
 80083ea:	f000 fc8c 	bl	8008d06 <__i2b>
 80083ee:	4606      	mov	r6, r0
 80083f0:	2d00      	cmp	r5, #0
 80083f2:	dd0c      	ble.n	800840e <_dtoa_r+0x72e>
 80083f4:	f1b8 0f00 	cmp.w	r8, #0
 80083f8:	dd09      	ble.n	800840e <_dtoa_r+0x72e>
 80083fa:	4545      	cmp	r5, r8
 80083fc:	9a05      	ldr	r2, [sp, #20]
 80083fe:	462b      	mov	r3, r5
 8008400:	bfa8      	it	ge
 8008402:	4643      	movge	r3, r8
 8008404:	1ad2      	subs	r2, r2, r3
 8008406:	9205      	str	r2, [sp, #20]
 8008408:	1aed      	subs	r5, r5, r3
 800840a:	eba8 0803 	sub.w	r8, r8, r3
 800840e:	9b07      	ldr	r3, [sp, #28]
 8008410:	b1eb      	cbz	r3, 800844e <_dtoa_r+0x76e>
 8008412:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008414:	2b00      	cmp	r3, #0
 8008416:	d067      	beq.n	80084e8 <_dtoa_r+0x808>
 8008418:	b18f      	cbz	r7, 800843e <_dtoa_r+0x75e>
 800841a:	4631      	mov	r1, r6
 800841c:	463a      	mov	r2, r7
 800841e:	4620      	mov	r0, r4
 8008420:	f000 fd10 	bl	8008e44 <__pow5mult>
 8008424:	9a04      	ldr	r2, [sp, #16]
 8008426:	4601      	mov	r1, r0
 8008428:	4606      	mov	r6, r0
 800842a:	4620      	mov	r0, r4
 800842c:	f000 fc74 	bl	8008d18 <__multiply>
 8008430:	9904      	ldr	r1, [sp, #16]
 8008432:	9008      	str	r0, [sp, #32]
 8008434:	4620      	mov	r0, r4
 8008436:	f000 fbc6 	bl	8008bc6 <_Bfree>
 800843a:	9b08      	ldr	r3, [sp, #32]
 800843c:	9304      	str	r3, [sp, #16]
 800843e:	9b07      	ldr	r3, [sp, #28]
 8008440:	1bda      	subs	r2, r3, r7
 8008442:	d004      	beq.n	800844e <_dtoa_r+0x76e>
 8008444:	9904      	ldr	r1, [sp, #16]
 8008446:	4620      	mov	r0, r4
 8008448:	f000 fcfc 	bl	8008e44 <__pow5mult>
 800844c:	9004      	str	r0, [sp, #16]
 800844e:	2101      	movs	r1, #1
 8008450:	4620      	mov	r0, r4
 8008452:	f000 fc58 	bl	8008d06 <__i2b>
 8008456:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008458:	4607      	mov	r7, r0
 800845a:	2b00      	cmp	r3, #0
 800845c:	f000 81d0 	beq.w	8008800 <_dtoa_r+0xb20>
 8008460:	461a      	mov	r2, r3
 8008462:	4601      	mov	r1, r0
 8008464:	4620      	mov	r0, r4
 8008466:	f000 fced 	bl	8008e44 <__pow5mult>
 800846a:	9b06      	ldr	r3, [sp, #24]
 800846c:	2b01      	cmp	r3, #1
 800846e:	4607      	mov	r7, r0
 8008470:	dc40      	bgt.n	80084f4 <_dtoa_r+0x814>
 8008472:	9b00      	ldr	r3, [sp, #0]
 8008474:	2b00      	cmp	r3, #0
 8008476:	d139      	bne.n	80084ec <_dtoa_r+0x80c>
 8008478:	9b01      	ldr	r3, [sp, #4]
 800847a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800847e:	2b00      	cmp	r3, #0
 8008480:	d136      	bne.n	80084f0 <_dtoa_r+0x810>
 8008482:	9b01      	ldr	r3, [sp, #4]
 8008484:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8008488:	0d1b      	lsrs	r3, r3, #20
 800848a:	051b      	lsls	r3, r3, #20
 800848c:	b12b      	cbz	r3, 800849a <_dtoa_r+0x7ba>
 800848e:	9b05      	ldr	r3, [sp, #20]
 8008490:	3301      	adds	r3, #1
 8008492:	9305      	str	r3, [sp, #20]
 8008494:	f108 0801 	add.w	r8, r8, #1
 8008498:	2301      	movs	r3, #1
 800849a:	9307      	str	r3, [sp, #28]
 800849c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800849e:	2b00      	cmp	r3, #0
 80084a0:	d12a      	bne.n	80084f8 <_dtoa_r+0x818>
 80084a2:	2001      	movs	r0, #1
 80084a4:	e030      	b.n	8008508 <_dtoa_r+0x828>
 80084a6:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80084a8:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80084ac:	e795      	b.n	80083da <_dtoa_r+0x6fa>
 80084ae:	9b07      	ldr	r3, [sp, #28]
 80084b0:	f109 37ff 	add.w	r7, r9, #4294967295
 80084b4:	42bb      	cmp	r3, r7
 80084b6:	bfbf      	itttt	lt
 80084b8:	9b07      	ldrlt	r3, [sp, #28]
 80084ba:	9707      	strlt	r7, [sp, #28]
 80084bc:	1afa      	sublt	r2, r7, r3
 80084be:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 80084c0:	bfbb      	ittet	lt
 80084c2:	189b      	addlt	r3, r3, r2
 80084c4:	930e      	strlt	r3, [sp, #56]	; 0x38
 80084c6:	1bdf      	subge	r7, r3, r7
 80084c8:	2700      	movlt	r7, #0
 80084ca:	f1b9 0f00 	cmp.w	r9, #0
 80084ce:	bfb5      	itete	lt
 80084d0:	9b05      	ldrlt	r3, [sp, #20]
 80084d2:	9d05      	ldrge	r5, [sp, #20]
 80084d4:	eba3 0509 	sublt.w	r5, r3, r9
 80084d8:	464b      	movge	r3, r9
 80084da:	bfb8      	it	lt
 80084dc:	2300      	movlt	r3, #0
 80084de:	e77e      	b.n	80083de <_dtoa_r+0x6fe>
 80084e0:	9f07      	ldr	r7, [sp, #28]
 80084e2:	9d05      	ldr	r5, [sp, #20]
 80084e4:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 80084e6:	e783      	b.n	80083f0 <_dtoa_r+0x710>
 80084e8:	9a07      	ldr	r2, [sp, #28]
 80084ea:	e7ab      	b.n	8008444 <_dtoa_r+0x764>
 80084ec:	2300      	movs	r3, #0
 80084ee:	e7d4      	b.n	800849a <_dtoa_r+0x7ba>
 80084f0:	9b00      	ldr	r3, [sp, #0]
 80084f2:	e7d2      	b.n	800849a <_dtoa_r+0x7ba>
 80084f4:	2300      	movs	r3, #0
 80084f6:	9307      	str	r3, [sp, #28]
 80084f8:	693b      	ldr	r3, [r7, #16]
 80084fa:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 80084fe:	6918      	ldr	r0, [r3, #16]
 8008500:	f000 fbb3 	bl	8008c6a <__hi0bits>
 8008504:	f1c0 0020 	rsb	r0, r0, #32
 8008508:	4440      	add	r0, r8
 800850a:	f010 001f 	ands.w	r0, r0, #31
 800850e:	d047      	beq.n	80085a0 <_dtoa_r+0x8c0>
 8008510:	f1c0 0320 	rsb	r3, r0, #32
 8008514:	2b04      	cmp	r3, #4
 8008516:	dd3b      	ble.n	8008590 <_dtoa_r+0x8b0>
 8008518:	9b05      	ldr	r3, [sp, #20]
 800851a:	f1c0 001c 	rsb	r0, r0, #28
 800851e:	4403      	add	r3, r0
 8008520:	9305      	str	r3, [sp, #20]
 8008522:	4405      	add	r5, r0
 8008524:	4480      	add	r8, r0
 8008526:	9b05      	ldr	r3, [sp, #20]
 8008528:	2b00      	cmp	r3, #0
 800852a:	dd05      	ble.n	8008538 <_dtoa_r+0x858>
 800852c:	461a      	mov	r2, r3
 800852e:	9904      	ldr	r1, [sp, #16]
 8008530:	4620      	mov	r0, r4
 8008532:	f000 fcd5 	bl	8008ee0 <__lshift>
 8008536:	9004      	str	r0, [sp, #16]
 8008538:	f1b8 0f00 	cmp.w	r8, #0
 800853c:	dd05      	ble.n	800854a <_dtoa_r+0x86a>
 800853e:	4639      	mov	r1, r7
 8008540:	4642      	mov	r2, r8
 8008542:	4620      	mov	r0, r4
 8008544:	f000 fccc 	bl	8008ee0 <__lshift>
 8008548:	4607      	mov	r7, r0
 800854a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800854c:	b353      	cbz	r3, 80085a4 <_dtoa_r+0x8c4>
 800854e:	4639      	mov	r1, r7
 8008550:	9804      	ldr	r0, [sp, #16]
 8008552:	f000 fd19 	bl	8008f88 <__mcmp>
 8008556:	2800      	cmp	r0, #0
 8008558:	da24      	bge.n	80085a4 <_dtoa_r+0x8c4>
 800855a:	2300      	movs	r3, #0
 800855c:	220a      	movs	r2, #10
 800855e:	9904      	ldr	r1, [sp, #16]
 8008560:	4620      	mov	r0, r4
 8008562:	f000 fb47 	bl	8008bf4 <__multadd>
 8008566:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008568:	9004      	str	r0, [sp, #16]
 800856a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800856e:	2b00      	cmp	r3, #0
 8008570:	f000 814d 	beq.w	800880e <_dtoa_r+0xb2e>
 8008574:	2300      	movs	r3, #0
 8008576:	4631      	mov	r1, r6
 8008578:	220a      	movs	r2, #10
 800857a:	4620      	mov	r0, r4
 800857c:	f000 fb3a 	bl	8008bf4 <__multadd>
 8008580:	9b02      	ldr	r3, [sp, #8]
 8008582:	2b00      	cmp	r3, #0
 8008584:	4606      	mov	r6, r0
 8008586:	dc4f      	bgt.n	8008628 <_dtoa_r+0x948>
 8008588:	9b06      	ldr	r3, [sp, #24]
 800858a:	2b02      	cmp	r3, #2
 800858c:	dd4c      	ble.n	8008628 <_dtoa_r+0x948>
 800858e:	e011      	b.n	80085b4 <_dtoa_r+0x8d4>
 8008590:	d0c9      	beq.n	8008526 <_dtoa_r+0x846>
 8008592:	9a05      	ldr	r2, [sp, #20]
 8008594:	331c      	adds	r3, #28
 8008596:	441a      	add	r2, r3
 8008598:	9205      	str	r2, [sp, #20]
 800859a:	441d      	add	r5, r3
 800859c:	4498      	add	r8, r3
 800859e:	e7c2      	b.n	8008526 <_dtoa_r+0x846>
 80085a0:	4603      	mov	r3, r0
 80085a2:	e7f6      	b.n	8008592 <_dtoa_r+0x8b2>
 80085a4:	f1b9 0f00 	cmp.w	r9, #0
 80085a8:	dc38      	bgt.n	800861c <_dtoa_r+0x93c>
 80085aa:	9b06      	ldr	r3, [sp, #24]
 80085ac:	2b02      	cmp	r3, #2
 80085ae:	dd35      	ble.n	800861c <_dtoa_r+0x93c>
 80085b0:	f8cd 9008 	str.w	r9, [sp, #8]
 80085b4:	9b02      	ldr	r3, [sp, #8]
 80085b6:	b963      	cbnz	r3, 80085d2 <_dtoa_r+0x8f2>
 80085b8:	4639      	mov	r1, r7
 80085ba:	2205      	movs	r2, #5
 80085bc:	4620      	mov	r0, r4
 80085be:	f000 fb19 	bl	8008bf4 <__multadd>
 80085c2:	4601      	mov	r1, r0
 80085c4:	4607      	mov	r7, r0
 80085c6:	9804      	ldr	r0, [sp, #16]
 80085c8:	f000 fcde 	bl	8008f88 <__mcmp>
 80085cc:	2800      	cmp	r0, #0
 80085ce:	f73f adcc 	bgt.w	800816a <_dtoa_r+0x48a>
 80085d2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80085d4:	465d      	mov	r5, fp
 80085d6:	ea6f 0a03 	mvn.w	sl, r3
 80085da:	f04f 0900 	mov.w	r9, #0
 80085de:	4639      	mov	r1, r7
 80085e0:	4620      	mov	r0, r4
 80085e2:	f000 faf0 	bl	8008bc6 <_Bfree>
 80085e6:	2e00      	cmp	r6, #0
 80085e8:	f43f aeb7 	beq.w	800835a <_dtoa_r+0x67a>
 80085ec:	f1b9 0f00 	cmp.w	r9, #0
 80085f0:	d005      	beq.n	80085fe <_dtoa_r+0x91e>
 80085f2:	45b1      	cmp	r9, r6
 80085f4:	d003      	beq.n	80085fe <_dtoa_r+0x91e>
 80085f6:	4649      	mov	r1, r9
 80085f8:	4620      	mov	r0, r4
 80085fa:	f000 fae4 	bl	8008bc6 <_Bfree>
 80085fe:	4631      	mov	r1, r6
 8008600:	4620      	mov	r0, r4
 8008602:	f000 fae0 	bl	8008bc6 <_Bfree>
 8008606:	e6a8      	b.n	800835a <_dtoa_r+0x67a>
 8008608:	2700      	movs	r7, #0
 800860a:	463e      	mov	r6, r7
 800860c:	e7e1      	b.n	80085d2 <_dtoa_r+0x8f2>
 800860e:	f8dd a020 	ldr.w	sl, [sp, #32]
 8008612:	463e      	mov	r6, r7
 8008614:	e5a9      	b.n	800816a <_dtoa_r+0x48a>
 8008616:	bf00      	nop
 8008618:	40240000 	.word	0x40240000
 800861c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800861e:	f8cd 9008 	str.w	r9, [sp, #8]
 8008622:	2b00      	cmp	r3, #0
 8008624:	f000 80fa 	beq.w	800881c <_dtoa_r+0xb3c>
 8008628:	2d00      	cmp	r5, #0
 800862a:	dd05      	ble.n	8008638 <_dtoa_r+0x958>
 800862c:	4631      	mov	r1, r6
 800862e:	462a      	mov	r2, r5
 8008630:	4620      	mov	r0, r4
 8008632:	f000 fc55 	bl	8008ee0 <__lshift>
 8008636:	4606      	mov	r6, r0
 8008638:	9b07      	ldr	r3, [sp, #28]
 800863a:	2b00      	cmp	r3, #0
 800863c:	d04c      	beq.n	80086d8 <_dtoa_r+0x9f8>
 800863e:	6871      	ldr	r1, [r6, #4]
 8008640:	4620      	mov	r0, r4
 8008642:	f000 fa8c 	bl	8008b5e <_Balloc>
 8008646:	6932      	ldr	r2, [r6, #16]
 8008648:	3202      	adds	r2, #2
 800864a:	4605      	mov	r5, r0
 800864c:	0092      	lsls	r2, r2, #2
 800864e:	f106 010c 	add.w	r1, r6, #12
 8008652:	300c      	adds	r0, #12
 8008654:	f000 fa76 	bl	8008b44 <memcpy>
 8008658:	2201      	movs	r2, #1
 800865a:	4629      	mov	r1, r5
 800865c:	4620      	mov	r0, r4
 800865e:	f000 fc3f 	bl	8008ee0 <__lshift>
 8008662:	9b00      	ldr	r3, [sp, #0]
 8008664:	f8cd b014 	str.w	fp, [sp, #20]
 8008668:	f003 0301 	and.w	r3, r3, #1
 800866c:	46b1      	mov	r9, r6
 800866e:	9307      	str	r3, [sp, #28]
 8008670:	4606      	mov	r6, r0
 8008672:	4639      	mov	r1, r7
 8008674:	9804      	ldr	r0, [sp, #16]
 8008676:	f7ff faa5 	bl	8007bc4 <quorem>
 800867a:	4649      	mov	r1, r9
 800867c:	4605      	mov	r5, r0
 800867e:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8008682:	9804      	ldr	r0, [sp, #16]
 8008684:	f000 fc80 	bl	8008f88 <__mcmp>
 8008688:	4632      	mov	r2, r6
 800868a:	9000      	str	r0, [sp, #0]
 800868c:	4639      	mov	r1, r7
 800868e:	4620      	mov	r0, r4
 8008690:	f000 fc94 	bl	8008fbc <__mdiff>
 8008694:	68c3      	ldr	r3, [r0, #12]
 8008696:	4602      	mov	r2, r0
 8008698:	bb03      	cbnz	r3, 80086dc <_dtoa_r+0x9fc>
 800869a:	4601      	mov	r1, r0
 800869c:	9008      	str	r0, [sp, #32]
 800869e:	9804      	ldr	r0, [sp, #16]
 80086a0:	f000 fc72 	bl	8008f88 <__mcmp>
 80086a4:	9a08      	ldr	r2, [sp, #32]
 80086a6:	4603      	mov	r3, r0
 80086a8:	4611      	mov	r1, r2
 80086aa:	4620      	mov	r0, r4
 80086ac:	9308      	str	r3, [sp, #32]
 80086ae:	f000 fa8a 	bl	8008bc6 <_Bfree>
 80086b2:	9b08      	ldr	r3, [sp, #32]
 80086b4:	b9a3      	cbnz	r3, 80086e0 <_dtoa_r+0xa00>
 80086b6:	9a06      	ldr	r2, [sp, #24]
 80086b8:	b992      	cbnz	r2, 80086e0 <_dtoa_r+0xa00>
 80086ba:	9a07      	ldr	r2, [sp, #28]
 80086bc:	b982      	cbnz	r2, 80086e0 <_dtoa_r+0xa00>
 80086be:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 80086c2:	d029      	beq.n	8008718 <_dtoa_r+0xa38>
 80086c4:	9b00      	ldr	r3, [sp, #0]
 80086c6:	2b00      	cmp	r3, #0
 80086c8:	dd01      	ble.n	80086ce <_dtoa_r+0x9ee>
 80086ca:	f105 0831 	add.w	r8, r5, #49	; 0x31
 80086ce:	9b05      	ldr	r3, [sp, #20]
 80086d0:	1c5d      	adds	r5, r3, #1
 80086d2:	f883 8000 	strb.w	r8, [r3]
 80086d6:	e782      	b.n	80085de <_dtoa_r+0x8fe>
 80086d8:	4630      	mov	r0, r6
 80086da:	e7c2      	b.n	8008662 <_dtoa_r+0x982>
 80086dc:	2301      	movs	r3, #1
 80086de:	e7e3      	b.n	80086a8 <_dtoa_r+0x9c8>
 80086e0:	9a00      	ldr	r2, [sp, #0]
 80086e2:	2a00      	cmp	r2, #0
 80086e4:	db04      	blt.n	80086f0 <_dtoa_r+0xa10>
 80086e6:	d125      	bne.n	8008734 <_dtoa_r+0xa54>
 80086e8:	9a06      	ldr	r2, [sp, #24]
 80086ea:	bb1a      	cbnz	r2, 8008734 <_dtoa_r+0xa54>
 80086ec:	9a07      	ldr	r2, [sp, #28]
 80086ee:	bb0a      	cbnz	r2, 8008734 <_dtoa_r+0xa54>
 80086f0:	2b00      	cmp	r3, #0
 80086f2:	ddec      	ble.n	80086ce <_dtoa_r+0x9ee>
 80086f4:	2201      	movs	r2, #1
 80086f6:	9904      	ldr	r1, [sp, #16]
 80086f8:	4620      	mov	r0, r4
 80086fa:	f000 fbf1 	bl	8008ee0 <__lshift>
 80086fe:	4639      	mov	r1, r7
 8008700:	9004      	str	r0, [sp, #16]
 8008702:	f000 fc41 	bl	8008f88 <__mcmp>
 8008706:	2800      	cmp	r0, #0
 8008708:	dc03      	bgt.n	8008712 <_dtoa_r+0xa32>
 800870a:	d1e0      	bne.n	80086ce <_dtoa_r+0x9ee>
 800870c:	f018 0f01 	tst.w	r8, #1
 8008710:	d0dd      	beq.n	80086ce <_dtoa_r+0x9ee>
 8008712:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8008716:	d1d8      	bne.n	80086ca <_dtoa_r+0x9ea>
 8008718:	9b05      	ldr	r3, [sp, #20]
 800871a:	9a05      	ldr	r2, [sp, #20]
 800871c:	1c5d      	adds	r5, r3, #1
 800871e:	2339      	movs	r3, #57	; 0x39
 8008720:	7013      	strb	r3, [r2, #0]
 8008722:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8008726:	2b39      	cmp	r3, #57	; 0x39
 8008728:	f105 32ff 	add.w	r2, r5, #4294967295
 800872c:	d04f      	beq.n	80087ce <_dtoa_r+0xaee>
 800872e:	3301      	adds	r3, #1
 8008730:	7013      	strb	r3, [r2, #0]
 8008732:	e754      	b.n	80085de <_dtoa_r+0x8fe>
 8008734:	9a05      	ldr	r2, [sp, #20]
 8008736:	2b00      	cmp	r3, #0
 8008738:	f102 0501 	add.w	r5, r2, #1
 800873c:	dd06      	ble.n	800874c <_dtoa_r+0xa6c>
 800873e:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8008742:	d0e9      	beq.n	8008718 <_dtoa_r+0xa38>
 8008744:	f108 0801 	add.w	r8, r8, #1
 8008748:	9b05      	ldr	r3, [sp, #20]
 800874a:	e7c2      	b.n	80086d2 <_dtoa_r+0x9f2>
 800874c:	9a02      	ldr	r2, [sp, #8]
 800874e:	f805 8c01 	strb.w	r8, [r5, #-1]
 8008752:	eba5 030b 	sub.w	r3, r5, fp
 8008756:	4293      	cmp	r3, r2
 8008758:	d021      	beq.n	800879e <_dtoa_r+0xabe>
 800875a:	2300      	movs	r3, #0
 800875c:	220a      	movs	r2, #10
 800875e:	9904      	ldr	r1, [sp, #16]
 8008760:	4620      	mov	r0, r4
 8008762:	f000 fa47 	bl	8008bf4 <__multadd>
 8008766:	45b1      	cmp	r9, r6
 8008768:	9004      	str	r0, [sp, #16]
 800876a:	f04f 0300 	mov.w	r3, #0
 800876e:	f04f 020a 	mov.w	r2, #10
 8008772:	4649      	mov	r1, r9
 8008774:	4620      	mov	r0, r4
 8008776:	d105      	bne.n	8008784 <_dtoa_r+0xaa4>
 8008778:	f000 fa3c 	bl	8008bf4 <__multadd>
 800877c:	4681      	mov	r9, r0
 800877e:	4606      	mov	r6, r0
 8008780:	9505      	str	r5, [sp, #20]
 8008782:	e776      	b.n	8008672 <_dtoa_r+0x992>
 8008784:	f000 fa36 	bl	8008bf4 <__multadd>
 8008788:	4631      	mov	r1, r6
 800878a:	4681      	mov	r9, r0
 800878c:	2300      	movs	r3, #0
 800878e:	220a      	movs	r2, #10
 8008790:	4620      	mov	r0, r4
 8008792:	f000 fa2f 	bl	8008bf4 <__multadd>
 8008796:	4606      	mov	r6, r0
 8008798:	e7f2      	b.n	8008780 <_dtoa_r+0xaa0>
 800879a:	f04f 0900 	mov.w	r9, #0
 800879e:	2201      	movs	r2, #1
 80087a0:	9904      	ldr	r1, [sp, #16]
 80087a2:	4620      	mov	r0, r4
 80087a4:	f000 fb9c 	bl	8008ee0 <__lshift>
 80087a8:	4639      	mov	r1, r7
 80087aa:	9004      	str	r0, [sp, #16]
 80087ac:	f000 fbec 	bl	8008f88 <__mcmp>
 80087b0:	2800      	cmp	r0, #0
 80087b2:	dcb6      	bgt.n	8008722 <_dtoa_r+0xa42>
 80087b4:	d102      	bne.n	80087bc <_dtoa_r+0xadc>
 80087b6:	f018 0f01 	tst.w	r8, #1
 80087ba:	d1b2      	bne.n	8008722 <_dtoa_r+0xa42>
 80087bc:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80087c0:	2b30      	cmp	r3, #48	; 0x30
 80087c2:	f105 32ff 	add.w	r2, r5, #4294967295
 80087c6:	f47f af0a 	bne.w	80085de <_dtoa_r+0x8fe>
 80087ca:	4615      	mov	r5, r2
 80087cc:	e7f6      	b.n	80087bc <_dtoa_r+0xadc>
 80087ce:	4593      	cmp	fp, r2
 80087d0:	d105      	bne.n	80087de <_dtoa_r+0xafe>
 80087d2:	2331      	movs	r3, #49	; 0x31
 80087d4:	f10a 0a01 	add.w	sl, sl, #1
 80087d8:	f88b 3000 	strb.w	r3, [fp]
 80087dc:	e6ff      	b.n	80085de <_dtoa_r+0x8fe>
 80087de:	4615      	mov	r5, r2
 80087e0:	e79f      	b.n	8008722 <_dtoa_r+0xa42>
 80087e2:	f8df b064 	ldr.w	fp, [pc, #100]	; 8008848 <_dtoa_r+0xb68>
 80087e6:	e007      	b.n	80087f8 <_dtoa_r+0xb18>
 80087e8:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80087ea:	f8df b060 	ldr.w	fp, [pc, #96]	; 800884c <_dtoa_r+0xb6c>
 80087ee:	b11b      	cbz	r3, 80087f8 <_dtoa_r+0xb18>
 80087f0:	f10b 0308 	add.w	r3, fp, #8
 80087f4:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80087f6:	6013      	str	r3, [r2, #0]
 80087f8:	4658      	mov	r0, fp
 80087fa:	b017      	add	sp, #92	; 0x5c
 80087fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008800:	9b06      	ldr	r3, [sp, #24]
 8008802:	2b01      	cmp	r3, #1
 8008804:	f77f ae35 	ble.w	8008472 <_dtoa_r+0x792>
 8008808:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800880a:	9307      	str	r3, [sp, #28]
 800880c:	e649      	b.n	80084a2 <_dtoa_r+0x7c2>
 800880e:	9b02      	ldr	r3, [sp, #8]
 8008810:	2b00      	cmp	r3, #0
 8008812:	dc03      	bgt.n	800881c <_dtoa_r+0xb3c>
 8008814:	9b06      	ldr	r3, [sp, #24]
 8008816:	2b02      	cmp	r3, #2
 8008818:	f73f aecc 	bgt.w	80085b4 <_dtoa_r+0x8d4>
 800881c:	465d      	mov	r5, fp
 800881e:	4639      	mov	r1, r7
 8008820:	9804      	ldr	r0, [sp, #16]
 8008822:	f7ff f9cf 	bl	8007bc4 <quorem>
 8008826:	f100 0830 	add.w	r8, r0, #48	; 0x30
 800882a:	f805 8b01 	strb.w	r8, [r5], #1
 800882e:	9a02      	ldr	r2, [sp, #8]
 8008830:	eba5 030b 	sub.w	r3, r5, fp
 8008834:	429a      	cmp	r2, r3
 8008836:	ddb0      	ble.n	800879a <_dtoa_r+0xaba>
 8008838:	2300      	movs	r3, #0
 800883a:	220a      	movs	r2, #10
 800883c:	9904      	ldr	r1, [sp, #16]
 800883e:	4620      	mov	r0, r4
 8008840:	f000 f9d8 	bl	8008bf4 <__multadd>
 8008844:	9004      	str	r0, [sp, #16]
 8008846:	e7ea      	b.n	800881e <_dtoa_r+0xb3e>
 8008848:	0800a3d0 	.word	0x0800a3d0
 800884c:	0800a3f4 	.word	0x0800a3f4

08008850 <__sflush_r>:
 8008850:	898a      	ldrh	r2, [r1, #12]
 8008852:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008856:	4605      	mov	r5, r0
 8008858:	0710      	lsls	r0, r2, #28
 800885a:	460c      	mov	r4, r1
 800885c:	d458      	bmi.n	8008910 <__sflush_r+0xc0>
 800885e:	684b      	ldr	r3, [r1, #4]
 8008860:	2b00      	cmp	r3, #0
 8008862:	dc05      	bgt.n	8008870 <__sflush_r+0x20>
 8008864:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8008866:	2b00      	cmp	r3, #0
 8008868:	dc02      	bgt.n	8008870 <__sflush_r+0x20>
 800886a:	2000      	movs	r0, #0
 800886c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008870:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008872:	2e00      	cmp	r6, #0
 8008874:	d0f9      	beq.n	800886a <__sflush_r+0x1a>
 8008876:	2300      	movs	r3, #0
 8008878:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800887c:	682f      	ldr	r7, [r5, #0]
 800887e:	6a21      	ldr	r1, [r4, #32]
 8008880:	602b      	str	r3, [r5, #0]
 8008882:	d032      	beq.n	80088ea <__sflush_r+0x9a>
 8008884:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8008886:	89a3      	ldrh	r3, [r4, #12]
 8008888:	075a      	lsls	r2, r3, #29
 800888a:	d505      	bpl.n	8008898 <__sflush_r+0x48>
 800888c:	6863      	ldr	r3, [r4, #4]
 800888e:	1ac0      	subs	r0, r0, r3
 8008890:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8008892:	b10b      	cbz	r3, 8008898 <__sflush_r+0x48>
 8008894:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8008896:	1ac0      	subs	r0, r0, r3
 8008898:	2300      	movs	r3, #0
 800889a:	4602      	mov	r2, r0
 800889c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800889e:	6a21      	ldr	r1, [r4, #32]
 80088a0:	4628      	mov	r0, r5
 80088a2:	47b0      	blx	r6
 80088a4:	1c43      	adds	r3, r0, #1
 80088a6:	89a3      	ldrh	r3, [r4, #12]
 80088a8:	d106      	bne.n	80088b8 <__sflush_r+0x68>
 80088aa:	6829      	ldr	r1, [r5, #0]
 80088ac:	291d      	cmp	r1, #29
 80088ae:	d848      	bhi.n	8008942 <__sflush_r+0xf2>
 80088b0:	4a29      	ldr	r2, [pc, #164]	; (8008958 <__sflush_r+0x108>)
 80088b2:	40ca      	lsrs	r2, r1
 80088b4:	07d6      	lsls	r6, r2, #31
 80088b6:	d544      	bpl.n	8008942 <__sflush_r+0xf2>
 80088b8:	2200      	movs	r2, #0
 80088ba:	6062      	str	r2, [r4, #4]
 80088bc:	04d9      	lsls	r1, r3, #19
 80088be:	6922      	ldr	r2, [r4, #16]
 80088c0:	6022      	str	r2, [r4, #0]
 80088c2:	d504      	bpl.n	80088ce <__sflush_r+0x7e>
 80088c4:	1c42      	adds	r2, r0, #1
 80088c6:	d101      	bne.n	80088cc <__sflush_r+0x7c>
 80088c8:	682b      	ldr	r3, [r5, #0]
 80088ca:	b903      	cbnz	r3, 80088ce <__sflush_r+0x7e>
 80088cc:	6560      	str	r0, [r4, #84]	; 0x54
 80088ce:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80088d0:	602f      	str	r7, [r5, #0]
 80088d2:	2900      	cmp	r1, #0
 80088d4:	d0c9      	beq.n	800886a <__sflush_r+0x1a>
 80088d6:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80088da:	4299      	cmp	r1, r3
 80088dc:	d002      	beq.n	80088e4 <__sflush_r+0x94>
 80088de:	4628      	mov	r0, r5
 80088e0:	f000 fc26 	bl	8009130 <_free_r>
 80088e4:	2000      	movs	r0, #0
 80088e6:	6360      	str	r0, [r4, #52]	; 0x34
 80088e8:	e7c0      	b.n	800886c <__sflush_r+0x1c>
 80088ea:	2301      	movs	r3, #1
 80088ec:	4628      	mov	r0, r5
 80088ee:	47b0      	blx	r6
 80088f0:	1c41      	adds	r1, r0, #1
 80088f2:	d1c8      	bne.n	8008886 <__sflush_r+0x36>
 80088f4:	682b      	ldr	r3, [r5, #0]
 80088f6:	2b00      	cmp	r3, #0
 80088f8:	d0c5      	beq.n	8008886 <__sflush_r+0x36>
 80088fa:	2b1d      	cmp	r3, #29
 80088fc:	d001      	beq.n	8008902 <__sflush_r+0xb2>
 80088fe:	2b16      	cmp	r3, #22
 8008900:	d101      	bne.n	8008906 <__sflush_r+0xb6>
 8008902:	602f      	str	r7, [r5, #0]
 8008904:	e7b1      	b.n	800886a <__sflush_r+0x1a>
 8008906:	89a3      	ldrh	r3, [r4, #12]
 8008908:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800890c:	81a3      	strh	r3, [r4, #12]
 800890e:	e7ad      	b.n	800886c <__sflush_r+0x1c>
 8008910:	690f      	ldr	r7, [r1, #16]
 8008912:	2f00      	cmp	r7, #0
 8008914:	d0a9      	beq.n	800886a <__sflush_r+0x1a>
 8008916:	0793      	lsls	r3, r2, #30
 8008918:	680e      	ldr	r6, [r1, #0]
 800891a:	bf08      	it	eq
 800891c:	694b      	ldreq	r3, [r1, #20]
 800891e:	600f      	str	r7, [r1, #0]
 8008920:	bf18      	it	ne
 8008922:	2300      	movne	r3, #0
 8008924:	eba6 0807 	sub.w	r8, r6, r7
 8008928:	608b      	str	r3, [r1, #8]
 800892a:	f1b8 0f00 	cmp.w	r8, #0
 800892e:	dd9c      	ble.n	800886a <__sflush_r+0x1a>
 8008930:	4643      	mov	r3, r8
 8008932:	463a      	mov	r2, r7
 8008934:	6a21      	ldr	r1, [r4, #32]
 8008936:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8008938:	4628      	mov	r0, r5
 800893a:	47b0      	blx	r6
 800893c:	2800      	cmp	r0, #0
 800893e:	dc06      	bgt.n	800894e <__sflush_r+0xfe>
 8008940:	89a3      	ldrh	r3, [r4, #12]
 8008942:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008946:	81a3      	strh	r3, [r4, #12]
 8008948:	f04f 30ff 	mov.w	r0, #4294967295
 800894c:	e78e      	b.n	800886c <__sflush_r+0x1c>
 800894e:	4407      	add	r7, r0
 8008950:	eba8 0800 	sub.w	r8, r8, r0
 8008954:	e7e9      	b.n	800892a <__sflush_r+0xda>
 8008956:	bf00      	nop
 8008958:	20400001 	.word	0x20400001

0800895c <_fflush_r>:
 800895c:	b538      	push	{r3, r4, r5, lr}
 800895e:	690b      	ldr	r3, [r1, #16]
 8008960:	4605      	mov	r5, r0
 8008962:	460c      	mov	r4, r1
 8008964:	b1db      	cbz	r3, 800899e <_fflush_r+0x42>
 8008966:	b118      	cbz	r0, 8008970 <_fflush_r+0x14>
 8008968:	6983      	ldr	r3, [r0, #24]
 800896a:	b90b      	cbnz	r3, 8008970 <_fflush_r+0x14>
 800896c:	f7fe f9ca 	bl	8006d04 <__sinit>
 8008970:	4b0c      	ldr	r3, [pc, #48]	; (80089a4 <_fflush_r+0x48>)
 8008972:	429c      	cmp	r4, r3
 8008974:	d109      	bne.n	800898a <_fflush_r+0x2e>
 8008976:	686c      	ldr	r4, [r5, #4]
 8008978:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800897c:	b17b      	cbz	r3, 800899e <_fflush_r+0x42>
 800897e:	4621      	mov	r1, r4
 8008980:	4628      	mov	r0, r5
 8008982:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008986:	f7ff bf63 	b.w	8008850 <__sflush_r>
 800898a:	4b07      	ldr	r3, [pc, #28]	; (80089a8 <_fflush_r+0x4c>)
 800898c:	429c      	cmp	r4, r3
 800898e:	d101      	bne.n	8008994 <_fflush_r+0x38>
 8008990:	68ac      	ldr	r4, [r5, #8]
 8008992:	e7f1      	b.n	8008978 <_fflush_r+0x1c>
 8008994:	4b05      	ldr	r3, [pc, #20]	; (80089ac <_fflush_r+0x50>)
 8008996:	429c      	cmp	r4, r3
 8008998:	bf08      	it	eq
 800899a:	68ec      	ldreq	r4, [r5, #12]
 800899c:	e7ec      	b.n	8008978 <_fflush_r+0x1c>
 800899e:	2000      	movs	r0, #0
 80089a0:	bd38      	pop	{r3, r4, r5, pc}
 80089a2:	bf00      	nop
 80089a4:	0800a37c 	.word	0x0800a37c
 80089a8:	0800a39c 	.word	0x0800a39c
 80089ac:	0800a35c 	.word	0x0800a35c

080089b0 <fflush>:
 80089b0:	4601      	mov	r1, r0
 80089b2:	b920      	cbnz	r0, 80089be <fflush+0xe>
 80089b4:	4b04      	ldr	r3, [pc, #16]	; (80089c8 <fflush+0x18>)
 80089b6:	4905      	ldr	r1, [pc, #20]	; (80089cc <fflush+0x1c>)
 80089b8:	6818      	ldr	r0, [r3, #0]
 80089ba:	f7fe ba2b 	b.w	8006e14 <_fwalk_reent>
 80089be:	4b04      	ldr	r3, [pc, #16]	; (80089d0 <fflush+0x20>)
 80089c0:	6818      	ldr	r0, [r3, #0]
 80089c2:	f7ff bfcb 	b.w	800895c <_fflush_r>
 80089c6:	bf00      	nop
 80089c8:	0800a3bc 	.word	0x0800a3bc
 80089cc:	0800895d 	.word	0x0800895d
 80089d0:	20000014 	.word	0x20000014

080089d4 <_getc_r>:
 80089d4:	b538      	push	{r3, r4, r5, lr}
 80089d6:	460c      	mov	r4, r1
 80089d8:	4605      	mov	r5, r0
 80089da:	b118      	cbz	r0, 80089e4 <_getc_r+0x10>
 80089dc:	6983      	ldr	r3, [r0, #24]
 80089de:	b90b      	cbnz	r3, 80089e4 <_getc_r+0x10>
 80089e0:	f7fe f990 	bl	8006d04 <__sinit>
 80089e4:	4b0e      	ldr	r3, [pc, #56]	; (8008a20 <_getc_r+0x4c>)
 80089e6:	429c      	cmp	r4, r3
 80089e8:	d10b      	bne.n	8008a02 <_getc_r+0x2e>
 80089ea:	686c      	ldr	r4, [r5, #4]
 80089ec:	6863      	ldr	r3, [r4, #4]
 80089ee:	3b01      	subs	r3, #1
 80089f0:	2b00      	cmp	r3, #0
 80089f2:	6063      	str	r3, [r4, #4]
 80089f4:	da0f      	bge.n	8008a16 <_getc_r+0x42>
 80089f6:	4621      	mov	r1, r4
 80089f8:	4628      	mov	r0, r5
 80089fa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80089fe:	f000 bd6d 	b.w	80094dc <__srget_r>
 8008a02:	4b08      	ldr	r3, [pc, #32]	; (8008a24 <_getc_r+0x50>)
 8008a04:	429c      	cmp	r4, r3
 8008a06:	d101      	bne.n	8008a0c <_getc_r+0x38>
 8008a08:	68ac      	ldr	r4, [r5, #8]
 8008a0a:	e7ef      	b.n	80089ec <_getc_r+0x18>
 8008a0c:	4b06      	ldr	r3, [pc, #24]	; (8008a28 <_getc_r+0x54>)
 8008a0e:	429c      	cmp	r4, r3
 8008a10:	bf08      	it	eq
 8008a12:	68ec      	ldreq	r4, [r5, #12]
 8008a14:	e7ea      	b.n	80089ec <_getc_r+0x18>
 8008a16:	6823      	ldr	r3, [r4, #0]
 8008a18:	1c5a      	adds	r2, r3, #1
 8008a1a:	6022      	str	r2, [r4, #0]
 8008a1c:	7818      	ldrb	r0, [r3, #0]
 8008a1e:	bd38      	pop	{r3, r4, r5, pc}
 8008a20:	0800a37c 	.word	0x0800a37c
 8008a24:	0800a39c 	.word	0x0800a39c
 8008a28:	0800a35c 	.word	0x0800a35c

08008a2c <_localeconv_r>:
 8008a2c:	4b04      	ldr	r3, [pc, #16]	; (8008a40 <_localeconv_r+0x14>)
 8008a2e:	681b      	ldr	r3, [r3, #0]
 8008a30:	6a18      	ldr	r0, [r3, #32]
 8008a32:	4b04      	ldr	r3, [pc, #16]	; (8008a44 <_localeconv_r+0x18>)
 8008a34:	2800      	cmp	r0, #0
 8008a36:	bf08      	it	eq
 8008a38:	4618      	moveq	r0, r3
 8008a3a:	30f0      	adds	r0, #240	; 0xf0
 8008a3c:	4770      	bx	lr
 8008a3e:	bf00      	nop
 8008a40:	20000014 	.word	0x20000014
 8008a44:	20000078 	.word	0x20000078

08008a48 <_lseek_r>:
 8008a48:	b538      	push	{r3, r4, r5, lr}
 8008a4a:	4c07      	ldr	r4, [pc, #28]	; (8008a68 <_lseek_r+0x20>)
 8008a4c:	4605      	mov	r5, r0
 8008a4e:	4608      	mov	r0, r1
 8008a50:	4611      	mov	r1, r2
 8008a52:	2200      	movs	r2, #0
 8008a54:	6022      	str	r2, [r4, #0]
 8008a56:	461a      	mov	r2, r3
 8008a58:	f7fa f943 	bl	8002ce2 <_lseek>
 8008a5c:	1c43      	adds	r3, r0, #1
 8008a5e:	d102      	bne.n	8008a66 <_lseek_r+0x1e>
 8008a60:	6823      	ldr	r3, [r4, #0]
 8008a62:	b103      	cbz	r3, 8008a66 <_lseek_r+0x1e>
 8008a64:	602b      	str	r3, [r5, #0]
 8008a66:	bd38      	pop	{r3, r4, r5, pc}
 8008a68:	200009d8 	.word	0x200009d8

08008a6c <__swhatbuf_r>:
 8008a6c:	b570      	push	{r4, r5, r6, lr}
 8008a6e:	460e      	mov	r6, r1
 8008a70:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008a74:	2900      	cmp	r1, #0
 8008a76:	b096      	sub	sp, #88	; 0x58
 8008a78:	4614      	mov	r4, r2
 8008a7a:	461d      	mov	r5, r3
 8008a7c:	da07      	bge.n	8008a8e <__swhatbuf_r+0x22>
 8008a7e:	2300      	movs	r3, #0
 8008a80:	602b      	str	r3, [r5, #0]
 8008a82:	89b3      	ldrh	r3, [r6, #12]
 8008a84:	061a      	lsls	r2, r3, #24
 8008a86:	d410      	bmi.n	8008aaa <__swhatbuf_r+0x3e>
 8008a88:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008a8c:	e00e      	b.n	8008aac <__swhatbuf_r+0x40>
 8008a8e:	466a      	mov	r2, sp
 8008a90:	f000 fd50 	bl	8009534 <_fstat_r>
 8008a94:	2800      	cmp	r0, #0
 8008a96:	dbf2      	blt.n	8008a7e <__swhatbuf_r+0x12>
 8008a98:	9a01      	ldr	r2, [sp, #4]
 8008a9a:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8008a9e:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8008aa2:	425a      	negs	r2, r3
 8008aa4:	415a      	adcs	r2, r3
 8008aa6:	602a      	str	r2, [r5, #0]
 8008aa8:	e7ee      	b.n	8008a88 <__swhatbuf_r+0x1c>
 8008aaa:	2340      	movs	r3, #64	; 0x40
 8008aac:	2000      	movs	r0, #0
 8008aae:	6023      	str	r3, [r4, #0]
 8008ab0:	b016      	add	sp, #88	; 0x58
 8008ab2:	bd70      	pop	{r4, r5, r6, pc}

08008ab4 <__smakebuf_r>:
 8008ab4:	898b      	ldrh	r3, [r1, #12]
 8008ab6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8008ab8:	079d      	lsls	r5, r3, #30
 8008aba:	4606      	mov	r6, r0
 8008abc:	460c      	mov	r4, r1
 8008abe:	d507      	bpl.n	8008ad0 <__smakebuf_r+0x1c>
 8008ac0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8008ac4:	6023      	str	r3, [r4, #0]
 8008ac6:	6123      	str	r3, [r4, #16]
 8008ac8:	2301      	movs	r3, #1
 8008aca:	6163      	str	r3, [r4, #20]
 8008acc:	b002      	add	sp, #8
 8008ace:	bd70      	pop	{r4, r5, r6, pc}
 8008ad0:	ab01      	add	r3, sp, #4
 8008ad2:	466a      	mov	r2, sp
 8008ad4:	f7ff ffca 	bl	8008a6c <__swhatbuf_r>
 8008ad8:	9900      	ldr	r1, [sp, #0]
 8008ada:	4605      	mov	r5, r0
 8008adc:	4630      	mov	r0, r6
 8008ade:	f7fe f9f5 	bl	8006ecc <_malloc_r>
 8008ae2:	b948      	cbnz	r0, 8008af8 <__smakebuf_r+0x44>
 8008ae4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008ae8:	059a      	lsls	r2, r3, #22
 8008aea:	d4ef      	bmi.n	8008acc <__smakebuf_r+0x18>
 8008aec:	f023 0303 	bic.w	r3, r3, #3
 8008af0:	f043 0302 	orr.w	r3, r3, #2
 8008af4:	81a3      	strh	r3, [r4, #12]
 8008af6:	e7e3      	b.n	8008ac0 <__smakebuf_r+0xc>
 8008af8:	4b0d      	ldr	r3, [pc, #52]	; (8008b30 <__smakebuf_r+0x7c>)
 8008afa:	62b3      	str	r3, [r6, #40]	; 0x28
 8008afc:	89a3      	ldrh	r3, [r4, #12]
 8008afe:	6020      	str	r0, [r4, #0]
 8008b00:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008b04:	81a3      	strh	r3, [r4, #12]
 8008b06:	9b00      	ldr	r3, [sp, #0]
 8008b08:	6163      	str	r3, [r4, #20]
 8008b0a:	9b01      	ldr	r3, [sp, #4]
 8008b0c:	6120      	str	r0, [r4, #16]
 8008b0e:	b15b      	cbz	r3, 8008b28 <__smakebuf_r+0x74>
 8008b10:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008b14:	4630      	mov	r0, r6
 8008b16:	f000 fd1f 	bl	8009558 <_isatty_r>
 8008b1a:	b128      	cbz	r0, 8008b28 <__smakebuf_r+0x74>
 8008b1c:	89a3      	ldrh	r3, [r4, #12]
 8008b1e:	f023 0303 	bic.w	r3, r3, #3
 8008b22:	f043 0301 	orr.w	r3, r3, #1
 8008b26:	81a3      	strh	r3, [r4, #12]
 8008b28:	89a3      	ldrh	r3, [r4, #12]
 8008b2a:	431d      	orrs	r5, r3
 8008b2c:	81a5      	strh	r5, [r4, #12]
 8008b2e:	e7cd      	b.n	8008acc <__smakebuf_r+0x18>
 8008b30:	08006ccd 	.word	0x08006ccd

08008b34 <malloc>:
 8008b34:	4b02      	ldr	r3, [pc, #8]	; (8008b40 <malloc+0xc>)
 8008b36:	4601      	mov	r1, r0
 8008b38:	6818      	ldr	r0, [r3, #0]
 8008b3a:	f7fe b9c7 	b.w	8006ecc <_malloc_r>
 8008b3e:	bf00      	nop
 8008b40:	20000014 	.word	0x20000014

08008b44 <memcpy>:
 8008b44:	b510      	push	{r4, lr}
 8008b46:	1e43      	subs	r3, r0, #1
 8008b48:	440a      	add	r2, r1
 8008b4a:	4291      	cmp	r1, r2
 8008b4c:	d100      	bne.n	8008b50 <memcpy+0xc>
 8008b4e:	bd10      	pop	{r4, pc}
 8008b50:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008b54:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008b58:	e7f7      	b.n	8008b4a <memcpy+0x6>

08008b5a <__malloc_lock>:
 8008b5a:	4770      	bx	lr

08008b5c <__malloc_unlock>:
 8008b5c:	4770      	bx	lr

08008b5e <_Balloc>:
 8008b5e:	b570      	push	{r4, r5, r6, lr}
 8008b60:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8008b62:	4604      	mov	r4, r0
 8008b64:	460e      	mov	r6, r1
 8008b66:	b93d      	cbnz	r5, 8008b78 <_Balloc+0x1a>
 8008b68:	2010      	movs	r0, #16
 8008b6a:	f7ff ffe3 	bl	8008b34 <malloc>
 8008b6e:	6260      	str	r0, [r4, #36]	; 0x24
 8008b70:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8008b74:	6005      	str	r5, [r0, #0]
 8008b76:	60c5      	str	r5, [r0, #12]
 8008b78:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8008b7a:	68eb      	ldr	r3, [r5, #12]
 8008b7c:	b183      	cbz	r3, 8008ba0 <_Balloc+0x42>
 8008b7e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008b80:	68db      	ldr	r3, [r3, #12]
 8008b82:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8008b86:	b9b8      	cbnz	r0, 8008bb8 <_Balloc+0x5a>
 8008b88:	2101      	movs	r1, #1
 8008b8a:	fa01 f506 	lsl.w	r5, r1, r6
 8008b8e:	1d6a      	adds	r2, r5, #5
 8008b90:	0092      	lsls	r2, r2, #2
 8008b92:	4620      	mov	r0, r4
 8008b94:	f000 fabe 	bl	8009114 <_calloc_r>
 8008b98:	b160      	cbz	r0, 8008bb4 <_Balloc+0x56>
 8008b9a:	e9c0 6501 	strd	r6, r5, [r0, #4]
 8008b9e:	e00e      	b.n	8008bbe <_Balloc+0x60>
 8008ba0:	2221      	movs	r2, #33	; 0x21
 8008ba2:	2104      	movs	r1, #4
 8008ba4:	4620      	mov	r0, r4
 8008ba6:	f000 fab5 	bl	8009114 <_calloc_r>
 8008baa:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008bac:	60e8      	str	r0, [r5, #12]
 8008bae:	68db      	ldr	r3, [r3, #12]
 8008bb0:	2b00      	cmp	r3, #0
 8008bb2:	d1e4      	bne.n	8008b7e <_Balloc+0x20>
 8008bb4:	2000      	movs	r0, #0
 8008bb6:	bd70      	pop	{r4, r5, r6, pc}
 8008bb8:	6802      	ldr	r2, [r0, #0]
 8008bba:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 8008bbe:	2300      	movs	r3, #0
 8008bc0:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8008bc4:	e7f7      	b.n	8008bb6 <_Balloc+0x58>

08008bc6 <_Bfree>:
 8008bc6:	b570      	push	{r4, r5, r6, lr}
 8008bc8:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8008bca:	4606      	mov	r6, r0
 8008bcc:	460d      	mov	r5, r1
 8008bce:	b93c      	cbnz	r4, 8008be0 <_Bfree+0x1a>
 8008bd0:	2010      	movs	r0, #16
 8008bd2:	f7ff ffaf 	bl	8008b34 <malloc>
 8008bd6:	6270      	str	r0, [r6, #36]	; 0x24
 8008bd8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8008bdc:	6004      	str	r4, [r0, #0]
 8008bde:	60c4      	str	r4, [r0, #12]
 8008be0:	b13d      	cbz	r5, 8008bf2 <_Bfree+0x2c>
 8008be2:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8008be4:	686a      	ldr	r2, [r5, #4]
 8008be6:	68db      	ldr	r3, [r3, #12]
 8008be8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8008bec:	6029      	str	r1, [r5, #0]
 8008bee:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 8008bf2:	bd70      	pop	{r4, r5, r6, pc}

08008bf4 <__multadd>:
 8008bf4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008bf8:	690d      	ldr	r5, [r1, #16]
 8008bfa:	461f      	mov	r7, r3
 8008bfc:	4606      	mov	r6, r0
 8008bfe:	460c      	mov	r4, r1
 8008c00:	f101 0c14 	add.w	ip, r1, #20
 8008c04:	2300      	movs	r3, #0
 8008c06:	f8dc 0000 	ldr.w	r0, [ip]
 8008c0a:	b281      	uxth	r1, r0
 8008c0c:	fb02 7101 	mla	r1, r2, r1, r7
 8008c10:	0c0f      	lsrs	r7, r1, #16
 8008c12:	0c00      	lsrs	r0, r0, #16
 8008c14:	fb02 7000 	mla	r0, r2, r0, r7
 8008c18:	b289      	uxth	r1, r1
 8008c1a:	3301      	adds	r3, #1
 8008c1c:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 8008c20:	429d      	cmp	r5, r3
 8008c22:	ea4f 4710 	mov.w	r7, r0, lsr #16
 8008c26:	f84c 1b04 	str.w	r1, [ip], #4
 8008c2a:	dcec      	bgt.n	8008c06 <__multadd+0x12>
 8008c2c:	b1d7      	cbz	r7, 8008c64 <__multadd+0x70>
 8008c2e:	68a3      	ldr	r3, [r4, #8]
 8008c30:	42ab      	cmp	r3, r5
 8008c32:	dc12      	bgt.n	8008c5a <__multadd+0x66>
 8008c34:	6861      	ldr	r1, [r4, #4]
 8008c36:	4630      	mov	r0, r6
 8008c38:	3101      	adds	r1, #1
 8008c3a:	f7ff ff90 	bl	8008b5e <_Balloc>
 8008c3e:	6922      	ldr	r2, [r4, #16]
 8008c40:	3202      	adds	r2, #2
 8008c42:	f104 010c 	add.w	r1, r4, #12
 8008c46:	4680      	mov	r8, r0
 8008c48:	0092      	lsls	r2, r2, #2
 8008c4a:	300c      	adds	r0, #12
 8008c4c:	f7ff ff7a 	bl	8008b44 <memcpy>
 8008c50:	4621      	mov	r1, r4
 8008c52:	4630      	mov	r0, r6
 8008c54:	f7ff ffb7 	bl	8008bc6 <_Bfree>
 8008c58:	4644      	mov	r4, r8
 8008c5a:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8008c5e:	3501      	adds	r5, #1
 8008c60:	615f      	str	r7, [r3, #20]
 8008c62:	6125      	str	r5, [r4, #16]
 8008c64:	4620      	mov	r0, r4
 8008c66:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08008c6a <__hi0bits>:
 8008c6a:	0c02      	lsrs	r2, r0, #16
 8008c6c:	0412      	lsls	r2, r2, #16
 8008c6e:	4603      	mov	r3, r0
 8008c70:	b9b2      	cbnz	r2, 8008ca0 <__hi0bits+0x36>
 8008c72:	0403      	lsls	r3, r0, #16
 8008c74:	2010      	movs	r0, #16
 8008c76:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8008c7a:	bf04      	itt	eq
 8008c7c:	021b      	lsleq	r3, r3, #8
 8008c7e:	3008      	addeq	r0, #8
 8008c80:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8008c84:	bf04      	itt	eq
 8008c86:	011b      	lsleq	r3, r3, #4
 8008c88:	3004      	addeq	r0, #4
 8008c8a:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8008c8e:	bf04      	itt	eq
 8008c90:	009b      	lsleq	r3, r3, #2
 8008c92:	3002      	addeq	r0, #2
 8008c94:	2b00      	cmp	r3, #0
 8008c96:	db06      	blt.n	8008ca6 <__hi0bits+0x3c>
 8008c98:	005b      	lsls	r3, r3, #1
 8008c9a:	d503      	bpl.n	8008ca4 <__hi0bits+0x3a>
 8008c9c:	3001      	adds	r0, #1
 8008c9e:	4770      	bx	lr
 8008ca0:	2000      	movs	r0, #0
 8008ca2:	e7e8      	b.n	8008c76 <__hi0bits+0xc>
 8008ca4:	2020      	movs	r0, #32
 8008ca6:	4770      	bx	lr

08008ca8 <__lo0bits>:
 8008ca8:	6803      	ldr	r3, [r0, #0]
 8008caa:	f013 0207 	ands.w	r2, r3, #7
 8008cae:	4601      	mov	r1, r0
 8008cb0:	d00b      	beq.n	8008cca <__lo0bits+0x22>
 8008cb2:	07da      	lsls	r2, r3, #31
 8008cb4:	d423      	bmi.n	8008cfe <__lo0bits+0x56>
 8008cb6:	0798      	lsls	r0, r3, #30
 8008cb8:	bf49      	itett	mi
 8008cba:	085b      	lsrmi	r3, r3, #1
 8008cbc:	089b      	lsrpl	r3, r3, #2
 8008cbe:	2001      	movmi	r0, #1
 8008cc0:	600b      	strmi	r3, [r1, #0]
 8008cc2:	bf5c      	itt	pl
 8008cc4:	600b      	strpl	r3, [r1, #0]
 8008cc6:	2002      	movpl	r0, #2
 8008cc8:	4770      	bx	lr
 8008cca:	b298      	uxth	r0, r3
 8008ccc:	b9a8      	cbnz	r0, 8008cfa <__lo0bits+0x52>
 8008cce:	0c1b      	lsrs	r3, r3, #16
 8008cd0:	2010      	movs	r0, #16
 8008cd2:	f013 0fff 	tst.w	r3, #255	; 0xff
 8008cd6:	bf04      	itt	eq
 8008cd8:	0a1b      	lsreq	r3, r3, #8
 8008cda:	3008      	addeq	r0, #8
 8008cdc:	071a      	lsls	r2, r3, #28
 8008cde:	bf04      	itt	eq
 8008ce0:	091b      	lsreq	r3, r3, #4
 8008ce2:	3004      	addeq	r0, #4
 8008ce4:	079a      	lsls	r2, r3, #30
 8008ce6:	bf04      	itt	eq
 8008ce8:	089b      	lsreq	r3, r3, #2
 8008cea:	3002      	addeq	r0, #2
 8008cec:	07da      	lsls	r2, r3, #31
 8008cee:	d402      	bmi.n	8008cf6 <__lo0bits+0x4e>
 8008cf0:	085b      	lsrs	r3, r3, #1
 8008cf2:	d006      	beq.n	8008d02 <__lo0bits+0x5a>
 8008cf4:	3001      	adds	r0, #1
 8008cf6:	600b      	str	r3, [r1, #0]
 8008cf8:	4770      	bx	lr
 8008cfa:	4610      	mov	r0, r2
 8008cfc:	e7e9      	b.n	8008cd2 <__lo0bits+0x2a>
 8008cfe:	2000      	movs	r0, #0
 8008d00:	4770      	bx	lr
 8008d02:	2020      	movs	r0, #32
 8008d04:	4770      	bx	lr

08008d06 <__i2b>:
 8008d06:	b510      	push	{r4, lr}
 8008d08:	460c      	mov	r4, r1
 8008d0a:	2101      	movs	r1, #1
 8008d0c:	f7ff ff27 	bl	8008b5e <_Balloc>
 8008d10:	2201      	movs	r2, #1
 8008d12:	6144      	str	r4, [r0, #20]
 8008d14:	6102      	str	r2, [r0, #16]
 8008d16:	bd10      	pop	{r4, pc}

08008d18 <__multiply>:
 8008d18:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008d1c:	4614      	mov	r4, r2
 8008d1e:	690a      	ldr	r2, [r1, #16]
 8008d20:	6923      	ldr	r3, [r4, #16]
 8008d22:	429a      	cmp	r2, r3
 8008d24:	bfb8      	it	lt
 8008d26:	460b      	movlt	r3, r1
 8008d28:	4688      	mov	r8, r1
 8008d2a:	bfbc      	itt	lt
 8008d2c:	46a0      	movlt	r8, r4
 8008d2e:	461c      	movlt	r4, r3
 8008d30:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8008d34:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8008d38:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8008d3c:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8008d40:	eb07 0609 	add.w	r6, r7, r9
 8008d44:	42b3      	cmp	r3, r6
 8008d46:	bfb8      	it	lt
 8008d48:	3101      	addlt	r1, #1
 8008d4a:	f7ff ff08 	bl	8008b5e <_Balloc>
 8008d4e:	f100 0514 	add.w	r5, r0, #20
 8008d52:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 8008d56:	462b      	mov	r3, r5
 8008d58:	2200      	movs	r2, #0
 8008d5a:	4573      	cmp	r3, lr
 8008d5c:	d316      	bcc.n	8008d8c <__multiply+0x74>
 8008d5e:	f104 0214 	add.w	r2, r4, #20
 8008d62:	f108 0114 	add.w	r1, r8, #20
 8008d66:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 8008d6a:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 8008d6e:	9300      	str	r3, [sp, #0]
 8008d70:	9b00      	ldr	r3, [sp, #0]
 8008d72:	9201      	str	r2, [sp, #4]
 8008d74:	4293      	cmp	r3, r2
 8008d76:	d80c      	bhi.n	8008d92 <__multiply+0x7a>
 8008d78:	2e00      	cmp	r6, #0
 8008d7a:	dd03      	ble.n	8008d84 <__multiply+0x6c>
 8008d7c:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 8008d80:	2b00      	cmp	r3, #0
 8008d82:	d05d      	beq.n	8008e40 <__multiply+0x128>
 8008d84:	6106      	str	r6, [r0, #16]
 8008d86:	b003      	add	sp, #12
 8008d88:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008d8c:	f843 2b04 	str.w	r2, [r3], #4
 8008d90:	e7e3      	b.n	8008d5a <__multiply+0x42>
 8008d92:	f8b2 b000 	ldrh.w	fp, [r2]
 8008d96:	f1bb 0f00 	cmp.w	fp, #0
 8008d9a:	d023      	beq.n	8008de4 <__multiply+0xcc>
 8008d9c:	4689      	mov	r9, r1
 8008d9e:	46ac      	mov	ip, r5
 8008da0:	f04f 0800 	mov.w	r8, #0
 8008da4:	f859 4b04 	ldr.w	r4, [r9], #4
 8008da8:	f8dc a000 	ldr.w	sl, [ip]
 8008dac:	b2a3      	uxth	r3, r4
 8008dae:	fa1f fa8a 	uxth.w	sl, sl
 8008db2:	fb0b a303 	mla	r3, fp, r3, sl
 8008db6:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8008dba:	f8dc 4000 	ldr.w	r4, [ip]
 8008dbe:	4443      	add	r3, r8
 8008dc0:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8008dc4:	fb0b 840a 	mla	r4, fp, sl, r8
 8008dc8:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 8008dcc:	46e2      	mov	sl, ip
 8008dce:	b29b      	uxth	r3, r3
 8008dd0:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8008dd4:	454f      	cmp	r7, r9
 8008dd6:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8008dda:	f84a 3b04 	str.w	r3, [sl], #4
 8008dde:	d82b      	bhi.n	8008e38 <__multiply+0x120>
 8008de0:	f8cc 8004 	str.w	r8, [ip, #4]
 8008de4:	9b01      	ldr	r3, [sp, #4]
 8008de6:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 8008dea:	3204      	adds	r2, #4
 8008dec:	f1ba 0f00 	cmp.w	sl, #0
 8008df0:	d020      	beq.n	8008e34 <__multiply+0x11c>
 8008df2:	682b      	ldr	r3, [r5, #0]
 8008df4:	4689      	mov	r9, r1
 8008df6:	46a8      	mov	r8, r5
 8008df8:	f04f 0b00 	mov.w	fp, #0
 8008dfc:	f8b9 c000 	ldrh.w	ip, [r9]
 8008e00:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 8008e04:	fb0a 440c 	mla	r4, sl, ip, r4
 8008e08:	445c      	add	r4, fp
 8008e0a:	46c4      	mov	ip, r8
 8008e0c:	b29b      	uxth	r3, r3
 8008e0e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8008e12:	f84c 3b04 	str.w	r3, [ip], #4
 8008e16:	f859 3b04 	ldr.w	r3, [r9], #4
 8008e1a:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 8008e1e:	0c1b      	lsrs	r3, r3, #16
 8008e20:	fb0a b303 	mla	r3, sl, r3, fp
 8008e24:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 8008e28:	454f      	cmp	r7, r9
 8008e2a:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 8008e2e:	d805      	bhi.n	8008e3c <__multiply+0x124>
 8008e30:	f8c8 3004 	str.w	r3, [r8, #4]
 8008e34:	3504      	adds	r5, #4
 8008e36:	e79b      	b.n	8008d70 <__multiply+0x58>
 8008e38:	46d4      	mov	ip, sl
 8008e3a:	e7b3      	b.n	8008da4 <__multiply+0x8c>
 8008e3c:	46e0      	mov	r8, ip
 8008e3e:	e7dd      	b.n	8008dfc <__multiply+0xe4>
 8008e40:	3e01      	subs	r6, #1
 8008e42:	e799      	b.n	8008d78 <__multiply+0x60>

08008e44 <__pow5mult>:
 8008e44:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008e48:	4615      	mov	r5, r2
 8008e4a:	f012 0203 	ands.w	r2, r2, #3
 8008e4e:	4606      	mov	r6, r0
 8008e50:	460f      	mov	r7, r1
 8008e52:	d007      	beq.n	8008e64 <__pow5mult+0x20>
 8008e54:	3a01      	subs	r2, #1
 8008e56:	4c21      	ldr	r4, [pc, #132]	; (8008edc <__pow5mult+0x98>)
 8008e58:	2300      	movs	r3, #0
 8008e5a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8008e5e:	f7ff fec9 	bl	8008bf4 <__multadd>
 8008e62:	4607      	mov	r7, r0
 8008e64:	10ad      	asrs	r5, r5, #2
 8008e66:	d035      	beq.n	8008ed4 <__pow5mult+0x90>
 8008e68:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8008e6a:	b93c      	cbnz	r4, 8008e7c <__pow5mult+0x38>
 8008e6c:	2010      	movs	r0, #16
 8008e6e:	f7ff fe61 	bl	8008b34 <malloc>
 8008e72:	6270      	str	r0, [r6, #36]	; 0x24
 8008e74:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8008e78:	6004      	str	r4, [r0, #0]
 8008e7a:	60c4      	str	r4, [r0, #12]
 8008e7c:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8008e80:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8008e84:	b94c      	cbnz	r4, 8008e9a <__pow5mult+0x56>
 8008e86:	f240 2171 	movw	r1, #625	; 0x271
 8008e8a:	4630      	mov	r0, r6
 8008e8c:	f7ff ff3b 	bl	8008d06 <__i2b>
 8008e90:	2300      	movs	r3, #0
 8008e92:	f8c8 0008 	str.w	r0, [r8, #8]
 8008e96:	4604      	mov	r4, r0
 8008e98:	6003      	str	r3, [r0, #0]
 8008e9a:	f04f 0800 	mov.w	r8, #0
 8008e9e:	07eb      	lsls	r3, r5, #31
 8008ea0:	d50a      	bpl.n	8008eb8 <__pow5mult+0x74>
 8008ea2:	4639      	mov	r1, r7
 8008ea4:	4622      	mov	r2, r4
 8008ea6:	4630      	mov	r0, r6
 8008ea8:	f7ff ff36 	bl	8008d18 <__multiply>
 8008eac:	4639      	mov	r1, r7
 8008eae:	4681      	mov	r9, r0
 8008eb0:	4630      	mov	r0, r6
 8008eb2:	f7ff fe88 	bl	8008bc6 <_Bfree>
 8008eb6:	464f      	mov	r7, r9
 8008eb8:	106d      	asrs	r5, r5, #1
 8008eba:	d00b      	beq.n	8008ed4 <__pow5mult+0x90>
 8008ebc:	6820      	ldr	r0, [r4, #0]
 8008ebe:	b938      	cbnz	r0, 8008ed0 <__pow5mult+0x8c>
 8008ec0:	4622      	mov	r2, r4
 8008ec2:	4621      	mov	r1, r4
 8008ec4:	4630      	mov	r0, r6
 8008ec6:	f7ff ff27 	bl	8008d18 <__multiply>
 8008eca:	6020      	str	r0, [r4, #0]
 8008ecc:	f8c0 8000 	str.w	r8, [r0]
 8008ed0:	4604      	mov	r4, r0
 8008ed2:	e7e4      	b.n	8008e9e <__pow5mult+0x5a>
 8008ed4:	4638      	mov	r0, r7
 8008ed6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008eda:	bf00      	nop
 8008edc:	0800a4f8 	.word	0x0800a4f8

08008ee0 <__lshift>:
 8008ee0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008ee4:	460c      	mov	r4, r1
 8008ee6:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8008eea:	6923      	ldr	r3, [r4, #16]
 8008eec:	6849      	ldr	r1, [r1, #4]
 8008eee:	eb0a 0903 	add.w	r9, sl, r3
 8008ef2:	68a3      	ldr	r3, [r4, #8]
 8008ef4:	4607      	mov	r7, r0
 8008ef6:	4616      	mov	r6, r2
 8008ef8:	f109 0501 	add.w	r5, r9, #1
 8008efc:	42ab      	cmp	r3, r5
 8008efe:	db32      	blt.n	8008f66 <__lshift+0x86>
 8008f00:	4638      	mov	r0, r7
 8008f02:	f7ff fe2c 	bl	8008b5e <_Balloc>
 8008f06:	2300      	movs	r3, #0
 8008f08:	4680      	mov	r8, r0
 8008f0a:	f100 0114 	add.w	r1, r0, #20
 8008f0e:	461a      	mov	r2, r3
 8008f10:	4553      	cmp	r3, sl
 8008f12:	db2b      	blt.n	8008f6c <__lshift+0x8c>
 8008f14:	6920      	ldr	r0, [r4, #16]
 8008f16:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8008f1a:	f104 0314 	add.w	r3, r4, #20
 8008f1e:	f016 021f 	ands.w	r2, r6, #31
 8008f22:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8008f26:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8008f2a:	d025      	beq.n	8008f78 <__lshift+0x98>
 8008f2c:	f1c2 0e20 	rsb	lr, r2, #32
 8008f30:	2000      	movs	r0, #0
 8008f32:	681e      	ldr	r6, [r3, #0]
 8008f34:	468a      	mov	sl, r1
 8008f36:	4096      	lsls	r6, r2
 8008f38:	4330      	orrs	r0, r6
 8008f3a:	f84a 0b04 	str.w	r0, [sl], #4
 8008f3e:	f853 0b04 	ldr.w	r0, [r3], #4
 8008f42:	459c      	cmp	ip, r3
 8008f44:	fa20 f00e 	lsr.w	r0, r0, lr
 8008f48:	d814      	bhi.n	8008f74 <__lshift+0x94>
 8008f4a:	6048      	str	r0, [r1, #4]
 8008f4c:	b108      	cbz	r0, 8008f52 <__lshift+0x72>
 8008f4e:	f109 0502 	add.w	r5, r9, #2
 8008f52:	3d01      	subs	r5, #1
 8008f54:	4638      	mov	r0, r7
 8008f56:	f8c8 5010 	str.w	r5, [r8, #16]
 8008f5a:	4621      	mov	r1, r4
 8008f5c:	f7ff fe33 	bl	8008bc6 <_Bfree>
 8008f60:	4640      	mov	r0, r8
 8008f62:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008f66:	3101      	adds	r1, #1
 8008f68:	005b      	lsls	r3, r3, #1
 8008f6a:	e7c7      	b.n	8008efc <__lshift+0x1c>
 8008f6c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8008f70:	3301      	adds	r3, #1
 8008f72:	e7cd      	b.n	8008f10 <__lshift+0x30>
 8008f74:	4651      	mov	r1, sl
 8008f76:	e7dc      	b.n	8008f32 <__lshift+0x52>
 8008f78:	3904      	subs	r1, #4
 8008f7a:	f853 2b04 	ldr.w	r2, [r3], #4
 8008f7e:	f841 2f04 	str.w	r2, [r1, #4]!
 8008f82:	459c      	cmp	ip, r3
 8008f84:	d8f9      	bhi.n	8008f7a <__lshift+0x9a>
 8008f86:	e7e4      	b.n	8008f52 <__lshift+0x72>

08008f88 <__mcmp>:
 8008f88:	6903      	ldr	r3, [r0, #16]
 8008f8a:	690a      	ldr	r2, [r1, #16]
 8008f8c:	1a9b      	subs	r3, r3, r2
 8008f8e:	b530      	push	{r4, r5, lr}
 8008f90:	d10c      	bne.n	8008fac <__mcmp+0x24>
 8008f92:	0092      	lsls	r2, r2, #2
 8008f94:	3014      	adds	r0, #20
 8008f96:	3114      	adds	r1, #20
 8008f98:	1884      	adds	r4, r0, r2
 8008f9a:	4411      	add	r1, r2
 8008f9c:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8008fa0:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8008fa4:	4295      	cmp	r5, r2
 8008fa6:	d003      	beq.n	8008fb0 <__mcmp+0x28>
 8008fa8:	d305      	bcc.n	8008fb6 <__mcmp+0x2e>
 8008faa:	2301      	movs	r3, #1
 8008fac:	4618      	mov	r0, r3
 8008fae:	bd30      	pop	{r4, r5, pc}
 8008fb0:	42a0      	cmp	r0, r4
 8008fb2:	d3f3      	bcc.n	8008f9c <__mcmp+0x14>
 8008fb4:	e7fa      	b.n	8008fac <__mcmp+0x24>
 8008fb6:	f04f 33ff 	mov.w	r3, #4294967295
 8008fba:	e7f7      	b.n	8008fac <__mcmp+0x24>

08008fbc <__mdiff>:
 8008fbc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008fc0:	460d      	mov	r5, r1
 8008fc2:	4607      	mov	r7, r0
 8008fc4:	4611      	mov	r1, r2
 8008fc6:	4628      	mov	r0, r5
 8008fc8:	4614      	mov	r4, r2
 8008fca:	f7ff ffdd 	bl	8008f88 <__mcmp>
 8008fce:	1e06      	subs	r6, r0, #0
 8008fd0:	d108      	bne.n	8008fe4 <__mdiff+0x28>
 8008fd2:	4631      	mov	r1, r6
 8008fd4:	4638      	mov	r0, r7
 8008fd6:	f7ff fdc2 	bl	8008b5e <_Balloc>
 8008fda:	2301      	movs	r3, #1
 8008fdc:	e9c0 3604 	strd	r3, r6, [r0, #16]
 8008fe0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008fe4:	bfa4      	itt	ge
 8008fe6:	4623      	movge	r3, r4
 8008fe8:	462c      	movge	r4, r5
 8008fea:	4638      	mov	r0, r7
 8008fec:	6861      	ldr	r1, [r4, #4]
 8008fee:	bfa6      	itte	ge
 8008ff0:	461d      	movge	r5, r3
 8008ff2:	2600      	movge	r6, #0
 8008ff4:	2601      	movlt	r6, #1
 8008ff6:	f7ff fdb2 	bl	8008b5e <_Balloc>
 8008ffa:	692b      	ldr	r3, [r5, #16]
 8008ffc:	60c6      	str	r6, [r0, #12]
 8008ffe:	6926      	ldr	r6, [r4, #16]
 8009000:	f105 0914 	add.w	r9, r5, #20
 8009004:	f104 0214 	add.w	r2, r4, #20
 8009008:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 800900c:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 8009010:	f100 0514 	add.w	r5, r0, #20
 8009014:	f04f 0e00 	mov.w	lr, #0
 8009018:	f852 ab04 	ldr.w	sl, [r2], #4
 800901c:	f859 4b04 	ldr.w	r4, [r9], #4
 8009020:	fa1e f18a 	uxtah	r1, lr, sl
 8009024:	b2a3      	uxth	r3, r4
 8009026:	1ac9      	subs	r1, r1, r3
 8009028:	0c23      	lsrs	r3, r4, #16
 800902a:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 800902e:	eb03 4321 	add.w	r3, r3, r1, asr #16
 8009032:	b289      	uxth	r1, r1
 8009034:	ea4f 4e23 	mov.w	lr, r3, asr #16
 8009038:	45c8      	cmp	r8, r9
 800903a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800903e:	4694      	mov	ip, r2
 8009040:	f845 3b04 	str.w	r3, [r5], #4
 8009044:	d8e8      	bhi.n	8009018 <__mdiff+0x5c>
 8009046:	45bc      	cmp	ip, r7
 8009048:	d304      	bcc.n	8009054 <__mdiff+0x98>
 800904a:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 800904e:	b183      	cbz	r3, 8009072 <__mdiff+0xb6>
 8009050:	6106      	str	r6, [r0, #16]
 8009052:	e7c5      	b.n	8008fe0 <__mdiff+0x24>
 8009054:	f85c 1b04 	ldr.w	r1, [ip], #4
 8009058:	fa1e f381 	uxtah	r3, lr, r1
 800905c:	141a      	asrs	r2, r3, #16
 800905e:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8009062:	b29b      	uxth	r3, r3
 8009064:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8009068:	ea4f 4e22 	mov.w	lr, r2, asr #16
 800906c:	f845 3b04 	str.w	r3, [r5], #4
 8009070:	e7e9      	b.n	8009046 <__mdiff+0x8a>
 8009072:	3e01      	subs	r6, #1
 8009074:	e7e9      	b.n	800904a <__mdiff+0x8e>

08009076 <__d2b>:
 8009076:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800907a:	460e      	mov	r6, r1
 800907c:	2101      	movs	r1, #1
 800907e:	ec59 8b10 	vmov	r8, r9, d0
 8009082:	4615      	mov	r5, r2
 8009084:	f7ff fd6b 	bl	8008b5e <_Balloc>
 8009088:	f3c9 540a 	ubfx	r4, r9, #20, #11
 800908c:	4607      	mov	r7, r0
 800908e:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8009092:	bb34      	cbnz	r4, 80090e2 <__d2b+0x6c>
 8009094:	9301      	str	r3, [sp, #4]
 8009096:	f1b8 0300 	subs.w	r3, r8, #0
 800909a:	d027      	beq.n	80090ec <__d2b+0x76>
 800909c:	a802      	add	r0, sp, #8
 800909e:	f840 3d08 	str.w	r3, [r0, #-8]!
 80090a2:	f7ff fe01 	bl	8008ca8 <__lo0bits>
 80090a6:	9900      	ldr	r1, [sp, #0]
 80090a8:	b1f0      	cbz	r0, 80090e8 <__d2b+0x72>
 80090aa:	9a01      	ldr	r2, [sp, #4]
 80090ac:	f1c0 0320 	rsb	r3, r0, #32
 80090b0:	fa02 f303 	lsl.w	r3, r2, r3
 80090b4:	430b      	orrs	r3, r1
 80090b6:	40c2      	lsrs	r2, r0
 80090b8:	617b      	str	r3, [r7, #20]
 80090ba:	9201      	str	r2, [sp, #4]
 80090bc:	9b01      	ldr	r3, [sp, #4]
 80090be:	61bb      	str	r3, [r7, #24]
 80090c0:	2b00      	cmp	r3, #0
 80090c2:	bf14      	ite	ne
 80090c4:	2102      	movne	r1, #2
 80090c6:	2101      	moveq	r1, #1
 80090c8:	6139      	str	r1, [r7, #16]
 80090ca:	b1c4      	cbz	r4, 80090fe <__d2b+0x88>
 80090cc:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 80090d0:	4404      	add	r4, r0
 80090d2:	6034      	str	r4, [r6, #0]
 80090d4:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80090d8:	6028      	str	r0, [r5, #0]
 80090da:	4638      	mov	r0, r7
 80090dc:	b003      	add	sp, #12
 80090de:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80090e2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80090e6:	e7d5      	b.n	8009094 <__d2b+0x1e>
 80090e8:	6179      	str	r1, [r7, #20]
 80090ea:	e7e7      	b.n	80090bc <__d2b+0x46>
 80090ec:	a801      	add	r0, sp, #4
 80090ee:	f7ff fddb 	bl	8008ca8 <__lo0bits>
 80090f2:	9b01      	ldr	r3, [sp, #4]
 80090f4:	617b      	str	r3, [r7, #20]
 80090f6:	2101      	movs	r1, #1
 80090f8:	6139      	str	r1, [r7, #16]
 80090fa:	3020      	adds	r0, #32
 80090fc:	e7e5      	b.n	80090ca <__d2b+0x54>
 80090fe:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 8009102:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8009106:	6030      	str	r0, [r6, #0]
 8009108:	6918      	ldr	r0, [r3, #16]
 800910a:	f7ff fdae 	bl	8008c6a <__hi0bits>
 800910e:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 8009112:	e7e1      	b.n	80090d8 <__d2b+0x62>

08009114 <_calloc_r>:
 8009114:	b538      	push	{r3, r4, r5, lr}
 8009116:	fb02 f401 	mul.w	r4, r2, r1
 800911a:	4621      	mov	r1, r4
 800911c:	f7fd fed6 	bl	8006ecc <_malloc_r>
 8009120:	4605      	mov	r5, r0
 8009122:	b118      	cbz	r0, 800912c <_calloc_r+0x18>
 8009124:	4622      	mov	r2, r4
 8009126:	2100      	movs	r1, #0
 8009128:	f7fd fec8 	bl	8006ebc <memset>
 800912c:	4628      	mov	r0, r5
 800912e:	bd38      	pop	{r3, r4, r5, pc}

08009130 <_free_r>:
 8009130:	b538      	push	{r3, r4, r5, lr}
 8009132:	4605      	mov	r5, r0
 8009134:	2900      	cmp	r1, #0
 8009136:	d045      	beq.n	80091c4 <_free_r+0x94>
 8009138:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800913c:	1f0c      	subs	r4, r1, #4
 800913e:	2b00      	cmp	r3, #0
 8009140:	bfb8      	it	lt
 8009142:	18e4      	addlt	r4, r4, r3
 8009144:	f7ff fd09 	bl	8008b5a <__malloc_lock>
 8009148:	4a1f      	ldr	r2, [pc, #124]	; (80091c8 <_free_r+0x98>)
 800914a:	6813      	ldr	r3, [r2, #0]
 800914c:	4610      	mov	r0, r2
 800914e:	b933      	cbnz	r3, 800915e <_free_r+0x2e>
 8009150:	6063      	str	r3, [r4, #4]
 8009152:	6014      	str	r4, [r2, #0]
 8009154:	4628      	mov	r0, r5
 8009156:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800915a:	f7ff bcff 	b.w	8008b5c <__malloc_unlock>
 800915e:	42a3      	cmp	r3, r4
 8009160:	d90c      	bls.n	800917c <_free_r+0x4c>
 8009162:	6821      	ldr	r1, [r4, #0]
 8009164:	1862      	adds	r2, r4, r1
 8009166:	4293      	cmp	r3, r2
 8009168:	bf04      	itt	eq
 800916a:	681a      	ldreq	r2, [r3, #0]
 800916c:	685b      	ldreq	r3, [r3, #4]
 800916e:	6063      	str	r3, [r4, #4]
 8009170:	bf04      	itt	eq
 8009172:	1852      	addeq	r2, r2, r1
 8009174:	6022      	streq	r2, [r4, #0]
 8009176:	6004      	str	r4, [r0, #0]
 8009178:	e7ec      	b.n	8009154 <_free_r+0x24>
 800917a:	4613      	mov	r3, r2
 800917c:	685a      	ldr	r2, [r3, #4]
 800917e:	b10a      	cbz	r2, 8009184 <_free_r+0x54>
 8009180:	42a2      	cmp	r2, r4
 8009182:	d9fa      	bls.n	800917a <_free_r+0x4a>
 8009184:	6819      	ldr	r1, [r3, #0]
 8009186:	1858      	adds	r0, r3, r1
 8009188:	42a0      	cmp	r0, r4
 800918a:	d10b      	bne.n	80091a4 <_free_r+0x74>
 800918c:	6820      	ldr	r0, [r4, #0]
 800918e:	4401      	add	r1, r0
 8009190:	1858      	adds	r0, r3, r1
 8009192:	4282      	cmp	r2, r0
 8009194:	6019      	str	r1, [r3, #0]
 8009196:	d1dd      	bne.n	8009154 <_free_r+0x24>
 8009198:	6810      	ldr	r0, [r2, #0]
 800919a:	6852      	ldr	r2, [r2, #4]
 800919c:	605a      	str	r2, [r3, #4]
 800919e:	4401      	add	r1, r0
 80091a0:	6019      	str	r1, [r3, #0]
 80091a2:	e7d7      	b.n	8009154 <_free_r+0x24>
 80091a4:	d902      	bls.n	80091ac <_free_r+0x7c>
 80091a6:	230c      	movs	r3, #12
 80091a8:	602b      	str	r3, [r5, #0]
 80091aa:	e7d3      	b.n	8009154 <_free_r+0x24>
 80091ac:	6820      	ldr	r0, [r4, #0]
 80091ae:	1821      	adds	r1, r4, r0
 80091b0:	428a      	cmp	r2, r1
 80091b2:	bf04      	itt	eq
 80091b4:	6811      	ldreq	r1, [r2, #0]
 80091b6:	6852      	ldreq	r2, [r2, #4]
 80091b8:	6062      	str	r2, [r4, #4]
 80091ba:	bf04      	itt	eq
 80091bc:	1809      	addeq	r1, r1, r0
 80091be:	6021      	streq	r1, [r4, #0]
 80091c0:	605c      	str	r4, [r3, #4]
 80091c2:	e7c7      	b.n	8009154 <_free_r+0x24>
 80091c4:	bd38      	pop	{r3, r4, r5, pc}
 80091c6:	bf00      	nop
 80091c8:	2000060c 	.word	0x2000060c

080091cc <__sfputc_r>:
 80091cc:	6893      	ldr	r3, [r2, #8]
 80091ce:	3b01      	subs	r3, #1
 80091d0:	2b00      	cmp	r3, #0
 80091d2:	b410      	push	{r4}
 80091d4:	6093      	str	r3, [r2, #8]
 80091d6:	da08      	bge.n	80091ea <__sfputc_r+0x1e>
 80091d8:	6994      	ldr	r4, [r2, #24]
 80091da:	42a3      	cmp	r3, r4
 80091dc:	db01      	blt.n	80091e2 <__sfputc_r+0x16>
 80091de:	290a      	cmp	r1, #10
 80091e0:	d103      	bne.n	80091ea <__sfputc_r+0x1e>
 80091e2:	f85d 4b04 	ldr.w	r4, [sp], #4
 80091e6:	f7fe bc0b 	b.w	8007a00 <__swbuf_r>
 80091ea:	6813      	ldr	r3, [r2, #0]
 80091ec:	1c58      	adds	r0, r3, #1
 80091ee:	6010      	str	r0, [r2, #0]
 80091f0:	7019      	strb	r1, [r3, #0]
 80091f2:	4608      	mov	r0, r1
 80091f4:	f85d 4b04 	ldr.w	r4, [sp], #4
 80091f8:	4770      	bx	lr

080091fa <__sfputs_r>:
 80091fa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80091fc:	4606      	mov	r6, r0
 80091fe:	460f      	mov	r7, r1
 8009200:	4614      	mov	r4, r2
 8009202:	18d5      	adds	r5, r2, r3
 8009204:	42ac      	cmp	r4, r5
 8009206:	d101      	bne.n	800920c <__sfputs_r+0x12>
 8009208:	2000      	movs	r0, #0
 800920a:	e007      	b.n	800921c <__sfputs_r+0x22>
 800920c:	463a      	mov	r2, r7
 800920e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009212:	4630      	mov	r0, r6
 8009214:	f7ff ffda 	bl	80091cc <__sfputc_r>
 8009218:	1c43      	adds	r3, r0, #1
 800921a:	d1f3      	bne.n	8009204 <__sfputs_r+0xa>
 800921c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08009220 <_vfiprintf_r>:
 8009220:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009224:	460c      	mov	r4, r1
 8009226:	b09d      	sub	sp, #116	; 0x74
 8009228:	4617      	mov	r7, r2
 800922a:	461d      	mov	r5, r3
 800922c:	4606      	mov	r6, r0
 800922e:	b118      	cbz	r0, 8009238 <_vfiprintf_r+0x18>
 8009230:	6983      	ldr	r3, [r0, #24]
 8009232:	b90b      	cbnz	r3, 8009238 <_vfiprintf_r+0x18>
 8009234:	f7fd fd66 	bl	8006d04 <__sinit>
 8009238:	4b7c      	ldr	r3, [pc, #496]	; (800942c <_vfiprintf_r+0x20c>)
 800923a:	429c      	cmp	r4, r3
 800923c:	d158      	bne.n	80092f0 <_vfiprintf_r+0xd0>
 800923e:	6874      	ldr	r4, [r6, #4]
 8009240:	89a3      	ldrh	r3, [r4, #12]
 8009242:	0718      	lsls	r0, r3, #28
 8009244:	d55e      	bpl.n	8009304 <_vfiprintf_r+0xe4>
 8009246:	6923      	ldr	r3, [r4, #16]
 8009248:	2b00      	cmp	r3, #0
 800924a:	d05b      	beq.n	8009304 <_vfiprintf_r+0xe4>
 800924c:	2300      	movs	r3, #0
 800924e:	9309      	str	r3, [sp, #36]	; 0x24
 8009250:	2320      	movs	r3, #32
 8009252:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009256:	2330      	movs	r3, #48	; 0x30
 8009258:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800925c:	9503      	str	r5, [sp, #12]
 800925e:	f04f 0b01 	mov.w	fp, #1
 8009262:	46b8      	mov	r8, r7
 8009264:	4645      	mov	r5, r8
 8009266:	f815 3b01 	ldrb.w	r3, [r5], #1
 800926a:	b10b      	cbz	r3, 8009270 <_vfiprintf_r+0x50>
 800926c:	2b25      	cmp	r3, #37	; 0x25
 800926e:	d154      	bne.n	800931a <_vfiprintf_r+0xfa>
 8009270:	ebb8 0a07 	subs.w	sl, r8, r7
 8009274:	d00b      	beq.n	800928e <_vfiprintf_r+0x6e>
 8009276:	4653      	mov	r3, sl
 8009278:	463a      	mov	r2, r7
 800927a:	4621      	mov	r1, r4
 800927c:	4630      	mov	r0, r6
 800927e:	f7ff ffbc 	bl	80091fa <__sfputs_r>
 8009282:	3001      	adds	r0, #1
 8009284:	f000 80c2 	beq.w	800940c <_vfiprintf_r+0x1ec>
 8009288:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800928a:	4453      	add	r3, sl
 800928c:	9309      	str	r3, [sp, #36]	; 0x24
 800928e:	f898 3000 	ldrb.w	r3, [r8]
 8009292:	2b00      	cmp	r3, #0
 8009294:	f000 80ba 	beq.w	800940c <_vfiprintf_r+0x1ec>
 8009298:	2300      	movs	r3, #0
 800929a:	f04f 32ff 	mov.w	r2, #4294967295
 800929e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80092a2:	9304      	str	r3, [sp, #16]
 80092a4:	9307      	str	r3, [sp, #28]
 80092a6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80092aa:	931a      	str	r3, [sp, #104]	; 0x68
 80092ac:	46a8      	mov	r8, r5
 80092ae:	2205      	movs	r2, #5
 80092b0:	f818 1b01 	ldrb.w	r1, [r8], #1
 80092b4:	485e      	ldr	r0, [pc, #376]	; (8009430 <_vfiprintf_r+0x210>)
 80092b6:	f7f6 ff93 	bl	80001e0 <memchr>
 80092ba:	9b04      	ldr	r3, [sp, #16]
 80092bc:	bb78      	cbnz	r0, 800931e <_vfiprintf_r+0xfe>
 80092be:	06d9      	lsls	r1, r3, #27
 80092c0:	bf44      	itt	mi
 80092c2:	2220      	movmi	r2, #32
 80092c4:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80092c8:	071a      	lsls	r2, r3, #28
 80092ca:	bf44      	itt	mi
 80092cc:	222b      	movmi	r2, #43	; 0x2b
 80092ce:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80092d2:	782a      	ldrb	r2, [r5, #0]
 80092d4:	2a2a      	cmp	r2, #42	; 0x2a
 80092d6:	d02a      	beq.n	800932e <_vfiprintf_r+0x10e>
 80092d8:	9a07      	ldr	r2, [sp, #28]
 80092da:	46a8      	mov	r8, r5
 80092dc:	2000      	movs	r0, #0
 80092de:	250a      	movs	r5, #10
 80092e0:	4641      	mov	r1, r8
 80092e2:	f811 3b01 	ldrb.w	r3, [r1], #1
 80092e6:	3b30      	subs	r3, #48	; 0x30
 80092e8:	2b09      	cmp	r3, #9
 80092ea:	d969      	bls.n	80093c0 <_vfiprintf_r+0x1a0>
 80092ec:	b360      	cbz	r0, 8009348 <_vfiprintf_r+0x128>
 80092ee:	e024      	b.n	800933a <_vfiprintf_r+0x11a>
 80092f0:	4b50      	ldr	r3, [pc, #320]	; (8009434 <_vfiprintf_r+0x214>)
 80092f2:	429c      	cmp	r4, r3
 80092f4:	d101      	bne.n	80092fa <_vfiprintf_r+0xda>
 80092f6:	68b4      	ldr	r4, [r6, #8]
 80092f8:	e7a2      	b.n	8009240 <_vfiprintf_r+0x20>
 80092fa:	4b4f      	ldr	r3, [pc, #316]	; (8009438 <_vfiprintf_r+0x218>)
 80092fc:	429c      	cmp	r4, r3
 80092fe:	bf08      	it	eq
 8009300:	68f4      	ldreq	r4, [r6, #12]
 8009302:	e79d      	b.n	8009240 <_vfiprintf_r+0x20>
 8009304:	4621      	mov	r1, r4
 8009306:	4630      	mov	r0, r6
 8009308:	f7fe fbde 	bl	8007ac8 <__swsetup_r>
 800930c:	2800      	cmp	r0, #0
 800930e:	d09d      	beq.n	800924c <_vfiprintf_r+0x2c>
 8009310:	f04f 30ff 	mov.w	r0, #4294967295
 8009314:	b01d      	add	sp, #116	; 0x74
 8009316:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800931a:	46a8      	mov	r8, r5
 800931c:	e7a2      	b.n	8009264 <_vfiprintf_r+0x44>
 800931e:	4a44      	ldr	r2, [pc, #272]	; (8009430 <_vfiprintf_r+0x210>)
 8009320:	1a80      	subs	r0, r0, r2
 8009322:	fa0b f000 	lsl.w	r0, fp, r0
 8009326:	4318      	orrs	r0, r3
 8009328:	9004      	str	r0, [sp, #16]
 800932a:	4645      	mov	r5, r8
 800932c:	e7be      	b.n	80092ac <_vfiprintf_r+0x8c>
 800932e:	9a03      	ldr	r2, [sp, #12]
 8009330:	1d11      	adds	r1, r2, #4
 8009332:	6812      	ldr	r2, [r2, #0]
 8009334:	9103      	str	r1, [sp, #12]
 8009336:	2a00      	cmp	r2, #0
 8009338:	db01      	blt.n	800933e <_vfiprintf_r+0x11e>
 800933a:	9207      	str	r2, [sp, #28]
 800933c:	e004      	b.n	8009348 <_vfiprintf_r+0x128>
 800933e:	4252      	negs	r2, r2
 8009340:	f043 0302 	orr.w	r3, r3, #2
 8009344:	9207      	str	r2, [sp, #28]
 8009346:	9304      	str	r3, [sp, #16]
 8009348:	f898 3000 	ldrb.w	r3, [r8]
 800934c:	2b2e      	cmp	r3, #46	; 0x2e
 800934e:	d10e      	bne.n	800936e <_vfiprintf_r+0x14e>
 8009350:	f898 3001 	ldrb.w	r3, [r8, #1]
 8009354:	2b2a      	cmp	r3, #42	; 0x2a
 8009356:	d138      	bne.n	80093ca <_vfiprintf_r+0x1aa>
 8009358:	9b03      	ldr	r3, [sp, #12]
 800935a:	1d1a      	adds	r2, r3, #4
 800935c:	681b      	ldr	r3, [r3, #0]
 800935e:	9203      	str	r2, [sp, #12]
 8009360:	2b00      	cmp	r3, #0
 8009362:	bfb8      	it	lt
 8009364:	f04f 33ff 	movlt.w	r3, #4294967295
 8009368:	f108 0802 	add.w	r8, r8, #2
 800936c:	9305      	str	r3, [sp, #20]
 800936e:	4d33      	ldr	r5, [pc, #204]	; (800943c <_vfiprintf_r+0x21c>)
 8009370:	f898 1000 	ldrb.w	r1, [r8]
 8009374:	2203      	movs	r2, #3
 8009376:	4628      	mov	r0, r5
 8009378:	f7f6 ff32 	bl	80001e0 <memchr>
 800937c:	b140      	cbz	r0, 8009390 <_vfiprintf_r+0x170>
 800937e:	2340      	movs	r3, #64	; 0x40
 8009380:	1b40      	subs	r0, r0, r5
 8009382:	fa03 f000 	lsl.w	r0, r3, r0
 8009386:	9b04      	ldr	r3, [sp, #16]
 8009388:	4303      	orrs	r3, r0
 800938a:	f108 0801 	add.w	r8, r8, #1
 800938e:	9304      	str	r3, [sp, #16]
 8009390:	f898 1000 	ldrb.w	r1, [r8]
 8009394:	482a      	ldr	r0, [pc, #168]	; (8009440 <_vfiprintf_r+0x220>)
 8009396:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800939a:	2206      	movs	r2, #6
 800939c:	f108 0701 	add.w	r7, r8, #1
 80093a0:	f7f6 ff1e 	bl	80001e0 <memchr>
 80093a4:	2800      	cmp	r0, #0
 80093a6:	d037      	beq.n	8009418 <_vfiprintf_r+0x1f8>
 80093a8:	4b26      	ldr	r3, [pc, #152]	; (8009444 <_vfiprintf_r+0x224>)
 80093aa:	bb1b      	cbnz	r3, 80093f4 <_vfiprintf_r+0x1d4>
 80093ac:	9b03      	ldr	r3, [sp, #12]
 80093ae:	3307      	adds	r3, #7
 80093b0:	f023 0307 	bic.w	r3, r3, #7
 80093b4:	3308      	adds	r3, #8
 80093b6:	9303      	str	r3, [sp, #12]
 80093b8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80093ba:	444b      	add	r3, r9
 80093bc:	9309      	str	r3, [sp, #36]	; 0x24
 80093be:	e750      	b.n	8009262 <_vfiprintf_r+0x42>
 80093c0:	fb05 3202 	mla	r2, r5, r2, r3
 80093c4:	2001      	movs	r0, #1
 80093c6:	4688      	mov	r8, r1
 80093c8:	e78a      	b.n	80092e0 <_vfiprintf_r+0xc0>
 80093ca:	2300      	movs	r3, #0
 80093cc:	f108 0801 	add.w	r8, r8, #1
 80093d0:	9305      	str	r3, [sp, #20]
 80093d2:	4619      	mov	r1, r3
 80093d4:	250a      	movs	r5, #10
 80093d6:	4640      	mov	r0, r8
 80093d8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80093dc:	3a30      	subs	r2, #48	; 0x30
 80093de:	2a09      	cmp	r2, #9
 80093e0:	d903      	bls.n	80093ea <_vfiprintf_r+0x1ca>
 80093e2:	2b00      	cmp	r3, #0
 80093e4:	d0c3      	beq.n	800936e <_vfiprintf_r+0x14e>
 80093e6:	9105      	str	r1, [sp, #20]
 80093e8:	e7c1      	b.n	800936e <_vfiprintf_r+0x14e>
 80093ea:	fb05 2101 	mla	r1, r5, r1, r2
 80093ee:	2301      	movs	r3, #1
 80093f0:	4680      	mov	r8, r0
 80093f2:	e7f0      	b.n	80093d6 <_vfiprintf_r+0x1b6>
 80093f4:	ab03      	add	r3, sp, #12
 80093f6:	9300      	str	r3, [sp, #0]
 80093f8:	4622      	mov	r2, r4
 80093fa:	4b13      	ldr	r3, [pc, #76]	; (8009448 <_vfiprintf_r+0x228>)
 80093fc:	a904      	add	r1, sp, #16
 80093fe:	4630      	mov	r0, r6
 8009400:	f7fd fe52 	bl	80070a8 <_printf_float>
 8009404:	f1b0 3fff 	cmp.w	r0, #4294967295
 8009408:	4681      	mov	r9, r0
 800940a:	d1d5      	bne.n	80093b8 <_vfiprintf_r+0x198>
 800940c:	89a3      	ldrh	r3, [r4, #12]
 800940e:	065b      	lsls	r3, r3, #25
 8009410:	f53f af7e 	bmi.w	8009310 <_vfiprintf_r+0xf0>
 8009414:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009416:	e77d      	b.n	8009314 <_vfiprintf_r+0xf4>
 8009418:	ab03      	add	r3, sp, #12
 800941a:	9300      	str	r3, [sp, #0]
 800941c:	4622      	mov	r2, r4
 800941e:	4b0a      	ldr	r3, [pc, #40]	; (8009448 <_vfiprintf_r+0x228>)
 8009420:	a904      	add	r1, sp, #16
 8009422:	4630      	mov	r0, r6
 8009424:	f7fe f8f6 	bl	8007614 <_printf_i>
 8009428:	e7ec      	b.n	8009404 <_vfiprintf_r+0x1e4>
 800942a:	bf00      	nop
 800942c:	0800a37c 	.word	0x0800a37c
 8009430:	0800a504 	.word	0x0800a504
 8009434:	0800a39c 	.word	0x0800a39c
 8009438:	0800a35c 	.word	0x0800a35c
 800943c:	0800a50a 	.word	0x0800a50a
 8009440:	0800a50e 	.word	0x0800a50e
 8009444:	080070a9 	.word	0x080070a9
 8009448:	080091fb 	.word	0x080091fb

0800944c <_putc_r>:
 800944c:	b570      	push	{r4, r5, r6, lr}
 800944e:	460d      	mov	r5, r1
 8009450:	4614      	mov	r4, r2
 8009452:	4606      	mov	r6, r0
 8009454:	b118      	cbz	r0, 800945e <_putc_r+0x12>
 8009456:	6983      	ldr	r3, [r0, #24]
 8009458:	b90b      	cbnz	r3, 800945e <_putc_r+0x12>
 800945a:	f7fd fc53 	bl	8006d04 <__sinit>
 800945e:	4b13      	ldr	r3, [pc, #76]	; (80094ac <_putc_r+0x60>)
 8009460:	429c      	cmp	r4, r3
 8009462:	d112      	bne.n	800948a <_putc_r+0x3e>
 8009464:	6874      	ldr	r4, [r6, #4]
 8009466:	68a3      	ldr	r3, [r4, #8]
 8009468:	3b01      	subs	r3, #1
 800946a:	2b00      	cmp	r3, #0
 800946c:	60a3      	str	r3, [r4, #8]
 800946e:	da16      	bge.n	800949e <_putc_r+0x52>
 8009470:	69a2      	ldr	r2, [r4, #24]
 8009472:	4293      	cmp	r3, r2
 8009474:	db02      	blt.n	800947c <_putc_r+0x30>
 8009476:	b2eb      	uxtb	r3, r5
 8009478:	2b0a      	cmp	r3, #10
 800947a:	d110      	bne.n	800949e <_putc_r+0x52>
 800947c:	4622      	mov	r2, r4
 800947e:	4629      	mov	r1, r5
 8009480:	4630      	mov	r0, r6
 8009482:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8009486:	f7fe babb 	b.w	8007a00 <__swbuf_r>
 800948a:	4b09      	ldr	r3, [pc, #36]	; (80094b0 <_putc_r+0x64>)
 800948c:	429c      	cmp	r4, r3
 800948e:	d101      	bne.n	8009494 <_putc_r+0x48>
 8009490:	68b4      	ldr	r4, [r6, #8]
 8009492:	e7e8      	b.n	8009466 <_putc_r+0x1a>
 8009494:	4b07      	ldr	r3, [pc, #28]	; (80094b4 <_putc_r+0x68>)
 8009496:	429c      	cmp	r4, r3
 8009498:	bf08      	it	eq
 800949a:	68f4      	ldreq	r4, [r6, #12]
 800949c:	e7e3      	b.n	8009466 <_putc_r+0x1a>
 800949e:	6823      	ldr	r3, [r4, #0]
 80094a0:	1c5a      	adds	r2, r3, #1
 80094a2:	6022      	str	r2, [r4, #0]
 80094a4:	701d      	strb	r5, [r3, #0]
 80094a6:	b2e8      	uxtb	r0, r5
 80094a8:	bd70      	pop	{r4, r5, r6, pc}
 80094aa:	bf00      	nop
 80094ac:	0800a37c 	.word	0x0800a37c
 80094b0:	0800a39c 	.word	0x0800a39c
 80094b4:	0800a35c 	.word	0x0800a35c

080094b8 <_read_r>:
 80094b8:	b538      	push	{r3, r4, r5, lr}
 80094ba:	4c07      	ldr	r4, [pc, #28]	; (80094d8 <_read_r+0x20>)
 80094bc:	4605      	mov	r5, r0
 80094be:	4608      	mov	r0, r1
 80094c0:	4611      	mov	r1, r2
 80094c2:	2200      	movs	r2, #0
 80094c4:	6022      	str	r2, [r4, #0]
 80094c6:	461a      	mov	r2, r3
 80094c8:	f7f8 ff30 	bl	800232c <_read>
 80094cc:	1c43      	adds	r3, r0, #1
 80094ce:	d102      	bne.n	80094d6 <_read_r+0x1e>
 80094d0:	6823      	ldr	r3, [r4, #0]
 80094d2:	b103      	cbz	r3, 80094d6 <_read_r+0x1e>
 80094d4:	602b      	str	r3, [r5, #0]
 80094d6:	bd38      	pop	{r3, r4, r5, pc}
 80094d8:	200009d8 	.word	0x200009d8

080094dc <__srget_r>:
 80094dc:	b538      	push	{r3, r4, r5, lr}
 80094de:	460c      	mov	r4, r1
 80094e0:	4605      	mov	r5, r0
 80094e2:	b118      	cbz	r0, 80094ec <__srget_r+0x10>
 80094e4:	6983      	ldr	r3, [r0, #24]
 80094e6:	b90b      	cbnz	r3, 80094ec <__srget_r+0x10>
 80094e8:	f7fd fc0c 	bl	8006d04 <__sinit>
 80094ec:	4b0e      	ldr	r3, [pc, #56]	; (8009528 <__srget_r+0x4c>)
 80094ee:	429c      	cmp	r4, r3
 80094f0:	d10d      	bne.n	800950e <__srget_r+0x32>
 80094f2:	686c      	ldr	r4, [r5, #4]
 80094f4:	4621      	mov	r1, r4
 80094f6:	4628      	mov	r0, r5
 80094f8:	f000 f85a 	bl	80095b0 <__srefill_r>
 80094fc:	b988      	cbnz	r0, 8009522 <__srget_r+0x46>
 80094fe:	6863      	ldr	r3, [r4, #4]
 8009500:	3b01      	subs	r3, #1
 8009502:	6063      	str	r3, [r4, #4]
 8009504:	6823      	ldr	r3, [r4, #0]
 8009506:	1c5a      	adds	r2, r3, #1
 8009508:	6022      	str	r2, [r4, #0]
 800950a:	7818      	ldrb	r0, [r3, #0]
 800950c:	bd38      	pop	{r3, r4, r5, pc}
 800950e:	4b07      	ldr	r3, [pc, #28]	; (800952c <__srget_r+0x50>)
 8009510:	429c      	cmp	r4, r3
 8009512:	d101      	bne.n	8009518 <__srget_r+0x3c>
 8009514:	68ac      	ldr	r4, [r5, #8]
 8009516:	e7ed      	b.n	80094f4 <__srget_r+0x18>
 8009518:	4b05      	ldr	r3, [pc, #20]	; (8009530 <__srget_r+0x54>)
 800951a:	429c      	cmp	r4, r3
 800951c:	bf08      	it	eq
 800951e:	68ec      	ldreq	r4, [r5, #12]
 8009520:	e7e8      	b.n	80094f4 <__srget_r+0x18>
 8009522:	f04f 30ff 	mov.w	r0, #4294967295
 8009526:	e7f1      	b.n	800950c <__srget_r+0x30>
 8009528:	0800a37c 	.word	0x0800a37c
 800952c:	0800a39c 	.word	0x0800a39c
 8009530:	0800a35c 	.word	0x0800a35c

08009534 <_fstat_r>:
 8009534:	b538      	push	{r3, r4, r5, lr}
 8009536:	4c07      	ldr	r4, [pc, #28]	; (8009554 <_fstat_r+0x20>)
 8009538:	2300      	movs	r3, #0
 800953a:	4605      	mov	r5, r0
 800953c:	4608      	mov	r0, r1
 800953e:	4611      	mov	r1, r2
 8009540:	6023      	str	r3, [r4, #0]
 8009542:	f7f9 fbb3 	bl	8002cac <_fstat>
 8009546:	1c43      	adds	r3, r0, #1
 8009548:	d102      	bne.n	8009550 <_fstat_r+0x1c>
 800954a:	6823      	ldr	r3, [r4, #0]
 800954c:	b103      	cbz	r3, 8009550 <_fstat_r+0x1c>
 800954e:	602b      	str	r3, [r5, #0]
 8009550:	bd38      	pop	{r3, r4, r5, pc}
 8009552:	bf00      	nop
 8009554:	200009d8 	.word	0x200009d8

08009558 <_isatty_r>:
 8009558:	b538      	push	{r3, r4, r5, lr}
 800955a:	4c06      	ldr	r4, [pc, #24]	; (8009574 <_isatty_r+0x1c>)
 800955c:	2300      	movs	r3, #0
 800955e:	4605      	mov	r5, r0
 8009560:	4608      	mov	r0, r1
 8009562:	6023      	str	r3, [r4, #0]
 8009564:	f7f9 fbb2 	bl	8002ccc <_isatty>
 8009568:	1c43      	adds	r3, r0, #1
 800956a:	d102      	bne.n	8009572 <_isatty_r+0x1a>
 800956c:	6823      	ldr	r3, [r4, #0]
 800956e:	b103      	cbz	r3, 8009572 <_isatty_r+0x1a>
 8009570:	602b      	str	r3, [r5, #0]
 8009572:	bd38      	pop	{r3, r4, r5, pc}
 8009574:	200009d8 	.word	0x200009d8

08009578 <__ascii_mbtowc>:
 8009578:	b082      	sub	sp, #8
 800957a:	b901      	cbnz	r1, 800957e <__ascii_mbtowc+0x6>
 800957c:	a901      	add	r1, sp, #4
 800957e:	b142      	cbz	r2, 8009592 <__ascii_mbtowc+0x1a>
 8009580:	b14b      	cbz	r3, 8009596 <__ascii_mbtowc+0x1e>
 8009582:	7813      	ldrb	r3, [r2, #0]
 8009584:	600b      	str	r3, [r1, #0]
 8009586:	7812      	ldrb	r2, [r2, #0]
 8009588:	1c10      	adds	r0, r2, #0
 800958a:	bf18      	it	ne
 800958c:	2001      	movne	r0, #1
 800958e:	b002      	add	sp, #8
 8009590:	4770      	bx	lr
 8009592:	4610      	mov	r0, r2
 8009594:	e7fb      	b.n	800958e <__ascii_mbtowc+0x16>
 8009596:	f06f 0001 	mvn.w	r0, #1
 800959a:	e7f8      	b.n	800958e <__ascii_mbtowc+0x16>

0800959c <lflush>:
 800959c:	8983      	ldrh	r3, [r0, #12]
 800959e:	f003 0309 	and.w	r3, r3, #9
 80095a2:	2b09      	cmp	r3, #9
 80095a4:	d101      	bne.n	80095aa <lflush+0xe>
 80095a6:	f7ff ba03 	b.w	80089b0 <fflush>
 80095aa:	2000      	movs	r0, #0
 80095ac:	4770      	bx	lr
	...

080095b0 <__srefill_r>:
 80095b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80095b2:	460c      	mov	r4, r1
 80095b4:	4605      	mov	r5, r0
 80095b6:	b118      	cbz	r0, 80095c0 <__srefill_r+0x10>
 80095b8:	6983      	ldr	r3, [r0, #24]
 80095ba:	b90b      	cbnz	r3, 80095c0 <__srefill_r+0x10>
 80095bc:	f7fd fba2 	bl	8006d04 <__sinit>
 80095c0:	4b3c      	ldr	r3, [pc, #240]	; (80096b4 <__srefill_r+0x104>)
 80095c2:	429c      	cmp	r4, r3
 80095c4:	d10a      	bne.n	80095dc <__srefill_r+0x2c>
 80095c6:	686c      	ldr	r4, [r5, #4]
 80095c8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80095cc:	2300      	movs	r3, #0
 80095ce:	6063      	str	r3, [r4, #4]
 80095d0:	b293      	uxth	r3, r2
 80095d2:	069e      	lsls	r6, r3, #26
 80095d4:	d50c      	bpl.n	80095f0 <__srefill_r+0x40>
 80095d6:	f04f 30ff 	mov.w	r0, #4294967295
 80095da:	e067      	b.n	80096ac <__srefill_r+0xfc>
 80095dc:	4b36      	ldr	r3, [pc, #216]	; (80096b8 <__srefill_r+0x108>)
 80095de:	429c      	cmp	r4, r3
 80095e0:	d101      	bne.n	80095e6 <__srefill_r+0x36>
 80095e2:	68ac      	ldr	r4, [r5, #8]
 80095e4:	e7f0      	b.n	80095c8 <__srefill_r+0x18>
 80095e6:	4b35      	ldr	r3, [pc, #212]	; (80096bc <__srefill_r+0x10c>)
 80095e8:	429c      	cmp	r4, r3
 80095ea:	bf08      	it	eq
 80095ec:	68ec      	ldreq	r4, [r5, #12]
 80095ee:	e7eb      	b.n	80095c8 <__srefill_r+0x18>
 80095f0:	0758      	lsls	r0, r3, #29
 80095f2:	d449      	bmi.n	8009688 <__srefill_r+0xd8>
 80095f4:	06d9      	lsls	r1, r3, #27
 80095f6:	d405      	bmi.n	8009604 <__srefill_r+0x54>
 80095f8:	2309      	movs	r3, #9
 80095fa:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80095fe:	602b      	str	r3, [r5, #0]
 8009600:	81a2      	strh	r2, [r4, #12]
 8009602:	e7e8      	b.n	80095d6 <__srefill_r+0x26>
 8009604:	071a      	lsls	r2, r3, #28
 8009606:	d50b      	bpl.n	8009620 <__srefill_r+0x70>
 8009608:	4621      	mov	r1, r4
 800960a:	4628      	mov	r0, r5
 800960c:	f7ff f9a6 	bl	800895c <_fflush_r>
 8009610:	2800      	cmp	r0, #0
 8009612:	d1e0      	bne.n	80095d6 <__srefill_r+0x26>
 8009614:	89a3      	ldrh	r3, [r4, #12]
 8009616:	60a0      	str	r0, [r4, #8]
 8009618:	f023 0308 	bic.w	r3, r3, #8
 800961c:	81a3      	strh	r3, [r4, #12]
 800961e:	61a0      	str	r0, [r4, #24]
 8009620:	89a3      	ldrh	r3, [r4, #12]
 8009622:	f043 0304 	orr.w	r3, r3, #4
 8009626:	81a3      	strh	r3, [r4, #12]
 8009628:	6923      	ldr	r3, [r4, #16]
 800962a:	b91b      	cbnz	r3, 8009634 <__srefill_r+0x84>
 800962c:	4621      	mov	r1, r4
 800962e:	4628      	mov	r0, r5
 8009630:	f7ff fa40 	bl	8008ab4 <__smakebuf_r>
 8009634:	f9b4 700c 	ldrsh.w	r7, [r4, #12]
 8009638:	b2be      	uxth	r6, r7
 800963a:	07b3      	lsls	r3, r6, #30
 800963c:	d00f      	beq.n	800965e <__srefill_r+0xae>
 800963e:	2301      	movs	r3, #1
 8009640:	81a3      	strh	r3, [r4, #12]
 8009642:	4b1f      	ldr	r3, [pc, #124]	; (80096c0 <__srefill_r+0x110>)
 8009644:	491f      	ldr	r1, [pc, #124]	; (80096c4 <__srefill_r+0x114>)
 8009646:	6818      	ldr	r0, [r3, #0]
 8009648:	f006 0609 	and.w	r6, r6, #9
 800964c:	f7fd fbc6 	bl	8006ddc <_fwalk>
 8009650:	2e09      	cmp	r6, #9
 8009652:	81a7      	strh	r7, [r4, #12]
 8009654:	d103      	bne.n	800965e <__srefill_r+0xae>
 8009656:	4621      	mov	r1, r4
 8009658:	4628      	mov	r0, r5
 800965a:	f7ff f8f9 	bl	8008850 <__sflush_r>
 800965e:	6922      	ldr	r2, [r4, #16]
 8009660:	6022      	str	r2, [r4, #0]
 8009662:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8009664:	6963      	ldr	r3, [r4, #20]
 8009666:	6a21      	ldr	r1, [r4, #32]
 8009668:	4628      	mov	r0, r5
 800966a:	47b0      	blx	r6
 800966c:	2800      	cmp	r0, #0
 800966e:	6060      	str	r0, [r4, #4]
 8009670:	dc1d      	bgt.n	80096ae <__srefill_r+0xfe>
 8009672:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009676:	bf17      	itett	ne
 8009678:	2200      	movne	r2, #0
 800967a:	f043 0320 	orreq.w	r3, r3, #32
 800967e:	f043 0340 	orrne.w	r3, r3, #64	; 0x40
 8009682:	6062      	strne	r2, [r4, #4]
 8009684:	81a3      	strh	r3, [r4, #12]
 8009686:	e7a6      	b.n	80095d6 <__srefill_r+0x26>
 8009688:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800968a:	2900      	cmp	r1, #0
 800968c:	d0cc      	beq.n	8009628 <__srefill_r+0x78>
 800968e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009692:	4299      	cmp	r1, r3
 8009694:	d002      	beq.n	800969c <__srefill_r+0xec>
 8009696:	4628      	mov	r0, r5
 8009698:	f7ff fd4a 	bl	8009130 <_free_r>
 800969c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800969e:	6063      	str	r3, [r4, #4]
 80096a0:	2000      	movs	r0, #0
 80096a2:	6360      	str	r0, [r4, #52]	; 0x34
 80096a4:	2b00      	cmp	r3, #0
 80096a6:	d0bf      	beq.n	8009628 <__srefill_r+0x78>
 80096a8:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80096aa:	6023      	str	r3, [r4, #0]
 80096ac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80096ae:	2000      	movs	r0, #0
 80096b0:	e7fc      	b.n	80096ac <__srefill_r+0xfc>
 80096b2:	bf00      	nop
 80096b4:	0800a37c 	.word	0x0800a37c
 80096b8:	0800a39c 	.word	0x0800a39c
 80096bc:	0800a35c 	.word	0x0800a35c
 80096c0:	0800a3bc 	.word	0x0800a3bc
 80096c4:	0800959d 	.word	0x0800959d

080096c8 <__ascii_wctomb>:
 80096c8:	b149      	cbz	r1, 80096de <__ascii_wctomb+0x16>
 80096ca:	2aff      	cmp	r2, #255	; 0xff
 80096cc:	bf85      	ittet	hi
 80096ce:	238a      	movhi	r3, #138	; 0x8a
 80096d0:	6003      	strhi	r3, [r0, #0]
 80096d2:	700a      	strbls	r2, [r1, #0]
 80096d4:	f04f 30ff 	movhi.w	r0, #4294967295
 80096d8:	bf98      	it	ls
 80096da:	2001      	movls	r0, #1
 80096dc:	4770      	bx	lr
 80096de:	4608      	mov	r0, r1
 80096e0:	4770      	bx	lr
	...

080096e4 <_init>:
 80096e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80096e6:	bf00      	nop
 80096e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80096ea:	bc08      	pop	{r3}
 80096ec:	469e      	mov	lr, r3
 80096ee:	4770      	bx	lr

080096f0 <_fini>:
 80096f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80096f2:	bf00      	nop
 80096f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80096f6:	bc08      	pop	{r3}
 80096f8:	469e      	mov	lr, r3
 80096fa:	4770      	bx	lr
